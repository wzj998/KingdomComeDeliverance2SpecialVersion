<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="spectator_horseArchery" is_function="0">
    <Variables>
      <Variable name="animationNumber" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="isHappy" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isReacting" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="reactionMessage" type="horseArcheryContest:reactToPlayer" values="" isPersistent="0" form="single" />
      <Variable name="reactionMetarole" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="unstance" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <EntityContext context="jizdniLukostrelba_spectator" target="">
          <EntityContext context="crime_ignorePlayersDroppedItems" target="">
            <Parallel successMode="Any" failureMode="Any">
              <Function_konskeZavody_spectate SO="$__object.id" isHappy="$isHappy" isReacting="$isReacting" nodeLabel="70821900" />
              <Loop count="-1">
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$reactionMessage" senderInfo="" inbox="&apos;horseArcheryContest&apos;" condition="" answerVar="">
                        <Sequence>
                          <Expression expressions="$isReacting = true" />
                          <Switch>
                            <IfCondition failOnCondition="false" condition="$reactionMessage.reactionType == $enum:jizdniLukostrelba_spectatorsReactionType.hattrick">
                              <Expression expressions="$reactionMetarole = &apos;DIVAK_KOMENTUJE_HATTICK&apos; &#10;$isHappy = true" />
                            </IfCondition>
                            <IfCondition failOnCondition="false" condition="$reactionMessage.reactionType == $enum:jizdniLukostrelba_spectatorsReactionType.normalHit">
                              <Expression expressions="$reactionMetarole = &apos;DIVAK_KOMENTUJE_HIT&apos; &#10;$isHappy = true" />
                            </IfCondition>
                            <IfCondition failOnCondition="false" condition="$reactionMessage.reactionType == $enum:jizdniLukostrelba_spectatorsReactionType.miss">
                              <Expression expressions="$reactionMetarole = &apos;DIVAK_KOMENTUJE_MISS&apos; &#10;$isHappy = false" />
                            </IfCondition>
                            <DefaultBranch>
                              <Success />
                            </DefaultBranch>
                          </Switch>
                          <Wait duration="&apos;200ms&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
                          <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="$reactionMetarole" subtitlesDown="false" nodeLabel="97468887" />
                        </Sequence>
                      </ProcessMessage>
                    </Sequence>
                  </Child>
                  <OnSuccess canSkip="1">
                    <Expression expressions="$isReacting = false" />
                  </OnSuccess>
                </FuseBox>
              </Loop>
            </Parallel>
          </EntityContext>
        </EntityContext>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="animationNumber" comment="" />
        <Variable name="isHappy" comment="" />
        <Variable name="isReacting" comment="" />
        <Variable name="reactionMessage" comment="" />
        <Variable name="reactionMetarole" comment="" />
        <Variable name="unstance" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-240" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_konskeZavody_spectate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_konskeZavody_spectate>
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                              <DefaultBranch>
                                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Success>
                              </DefaultBranch>
                            </Switch>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                            <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Function_speech_schedulerMonolog>
                          </Sequence>
                        </ProcessMessage>
                      </Sequence>
                    </Child>
                    <OnSuccess>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </OnSuccess>
                  </FuseBox>
                </Loop>
              </Parallel>
            </EntityContext>
          </EntityContext>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="spectator_crossCountryStarts" is_function="0">
    <Variables>
      <Variable name="animationNumber" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="isReacting" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="unstance" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="usableObject" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Parallel successMode="All" failureMode="Any">
            <Function_konskeZavody_spectate SO="$__object.id" isHappy="" isReacting="$isReacting" nodeLabel="25260934" />
            <SuppressFailure>
              <Sequence>
                <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
                <Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;0&apos;" LockManagerType="Global" SemaphoreName="&apos;crossCountry_barksNearStart&apos;">
                  <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;DIVAK_BARKY_U_STARTU&apos;" subtitlesDown="false" nodeLabel="90168822" />
                </Semaphore>
              </Sequence>
            </SuppressFailure>
          </Parallel>
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="animationNumber" comment="" />
        <Variable name="isReacting" comment="" />
        <Variable name="unstance" comment="" />
        <Variable name="usableObject" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="30" editorPosY="140" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Function_konskeZavody_spectate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_konskeZavody_spectate>
              <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                  <Semaphore hasInputBreakpoint="0" comment="Is someone commenting this already?" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Function_speech_schedulerMonolog>
                  </Semaphore>
                </Sequence>
              </SuppressFailure>
            </Parallel>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="spectator_crossCountry" is_function="0">
    <Variables>
      <Variable name="animationNumber" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="barkMetarole" type="_string" values="" isPersistent="1" form="single" />
      <Variable name="isReacting" type="_bool" values="" isPersistent="1" form="single" />
      <Variable name="reactionArea" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="unstance" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;reactionArea&apos;" prune="true" negprune="unknown" Parent="" Child="$reactionArea" Data="" />
          </GraphSearch>
          <Parallel successMode="All" failureMode="Any">
            <Function_konskeZavody_spectate SO="$__object.id" isHappy="" isReacting="$isReacting" nodeLabel="89379024" />
            <Loop count="-1">
              <AreaPresenceListener aiObjects="" area="$reactionArea" trackIn="true" trackOut="false" reportInitialState="false">
                <EntityContextCheck context="crossCountry_rider" target="$__presenceObject" saveVersion="2">
                  <Then canSkip="1">
                    <Sequence>
                      <EntityContextCheck context="crossCountry_finishing" target="$__presenceObject" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$barkMetarole = &apos;DIVAK_BARKY_U_CILU&apos;" />
                        </Then>
                        <Else canSkip="1">
                          <Expression expressions="$barkMetarole = &apos;DIVAK_BARKY_U_BRANY&apos;" />
                        </Else>
                      </EntityContextCheck>
                      <LogToConsole LogLevel="Fatal" Message="&apos;&gt;&gt;&gt; crossCountry fan $this.name reacts to $__presenceObject using $barkMetarole&apos;" />
                      <Expression expressions="$isReacting = true" />
                      <SetExternalLock LockManagerType="Local" Locked="true" LockName="&apos;restartTimer&apos;" />
                    </Sequence>
                  </Then>
                  <Else canSkip="1">
                    <Success />
                  </Else>
                </EntityContextCheck>
              </AreaPresenceListener>
            </Loop>
            <Loop count="-1">
              <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                <Child canSkip="1">
                  <IfGate atomic="false" condition="$isReacting" RunLogic="KeepRunning">
                    <Parallel successMode="Any" failureMode="Any">
                      <Loop count="-1">
                        <Sequence>
                          <Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
                          <Selector>
                            <Semaphore SemaphoreCount="2" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;0s&apos;" LockManagerType="Global" SemaphoreName="&apos;$reactionArea&apos;">
                              <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="$barkMetarole" subtitlesDown="false" nodeLabel="86068198" />
                            </Semaphore>
                            <RandomGate opensWithChance="0.200000" saveVersion="2">
                              <Then canSkip="1">
                                <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="$barkMetarole" subtitlesDown="false" nodeLabel="56861911" />
                              </Then>
                              <Else canSkip="1">
                                <Success />
                              </Else>
                            </RandomGate>
                          </Selector>
                          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        </Sequence>
                      </Loop>
                      <LoopUntil until="Fail" attemptCount="0">
                        <Sequence>
                          <SetExternalLock LockManagerType="Local" Locked="false" LockName="&apos;restartTimer&apos;" />
                          <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;restartTimer&apos;" RunLogic="Halt">
                            <Sequence>
                              <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                              <Fail />
                            </Sequence>
                          </ExternalLock>
                        </Sequence>
                      </LoopUntil>
                    </Parallel>
                  </IfGate>
                </Child>
                <OnSuccess canSkip="1">
                  <Expression expressions="$isReacting = false" />
                </OnSuccess>
              </FuseBox>
            </Loop>
          </Parallel>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="animationNumber" comment="" />
        <Variable name="barkMetarole" comment="" />
        <Variable name="isReacting" comment="" />
        <Variable name="reactionArea" comment="" />
        <Variable name="unstance" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-150" editorPosY="50" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Function_konskeZavody_spectate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_konskeZavody_spectate>
              <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <AreaPresenceListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Else>
                        </EntityContextCheck>
                        <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </LogToConsole>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </SetExternalLock>
                      </Sequence>
                    </Then>
                    <Else>
                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Success>
                    </Else>
                  </EntityContextCheck>
                </AreaPresenceListener>
              </Loop>
              <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Child>
                    <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                            <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Semaphore hasInputBreakpoint="0" comment="Is someone commenting this already?" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Function_speech_schedulerMonolog>
                              </Semaphore>
                              <RandomGate hasInputBreakpoint="0" comment="With a small chance let still comment it even tho someone already reacting" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Function_speech_schedulerMonolog>
                                </Then>
                                <Else>
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </Else>
                              </RandomGate>
                            </Selector>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Sequence>
                        </Loop>
                        <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </SetExternalLock>
                            <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Wait>
                                <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Fail>
                              </Sequence>
                            </ExternalLock>
                          </Sequence>
                        </LoopUntil>
                      </Parallel>
                    </IfGate>
                  </Child>
                  <OnSuccess>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </OnSuccess>
                </FuseBox>
              </Loop>
            </Parallel>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="konskeZavody_spectate" is_function="1">
    <Variables>
      <Variable name="puk" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="unstance" type="_string" values="" isPersistent="1" form="single" />
      <Variable name="usableObject" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="usePrefab" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="useUnstance" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="SO" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="isHappy" type="_bool" values="true" isPersistent="0" form="single" requirementType="ConstReference" optional="1" />
      <Variable name="isReacting" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$SO" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;use&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="$usableObject" />
          </GraphSearch>
          <IfElseCondition failOnCondition="false" condition="$usableObject == $__null" saveVersion="2">
            <Then canSkip="1">
              <IfElseCondition failOnCondition="false" condition="$unstance == &apos;&apos;" saveVersion="2">
                <Then canSkip="1">
                  <RandomGate opensWithChance="0.500000" saveVersion="2">
                    <Then canSkip="1">
                      <Sequence>
                        <Expression expressions="$useUnstance = true &#10;$usableObject = $SO" />
                        <HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$unstance = &apos;tournamentCrowd_standing_1&apos;" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$unstance = &apos;tournamentCrowd_standing_4&apos;" />
                          </Else>
                        </HasGenderCheck>
                      </Sequence>
                    </Then>
                    <Else canSkip="1">
                      <Success />
                    </Else>
                  </RandomGate>
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$useUnstance = true &#10;$usableObject = $SO" />
                </Else>
              </IfElseCondition>
            </Then>
            <Else canSkip="1">
              <HasHelpers smartObject="$usableObject" name="&apos;tournamentCrowd_leaning&apos;" saveVersion="2">
                <Then canSkip="1">
                  <Sequence>
                    <Expression expressions="$useUnstance = true" />
                    <IfCondition failOnCondition="false" condition="$unstance == &apos;&apos;">
                      <HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
                        <Then canSkip="1">
                          <ExecuteLua code="data.unstance = &apos;tournamentCrowd_leaning_&apos; .. math.random(2)" />
                        </Then>
                        <Else canSkip="1">
                          <ExecuteLua code="data.unstance = &apos;tournamentCrowd_leaning_&apos; .. math.random(3)" />
                        </Else>
                      </HasGenderCheck>
                    </IfCondition>
                  </Sequence>
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$usePrefab = true" />
                </Else>
              </HasHelpers>
            </Else>
          </IfElseCondition>
          <IfElseCondition failOnCondition="false" condition="$usePrefab" saveVersion="2">
            <Then canSkip="1">
              <Loop count="-1">
                <CallBehavior Target="$usableObject" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="21328181" />
              </Loop>
            </Then>
            <Else canSkip="1">
              <IfElseCondition failOnCondition="false" condition="$useUnstance" saveVersion="2">
                <Then canSkip="1">
                  <Sequence>
                    <UnstanceAction unstance="$unstance" locationObject="$usableObject" slaveObject="" />
                    <UnstanceElement unstance="$unstance" locationObject="$usableObject" slaveObject="">
                      <Loop count="-1">
                        <IfGate atomic="false" condition="$isReacting" RunLogic="KeepRunning">
                          <Sequence>
                            <IfElseCondition failOnCondition="false" condition="$isHappy" saveVersion="2">
                              <Then canSkip="1">
                                <AnimationAction fragment="&apos;TournamentCrowdHappy&apos;" tags="$unstance" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                              </Then>
                              <Else canSkip="1">
                                <AnimationAction fragment="&apos;TournamentCrowdSad&apos;" tags="$unstance" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                              </Else>
                            </IfElseCondition>
                            <Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
                          </Sequence>
                        </IfGate>
                      </Loop>
                    </UnstanceElement>
                  </Sequence>
                </Then>
                <Else canSkip="1">
                  <Sequence>
                    <ExactMove directionType="AlignWithEntity" directionSpecification="$SO" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$SO" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                    <Loop count="-1">
                      <IfGate atomic="false" condition="$isReacting" RunLogic="KeepRunning">
                        <Sequence>
                          <IfElseCondition failOnCondition="false" condition="$isHappy" saveVersion="2">
                            <Then canSkip="1">
                              <AnimationAction fragment="&apos;ApplauseHappy&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                            </Then>
                            <Else canSkip="1">
                              <AnimationAction fragment="&apos;ApplauseSad&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                            </Else>
                          </IfElseCondition>
                          <Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
                        </Sequence>
                      </IfGate>
                    </Loop>
                  </Sequence>
                </Else>
              </IfElseCondition>
            </Else>
          </IfElseCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="puk" comment="" />
        <Variable name="unstance" comment="" />
        <Variable name="usableObject" comment="" />
        <Variable name="usePrefab" comment="" />
        <Variable name="useUnstance" comment="" />
        <Variable name="SO" comment="" />
        <Variable name="isHappy" comment="" />
        <Variable name="isReacting" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="90" editorPosY="280" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </AnyLinkFilter>
            </GraphSearch>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <RandomGate hasInputBreakpoint="0" comment="Randomly choose between unstance or one-shot variant for standing reaction" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </HasGenderCheck>
                        </Sequence>
                      </Then>
                      <Else>
                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </Else>
                    </RandomGate>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </Then>
              <Else>
                <HasHelpers hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ExecuteLua>
                          </Then>
                          <Else>
                            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ExecuteLua>
                          </Else>
                        </HasGenderCheck>
                      </IfCondition>
                    </Sequence>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </HasHelpers>
              </Else>
            </IfElseCondition>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CallBehavior>
                </Loop>
              </Then>
              <Else>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </UnstanceAction>
                      <UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </AnimationAction>
                                </Then>
                                <Else>
                                  <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </AnimationAction>
                                </Else>
                              </IfElseCondition>
                              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Wait>
                            </Sequence>
                          </IfGate>
                        </Loop>
                      </UnstanceElement>
                    </Sequence>
                  </Then>
                  <Else>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </ExactMove>
                      <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </AnimationAction>
                              </Then>
                              <Else>
                                <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </AnimationAction>
                              </Else>
                            </IfElseCondition>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Sequence>
                        </IfGate>
                      </Loop>
                    </Sequence>
                  </Else>
                </IfElseCondition>
              </Else>
            </IfElseCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="spectator_horseArcheryEnds_happy" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Function_konskeZavody_afterContestReaction isCrossCountry="false" isHappy="true" nodeLabel="79450765" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Function_konskeZavody_afterContestReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Function_konskeZavody_afterContestReaction>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="spectator_horseArcheryEnds_sad" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Function_konskeZavody_afterContestReaction isCrossCountry="false" isHappy="false" nodeLabel="36342084" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Function_konskeZavody_afterContestReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Function_konskeZavody_afterContestReaction>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="spectator_crossCountryEnds" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <RandomGate opensWithChance="0.500000" saveVersion="2">
          <Then canSkip="1">
            <Function_konskeZavody_afterContestReaction isCrossCountry="true" isHappy="true" nodeLabel="42162810" />
          </Then>
          <Else canSkip="1">
            <Function_konskeZavody_afterContestReaction isCrossCountry="true" isHappy="false" nodeLabel="85250617" />
          </Else>
        </RandomGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root editorPosX="10" editorPosY="30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Function_konskeZavody_afterContestReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_konskeZavody_afterContestReaction>
            </Then>
            <Else>
              <Function_konskeZavody_afterContestReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_konskeZavody_afterContestReaction>
            </Else>
          </RandomGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="konskeZavody_afterContestReaction" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="isCrossCountry" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="isHappy" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <UrgencyDecorator Urgency="Slow">
          <Sequence>
            <Parallel successMode="All" failureMode="Any">
              <IfElseCondition failOnCondition="false" condition="$isHappy" saveVersion="2">
                <Then canSkip="1">
                  <AnimationAction fragment="&apos;ApplauseHappy&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                </Then>
                <Else canSkip="1">
                  <AnimationAction fragment="&apos;ApplauseSad&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                </Else>
              </IfElseCondition>
              <Selector>
                <DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="20.000000" High="20.000000" Negation="false" ValueOnMiddle="false" failOnCondition="true">
                  <Sequence>
                    <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
                    <Semaphore SemaphoreCount="2" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;1s&apos;" LockManagerType="Global" SemaphoreName="&apos;konskeZavody_afterContestReaction&apos;">
                      <SuppressFailure>
                        <IfElseCondition failOnCondition="false" condition="$isHappy" saveVersion="2">
                          <Then canSkip="1">
                            <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;DIVAK_BARKY_PO_ZAVODU_HAPPY&apos;" subtitlesDown="false" nodeLabel="49295709" />
                          </Then>
                          <Else canSkip="1">
                            <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;DIVAK_BARKY_PO_ZAVODU_SAD&apos;" subtitlesDown="false" nodeLabel="74036322" />
                          </Else>
                        </IfElseCondition>
                      </SuppressFailure>
                    </Semaphore>
                  </Sequence>
                </DistanceCondition>
                <Success />
              </Selector>
            </Parallel>
            <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </Sequence>
        </UrgencyDecorator>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="isCrossCountry" comment="" />
        <Variable name="isHappy" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </AnimationAction>
                  </Then>
                  <Else>
                    <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </AnimationAction>
                  </Else>
                </IfElseCondition>
                <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                      <Semaphore hasInputBreakpoint="0" comment="Is someone commenting this already?" breakpointFlags="0">
                        <OutputBreakpoints />
                        <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Function_speech_schedulerMonolog>
                            </Then>
                            <Else>
                              <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Function_speech_schedulerMonolog>
                            </Else>
                          </IfElseCondition>
                        </SuppressFailure>
                      </Semaphore>
                    </Sequence>
                  </DistanceCondition>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Selector>
              </Parallel>
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </Sequence>
          </UrgencyDecorator>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>