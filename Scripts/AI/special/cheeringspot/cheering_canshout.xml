<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="special_cheeringSpot_cheering_canShout" is_function="1">
    <Variables>
      <Variable name="cooldown_ongoing_randomAddition" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="cooldown_reaction_randomAddition" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="inProgress" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="simultaneousShouting_limit" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="time_allowed" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="time_now" type="_int64" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="canShout" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="shoutingAllowedTimes_new" type="special:cheering:shoutingAllowedTimes" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="shoutingAllowedTimes_old" type="special:cheering:shoutingAllowedTimes" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="shoutingConfiguration" type="special:cheering:shoutingConfiguration" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="shoutingManager" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="shoutingType" type="enum:cheering_shoutingType" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$shoutingManager" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;cheering_shoutingAllowedTimes&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;cheering_shoutingAllowedTimes&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$shoutingAllowedTimes_old" />
          </GraphSearch>
          <IfElseCondition failOnCondition="false" condition="$shoutingType == $enum:cheering_shoutingType.ongoing" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$time_allowed = $shoutingAllowedTimes_old.ongoing &#10;$simultaneousShouting_limit = $shoutingConfiguration.ongoing_simultaneousShouting_limit" />
            </Then>
            <Else canSkip="1">
              <Expression expressions="$time_allowed = $shoutingAllowedTimes_old.reaction &#10;$simultaneousShouting_limit = $shoutingConfiguration.reaction_simultaneousShouting_limit" />
            </Else>
          </IfElseCondition>
          <GetTime TimeType="GameTime" OutVar="$time_now" Delta="" />
          <IfCondition failOnCondition="false" condition="$time_now &gt; $time_allowed">
            <Sequence>
              <GraphSearch Origin="$shoutingManager" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;cheering_shoutingInProgress&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                <Nodalyzer Quantifiers="ForAll" Parent="" Child="$inProgress" saveVersion="2" />
              </GraphSearch>
              <IfCondition failOnCondition="false" condition="#inProgress &lt; $simultaneousShouting_limit">
                <Sequence>
                  <GenerateRandomInteger lowerBoundary="0" upperBoundary="$shoutingConfiguration.ongoing_cooldown_randomAddition" result="$cooldown_ongoing_randomAddition" />
                  <GenerateRandomInteger lowerBoundary="0" upperBoundary="$shoutingConfiguration.reaction_cooldown_randomAddition" result="$cooldown_reaction_randomAddition" />
                  <Expression expressions="$canShout = true &#10;$shoutingAllowedTimes_new.ongoing = $time_now + $shoutingConfiguration.ongoing_cooldown_base + $cooldown_ongoing_randomAddition &#10;$shoutingAllowedTimes_new.reaction = $time_now + $shoutingConfiguration.reaction_cooldown_base + $cooldown_reaction_randomAddition" />
                </Sequence>
              </IfCondition>
            </Sequence>
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="cooldown_ongoing_randomAddition" comment="" />
        <Variable name="cooldown_reaction_randomAddition" comment="" />
        <Variable name="inProgress" comment="" />
        <Variable name="simultaneousShouting_limit" comment="" />
        <Variable name="time_allowed" comment="" />
        <Variable name="time_now" comment="" />
        <Variable name="canShout" comment="" />
        <Variable name="shoutingAllowedTimes_new" comment="" />
        <Variable name="shoutingAllowedTimes_old" comment="" />
        <Variable name="shoutingConfiguration" comment="" />
        <Variable name="shoutingManager" comment="" />
        <Variable name="shoutingType" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
              <Else>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Else>
            </IfElseCondition>
            <GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetTime>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </AnyLinkFilter>
                  <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                  </Nodalyzer>
                </GraphSearch>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GenerateRandomInteger>
                    <GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GenerateRandomInteger>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Sequence>
                </IfCondition>
              </Sequence>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>