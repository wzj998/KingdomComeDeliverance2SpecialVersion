<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables>
			<Variable name="autotestCartMoving" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cartBlockedBy_collision" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cartBlockedBy_npc" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cartBlockedBy_player" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cartCodeMessage" type="carts:codeMessage" values="" isPersistent="0" form="single" />
			<Variable name="cartStopDestination" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="cartStopDestinationTime" type="_int64" values="" isPersistent="1" form="single" />
			<Variable name="cartStopHub" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="cartStopHubData" type="carts:activityData" values="" isPersistent="0" form="single" />
			<Variable name="cartType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="cartUsers_linked" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="cartUsers_real" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="forcePlayerDismountArea" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="formationWUID" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="inTestMode" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isCartInitialized" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="isQuestCart" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="masterWagon" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="masterWagonArrivedName" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="moveTo" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="slaveWagons" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="urgentTeleportRequest" type="carts:urgentTeleportRequest" values="" isPersistent="0" form="single" />
			<Variable name="wagonArrivedName" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="wagonMoveLockName" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<ExecuteLua code="local e = XGenAIModule.GetEntityByWUID(data.this.id) &#10;data.isQuestCart = e:GetIsQuestCart()" />
					<ExecuteLua code="local e = XGenAIModule.GetEntityByWUID(data.this.id) &#10;data.cartType = e:GetCartType()" />
					<IfCondition failOnCondition="false" condition="$isQuestCart">
						<Sequence>
							<SuppressFailure>
								<SmartObjSetBehaviorState behaviors="&apos;cart_driver&apos;" state="Disabled" />
							</SuppressFailure>
							<SuppressFailure>
								<SmartObjSetBehaviorState behaviors="&apos;cart_passenger&apos;" state="Disabled" />
							</SuppressFailure>
							<SuppressFailure>
								<SmartObjSetBehaviorState behaviors="&apos;cart_accompany&apos;" state="Disabled" />
							</SuppressFailure>
						</Sequence>
					</IfCondition>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$urgentTeleportRequest" senderInfo="" inbox="&apos;carts_teleportRequest&apos;" condition="" answerVar="">
							<Sequence>
								<CartMove Target="$urgentTeleportRequest.data" Speed="instant" />
								<GraphSearch Origin="$urgentTeleportRequest.data" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;moveto&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									<Nodalyzer Quantifiers="Exists" Parent="" Child="$moveTo" saveVersion="2" />
								</GraphSearch>
								<SuppressFailure>
									<InstantSynchronize SemaphoreCount="2" LockManagerType="Intellect" SemaphoreName="&apos;forceCartRestart&apos;" RunLogic="KeepRunning">
										<Success />
									</InstantSynchronize>
								</SuppressFailure>
								<Expression expressions="$cartStopDestination = $__null" />
							</Sequence>
						</ProcessMessage>
					</While>
					<Sequence>
						<IfCondition failOnCondition="false" condition="!$isCartInitialized">
							<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;onCartInitialize&apos;" nodeLabel="75596238" />
						</IfCondition>
						<MakeFormation FormationName="&apos;followCart&apos;" HandleVariable="$formationWUID" />
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<Parallel successMode="Any" failureMode="Any">
									<While doFail="false" propagateChildFail="false" condition="true">
										<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cartCodeMessage" senderInfo="" inbox="&apos;so_cart&apos;" condition="" answerVar="">
											<Switch>
												<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;CartNotification:Mounted&apos;">
													<Success />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;CartNotification:Dismounted&apos;">
													<Success />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;CartNotification:BlockedByCollision&apos;">
													<Success />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;CartNotification:BlockedByNPC&apos;">
													<Success />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;CartNotification:BlockedByPlayer&apos;">
													<Expression expressions="$cartBlockedBy_player = true," />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;CartNotification:Unblocked&apos;">
													<Expression expressions="$cartBlockedBy_player = false, &#10;$cartBlockedBy_npc = false, &#10;$cartBlockedBy_collision = false," />
												</IfCondition>
												<DefaultBranch>
													<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;onCartCodeMessage_autotest&apos;" nodeLabel="39495588" />
												</DefaultBranch>
											</Switch>
										</ProcessMessage>
									</While>
									<While doFail="false" propagateChildFail="false" condition="true">
										<Parallel successMode="Any" failureMode="Any">
											<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;forceCartRestart&apos;" RunLogic="KeepRunning">
												<Success />
											</Synchronize>
											<Sequence>
												<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;waitUntilCartReadyToMove&apos;" nodeLabel="95710106" />
												<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;moveCart&apos;" nodeLabel="15790534" />
												<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;waitOnCartStop&apos;" nodeLabel="22776589" />
											</Sequence>
										</Parallel>
									</While>
									<While doFail="false" propagateChildFail="false" condition="true">
										<LinkGate from="$__player" to="$this.id" tag="&apos;carts_enablePlayerSeat&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
											<IfElseCondition failOnCondition="false" condition="$forcePlayerDismountArea == $__null" saveVersion="2">
												<Then canSkip="1">
													<StanceBarrier soul="$__player" stance="cart" smartObject="$this.id" negate="true" failOnCondition="false" RunLogic="Halt">
														<EnablePlayerCartSeat />
													</StanceBarrier>
												</Then>
												<Else canSkip="1">
													<AreaPresenceGate aiObjects="$this.id" area="$forcePlayerDismountArea" amount="AtLeastOne" presence="NotThere" RunLogic="Halt">
														<StanceBarrier soul="$__player" stance="cart" smartObject="$this.id" negate="true" failOnCondition="false" RunLogic="Halt">
															<EnablePlayerCartSeat />
														</StanceBarrier>
													</AreaPresenceGate>
												</Else>
											</IfElseCondition>
										</LinkGate>
									</While>
									<While doFail="false" propagateChildFail="false" condition="true">
										<IfGate atomic="false" condition="$cartStopDestination ~= $__null" RunLogic="Halt">
											<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
												<Child canSkip="1">
													<Sequence>
														<SetExternalLock LockManagerType="Global" Locked="false" LockName="&apos;$wagonArrivedName&apos;" />
														<Expression expressions="$cartStopHub = $__null" />
														<IfCondition failOnCondition="false" condition="$cartStopDestination ~= $__null">
															<GraphSearch Origin="$cartStopDestination" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;carts_activity&apos;" prune="true" negprune="unknown" Parent="" Child="$cartStopHub" Data="$cartStopHubData" />
															</GraphSearch>
														</IfCondition>
														<IfElseCondition failOnCondition="false" condition="$cartStopHub == $__null | $cartStopHubData.infiniteWait" saveVersion="2">
															<Then canSkip="1">
																<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
															</Then>
															<Else canSkip="1">
																<EnableRoleOnHubDecorator Hub="$cartStopHub" Role="$cartStopHubData.tag">
																	<EntityContext context="carts_onCartStopPoint" target="$this.id">
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</EntityContext>
																</EnableRoleOnHubDecorator>
															</Else>
														</IfElseCondition>
													</Sequence>
												</Child>
												<OnFail canSkip="1">
													<SetExternalLock LockManagerType="Global" Locked="true" LockName="&apos;$wagonArrivedName&apos;" />
												</OnFail>
											</FuseBox>
										</IfGate>
									</While>
									<While doFail="false" propagateChildFail="false" condition="true">
										<IfGate atomic="false" condition="$cartBlockedBy_player" RunLogic="Halt">
											<Sequence>
												<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
												<Expression expressions="$cartBlockedBy_player = false," />
											</Sequence>
										</IfGate>
									</While>
									<While doFail="false" propagateChildFail="false" condition="true">
										<IfGate atomic="false" condition="$autotestCartMoving" RunLogic="KeepRunning">
											<Sequence>
												<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
												<LoopUntil until="Success" attemptCount="0">
													<Selector>
														<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkDataFilter tag="&apos;carts_activeUser&apos;" condition="$__link_carts_activeUser.type == $enum:cartUserType.driver" prune="true" negprune="unknown" Parent="" Child="" Data="" />
														</GraphSearch>
														<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="true" variation="" />
													</Selector>
												</LoopUntil>
												<CartMove Target="$moveTo" Speed="normal" />
												<Expression expressions="$autotestCartMoving = false" />
												<TestCheckPoint name="&apos;TestCart_Done_CartMoveTo&apos;" />
											</Sequence>
										</IfGate>
									</While>
									<While doFail="false" propagateChildFail="false" condition="true">
										<StanceBarrier soul="$__player" stance="cart" smartObject="$this.id" negate="false" failOnCondition="false" RunLogic="Halt">
											<GameContext context="crime_global_ignorePlayerWithoutTorch">
												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
											</GameContext>
										</StanceBarrier>
									</While>
								</Parallel>
							</Child>
							<OnFail canSkip="1">
								<CheckWuidValid wuid="$formationWUID" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<EndFormation FormationHandle="$formationWUID" />
									</Then>
								</CheckWuidValid>
							</OnFail>
						</FuseBox>
					</Sequence>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer>
			<Expression expressions="$cartBlockedBy_collision = true," />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="autotestCartMoving" comment="" />
				<Variable name="cartBlockedBy_collision" comment="" />
				<Variable name="cartBlockedBy_npc" comment="" />
				<Variable name="cartBlockedBy_player" comment="" />
				<Variable name="cartCodeMessage" comment="" />
				<Variable name="cartStopDestination" comment="" />
				<Variable name="cartStopDestinationTime" comment="" />
				<Variable name="cartStopHub" comment="" />
				<Variable name="cartStopHubData" comment="" />
				<Variable name="cartType" comment="" />
				<Variable name="cartUsers_linked" comment="" />
				<Variable name="cartUsers_real" comment="" />
				<Variable name="forcePlayerDismountArea" comment="" />
				<Variable name="formationWUID" comment="" />
				<Variable name="inTestMode" comment="" />
				<Variable name="isCartInitialized" comment="" />
				<Variable name="isQuestCart" comment="" />
				<Variable name="masterWagon" comment="" />
				<Variable name="masterWagonArrivedName" comment="" />
				<Variable name="moveTo" comment="" />
				<Variable name="slaveWagons" comment="" />
				<Variable name="urgentTeleportRequest" comment="" />
				<Variable name="wagonArrivedName" comment="" />
				<Variable name="wagonMoveLockName" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-1970" editorPosY="160" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="are we for quest or not?" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<ExecuteLua hasInputBreakpoint="0" comment="find which type of cart are we" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<IfCondition hasInputBreakpoint="0" comment="if we&apos;re quest cart, disable the driver behavior; scripter will enable it from Skald instead" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
								</SuppressFailure>
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
								</SuppressFailure>
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
								</SuppressFailure>
							</Sequence>
						</IfCondition>
					</Sequence>
				</OnInit>
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="listen for urgent teleport requests from Skald" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CartMove hasInputBreakpoint="0" comment="todo: move reset" breakpointFlags="0">
										<OutputBreakpoints />
									</CartMove>
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
										<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
										</Nodalyzer>
									</GraphSearch>
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</InstantSynchronize>
									</SuppressFailure>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</ProcessMessage>
						</While>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</IncludeTree>
							</IfCondition>
							<MakeFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</MakeFormation>
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Switch hasInputBreakpoint="0" comment="cart notifications" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
													<DefaultBranch>
														<IncludeTree hasInputBreakpoint="0" comment="hide autotest messages" breakpointFlags="0">
															<OutputBreakpoints />
														</IncludeTree>
													</DefaultBranch>
												</Switch>
											</ProcessMessage>
										</While>
										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Synchronize hasInputBreakpoint="0" comment="used only for teleport" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Synchronize>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</IncludeTree>
													<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</IncludeTree>
													<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</IncludeTree>
												</Sequence>
											</Parallel>
										</While>
										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EnablePlayerCartSeat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</EnablePlayerCartSeat>
														</StanceBarrier>
													</Then>
													<Else>
														<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<EnablePlayerCartSeat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</EnablePlayerCartSeat>
															</StanceBarrier>
														</AreaPresenceGate>
													</Else>
												</IfElseCondition>
											</LinkGate>
										</While>
										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfGate hasInputBreakpoint="0" comment="this is here becouse of save/load and better synchronization" breakpointFlags="0">
												<OutputBreakpoints />
												<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Child>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetExternalLock>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																</GraphSearch>
															</IfCondition>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Then>
																<Else>
																	<EnableRoleOnHubDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</EntityContext>
																	</EnableRoleOnHubDecorator>
																</Else>
															</IfElseCondition>
														</Sequence>
													</Child>
													<OnFail>
														<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SetExternalLock>
													</OnFail>
												</FuseBox>
											</IfGate>
										</While>
										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="we will just ignore player once timer will finish" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</IfGate>
										</While>
										<While hasInputBreakpoint="0" comment="This branch is for testing only" breakpointFlags="0">
											<OutputBreakpoints />
											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
													<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GraphSearch hasInputBreakpoint="0" comment="this check is maybe not good for ghost user?" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkDataFilter>
															</GraphSearch>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Selector>
													</LoopUntil>
													<CartMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</CartMove>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</TestCheckPoint>
												</Sequence>
											</IfGate>
										</While>
										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</GameContext>
											</StanceBarrier>
										</While>
									</Parallel>
								</Child>
								<OnFail>
									<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<EndFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</EndFormation>
										</Then>
									</CheckWuidValid>
								</OnFail>
							</FuseBox>
						</Sequence>
					</Parallel>
				</Behavior>
			</Root>
			<Forest>
				<Expression editorPosX="130" editorPosY="90" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Expression>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="idle" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartMount_driver" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<CartStanceElement smartObject="$__object.id" cartslot="driver">
							<Sequence>
								<WaitAction />
								<TestCheckPoint name="&apos;TestCart_Done_CartMount_driver&apos;" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="30" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</TestCheckPoint>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartMount_leftFront" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<CartStanceElement smartObject="$__object.id" cartslot="any">
							<Sequence>
								<WaitAction />
								<TestCheckPoint name="&apos;TestCart_Done_CartMount_leftFront&apos;" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="30" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</TestCheckPoint>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartMount_rightFront" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<CartStanceElement smartObject="$__object.id" cartslot="any">
							<Sequence>
								<WaitAction />
								<TestCheckPoint name="&apos;TestCart_Done_CartMount_rightFront&apos;" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="30" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</TestCheckPoint>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartMount_leftBack" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<CartStanceElement smartObject="$__object.id" cartslot="any">
							<Sequence>
								<WaitAction />
								<TestCheckPoint name="&apos;TestCart_Done_CartMount_leftBack&apos;" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="30" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</TestCheckPoint>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartMount_horse2" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<CartStanceElement smartObject="$__object.id" cartslot="any">
							<Sequence>
								<WaitAction />
								<TestCheckPoint name="&apos;TestCart_Done_CartMount_horse2&apos;" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="30" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</TestCheckPoint>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartMount_horse1" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<CartStanceElement smartObject="$__object.id" cartslot="any">
							<Sequence>
								<WaitAction />
								<TestCheckPoint name="&apos;TestCart_Done_CartMount_horse1&apos;" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="30" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</TestCheckPoint>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_cartDismount" is_function="0">
		<Variables>
			<Variable name="decisionSeat" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="testcheck" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<Decision decisionLabel="testCarts_seat" variable="$decisionSeat" saveVersion="2">
							<Search canSkip="1">
								<Sequence>
									<LogToConsole LogLevel="Error" Message="&apos;NPC doing decision search in dismount. This should not happen! Decision should have stored value from mount behavior&apos;" />
									<Fail />
								</Sequence>
							</Search>
							<Exec canSkip="1">
								<Sequence>
									<WaitAction />
									<Expression expressions="$testcheck = &apos;TestCart_Done_CartDismount_&apos; + $decisionSeat" />
									<IfCondition failOnCondition="false" condition="$decisionSeat == &apos;horseRight&apos; | $decisionSeat == &apos;horseLeft&apos;">
										<IfElseCondition failOnCondition="false" condition="$decisionSeat == &apos;horseRight&apos;" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$testcheck = &apos;TestCart_Done_CartDismount_horse1&apos;" />
											</Then>
											<Else canSkip="1">
												<Expression expressions="$testcheck = &apos;TestCart_Done_CartDismount_horse2&apos;" />
											</Else>
										</IfElseCondition>
									</IfCondition>
									<TestCheckPoint name="$testcheck" />
									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
								</Sequence>
							</Exec>
						</Decision>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer>
			<ForgetDecision decisionLabel="testCarts_seat" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="decisionSeat" comment="" />
				<Variable name="testcheck" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Search>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LogToConsole>
										<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Fail>
									</Sequence>
								</Search>
								<Exec>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Else>
											</IfElseCondition>
										</IfCondition>
										<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</TestCheckPoint>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
								</Exec>
							</Decision>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest>
				<ForgetDecision editorPosX="600" editorPosY="300" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</ForgetDecision>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_cartMount" is_function="0">
		<Variables>
			<Variable name="activeUserLinkData" type="carts:activeUser" values="type($enum:cartUserType.driver)" isPersistent="0" form="single" />
			<Variable name="decisionSeat" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="testPositions" type="carts:testPositions" values="" isPersistent="0" form="array" />
			<Variable name="testcheck" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="typeName" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$testPositions[0].seat = &apos;driver&apos;, &#10;$testPositions[1].seat = &apos;horseRight&apos;, &#10;$testPositions[1].forHorse = true, &#10;$testPositions[2].seat = &apos;horseLeft&apos;, &#10;$testPositions[2].forHorse = true, &#10;$testPositions[3].seat = &apos;leftBack&apos;, &#10;$testPositions[4].seat = &apos;leftFront&apos;, &#10;$testPositions[5].seat = &apos;rightFront&apos;," />
			</OnInit>
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<Decision decisionLabel="testCarts_seat" variable="$decisionSeat" saveVersion="2">
								<Search canSkip="1">
									<Success />
								</Search>
								<Exec canSkip="1">
									<For startIndex="0" endIndex="-1" step="1" array="$testPositions" iterator="$index" value="" break="">
										<Sequence>
											<GetType WUID="$this.id" OutString="$typeName" ShowTrueIdentity="true" TreatPlayerAsNPC="true" />
											<IfCondition failOnCondition="false" condition="($testPositions[$index].forHorse &amp; $typeName == &apos;NHNPC&apos;)  &#10;| (!$testPositions[$index].forHorse &amp; $typeName ~= &apos;NHNPC&apos;)">
												<IfCondition failOnCondition="false" condition="$decisionSeat == &apos;&apos; | $decisionSeat == $testPositions[$index].seat">
													<SuppressFailure>
														<InstantSemaphore SemaphoreCount="1" LockManagerType="Local" SemaphoreName="&apos;$testPositions[$index].seat&apos;">
															<CartStanceElement smartObject="$__object.id" cartslot="$testPositions[$index].seat">
																<Sequence>
																	<Expression expressions="$testcheck = &apos;TestCart_Done_CartMount_&apos; + $testPositions[$index].seat, &#10;$decisionSeat = $testPositions[$index].seat," />
																	<IfCondition failOnCondition="false" condition="$testPositions[$index].seat == &apos;horseRight&apos; | $testPositions[$index].seat == &apos;horseLeft&apos;">
																		<IfElseCondition failOnCondition="false" condition="$testPositions[$index].seat == &apos;horseRight&apos;" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$testcheck = &apos;TestCart_Done_CartMount_horse1&apos;" />
																			</Then>
																			<Else canSkip="1">
																				<Expression expressions="$testcheck = &apos;TestCart_Done_CartMount_horse2&apos;" />
																			</Else>
																		</IfElseCondition>
																	</IfCondition>
																	<IfElseCondition failOnCondition="false" condition="$testPositions[$index].seat == &apos;driver&apos;" saveVersion="2">
																		<Then canSkip="1">
																			<AddLinkElement from="$__object.id" to="$this.id" tag="&apos;carts_activeUser&apos;" data="$activeUserLinkData">
																				<WaitAction />
																			</AddLinkElement>
																		</Then>
																		<Else canSkip="1">
																			<WaitAction />
																		</Else>
																	</IfElseCondition>
																	<TestCheckPoint name="$testcheck" />
																	<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
																</Sequence>
															</CartStanceElement>
														</InstantSemaphore>
													</SuppressFailure>
												</IfCondition>
											</IfCondition>
										</Sequence>
									</For>
								</Exec>
							</Decision>
							<Fail />
						</Sequence>
					</Child>
					<OnFail canSkip="1">
						<TestCheckPoint name="&apos;Test_CartMoveTo_Failed&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="activeUserLinkData" comment="" />
				<Variable name="decisionSeat" comment="" />
				<Variable name="index" comment="" />
				<Variable name="testPositions" comment="" />
				<Variable name="testcheck" comment="" />
				<Variable name="typeName" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" comment_box="Obsolete" comment_box_color="222,222,222,222" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Search>
									<Exec>
										<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetType>
												<IfCondition hasInputBreakpoint="0" comment="check to assign correct seat for horses" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Else>
																			</IfElseCondition>
																		</IfCondition>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</WaitAction>
																				</AddLinkElement>
																			</Then>
																			<Else>
																				<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</WaitAction>
																			</Else>
																		</IfElseCondition>
																		<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</TestCheckPoint>
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																	</Sequence>
																</CartStanceElement>
															</InstantSemaphore>
														</SuppressFailure>
													</IfCondition>
												</IfCondition>
											</Sequence>
										</For>
									</Exec>
								</Decision>
								<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Fail>
							</Sequence>
						</Child>
						<OnFail>
							<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</TestCheckPoint>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_passenger" is_function="0">
		<Variables>
			<Variable name="cartUsers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="chatInfo" type="carts:chatInfo" values="" isPersistent="0" form="single" />
			<Variable name="chatLockCount" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="driver" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isQuestCart" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="masterWagon" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="seated_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<Function_cart_getMasterWagon this="$__object.id" master="$masterWagon" nodeLabel="72902419" />
					<ExecuteLua code="local e = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;data.isQuestCart = e:GetIsQuestCart()" />
					<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;nonQuestDialogEnabled&apos;" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<AddLinkElement from="$__object.id" to="$this.id" tag="&apos;carts_activeUser&apos;" data="" enabled="true">
					<CartStanceElement smartObject="$__object.id" cartslot="any" enabled="true">
						<EntityContext context="disableDogActions" target="">
							<Sequence>
								<WaitAction />
								<Expression expressions="$seated_soul.value = $this.id" />
								<SendAIConceptSignal_carts_onNpcSeated cart="$__object.id" NPC="$seated_soul" />
								<Parallel successMode="Any" failureMode="Any">
									<EntityContextBarrier context="carts_onCartStopPoint" target="$masterWagon" Negation="false" RunLogic="KeepRunning">
										<Success />
									</EntityContextBarrier>
									<While doFail="false" propagateChildFail="false" condition="true">
										<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$chatInfo" senderInfo="" inbox="&apos;carts_initiateChat&apos;" condition="" answerVar="">
											<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
												<Child canSkip="1">
													<Sequence>
														<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;nonQuestDialogEnabled&apos;" />
														<ReinitVariable variable="$cartUsers" />
														<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;carts_activeUser&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<LinkDataFilter tag="&apos;carts_activeUser&apos;" condition="$__link_carts_activeUser.type == $enum:cartUserType.passenger" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																<Child0 canSkip="1">
																	<WUIDFilter WUID="$__player" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																</Child0>
															</NegationOp>
															<Nodalyzer Quantifiers="ForAll" Parent="" Child="$cartUsers" saveVersion="2" />
														</GraphSearch>
														<IfCondition failOnCondition="false" condition="$chatInfo.includesPlayer">
															<PushToArray array="$cartUsers" value="$__player" direction="Back" />
														</IfCondition>
														<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkDataFilter tag="&apos;carts_activeUser&apos;" condition="$__link_carts_activeUser.type == $enum:cartUserType.driver" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<Nodalyzer Quantifiers="Exists" Parent="" Child="$driver" saveVersion="2" />
														</GraphSearch>
														<PushToArray array="$cartUsers" value="$driver" direction="Front" />
														<Expression expressions="$chatLockCount = #cartUsers - 1" />
														<Function_speech_schedulerPolylog_receiver aliasOrMetarole="$chatInfo.alias" initiator="$driver" numberOfParticipants="$chatLockCount" useIngameDialogPoseAndAnimations="false" nodeLabel="76326729" />
													</Sequence>
												</Child>
												<OnFail canSkip="1">
													<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;nonQuestDialogEnabled&apos;" />
												</OnFail>
											</FuseBox>
										</ProcessMessage>
									</While>
									<IfElseCondition failOnCondition="false" condition="$isQuestCart" saveVersion="2">
										<Then canSkip="1">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</Then>
										<Else canSkip="1">
											<While doFail="false" propagateChildFail="false" condition="true">
												<DetailBehaviorBarrier RunLogic="KeepRunning">
													<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nonQuestDialogEnabled&apos;" RunLogic="Halt">
														<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;nonQuestDialog&apos;">
															<Sequence>
																<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
																<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																	<LinkTagFilter tag="&apos;carts_activeUser&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																	<LinkDataFilter tag="&apos;carts_activeUser&apos;" condition="$__link_carts_activeUser.type == $enum:cartUserType.passenger" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																	<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																		<Child0 canSkip="1">
																			<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																		</Child0>
																	</NegationOp>
																	<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																		<Child0 canSkip="1">
																			<WUIDFilter WUID="$__player" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																		</Child0>
																	</NegationOp>
																	<Nodalyzer Quantifiers="ForAll" Parent="" Child="$cartUsers" saveVersion="2" />
																</GraphSearch>
																<IfCondition failOnCondition="false" condition="#cartUsers &gt; 0">
																	<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="&apos;GOSSIP&apos;" preset="$enum:dialogPreset.ingame" recipient="$cartUsers[0]" recipientMetaroles="&apos;GOSSIP&apos;" nodeLabel="55174337" />
																</IfCondition>
																<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
														</Semaphore>
													</ExternalLock>
												</DetailBehaviorBarrier>
											</While>
										</Else>
									</IfElseCondition>
								</Parallel>
							</Sequence>
						</EntityContext>
					</CartStanceElement>
				</AddLinkElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="resultNotification">
			<Variables>
				<Variable name="cartUsers" comment="" />
				<Variable name="chatInfo" comment="" />
				<Variable name="chatLockCount" comment="" />
				<Variable name="driver" comment="" />
				<Variable name="isQuestCart" comment="" />
				<Variable name="masterWagon" comment="" />
				<Variable name="seated_soul" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-270" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_cart_getMasterWagon hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_cart_getMasterWagon>
						<ExecuteLua hasInputBreakpoint="0" comment="find which type of cart are we" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
					</Sequence>
				</OnInit>
				<Behavior>
					<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<SendAIConceptSignal_carts_onNpcSeated hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SendAIConceptSignal_carts_onNpcSeated>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</EntityContextBarrier>
										<While hasInputBreakpoint="0" comment="Handle quest chatting from driver. There is no need to save/load proof" breakpointFlags="0">
											<OutputBreakpoints />
											<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Child>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetExternalLock>
															<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ReinitVariable>
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
																<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkDataFilter>
																<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Child0>
																		<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</WUIDFilter>
																	</Child0>
																</NegationOp>
																<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																</Nodalyzer>
															</GraphSearch>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PushToArray>
															</IfCondition>
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkDataFilter>
																<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																</Nodalyzer>
															</GraphSearch>
															<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</PushToArray>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<Function_speech_schedulerPolylog_receiver hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerPolylog_receiver>
														</Sequence>
													</Child>
													<OnFail>
														<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SetExternalLock>
													</OnFail>
												</FuseBox>
											</ProcessMessage>
										</While>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Then>
											<Else>
												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<DetailBehaviorBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																	<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LinkTagFilter>
																		<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LinkDataFilter>
																		<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Child0>
																				<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</WUIDFilter>
																			</Child0>
																		</NegationOp>
																		<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Child0>
																				<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</WUIDFilter>
																			</Child0>
																		</NegationOp>
																		<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																		</Nodalyzer>
																	</GraphSearch>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_speech_dialogInitiator>
																	</IfCondition>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</Semaphore>
														</ExternalLock>
													</DetailBehaviorBarrier>
												</While>
											</Else>
										</IfElseCondition>
									</Parallel>
								</Sequence>
							</EntityContext>
						</CartStanceElement>
					</AddLinkElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_driver" is_function="0">
		<Variables>
			<Variable name="activeUserLinkData" type="carts:activeUser" values="type($enum:cartUserType.driver)" isPersistent="0" form="single" />
			<Variable name="cartType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="cartUsers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="currentQuestChatRequest" type="carts:questChatRequest" values="" isPersistent="1" form="single" />
			<Variable name="forcePlayerDismountArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isQuestCart" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="masterWagon" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="playerBoardRequest" type="carts:signal:onPlayerBoardRequest" values="" isPersistent="0" form="single" />
			<Variable name="questChatRequest" type="carts:questChatRequest" values="" isPersistent="0" form="single" />
			<Variable name="seated_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
			<Variable name="user" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="includesPlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<ExecuteLua code="local e = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;data.cartType = e:GetCartType() &#10;data.isQuestCart = e:GetIsQuestCart()" />
					<Function_cart_getMasterWagon this="$__object.id" master="$masterWagon" nodeLabel="51952513" />
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;carts_forcePlayerDismount&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="Exists" Parent="" Child="$forcePlayerDismountArea" saveVersion="2" />
					</GraphSearch>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<AddLinkElement from="$__object.id" to="$this.id" tag="&apos;carts_activeUser&apos;" data="$activeUserLinkData" enabled="true">
					<CartStanceElement smartObject="$__object.id" cartslot="driver" enabled="true">
						<EntityContext context="disableDogActions" target="">
							<EntityContext context="speech_greyOutE" target="$this.id">
								<Sequence>
									<WaitAction />
									<Expression expressions="$seated_soul.value = $this.id" />
									<SendAIConceptSignal_carts_onNpcSeated cart="$__object.id" NPC="$seated_soul" />
									<Parallel successMode="Any" failureMode="Any">
										<While doFail="false" propagateChildFail="false" condition="true">
											<StanceBarrier soul="$__player" stance="cart" smartObject="$__object.id" negate="false" failOnCondition="false" RunLogic="KeepRunning">
												<StanceBarrier soul="$__player" stance="cart" smartObject="$__object.id" negate="true" failOnCondition="false" RunLogic="KeepRunning">
													<SuppressFailure>
														<Function_speech_dialogInitiator alias="&apos;vozyAKaravany_vystupovaniZVozu&apos;" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="25330821" />
													</SuppressFailure>
												</StanceBarrier>
											</StanceBarrier>
										</While>
										<EntityContextBarrier context="carts_onCartStopPoint" target="$masterWagon" Negation="false" RunLogic="KeepRunning">
											<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;carts_driverCurrentlyTalking&apos;">
												<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;VOZY_A_KARAVANY_VOZKA_UKONCENI_JIZDY&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="59380766" />
											</Semaphore>
										</EntityContextBarrier>
										<While doFail="false" propagateChildFail="false" condition="true">
											<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$playerBoardRequest" senderInfo="" inbox="&apos;carts_playerBoardRequest&apos;" condition="" answerVar="">
												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
													<Child canSkip="1">
														<Sequence>
															<AddLink From="$__player" To="$__object.id" Tag="&apos;carts_enablePlayerSeat&apos;" Data="" LinkOpHandleMode="Success" />
															<StanceBarrier soul="$__player" stance="cart" smartObject="$__object.id" negate="false" failOnCondition="false" RunLogic="KeepRunning">
																<Success />
															</StanceBarrier>
														</Sequence>
													</Child>
													<OnFail canSkip="1">
														<RemoveLink From="$__player" To="$__object.id" Tag="&apos;carts_enablePlayerSeat&apos;" LinkOpHandleMode="Success" />
													</OnFail>
												</FuseBox>
											</ProcessMessage>
										</While>
										<While doFail="false" propagateChildFail="false" condition="true">
											<EntityContextBarrier context="carts_cartIsMoving" target="$__object.id" Negation="false" RunLogic="Halt">
												<EntityContext context="carts_cartIsMoving" target="$this.id">
													<Sequence>
														<SuppressFailure>
															<InstantSemaphore SemaphoreCount="1" LockManagerType="Intellect" SemaphoreName="&apos;carts_driverCurrentlyTalking&apos;">
																<IfElseCondition failOnCondition="false" condition="$cartType == &apos;fourWheeled&apos;" saveVersion="2">
																	<Then canSkip="1">
																		<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;VOZY_A_KARAVANY_VOZKA_SEDICI_START&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="77876067" />
																	</Then>
																	<Else canSkip="1">
																		<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;VOZY_A_KARAVANY_VOZKA_STOJICI_START&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="20589522" />
																	</Else>
																</IfElseCondition>
															</InstantSemaphore>
														</SuppressFailure>
														<EntityContextCheck context="carts_allowOpenworldChatWithDriver" target="$this.id" saveVersion="2">
															<Then canSkip="1">
																<StanceCheck soul="$__player" stance="cart" smartObject="$__object.id" negate="false" failOnCondition="false" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
																			<SuppressFailure>
																				<Function_speech_dialogInitiator alias="&apos;vozyAKaravany_vozkaChatujeSJindrouZaJizdy&apos;" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="70728077" />
																			</SuppressFailure>
																		</Sequence>
																	</Then>
																	<Else canSkip="1">
																		<Success />
																	</Else>
																</StanceCheck>
															</Then>
															<Else canSkip="1">
																<Success />
															</Else>
														</EntityContextCheck>
														<While doFail="false" propagateChildFail="false" condition="true">
															<Sequence>
																<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="&apos;10s&apos;" />
																<InstantSemaphore SemaphoreCount="1" LockManagerType="Intellect" SemaphoreName="&apos;carts_driverCurrentlyTalking&apos;">
																	<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;VOZY_A_KARAVANY_VOZKA_POPOHANENI&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="98120698" />
																</InstantSemaphore>
															</Sequence>
														</While>
													</Sequence>
												</EntityContext>
											</EntityContextBarrier>
										</While>
										<While doFail="false" propagateChildFail="false" condition="true">
											<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;kickPlayerRequestMonolog&apos;" RunLogic="KeepRunning">
												<Sequence>
													<SuppressFailure>
														<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="&apos;VOZY_A_KARAVANY_VOZKA_VYHANI_HRACE&apos;" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="33578723" />
													</SuppressFailure>
													<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Sequence>
											</Synchronize>
										</While>
										<IfElseCondition failOnCondition="false" condition="$cartType == &apos;fourWheeled&apos;" saveVersion="2">
											<Then canSkip="1">
												<IfElseCondition failOnCondition="false" condition="$forcePlayerDismountArea == $__null" saveVersion="2">
													<Then canSkip="1">
														<EntityContext context="carts_driverAvailableForDialog" target="$this.id">
															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
														</EntityContext>
													</Then>
													<Else canSkip="1">
														<While doFail="false" propagateChildFail="false" condition="true">
															<AreaPresenceGate aiObjects="$this.id" area="$forcePlayerDismountArea" amount="AtLeastOne" presence="NotThere" RunLogic="Halt">
																<EntityContext context="carts_driverAvailableForDialog" target="$this.id">
																	<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																</EntityContext>
															</AreaPresenceGate>
														</While>
													</Else>
												</IfElseCondition>
											</Then>
											<Else canSkip="1">
												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
											</Else>
										</IfElseCondition>
										<EntityContext context="crime_ignorePlayersSounds" target="$this.id">
											<While doFail="false" propagateChildFail="false" condition="true">
												<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$questChatRequest" senderInfo="" inbox="&apos;carts_questChatRequest&apos;" condition="" answerVar="">
													<IfElseCondition failOnCondition="false" condition="$currentQuestChatRequest.alias == &apos;&apos;" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$currentQuestChatRequest = $questChatRequest" />
														</Then>
														<Else canSkip="1">
															<ErrorNode Message="&apos;Cart driver $this.id receiving questChatRequest but there is already one requested with alias $currentQuestChatRequest.alias&apos;" />
														</Else>
													</IfElseCondition>
												</ProcessMessage>
											</While>
										</EntityContext>
										<While doFail="false" propagateChildFail="false" condition="true">
											<IfGate atomic="false" condition="$currentQuestChatRequest.alias ~= &apos;&apos;" RunLogic="Halt">
												<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;carts_driverCurrentlyTalking&apos;">
													<Sequence>
														<ReinitVariable variable="$cartUsers" />
														<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;carts_activeUser&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<LinkDataFilter tag="&apos;carts_activeUser&apos;" condition="$__link_carts_activeUser.type == $enum:cartUserType.passenger" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																<Child0 canSkip="1">
																	<WUIDFilter WUID="$__player" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																</Child0>
															</NegationOp>
															<Nodalyzer Quantifiers="ForAll" Parent="" Child="$cartUsers" saveVersion="2" />
														</GraphSearch>
														<ForEach startIndex="0" step="1" array="$cartUsers" iterator="" value="$user" break="">
															<InstantSendMessageToNPC target="$user" type="&apos;carts:chatInfo&apos;" values="alias($currentQuestChatRequest.alias),includesPlayer($includesPlayer)" />
														</ForEach>
														<IfCondition failOnCondition="false" condition="$includesPlayer">
															<PushToArray array="$cartUsers" value="$__player" direction="Back" />
														</IfCondition>
														<PushToArray array="$cartUsers" value="$this.id" direction="Front" />
														<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
															<Child canSkip="1">
																<Function_speech_schedulerPolylog_initiator alias="$currentQuestChatRequest.alias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" areaForPlayer="" context="" customParameters="" metarole="" participants="$cartUsers" participantsMetaroles="" preset="$enum:dialogPreset.chat" nodeLabel="55176412" />
															</Child>
															<OnSuccess canSkip="1">
																<Sequence>
																	<ReinitVariable variable="$currentQuestChatRequest" />
																	<Callback_empty EventName="&apos;Success&apos;" />
																</Sequence>
															</OnSuccess>
															<OnFail canSkip="1">
																<Sequence>
																	<ReinitVariable variable="$currentQuestChatRequest" />
																	<Callback_empty EventName="&apos;Fail&apos;" />
																</Sequence>
															</OnFail>
														</FuseBox>
													</Sequence>
												</Semaphore>
											</IfGate>
										</While>
									</Parallel>
								</Sequence>
							</EntityContext>
						</EntityContext>
					</CartStanceElement>
				</AddLinkElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="carts_rideOnCart" EventSet="resultNotification">
			<Variables>
				<Variable name="activeUserLinkData" comment="" />
				<Variable name="cartType" comment="" />
				<Variable name="cartUsers" comment="" />
				<Variable name="currentQuestChatRequest" comment="" />
				<Variable name="forcePlayerDismountArea" comment="" />
				<Variable name="isQuestCart" comment="" />
				<Variable name="masterWagon" comment="" />
				<Variable name="playerBoardRequest" comment="" />
				<Variable name="questChatRequest" comment="" />
				<Variable name="seated_soul" comment="" />
				<Variable name="user" comment="" />
				<Variable name="includesPlayer" comment="" />
				<Variable name="participants" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="70" editorPosY="320" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="find which type of cart are we" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Function_cart_getMasterWagon hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_cart_getMasterWagon>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
					</Sequence>
				</OnInit>
				<Behavior>
					<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<SendAIConceptSignal_carts_onNpcSeated hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SendAIConceptSignal_carts_onNpcSeated>
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_dialogInitiator>
														</SuppressFailure>
													</StanceBarrier>
												</StanceBarrier>
											</While>
											<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_schedulerMonolog>
												</Semaphore>
											</EntityContextBarrier>
											<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddLink>
																<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</StanceBarrier>
															</Sequence>
														</Child>
														<OnFail>
															<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RemoveLink>
														</OnFail>
													</FuseBox>
												</ProcessMessage>
											</While>
											<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_speech_schedulerMonolog>
																		</Then>
																		<Else>
																			<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_speech_schedulerMonolog>
																		</Else>
																	</IfElseCondition>
																</InstantSemaphore>
															</SuppressFailure>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<StanceCheck hasInputBreakpoint="0" comment="player cannot jump from moving cart. We can have only check (without barrier) and if player will want to leave cart, cartIsMoving context will halt us" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_speech_dialogInitiator>
																				</SuppressFailure>
																			</Sequence>
																		</Then>
																		<Else>
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</Else>
																	</StanceCheck>
																</Then>
																<Else>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Else>
															</EntityContextCheck>
															<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																	<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_speech_schedulerMonolog>
																	</InstantSemaphore>
																</Sequence>
															</While>
														</Sequence>
													</EntityContext>
												</EntityContextBarrier>
											</While>
											<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_dialogInitiator>
														</SuppressFailure>
														<Wait hasInputBreakpoint="0" comment="timeout" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</Synchronize>
											</While>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
															</EntityContext>
														</Then>
														<Else>
															<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																	</EntityContext>
																</AreaPresenceGate>
															</While>
														</Else>
													</IfElseCondition>
												</Then>
												<Else>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Else>
											</IfElseCondition>
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
															<Else>
																<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</ErrorNode>
															</Else>
														</IfElseCondition>
													</ProcessMessage>
												</While>
											</EntityContext>
											<While hasInputBreakpoint="0" comment="Handle quest chatting" breakpointFlags="0">
												<OutputBreakpoints />
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ReinitVariable>
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
																<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkDataFilter>
																<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Child0>
																		<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</WUIDFilter>
																	</Child0>
																</NegationOp>
																<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																</Nodalyzer>
															</GraphSearch>
															<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantSendMessageToNPC>
															</ForEach>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PushToArray>
															</IfCondition>
															<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</PushToArray>
															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Child>
																	<Function_speech_schedulerPolylog_initiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_speech_schedulerPolylog_initiator>
																</Child>
																<OnSuccess>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ReinitVariable>
																		<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Callback_empty>
																	</Sequence>
																</OnSuccess>
																<OnFail>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ReinitVariable>
																		<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Callback_empty>
																	</Sequence>
																</OnFail>
															</FuseBox>
														</Sequence>
													</Semaphore>
												</IfGate>
											</While>
										</Parallel>
									</Sequence>
								</EntityContext>
							</EntityContext>
						</CartStanceElement>
					</AddLinkElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_syncLogic" is_function="1">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Parallel successMode="Any" failureMode="Any">
						<Synchronize SemaphoreCount="4" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;cart_ready_to_go&apos;" RunLogic="Halt">
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Synchronize>
						<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;cart_availableForOnCartDialog&apos;" RunLogic="Halt">
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Synchronize>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Synchronize hasInputBreakpoint="0" comment="sync cart, driver and horses" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Synchronize>
							<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Synchronize>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_horse" is_function="0">
		<Variables>
			<Variable name="activeUserLinkData" type="carts:activeUser" values="type($enum:cartUserType.horse)" isPersistent="0" form="single" />
			<Variable name="wasInspectable" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="wasMountable" type="_bool" values="" isPersistent="1" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<LuaWrapper onEnter="local e = XGenAIModule.GetEntityByWUID(data.this.id) &#10;data.wasInspectable = e:GetInspectableByPlayer() &#10;data.wasMountable = e:GetMountableByPlayer() &#10;e:SetMountableByPlayer(false) &#10;e:SetInspectableByPlayer(false)" onExit="local e = XGenAIModule.GetEntityByWUID(data.this.id) &#10;e:SetMountableByPlayer(data.wasMountable) &#10;e:SetInspectableByPlayer(data.wasInspectable)">
					<AddLinkElement from="$__object.id" to="$this.id" tag="&apos;carts_activeUser&apos;" data="$activeUserLinkData">
						<CartStanceElement smartObject="$__object.id" cartslot="any">
							<Sequence>
								<WaitAction />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</CartStanceElement>
					</AddLinkElement>
				</LuaWrapper>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="activeUserLinkData" comment="" />
				<Variable name="wasInspectable" comment="" />
				<Variable name="wasMountable" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-190" editorPosY="180" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<LuaWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CartStanceElement>
						</AddLinkElement>
					</LuaWrapper>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_horseRightt" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<CartStanceElement smartObject="$__object.id" cartslot="any">
					<Function_cart_syncLogic nodeLabel="13257869" />
				</CartStanceElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_cart_syncLogic hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_cart_syncLogic>
					</CartStanceElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_tmp" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Success />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="zakopanyZitrek_hanka" EventSet="zakopanyZitrek_hanka">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Success>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_tmp2" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Success />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="zakopanyZitrek_hanka" EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Success>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_accompany" is_function="0">
		<Variables>
			<Variable name="chatInfo" type="carts:chatInfo" values="" isPersistent="0" form="single" />
			<Variable name="horse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="masterWagon" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Function_cart_getMasterWagon this="$__object.id" master="$masterWagon" nodeLabel="54479103" />
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkDataFilter tag="&apos;useHorse&apos;" condition="$__link_useHorse==&apos;cart&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<EntityClassFilter Class="NHNPC" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<IsHorseAvailableFilter reservationHolder="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<Nodalyzer Quantifiers="Exists" Parent="" Child="$horse" saveVersion="2" />
					</GraphSearch>
					<Parallel successMode="Any" failureMode="Any">
						<EntityContextBarrier context="carts_onCartStopPoint" target="$masterWagon" Negation="false" RunLogic="KeepRunning">
							<Success />
						</EntityContextBarrier>
						<IfElseCondition failOnCondition="false" condition="$horse ~= $__null" saveVersion="2">
							<Then canSkip="1">
								<StanceElement smartObject="$horse" stance="horse" allowAny="false">
									<Sequence>
										<WaitAction />
										<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;cart_formationMovement&apos;" nodeLabel="66290189" />
									</Sequence>
								</StanceElement>
							</Then>
							<Else canSkip="1">
								<IncludeTree File="&apos;carts/carts.xml&apos;" Name="&apos;cart_formationMovement&apos;" nodeLabel="27736642" />
							</Else>
						</IfElseCondition>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="chatInfo" comment="" />
				<Variable name="horse" comment="" />
				<Variable name="masterWagon" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Function_cart_getMasterWagon hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Function_cart_getMasterWagon>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkDataFilter>
							<EntityClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</EntityClassFilter>
							<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SoulIsAliveFilter>
							<IsHorseAvailableFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</IsHorseAvailableFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</EntityContextBarrier>
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</IncludeTree>
										</Sequence>
									</StanceElement>
								</Then>
								<Else>
									<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</IncludeTree>
								</Else>
							</IfElseCondition>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_formationMovement" is_function="0">
		<Variables>
			<Variable name="formationSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
			<Variable name="formationWUID" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<While doFail="false" propagateChildFail="false" condition="true">
						<Sequence>
							<GetMemberFormation MemberWUID="$__object.id" FormationHandleOut="$formationWUID" />
							<IfElseCondition failOnCondition="false" condition="$formationWUID==$__null" saveVersion="2">
								<Then canSkip="1">
									<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
								</Then>
								<Else canSkip="1">
									<FormationFollower FormationHandle="$formationWUID" PreferredPositions="" FormationMode="KeepDistance" AllowRelocation="false" />
								</Else>
							</IfElseCondition>
						</Sequence>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<IsInSweetSpotRange WaitForFollowStart="true" RunLogic="KeepRunning">
							<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<AddLink From="$__object.id" To="$this.id" Tag="&apos;carts_activeUser&apos;" Data="" LinkOpHandleMode="Success" />
										<Expression expressions="$formationSpeed = $enum:movementSpeed.run" />
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
									</Sequence>
								</Child>
								<OnFail canSkip="1">
									<RemoveLink From="$__object.id" To="$this.id" Tag="&apos;carts_activeUser&apos;" LinkOpHandleMode="Success" />
								</OnFail>
							</FuseBox>
						</IsInSweetSpotRange>
					</While>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="formationSpeed" comment="" />
				<Variable name="formationWUID" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetMemberFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetMemberFormation>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Then>
									<Else>
										<FormationFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</FormationFollower>
									</Else>
								</IfElseCondition>
							</Sequence>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IsInSweetSpotRange hasInputBreakpoint="0" comment="until Horse is fixed with this node, we will not use it" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</Child>
									<OnFail>
										<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</RemoveLink>
									</OnFail>
								</FuseBox>
							</IsInSweetSpotRange>
						</While>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_placeholder" is_function="1">
		<Variables>
			<Variable name="placeholderTagpoint" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="current_stop" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<GraphSearch Origin="$current_stop" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;placeholder&apos;" prune="true" negprune="unknown" Parent="" Child="$placeholderTagpoint" Data="" />
					</GraphSearch>
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$placeholderTagpoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="placeholderTagpoint" comment="" />
				<Variable name="current_stop" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_handleQuestChat" is_function="1">
		<Variables>
			<Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="lockCount" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="npc" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="npcs" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$lockCount = #npcs - 1" />
					<For startIndex="0" endIndex="-1" step="1" array="$npcs" iterator="$index" value="$npc" break="$break">
						<IfCondition failOnCondition="false" condition="$this.id == $npc">
							<Expression expressions="$break = true" />
						</IfCondition>
					</For>
					<IfElseCondition failOnCondition="false" condition="$index==0" saveVersion="2">
						<Then canSkip="1">
							<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
								<Child canSkip="1">
									<Function_speech_schedulerPolylog_initiator alias="$alias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" participants="$npcs" participantsMetaroles="" preset="$enum:dialogPreset.chat" nodeLabel="67708661" />
								</Child>
								<OnSuccess canSkip="1">
									<Callback_empty EventName="&apos;Success&apos;" />
								</OnSuccess>
								<OnFail canSkip="1">
									<Callback_empty EventName="&apos;Fail&apos;" />
								</OnFail>
							</FuseBox>
						</Then>
						<Else canSkip="1">
							<Function_speech_schedulerPolylog_receiver aliasOrMetarole="$alias" initiator="$npcs[0]" numberOfParticipants="$lockCount" nodeLabel="13534725" />
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="resultNotification">
			<Variables>
				<Variable name="break" comment="" />
				<Variable name="index" comment="" />
				<Variable name="lockCount" comment="" />
				<Variable name="npc" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="npcs" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
						</For>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Function_speech_schedulerPolylog_initiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerPolylog_initiator>
									</Child>
									<OnSuccess>
										<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Callback_empty>
									</OnSuccess>
									<OnFail>
										<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Callback_empty>
									</OnFail>
								</FuseBox>
							</Then>
							<Else>
								<Function_speech_schedulerPolylog_receiver hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_schedulerPolylog_receiver>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_usePlayerFront" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<LuaWrapper onEnter="player.player:OnEnterInteractive()" onExit="player.player:OnEndInteractive()">
					<CartStanceElement smartObject="$__object.id" cartslot="playerFront">
						<Sequence>
							<WaitAction />
							<Callback_empty EventName="&apos;OnFinished&apos;" />
						</Sequence>
					</CartStanceElement>
				</LuaWrapper>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="endNotification">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<LuaWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Sequence>
						</CartStanceElement>
					</LuaWrapper>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_usePlayerBack" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<LuaWrapper onEnter="player.player:OnEnterInteractive()" onExit="player.player:OnEndInteractive()">
					<CartStanceElement smartObject="$__object.id" cartslot="playerBack">
						<Sequence>
							<WaitAction />
							<Callback_empty EventName="&apos;OnFinished&apos;" />
						</Sequence>
					</CartStanceElement>
				</LuaWrapper>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="endNotification">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<LuaWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Sequence>
						</CartStanceElement>
					</LuaWrapper>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_passenger_LF" is_function="0">
		<Variables>
			<Variable name="chatInfo" type="carts:chatInfo" values="" isPersistent="0" form="single" />
			<Variable name="currentStopWrapper" type="carts:movetoDestination" values="" isPersistent="0" form="single" />
			<Variable name="current_stop" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="phase" type="_int" values="" isPersistent="1" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$phase &lt; 100">
						<Sequence>
							<CartStanceElement smartObject="$__object.id" cartslot="leftFront">
								<Sequence>
									<WaitAction />
									<Semaphore SemaphoreCount="999" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;cart_sitting_passengers&apos;">
										<Parallel successMode="Any" failureMode="Any">
											<Sequence>
												<InstantSendMessageToNPC target="$__object.id" type="&apos;carts:npcHoppedOnNotification&apos;" values="data($this.id)" />
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$currentStopWrapper" senderInfo="" inbox="&apos;carts_currentStop&apos;" condition="" answerVar="">
													<Expression expressions="$current_stop = $currentStopWrapper.data" />
												</ProcessMessage>
											</Sequence>
											<While doFail="false" propagateChildFail="false" condition="true">
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$chatInfo" senderInfo="" inbox="&apos;carts_initiateChat&apos;" condition="" answerVar="">
													<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;questChattingOnCart&apos;" RunLogic="KeepRunning">
														<Sequence>
															<Expression expressions="$participants[0] = $chatInfo.participant_0 &#10;$participants[1] = $chatInfo.participant_1 &#10;$participants[2] = $chatInfo.participant_2 &#10;$participants[3] = $chatInfo.participant_3 &#10;$participants[4] = $chatInfo.participant_4" />
															<SuppressFailure>
																<Function_cart_handleQuestChat alias="$chatInfo.alias" npcs="$participants" nodeLabel="58919771" />
															</SuppressFailure>
														</Sequence>
													</ExternalLock>
												</ProcessMessage>
											</While>
										</Parallel>
									</Semaphore>
								</Sequence>
							</CartStanceElement>
							<Expression expressions="$phase = 100" />
						</Sequence>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$phase &lt; 200">
						<Sequence>
							<Function_cart_placeholder current_stop="$current_stop" nodeLabel="88776873" />
							<Expression expressions="$phase = 0" />
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="resultNotification">
			<Variables>
				<Variable name="chatInfo" comment="" />
				<Variable name="currentStopWrapper" comment="" />
				<Variable name="current_stop" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="phase" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-270" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="Let the cart know we hopped on" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantSendMessageToNPC>
													<ProcessMessage hasInputBreakpoint="0" comment="Wait for a signal to get off" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</ProcessMessage>
												</Sequence>
												<While hasInputBreakpoint="0" comment="Handle quest chatting" breakpointFlags="0">
													<OutputBreakpoints />
													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_cart_handleQuestChat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_cart_handleQuestChat>
																</SuppressFailure>
															</Sequence>
														</ExternalLock>
													</ProcessMessage>
												</While>
											</Parallel>
										</Semaphore>
									</Sequence>
								</CartStanceElement>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_cart_placeholder hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_cart_placeholder>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_passenger_RF" is_function="0">
		<Variables>
			<Variable name="chatInfo" type="carts:chatInfo" values="" isPersistent="0" form="single" />
			<Variable name="currentStopWrapper" type="carts:movetoDestination" values="" isPersistent="0" form="single" />
			<Variable name="current_stop" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="phase" type="_int" values="" isPersistent="1" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$phase &lt; 100">
						<Sequence>
							<CartStanceElement smartObject="$__object.id" cartslot="rightFront">
								<Sequence>
									<WaitAction />
									<Semaphore SemaphoreCount="999" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;cart_sitting_passengers&apos;">
										<Parallel successMode="Any" failureMode="Any">
											<Sequence>
												<InstantSendMessageToNPC target="$__object.id" type="&apos;carts:npcHoppedOnNotification&apos;" values="data($this.id)" />
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$currentStopWrapper" senderInfo="" inbox="&apos;carts_currentStop&apos;" condition="" answerVar="">
													<Expression expressions="$current_stop = $currentStopWrapper.data" />
												</ProcessMessage>
											</Sequence>
											<While doFail="false" propagateChildFail="false" condition="true">
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$chatInfo" senderInfo="" inbox="&apos;carts_initiateChat&apos;" condition="" answerVar="">
													<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;questChattingOnCart&apos;" RunLogic="KeepRunning">
														<Sequence>
															<Expression expressions="$participants[0] = $chatInfo.participant_0 &#10;$participants[1] = $chatInfo.participant_1 &#10;$participants[2] = $chatInfo.participant_2 &#10;$participants[3] = $chatInfo.participant_3 &#10;$participants[4] = $chatInfo.participant_4" />
															<SuppressFailure>
																<Function_cart_handleQuestChat alias="$chatInfo.alias" npcs="$participants" nodeLabel="58919771" />
															</SuppressFailure>
														</Sequence>
													</ExternalLock>
												</ProcessMessage>
											</While>
										</Parallel>
									</Semaphore>
								</Sequence>
							</CartStanceElement>
							<Expression expressions="$phase = 100" />
						</Sequence>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$phase &lt; 200">
						<Sequence>
							<Function_cart_placeholder current_stop="$current_stop" nodeLabel="88776873" />
							<Expression expressions="$phase = 0" />
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="resultNotification">
			<Variables>
				<Variable name="chatInfo" comment="" />
				<Variable name="currentStopWrapper" comment="" />
				<Variable name="current_stop" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="phase" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-270" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="Let the cart know we hopped on" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantSendMessageToNPC>
													<ProcessMessage hasInputBreakpoint="0" comment="Wait for a signal to get off" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</ProcessMessage>
												</Sequence>
												<While hasInputBreakpoint="0" comment="Handle quest chatting" breakpointFlags="0">
													<OutputBreakpoints />
													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_cart_handleQuestChat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_cart_handleQuestChat>
																</SuppressFailure>
															</Sequence>
														</ExternalLock>
													</ProcessMessage>
												</While>
											</Parallel>
										</Semaphore>
									</Sequence>
								</CartStanceElement>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_cart_placeholder hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_cart_placeholder>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_passenger_LB" is_function="0">
		<Variables>
			<Variable name="chatInfo" type="carts:chatInfo" values="" isPersistent="0" form="single" />
			<Variable name="currentStopWrapper" type="carts:movetoDestination" values="" isPersistent="0" form="single" />
			<Variable name="current_stop" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="phase" type="_int" values="" isPersistent="1" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$phase &lt; 100">
						<Sequence>
							<CartStanceElement smartObject="$__object.id" cartslot="leftBack">
								<Sequence>
									<WaitAction />
									<Semaphore SemaphoreCount="999" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;cart_sitting_passengers&apos;">
										<Parallel successMode="Any" failureMode="Any">
											<Sequence>
												<InstantSendMessageToNPC target="$__object.id" type="&apos;carts:npcHoppedOnNotification&apos;" values="data($this.id)" />
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$currentStopWrapper" senderInfo="" inbox="&apos;carts_currentStop&apos;" condition="" answerVar="">
													<Expression expressions="$current_stop = $currentStopWrapper.data" />
												</ProcessMessage>
											</Sequence>
											<While doFail="false" propagateChildFail="false" condition="true">
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$chatInfo" senderInfo="" inbox="&apos;carts_initiateChat&apos;" condition="" answerVar="">
													<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;questChattingOnCart&apos;" RunLogic="KeepRunning">
														<Sequence>
															<Expression expressions="$participants[0] = $chatInfo.participant_0 &#10;$participants[1] = $chatInfo.participant_1 &#10;$participants[2] = $chatInfo.participant_2 &#10;$participants[3] = $chatInfo.participant_3 &#10;$participants[4] = $chatInfo.participant_4" />
															<SuppressFailure>
																<Function_cart_handleQuestChat alias="$chatInfo.alias" npcs="$participants" nodeLabel="58919771" />
															</SuppressFailure>
														</Sequence>
													</ExternalLock>
												</ProcessMessage>
											</While>
										</Parallel>
									</Semaphore>
								</Sequence>
							</CartStanceElement>
							<Expression expressions="$phase = 100" />
						</Sequence>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$phase &lt; 200">
						<Sequence>
							<Function_cart_placeholder current_stop="$current_stop" nodeLabel="88776873" />
							<Expression expressions="$phase = 0" />
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="resultNotification">
			<Variables>
				<Variable name="chatInfo" comment="" />
				<Variable name="currentStopWrapper" comment="" />
				<Variable name="current_stop" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="phase" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-270" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CartStanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="Let the cart know we hopped on" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantSendMessageToNPC>
													<ProcessMessage hasInputBreakpoint="0" comment="Wait for a signal to get off" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</ProcessMessage>
												</Sequence>
												<While hasInputBreakpoint="0" comment="Handle quest chatting" breakpointFlags="0">
													<OutputBreakpoints />
													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_cart_handleQuestChat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_cart_handleQuestChat>
																</SuppressFailure>
															</Sequence>
														</ExternalLock>
													</ProcessMessage>
												</While>
											</Parallel>
										</Semaphore>
									</Sequence>
								</CartStanceElement>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_cart_placeholder hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_cart_placeholder>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_normalSpeed" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_fastSpeed" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_instantSpeed" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onCartCodeMessage_autotest" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$inTestMode">
						<Sequence>
							<SmartObjSetBehaviorState behaviors="&apos;cartTest_instantSpeed&apos;" state="Disabled" />
							<SmartObjSetBehaviorState behaviors="&apos;cartTest_fastSpeed&apos;" state="Disabled" />
							<SmartObjSetBehaviorState behaviors="&apos;cartTest_normalSpeed&apos;" state="Disabled" />
							<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartMount&apos;" state="Disabled" />
							<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartDismount&apos;" state="Disabled" />
							<Expression expressions="$inTestMode = false" />
						</Sequence>
					</IfCondition>
					<Switch>
						<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;StartTest_CartMount_Normal&apos;">
							<Sequence>
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_normalSpeed&apos;" state="Enabled" />
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartMount&apos;" state="Enabled" />
								<Expression expressions="$inTestMode = true" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;StartTest_CartMount_Instant&apos;">
							<Sequence>
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_instantSpeed&apos;" state="Enabled" />
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartMount&apos;" state="Enabled" />
								<Expression expressions="$inTestMode = true" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;StartTest_CartDismount_Normal&apos;">
							<Sequence>
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_normalSpeed&apos;" state="Enabled" />
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartDismount&apos;" state="Enabled" />
								<Expression expressions="$inTestMode = true" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;StartTest_CartDismount_Instant&apos;">
							<Sequence>
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_instantSpeed&apos;" state="Enabled" />
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartDismount&apos;" state="Enabled" />
								<Expression expressions="$inTestMode = true" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;StartTest_CartDismount_Fast&apos;">
							<Sequence>
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_fastSpeed&apos;" state="Enabled" />
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartDismount&apos;" state="Enabled" />
								<Expression expressions="$inTestMode = true" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$cartCodeMessage.type == &apos;StartTest_CartMoveTo&apos;">
							<Sequence>
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_instantSpeed&apos;" state="Enabled" />
								<SmartObjSetBehaviorState behaviors="&apos;cartTest_cartMount&apos;" state="Enabled" />
								<Expression expressions="$autotestCartMoving = true, &#10;$inTestMode = true" />
							</Sequence>
						</IfCondition>
						<DefaultBranch>
							<LogToConsole LogLevel="Error" Message="&apos;CartNotification: an unknown cart code message type:[ $cartCodeMessage.type ]. Contact MAntos.&apos;" />
						</DefaultBranch>
					</Switch>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SmartObjSetBehaviorState>
								<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SmartObjSetBehaviorState>
								<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SmartObjSetBehaviorState>
								<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SmartObjSetBehaviorState>
								<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SmartObjSetBehaviorState>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="CartMount_Normal" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="CartMount_Instant" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="CartDismount_Normal" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="CartDismount_Instant" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="CartDismount_Fast" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="StartTest_CartMoveTo" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<DefaultBranch>
								<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LogToConsole>
							</DefaultBranch>
						</Switch>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onCartInitialize" is_function="0">
		<Variables>
			<Variable name="initLocation" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<LoopUntil until="Success" attemptCount="0">
						<Selector>
							<Sequence>
								<GraphSearch Origin="" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;moveto,path&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;moveto&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									<Nodalyzer Quantifiers="Exists" Parent="" Child="$moveTo" saveVersion="2" />
								</GraphSearch>
								<Expression expressions="$initLocation = $moveTo" />
							</Sequence>
							<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="true" variation="" skipInLOD="false" />
						</Selector>
					</LoopUntil>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;start&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="Exists" Parent="" Child="$initLocation" saveVersion="2" />
					</GraphSearch>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;carts_forcePlayerDismount&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="Exists" Parent="" Child="$forcePlayerDismountArea" saveVersion="2" />
					</GraphSearch>
					<SendMessageToNPC target="$this.id" type="&apos;carts:urgentTeleportRequest&apos;" values="data($initLocation)" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="" />
					<Concatenation OutString="$wagonArrivedName" Pattern="&apos;cart_arrivedOnDestination_$this.id&apos;" />
					<Expression expressions="$isCartInitialized = true" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="initLocation" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LoopUntil hasInputBreakpoint="0" comment="waiting for moveTo link to appear. We can have this link static or dynamic by skald" breakpointFlags="0">
							<OutputBreakpoints />
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
										<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
										</Nodalyzer>
									</GraphSearch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Selector>
						</LoopUntil>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SendMessageToNPC>
						<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Concatenation>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitUntilCartReadyToMove" is_function="0">
		<Variables>
			<Variable name="activeUsers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="checkPlayerStance" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="driver" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<LoopUntil until="Success" attemptCount="0">
					<Selector>
						<Sequence>
							<Function_cart_getMasterWagon this="$this.id" master="$masterWagon" nodeLabel="34682195" />
							<ReinitVariable variable="$slaveWagons" />
							<GraphSearch Origin="$masterWagon" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;carts_wagonSlave&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								<Nodalyzer Quantifiers="ForAll" Parent="" Child="$slaveWagons" saveVersion="2" />
							</GraphSearch>
							<Concatenation OutString="$wagonMoveLockName" Pattern="&apos;cart_moveCartLock_$masterWagon&apos;" />
							<Concatenation OutString="$masterWagonArrivedName" Pattern="&apos;cart_arrivedOnDestination_$masterWagon&apos;" />
							<IfCondition failOnCondition="false" condition="$cartStopDestination == $__null">
								<LoopUntil until="Success" attemptCount="0">
									<Selector>
										<AtomicDecorator>
											<Sequence>
												<IfCondition failOnCondition="true" condition="!$cartBlockedBy_collision &amp; !$cartBlockedBy_player &amp; !$cartBlockedBy_npc">
													<Success />
												</IfCondition>
												<ReinitVariable variable="$cartUsers_linked" />
												<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;carts_userInverse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
													<Nodalyzer Quantifiers="ForAll" Parent="" Child="$cartUsers_linked" saveVersion="2" />
												</GraphSearch>
												<SuppressFailure>
													<Sequence>
														<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;carts_enablePlayerSeat&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
														</GraphSearch>
														<Expression expressions="$checkPlayerStance = true," />
													</Sequence>
												</SuppressFailure>
												<ReinitVariable variable="$activeUsers" />
												<ReinitVariable variable="$cartUsers_real" />
												<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkDataFilter tag="&apos;carts_activeUser&apos;" condition="$__link_carts_activeUser.type == $enum:cartUserType.driver" prune="true" negprune="unknown" Parent="" Child="" Data="" />
													<Nodalyzer Quantifiers="Exists" Parent="" Child="$driver" saveVersion="2" />
												</GraphSearch>
												<IfElseCondition failOnCondition="false" condition="$forcePlayerDismountArea == $__null" saveVersion="2">
													<Then canSkip="1">
														<IfCondition failOnCondition="false" condition="$checkPlayerStance">
															<StanceCheck soul="$__player" stance="cart" smartObject="$this.id" negate="false" failOnCondition="false" saveVersion="2">
																<Then canSkip="1">
																	<Success />
																</Then>
																<Else canSkip="1">
																	<Fail />
																</Else>
															</StanceCheck>
														</IfCondition>
													</Then>
													<Else canSkip="1">
														<IsInsideArea Origin="$driver" Area="$forcePlayerDismountArea" FailSubtMissing="false" saveVersion="2">
															<Then canSkip="1">
																<StanceCheck soul="$__player" stance="cart" smartObject="$this.id" negate="false" failOnCondition="false" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<InstantSynchronize SemaphoreCount="2" LockManagerType="Local" SemaphoreName="&apos;kickPlayerRequestMonolog&apos;" RunLogic="KeepRunning">
																				<Success />
																			</InstantSynchronize>
																			<Fail />
																		</Sequence>
																	</Then>
																	<Else canSkip="1">
																		<Success />
																	</Else>
																</StanceCheck>
															</Then>
															<Else canSkip="1">
																<IfCondition failOnCondition="false" condition="$checkPlayerStance">
																	<StanceCheck soul="$__player" stance="cart" smartObject="$this.id" negate="false" failOnCondition="false" saveVersion="2">
																		<Then canSkip="1">
																			<Success />
																		</Then>
																		<Else canSkip="1">
																			<Fail />
																		</Else>
																	</StanceCheck>
																</IfCondition>
															</Else>
														</IsInsideArea>
													</Else>
												</IfElseCondition>
												<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;carts_userInverse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
													<UnionOp Results="true" Advance="true" EndOp="true" ShortCircuit="false" LocalNodalyzers="false">
														<LinkTagFilter tag="&apos;carts_activeUser&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
														<IntersectionOp Results="true" Advance="true" EndOp="true" ShortCircuit="false" LocalNodalyzers="false">
															<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																<Child0 canSkip="1">
																	<EntityClassFilter Class="NHNPC" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																</Child0>
															</NegationOp>
															<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																<Child0 canSkip="1">
																	<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																</Child0>
															</NegationOp>
														</IntersectionOp>
													</UnionOp>
													<Nodalyzer Quantifiers="ForAll" Parent="" Child="$activeUsers" saveVersion="2" />
												</GraphSearch>
												<IfCondition failOnCondition="true" condition="#activeUsers == #cartUsers_linked">
													<Success />
												</IfCondition>
												<ReinitVariable variable="$cartUsers_real" />
												<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;carts_activeUser&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
													<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
													<Nodalyzer Quantifiers="ForAll" Parent="" Child="$cartUsers_real" saveVersion="2" />
												</GraphSearch>
												<EntityContextCheck context="carts_forceInitializationWait" target="$driver" saveVersion="2">
													<Then canSkip="1">
														<Fail />
													</Then>
												</EntityContextCheck>
												<SendAIConceptSignal_carts_onAllSeated cart="$this.id" />
											</Sequence>
										</AtomicDecorator>
										<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="true" variation="" />
									</Selector>
								</LoopUntil>
							</IfCondition>
						</Sequence>
						<Wait duration="&apos;250ms&apos;" timeType="GameTime" doFail="true" variation="" />
					</Selector>
				</LoopUntil>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="activeUsers" comment="" />
				<Variable name="checkPlayerStance" comment="" />
				<Variable name="driver" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_cart_getMasterWagon hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_cart_getMasterWagon>
								<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ReinitVariable>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
									<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
									</Nodalyzer>
								</GraphSearch>
								<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Concatenation>
								<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Concatenation>
								<IfCondition hasInputBreakpoint="0" comment="if we have stopDestination, we know for sure we dont want to waitToMove" breakpointFlags="0">
									<OutputBreakpoints />
									<LoopUntil hasInputBreakpoint="0" comment="we DONT want to use gates for this type of checks. Variables can change at any time so we want to check them all at once, not one by one" breakpointFlags="0">
										<OutputBreakpoints />
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AtomicDecorator hasInputBreakpoint="0" comment="we can use gates but then we would need to solve problem where one gate is &quot;succeed&quot;, other is waiting but then this &quot;succeed&quot; gate will turn into invalid (for example user will exit vehicle and player will enter vehicle and visa versa)" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfCondition>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
														<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
														</Nodalyzer>
													</GraphSearch>
													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
																<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</WUIDFilter>
															</GraphSearch>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
													</SuppressFailure>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<GraphSearch hasInputBreakpoint="0" comment="this check is maybe not good for ghost user?" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkDataFilter>
														<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
														</Nodalyzer>
													</GraphSearch>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</Then>
																	<Else>
																		<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Fail>
																	</Else>
																</StanceCheck>
															</IfCondition>
														</Then>
														<Else>
															<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</InstantSynchronize>
																				<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Fail>
																			</Sequence>
																		</Then>
																		<Else>
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</Else>
																	</StanceCheck>
																</Then>
																<Else>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Then>
																			<Else>
																				<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Fail>
																			</Else>
																		</StanceCheck>
																	</IfCondition>
																</Else>
															</IsInsideArea>
														</Else>
													</IfElseCondition>
													<GraphSearch hasInputBreakpoint="0" comment="get all users that either have activeUser link or they are dead (and not a horse)" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
														<UnionOp hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
															<IntersectionOp hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Child0>
																		<EntityClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</EntityClassFilter>
																	</Child0>
																</NegationOp>
																<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Child0>
																		<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</SoulIsAliveFilter>
																	</Child0>
																</NegationOp>
															</IntersectionOp>
														</UnionOp>
														<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
														</Nodalyzer>
													</GraphSearch>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfCondition>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<GraphSearch hasInputBreakpoint="0" comment="we can move, so we will gather users that we will check links against" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
														<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SoulIsAliveFilter>
														<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
														</Nodalyzer>
													</GraphSearch>
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Fail>
														</Then>
													</EntityContextCheck>
													<SendAIConceptSignal_carts_onAllSeated hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</SendAIConceptSignal_carts_onAllSeated>
												</Sequence>
											</AtomicDecorator>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Selector>
									</LoopUntil>
								</IfCondition>
							</Sequence>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Selector>
					</LoopUntil>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveCart" is_function="0">
		<Variables>
			<Variable name="destinationTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="wagonLockCount" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$wagonLockCount = #slaveWagons + 1, &#10;$destinationTarget = $moveTo" />
			</OnInit>
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$cartStopDestination == $__null">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<Sequence>
								<IfCondition failOnCondition="false" condition="$masterWagon == $this.id">
									<AddLink From="$this.id" To="$destinationTarget" Tag="&apos;carts_destinationTarget&apos;" Data="" LinkOpHandleMode="Success" />
								</IfCondition>
								<Parallel successMode="Any" failureMode="Any">
									<Synchronize SemaphoreCount="$wagonLockCount" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$wagonMoveLockName&apos;" RunLogic="Halt">
										<Sequence>
											<IfCondition failOnCondition="false" condition="$masterWagon ~= $this.id">
												<Sequence>
													<GraphSearch Origin="$masterWagon" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;carts_destinationTarget&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
														<Nodalyzer Quantifiers="Exists" Parent="" Child="$moveTo" saveVersion="2" />
													</GraphSearch>
													<Expression expressions="$destinationTarget = $moveTo" />
												</Sequence>
											</IfCondition>
											<Parallel successMode="Any" failureMode="Any">
												<Sequence>
													<DistanceCondition Origin="$this.id" ReferencePt="$destinationTarget" Low="5.000000" High="5.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
														<EntityContext context="carts_cartIsMoving" target="$this.id">
															<CartMove Target="$destinationTarget" Speed="normal" />
														</EntityContext>
													</DistanceCondition>
													<IfCondition failOnCondition="false" condition="$masterWagon == $this.id">
														<AtomicDecorator>
															<Sequence>
																<GetTime TimeType="WorldTime" OutVar="$cartStopDestinationTime" Delta="" />
																<Expression expressions="$cartStopDestination = $moveTo" />
																<SendAIConceptSignal_carts_arrivedToDestination cart="$this.id" dest="$destinationTarget" />
																<Selector>
																	<GraphSearch Origin="$destinationTarget" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;moveto&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																		<Nodalyzer Quantifiers="Exists" Parent="" Child="$moveTo" saveVersion="2" />
																	</GraphSearch>
																	<GraphSearch Origin="" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;moveto,path&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;moveto&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																		<Nodalyzer Quantifiers="Exists" Parent="" Child="$moveTo" saveVersion="2" />
																	</GraphSearch>
																</Selector>
															</Sequence>
														</AtomicDecorator>
													</IfCondition>
												</Sequence>
												<IfGate atomic="false" condition="$cartBlockedBy_collision | $cartBlockedBy_player | $cartBlockedBy_npc" RunLogic="KeepRunning">
													<Success />
												</IfGate>
												<LinkGate from="$this.id" to="$cartUsers_real" tag="&apos;carts_activeUser&apos;" amount="All" presence="NotThere" RunLogic="Halt">
													<Success />
												</LinkGate>
												<LoopUntil until="Success" attemptCount="0">
													<Selector>
														<Sequence>
															<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;carts_enablePlayerSeat&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
															</GraphSearch>
															<StanceCheck soul="$__player" stance="cart" smartObject="$this.id" negate="false" failOnCondition="false" saveVersion="2">
																<Then canSkip="1">
																	<Fail />
																</Then>
																<Else canSkip="1">
																	<Success />
																</Else>
															</StanceCheck>
														</Sequence>
														<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="true" variation="" skipInLOD="false" />
													</Selector>
												</LoopUntil>
											</Parallel>
										</Sequence>
									</Synchronize>
									<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$masterWagonArrivedName&apos;" RunLogic="KeepRunning">
										<Success />
									</ExternalLock>
								</Parallel>
							</Sequence>
						</Child>
						<OnFail canSkip="1">
							<RemoveLink From="$this.id" To="$destinationTarget" Tag="&apos;carts_destinationTarget&apos;" LinkOpHandleMode="Success" />
						</OnFail>
					</FuseBox>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer>
			<InstantExternalLock LockManagerType="Global" SemaphoreName="&apos;$masterWagonArrivedName&apos;" RunLogic="KeepRunning" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="destinationTarget" comment="" />
				<Variable name="wagonLockCount" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="if we have stopDestination, we know for sure we dont want to Move" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AddLink>
									</IfCondition>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
															<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
															</Nodalyzer>
														</GraphSearch>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Sequence>
												</IfCondition>
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<CartMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</CartMove>
															</EntityContext>
														</DistanceCondition>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetTime>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<SendAIConceptSignal_carts_arrivedToDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SendAIConceptSignal_carts_arrivedToDestination>
																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																			<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																			</Nodalyzer>
																		</GraphSearch>
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																			<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																			</Nodalyzer>
																		</GraphSearch>
																	</Selector>
																</Sequence>
															</AtomicDecorator>
														</IfCondition>
													</Sequence>
													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfGate>
													<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</LinkGate>
													<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																	<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</WUIDFilter>
																</GraphSearch>
																<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Fail>
																	</Then>
																	<Else>
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</Else>
																</StanceCheck>
															</Sequence>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Selector>
													</LoopUntil>
												</Parallel>
											</Sequence>
										</Synchronize>
										<ExternalLock hasInputBreakpoint="0" comment="this can happen in save/load" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</ExternalLock>
									</Parallel>
								</Sequence>
							</Child>
							<OnFail>
								<RemoveLink hasInputBreakpoint="0" comment="this will work only for master but we can ignore check if we are him. This node will succeed even if link will not be presented" breakpointFlags="0">
									<OutputBreakpoints />
								</RemoveLink>
							</OnFail>
						</FuseBox>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest>
				<InstantExternalLock editorPosX="-190" editorPosY="-270" hasInputBreakpoint="0" comment="this can happen in save/load" breakpointFlags="0">
					<OutputBreakpoints />
				</InstantExternalLock>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitOnCartStop" is_function="0">
		<Variables>
			<Variable name="cartStopDuration" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="cartStopDurationRaw" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="cartStopHub" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="cartStopHubData" type="carts:activityData" values="" isPersistent="0" form="single" />
			<Variable name="currentWorldTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="requestWaitTimeRaw" type="_int64" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfElseCondition failOnCondition="false" condition="$masterWagon == $this.id" saveVersion="2">
					<Then canSkip="1">
						<IfCondition failOnCondition="false" condition="$cartStopDestination ~= $__null">
							<Sequence>
								<GraphSearch Origin="$cartStopDestination" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;carts_activity&apos;" prune="true" negprune="unknown" Parent="" Child="$cartStopHub" Data="$cartStopHubData" />
								</GraphSearch>
								<IfElseCondition failOnCondition="false" condition="$cartStopHub == $__null" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$cartStopDestination = $__null" />
									</Then>
									<Else canSkip="1">
										<IfElseCondition failOnCondition="false" condition="$cartStopHubData.infiniteWait" saveVersion="2">
											<Then canSkip="1">
												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
											</Then>
											<Else canSkip="1">
												<Sequence>
													<ExecuteLua code="local timeArray = TimeUtils.ConvertTimeStringToTimeArray(data.cartStopHubData.duration) &#10; &#10;local ms = 0 &#10; for key, value in pairs(timeArray) do &#10;  if     key == &quot;w&quot; then ms = ms + value * 1000 * 60 * 60 * 24 * 7 &#10;  elseif key == &quot;d&quot; then ms = ms + value * 1000 * 60 * 60 * 24 &#10;  elseif key == &quot;h&quot; then ms = ms + value * 1000 * 60 * 60 &#10;  elseif key == &quot;m&quot; then ms = ms + value * 1000 * 60 &#10;  elseif key == &quot;s&quot; then ms = ms + value * 1000 &#10;  elseif key == &quot;ms&quot; then ms = ms + value &#10;  end &#10; end &#10; &#10;data.cartStopDurationRaw = ms" />
													<GetTime TimeType="WorldTime" OutVar="$currentWorldTime" Delta="" />
													<Expression expressions="$requestWaitTimeRaw = $cartStopDurationRaw - ($currentWorldTime - $cartStopDestinationTime)" />
													<Concatenation OutString="$cartStopDuration" Pattern="&apos;$requestWaitTimeRaw;ms&apos;" />
													<Wait duration="$cartStopDuration" timeType="WorldTime" doFail="false" variation="" skipInLOD="false" />
													<Expression expressions="$cartStopDestination = $__null" />
												</Sequence>
											</Else>
										</IfElseCondition>
									</Else>
								</IfElseCondition>
							</Sequence>
						</IfCondition>
					</Then>
					<Else canSkip="1">
						<SuppressFailure>
							<InstantExternalLock LockManagerType="Global" SemaphoreName="&apos;$masterWagonArrivedName&apos;" RunLogic="Halt">
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</InstantExternalLock>
						</SuppressFailure>
					</Else>
				</IfElseCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="cartStopDuration" comment="" />
				<Variable name="cartStopDurationRaw" comment="" />
				<Variable name="cartStopHub" comment="" />
				<Variable name="cartStopHubData" comment="" />
				<Variable name="currentWorldTime" comment="" />
				<Variable name="requestWaitTimeRaw" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Then>
												<Else>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExecuteLua>
														<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetTime>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Concatenation>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Sequence>
												</Else>
											</IfElseCondition>
										</Else>
									</IfElseCondition>
								</Sequence>
							</IfCondition>
						</Then>
						<Else>
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<InstantExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</InstantExternalLock>
							</SuppressFailure>
						</Else>
					</IfElseCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="carts_checkIfAllUsersSeated" is_function="1">
		<Variables>
			<Variable name="activeUsers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="checkPlayer" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="cart" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="users" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<SuppressFailure>
					<Sequence>
						<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;carts_enablePlayerSeat&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							<WUIDFilter WUID="$cart" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						</GraphSearch>
						<Expression expressions="$checkPlayer = true," />
					</Sequence>
				</SuppressFailure>
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$cart" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;carts_activeUser&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$activeUsers" saveVersion="2" />
					</GraphSearch>
					<IfCondition failOnCondition="true" condition="#activeUsers == #users">
						<Success />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$checkPlayer">
						<StanceCheck soul="$__player" stance="cart" smartObject="$cart" negate="false" failOnCondition="false" saveVersion="2">
							<Then canSkip="1">
								<Success />
							</Then>
							<Else canSkip="1">
								<Fail />
							</Else>
						</StanceCheck>
					</IfCondition>
					<SendAIConceptSignal_carts_onAllSeated cart="$cart" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="activeUsers" comment="" />
				<Variable name="checkPlayer" comment="" />
				<Variable name="cart" comment="" />
				<Variable name="users" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="we can use gates but then we would need to solve problem where one gate is &quot;succeed&quot;, other is waiting but then this &quot;succeed&quot; gate will turn into invalid (for example user will exit vehicle and player will enter vehicle and visa versa)" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
								<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WUIDFilter>
							</GraphSearch>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</SuppressFailure>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Then>
								<Else>
									<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Fail>
								</Else>
							</StanceCheck>
						</IfCondition>
						<SendAIConceptSignal_carts_onAllSeated hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SendAIConceptSignal_carts_onAllSeated>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cart_getMasterWagon" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="master" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="this" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Selector>
					<GraphSearch Origin="$this" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;carts_wagonMaster&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="Exists" Parent="" Child="$master" saveVersion="2" />
					</GraphSearch>
					<Expression expressions="$master = $this" />
				</Selector>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="master" comment="" />
				<Variable name="this" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Selector>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cartTest_wait" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>