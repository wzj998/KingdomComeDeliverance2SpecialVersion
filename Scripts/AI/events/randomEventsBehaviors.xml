<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="afterDuel" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<UnstanceAction unstance="AngryIdle" locationObject="" slaveObject="" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</UnstanceAction>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="greetPlayer" is_function="0">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="pathfind_params" type="pathFindingParams" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="chatAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="leaveBarkAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="moveTowardsPlayer" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitBarkAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waveAtPlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<ForceLook LookTarget="$__player" DisableVariations="false">
							<Parallel successMode="All" failureMode="All">
								<IfCondition failOnCondition="false" condition="$waveAtPlayer">
									<Sequence>
										<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
											<AnimationAction fragment="&apos;GreetingsUpperBody&apos;" tags="&apos;waveSmall&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</DistanceCondition>
										<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
											<AnimationAction fragment="&apos;GreetingsUpperBody&apos;" tags="&apos;waveBig&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</DistanceCondition>
									</Sequence>
								</IfCondition>
								<Loop count="-1">
									<Sequence>
										<Turn target="$__player" align="false" />
										<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</Loop>
								<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="9.000000" High="9.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
									<Sequence>
										<LuaGate code="return data.chatAlias ~= &quot;&apos;&apos;&quot;" saveVersion="2">
											<Then canSkip="1">
												<Sequence>
													<SuppressFailure>
														<Function_speech_dialogInitiator alias="$chatAlias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="78268204" />
													</SuppressFailure>
													<Callback_empty EventName="&apos;OnChat&apos;" />
												</Sequence>
											</Then>
										</LuaGate>
										<LuaGate code="return data.waitBarkAlias ~= &quot;&apos;&apos;&quot;" saveVersion="2">
											<Then canSkip="1">
												<Loop count="-1">
													<Sequence>
														<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
														<Function_speech_schedulerMonolog alias="$waitBarkAlias" animationApproach="$enum:animationApproach.ingameDialogPoseAndAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="20893329" />
													</Sequence>
												</Loop>
											</Then>
											<Else canSkip="1">
												<Success />
											</Else>
										</LuaGate>
									</Sequence>
								</DistanceGate>
								<DialogGate Who="" Negation="false" EndDialogInRoot="false" Condition="InNormalDialog" RunLogic="KeepRunning">
									<Callback_empty EventName="&apos;OnDialog&apos;" />
								</DialogGate>
								<Sequence>
									<IfCondition failOnCondition="false" condition="$moveTowardsPlayer">
										<SuppressFailure>
											<Sequence>
												<Expression expressions="$pathfind_params.useGeneratedNSO=true &#10;$addParams.destChangedThreshold= &apos;500ms&apos;" />
												<Move stopWithinDistance="3.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__player" destinationSpecification2="" destinationSpecification3="" speed="$enum:movementSpeed.alertedWalk" additionalParams="$addParams" pathFindingParams="$pathfind_params" staminaPolicy="" pathInfo="" />
											</Sequence>
										</SuppressFailure>
									</IfCondition>
									<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="15.000000" High="15.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
										<Sequence>
											<LuaGate code="return data.leaveBarkAlias ~= &quot;&apos;&apos;&quot;" saveVersion="2">
												<Then canSkip="1">
													<Function_speech_schedulerMonolog alias="$leaveBarkAlias" animationApproach="$enum:animationApproach.ingameDialogPoseAndAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="49020924" />
												</Then>
												<Else canSkip="1">
													<Success />
												</Else>
											</LuaGate>
											<Callback_empty EventName="&apos;OnPlayerLeave&apos;" />
										</Sequence>
									</DistanceGate>
								</Sequence>
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Parallel>
						</ForceLook>
					</Child>
					<OnSuccess canSkip="1">
						<Callback_empty EventName="&apos;OnCleanup&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="greetPlayer" EventSet="greetPlayer">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="pathfind_params" comment="" />
				<Variable name="chatAlias" comment="" />
				<Variable name="leaveBarkAlias" comment="" />
				<Variable name="moveTowardsPlayer" comment="" />
				<Variable name="waitBarkAlias" comment="" />
				<Variable name="waveAtPlayer" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-240" editorPosY="120" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</DistanceCondition>
											<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</DistanceCondition>
										</Sequence>
									</IfCondition>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Turn>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</Loop>
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_dialogInitiator>
														</SuppressFailure>
														<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Callback_empty>
													</Sequence>
												</Then>
											</LuaGate>
											<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</Sequence>
													</Loop>
												</Then>
												<Else>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Else>
											</LuaGate>
										</Sequence>
									</DistanceGate>
									<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Callback_empty>
									</DialogGate>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Move>
												</Sequence>
											</SuppressFailure>
										</IfCondition>
										<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_speech_schedulerMonolog>
													</Then>
													<Else>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Else>
												</LuaGate>
												<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Callback_empty>
											</Sequence>
										</DistanceGate>
									</Sequence>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Parallel>
							</ForceLook>
						</Child>
						<OnSuccess>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="randomRoamAndBark" is_function="0">
		<Variables>
			<Variable name="initialPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="randomPosition" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Selector>
						<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;event_anchor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$initialPosition" />
						</GraphSearch>
						<Sequence>
							<GetSpatialInfo In="$this.id" Out="$initialPosition" What="Position" />
							<AddLink From="$this.id" To="$this.id" Tag="&apos;event_anchor&apos;" Data="$initialPosition" LinkOpHandleMode="Error" />
						</Sequence>
					</Selector>
					<Loop count="-1">
						<Sequence>
							<GetRandomPos StartPos="$initialPosition" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="4.000000" Precise="false" MaxIterantions="10" Target="$randomPosition" navAgentType="Automatic" pathFindingParams="" />
							<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$randomPosition" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<IsNightTimeOfDay saveVersion="2">
								<Then canSkip="1">
									<WaitAction />
								</Then>
								<Else canSkip="1">
									<UnstanceAction unstance="LookingAround" locationObject="" slaveObject="" />
								</Else>
							</IsNightTimeOfDay>
							<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
							<LuaGate code="return data.data ~= &quot;&apos;&apos;&quot;" saveVersion="2">
								<Then canSkip="1">
									<SuppressFailure>
										<Function_speech_schedulerMonolog alias="$data" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="42262709" />
									</SuppressFailure>
								</Then>
								<Else canSkip="1">
									<Success />
								</Else>
							</LuaGate>
						</Sequence>
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="">
			<Variables>
				<Variable name="initialPosition" comment="" />
				<Variable name="randomPosition" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-40" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
							</GraphSearch>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetSpatialInfo>
								<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AddLink>
							</Sequence>
						</Selector>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetRandomPos>
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
								<IsNightTimeOfDay hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
									</Then>
									<Else>
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
									</Else>
								</IsNightTimeOfDay>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_schedulerMonolog>
										</SuppressFailure>
									</Then>
									<Else>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Else>
								</LuaGate>
							</Sequence>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="hurryUpPlayer" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="firstNoticeAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="playerFleeingAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="secondNoticeAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ForceLook LookTarget="$__player" DisableVariations="true">
					<Parallel successMode="All" failureMode="Any">
						<Loop count="-1">
							<Sequence>
								<Turn target="$__player" align="false" />
								<Wait duration="&apos;300ms&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</Loop>
						<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="15.000000" High="15.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
							<Sequence>
								<Function_speech_monolog alias="$firstNoticeAlias" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="$this.id" wait="false" nodeLabel="67353757" />
								<Callback_empty EventName="&apos;OnPlayerFlee&apos;" />
							</Sequence>
						</DistanceGate>
						<Sequence>
							<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
							<Function_speech_monolog alias="$firstNoticeAlias" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="$this.id" wait="true" nodeLabel="66658712" />
							<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
							<Function_speech_monolog alias="$secondNoticeAlias" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="$this.id" wait="true" nodeLabel="17322709" />
							<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
							<Callback_empty EventName="&apos;OnLastNoticeIgnored&apos;" />
						</Sequence>
					</Parallel>
				</ForceLook>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="eventHurryUpPlayer" EventSet="eventHurryUpPlayer">
			<Variables>
				<Variable name="firstNoticeAlias" comment="" />
				<Variable name="playerFleeingAlias" comment="" />
				<Variable name="secondNoticeAlias" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-50" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Turn>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Loop>
							<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_monolog>
									<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Callback_empty>
								</Sequence>
							</DistanceGate>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_monolog>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_monolog>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Sequence>
						</Parallel>
					</ForceLook>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="prayingForDevil" is_function="0">
		<Variables>
			<Variable name="prayingSpot" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;prayingSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$prayingSpot" Data="" />
					</GraphSearch>
					<Loop count="-1">
						<Sequence>
							<UnstanceAction unstance="meditate_ground" locationObject="$prayingSpot" slaveObject="" />
							<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" skipInLOD="false" />
							<Function_speech_schedulerMonolog alias="$data" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="" subtitlesDown="false" nodeLabel="41682350" />
						</Sequence>
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<WaitAction />
		</ForestContainer>
		<EditorData Signature="stringData" EventSet="">
			<Variables>
				<Variable name="prayingSpot" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<OutputBreakpoints />
								</UnstanceAction>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_schedulerMonolog>
							</Sequence>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<WaitAction editorPosX="880" editorPosY="-240" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</WaitAction>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="afterUntied" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="turnToPlayerAndWait" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ForceLook LookTarget="$__player" DisableVariations="false">
					<Sequence>
						<WaitAction />
						<Loop count="-1">
							<Sequence>
								<Turn target="$__player" align="false" />
								<Wait duration="&apos;200ms&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Sequence>
						</Loop>
					</Sequence>
				</ForceLook>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Turn>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Loop>
						</Sequence>
					</ForceLook>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="blockFastForward" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<WaitAction />
					</Child>
					<OnFail canSkip="1">
						<Callback_empty EventName="&apos;OnFinished&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="endNotification">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
						</Child>
						<OnFail>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="eventLeaveLevel_withDialog" is_function="0">
		<Variables>
			<Variable name="souls" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="All" failureMode="Any">
					<Function_eventLeaveLevel speed="$enum:movementSpeed.walk" nodeLabel="90891773" />
					<Sequence>
						<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						<IsLoadedGate saveVersion="2">
							<Else canSkip="1">
								<IsDeadCheck SoulWUID="$wuid" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Success />
									</Then>
									<Else canSkip="1">
										<SuppressFailure>
											<Function_speech_dialogInitiator alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.ingame" recipient="$wuid" recipientMetaroles="" nodeLabel="11499074" />
										</SuppressFailure>
									</Else>
								</IsDeadCheck>
							</Else>
						</IsLoadedGate>
					</Sequence>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="">
			<Variables>
				<Variable name="souls" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-50" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_eventLeaveLevel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_eventLeaveLevel>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
							<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Then>
										<Else>
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_dialogInitiator>
											</SuppressFailure>
										</Else>
									</IsDeadCheck>
								</Else>
							</IsLoadedGate>
						</Sequence>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="banditWatchDialog" is_function="0">
		<Variables>
			<Variable name="randomPos" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_drawWeapon_withTorchAtNight nodeLabel="62377907" />
					<AnyDecorator preset="crime_keepItems" enabled="true">
						<Parallel successMode="All" failureMode="Any">
							<Loop count="-1">
								<Sequence>
									<GetRandomPos StartPos="$wuid" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="2.000000" Precise="false" MaxIterantions="10" Target="$randomPos" navAgentType="Automatic" pathFindingParams="" />
									<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$randomPos" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
								</Sequence>
							</Loop>
							<Loop count="-1">
								<Sequence>
									<RelationContextBarrier context="behavior_lootingDeadBody" from="$wuid" to="$wuid" Negation="false" RunLogic="KeepRunning">
										<Sequence>
											<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
											<SuppressFailure>
												<Function_speech_dialogInitiator alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.ingame" recipient="$wuid" recipientMetaroles="" nodeLabel="92968513" />
											</SuppressFailure>
										</Sequence>
									</RelationContextBarrier>
									<RelationContextBarrier context="behavior_lootingDeadBody" from="$wuid" to="$wuid" Negation="true" RunLogic="KeepRunning">
										<Success />
									</RelationContextBarrier>
								</Sequence>
							</Loop>
						</Parallel>
					</AnyDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="">
			<Variables>
				<Variable name="randomPos" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-210" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_drawWeapon_withTorchAtNight hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_drawWeapon_withTorchAtNight>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetRandomPos>
										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Move>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
								</Loop>
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<RelationContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_dialogInitiator>
												</SuppressFailure>
											</Sequence>
										</RelationContextBarrier>
										<RelationContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</RelationContextBarrier>
									</Sequence>
								</Loop>
							</Parallel>
						</AnyDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="lootCorpses" is_function="0">
		<Variables>
			<Variable name="corpse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="corpseCandidate" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="corpseSO" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="forceStartEventTimer" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="badLootBark" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="corpses" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="enableBarks" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="goodLootBark" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="lootingBark" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="minPriceForGoodLoot" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="ForceForbidAutoTorch" target="">
				<Sequence>
					<IsFastForwarded failOnCondition="false" saveVersion="2">
						<Then canSkip="1">
							<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;deadbody_fastforward&apos;" prune="true" negprune="unknown" Parent="" Child="$corpseSO" Data="" />
							</GraphSearch>
						</Then>
						<Else canSkip="1">
							<IfCondition failOnCondition="false" condition="$corpseSO == $__null">
								<ForEach startIndex="0" step="1" array="$corpses" iterator="" value="$corpseCandidate" break="">
									<Selector>
										<GraphSearch Origin="$corpseCandidate" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;looted&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										</GraphSearch>
										<Sequence>
											<GraphSearch Origin="$corpseCandidate" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;deadBody_lyingDead&apos;" prune="true" negprune="unknown" Parent="" Child="$corpseSO" Data="" />
											</GraphSearch>
											<Expression expressions="$corpse = $corpseCandidate" />
										</Sequence>
									</Selector>
								</ForEach>
							</IfCondition>
						</Else>
					</IsFastForwarded>
					<IfElseCondition failOnCondition="false" condition="$corpseSO ~= $__null" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<Parallel successMode="Any" failureMode="Any">
									<Loop count="-1">
										<RelationContextDecorator context="behavior_lootingDeadBody" target="$this.id" reverse="false" enabled="true">
											<Sequence>
												<UnstanceAction unstance="LootAligned" locationObject="$corpseSO" slaveObject="" />
												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
											</Sequence>
										</RelationContextDecorator>
									</Loop>
									<Sequence>
										<Expression expressions="$forceStartEventTimer = $data:script_param[&apos;event_forceStartAfterTimer&apos;].value * 1000" />
										<Parallel successMode="Any" failureMode="Any">
											<DistanceGate Origin="$__player" ReferencePt="$this.id" Low="$data:script_param[&apos;event_startDistance&apos;].value" High="$data:script_param[&apos;event_startDistance&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
												<Success />
											</DistanceGate>
											<Wait duration="$forceStartEventTimer" timeType="GameTime" doFail="false" variation="" />
										</Parallel>
										<RelationContextBarrier context="behavior_lootingDeadBody" from="$this" to="$this" Negation="false" RunLogic="KeepRunning">
											<Sequence>
												<IfCondition failOnCondition="false" condition="$corpse == $__null">
													<LinkGate from="$corpses[0]" to="" tag="&apos;deadBody_lyingDead&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
														<GraphSearch Origin="$corpseSO" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;deadBody_lyingDead_reverse&apos;" prune="true" negprune="unknown" Parent="" Child="$corpse" Data="" />
														</GraphSearch>
													</LinkGate>
												</IfCondition>
												<LinkGate from="$corpse" to="" tag="&apos;deadBody_lyingDead&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
													<Sequence>
														<Parallel successMode="Any" failureMode="Any">
														<Function_lootItemTransfer badLootBark="$badLootBark" corpse="$corpse" enableBarks="$enableBarks" goodLootBark="$goodLootBark" lootingBark="$lootingBark" minPriceForGoodLoot="$minPriceForGoodLoot" nodeLabel="23347180" />
															<Sequence>
																<Parallel successMode="Any" failureMode="Any">
																	<LinkGate from="$__player" to="$corpse" tag="&apos;loot&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																		<Success />
																	</LinkGate>
																	<LinkGate from="$__player" to="$corpse" tag="&apos;carriedBody&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																		<Success />
																	</LinkGate>
																</Parallel>
																<Callback_empty EventName="&apos;PlayerAlsoLootTheSameCorpse&apos;" />
															</Sequence>
														</Parallel>
														<AddLink From="$corpse" To="$corpse" Tag="&apos;looted&apos;" Data="" LinkOpHandleMode="Error" />
													</Sequence>
												</LinkGate>
											</Sequence>
										</RelationContextBarrier>
									</Sequence>
								</Parallel>
								<WaitAction />
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Callback_empty EventName="&apos;AllCorpsesAreLooted&apos;" />
						</Else>
					</IfElseCondition>
				</Sequence>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="eventLootCorpses" EventSet="eventLootCorpses">
			<Variables>
				<Variable name="corpse" comment="" />
				<Variable name="corpseCandidate" comment="" />
				<Variable name="corpseSO" comment="" />
				<Variable name="forceStartEventTimer" comment="" />
				<Variable name="badLootBark" comment="" />
				<Variable name="corpses" comment="" />
				<Variable name="enableBarks" comment="" />
				<Variable name="goodLootBark" comment="" />
				<Variable name="lootingBark" comment="" />
				<Variable name="minPriceForGoodLoot" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<GraphSearch hasInputBreakpoint="0" comment="For fastforward to work we always loot a specific corpse at first" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
							</Then>
							<Else>
								<IfCondition hasInputBreakpoint="0" comment="When save/loading we save nextCorpse as a persistent variable so that NPC would continiue to loot corpse after the load. There we check if there something stored in this variable:" breakpointFlags="0">
									<OutputBreakpoints />
									<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</Selector>
									</ForEach>
								</IfCondition>
							</Else>
						</IsFastForwarded>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<RelationContextDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</UnstanceAction>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Sequence>
											</RelationContextDecorator>
										</Loop>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DistanceGate>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Parallel>
											<RelationContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="Corpse is null only when event is fastforwarded and NPC should be playing animation on a specific linked SO" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkGate hasInputBreakpoint="0" comment="Wait until corpses ready" breakpointFlags="0">
															<OutputBreakpoints />
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
															</GraphSearch>
														</LinkGate>
													</IfCondition>
													<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															<Function_lootItemTransfer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_lootItemTransfer>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</LinkGate>
																		<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</LinkGate>
																	</Parallel>
																	<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Callback_empty>
																</Sequence>
															</Parallel>
															<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AddLink>
														</Sequence>
													</LinkGate>
												</Sequence>
											</RelationContextBarrier>
										</Sequence>
									</Parallel>
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
								</Sequence>
							</Then>
							<Else>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Else>
						</IfElseCondition>
					</Sequence>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="urgeDialog_crimeScene" is_function="0">
		<Variables>
			<Variable name="corpseSO" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isFastForwarded" type="_bool" values="false" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="leader" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;deadbody_fastforward&apos;" prune="true" negprune="unknown" Parent="" Child="$corpseSO" Data="" />
					</GraphSearch>
					<Function_scatterAroundPoint SO="$__object.id" innerCircleRadius="0.500000" outerCircleRadius="2.000000" referencePoint="$corpseSO" rotateTowardsTarget="$__player" isFastForwarded="$isFastForwarded" nodeLabel="23929317" />
					<Parallel successMode="Any" failureMode="Any">
						<IfElseCondition failOnCondition="false" condition="$this.id == $leader" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<Sequence>
										<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;waveAtPlayerLock&apos;" />
										<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;drawWeaponLock&apos;" />
									</Sequence>
									<CallDecorator_urgeDialogNotifications>
										<Subtree canSkip="1">
											<Function_urgeDialog drawWeaponIfPlayerDoes="true" movementType="$enum:movementType.TurnBody" playerFleeDistanceBeforeReaction="10" secondsAfterUrgeBeforeReaction="10" urgeAliasOrMetarole="$alias" urgeIsChat="true" useMetarole="false" waveAtPlayer="false" nodeLabel="99582167" />
										</Subtree>
										<OnFail canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnFail&apos;" />
											</CallbackEventCatch_empty>
										</OnFail>
										<HasNotSeenPlayer canSkip="1">
											<CallbackEventCatch_empty>
												<IfCondition failOnCondition="false" condition="~$isFastForwarded">
													<Callback_empty EventName="&apos;HasNotSeenPlayer&apos;" />
												</IfCondition>
											</CallbackEventCatch_empty>
										</HasNotSeenPlayer>
										<OnPlayerFlee canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnPlayerFlee&apos;" />
											</CallbackEventCatch_empty>
										</OnPlayerFlee>
										<OnTimeout canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnTimeout&apos;" />
											</CallbackEventCatch_empty>
										</OnTimeout>
										<OnPlayerWeaponDraw canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnPlayerWeaponDraw&apos;" />
											</CallbackEventCatch_empty>
										</OnPlayerWeaponDraw>
									</CallDecorator_urgeDialogNotifications>
								</Sequence>
							</Then>
							<Else canSkip="1">
								<AnyDecorator preset="crime_keepItems" enabled="true">
									<Sequence>
										<WaitAction />
										<CrimeFollower Target="$__player" Mode="NoMoveOnlyTurn" Role="Main" RelativeSpeedLimit="Dash" DisableGhosting="false" />
									</Sequence>
								</AnyDecorator>
							</Else>
						</IfElseCondition>
						<Sequence>
							<IfCondition failOnCondition="false" condition="$isFastForwarded">
								<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="2.100000" High="2.100000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
									<Success />
								</DistanceGate>
							</IfCondition>
							<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="2.000000" High="2.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
								<Callback_empty EventName="&apos;OnPlayerWeaponDraw&apos;" />
							</DistanceGate>
						</Sequence>
						<Sequence>
							<Parallel successMode="Any" failureMode="Any">
						<LinkGate from="$__player" to="" tag="&apos;loot&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
									<Success />
								</LinkGate>
								<LinkGate from="$__player" to="" tag="&apos;carriedBody&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
									<Success />
								</LinkGate>
							</Parallel>
							<Callback_empty EventName="&apos;OnPlayerWeaponDraw&apos;" />
						</Sequence>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="urgeDialog_crimeScene" EventSet="urgeDialogNotifications">
			<Variables>
				<Variable name="corpseSO" comment="" />
				<Variable name="isFastForwarded" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="leader" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Function_scatterAroundPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_scatterAroundPoint>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SetExternalLock>
											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SetExternalLock>
										</Sequence>
										<CallDecorator_urgeDialogNotifications hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Subtree>
												<Function_urgeDialog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_urgeDialog>
											</Subtree>
											<OnFail>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnFail>
											<HasNotSeenPlayer>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Callback_empty>
													</IfCondition>
												</CallbackEventCatch_empty>
											</HasNotSeenPlayer>
											<OnPlayerFlee>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnPlayerFlee>
											<OnTimeout>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnTimeout>
											<OnPlayerWeaponDraw>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnPlayerWeaponDraw>
										</CallDecorator_urgeDialogNotifications>
									</Sequence>
								</Then>
								<Else>
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</CrimeFollower>
										</Sequence>
									</AnyDecorator>
								</Else>
							</IfElseCondition>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DistanceGate>
								</IfCondition>
								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Callback_empty>
								</DistanceGate>
							</Sequence>
							<Sequence hasInputBreakpoint="0" comment="Don&apos;t really care to check for a specific deadBody, if crimeScene bandits wait for player to move and he is looting some deadbody instead its fair for them to attack" breakpointFlags="0">
								<OutputBreakpoints />
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</LinkGate>
									<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</LinkGate>
								</Parallel>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Sequence>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wolfReactToPlayer" is_function="0">
		<Variables>
			<Variable name="distanceToTarget" type="_float" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Parallel successMode="Any" failureMode="Any">
						<Loop count="-1">
							<Function_switch_animal_oneshotDogBark barkTarget="$__player" count="1" shouldConsiderPerk="true" nodeLabel="50050539" />
						</Loop>
						<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_animal_attackDistanceThreshold&apos;].value" High="$data:script_param[&apos;crime_animal_attackDistanceThreshold&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
							<Callback_empty EventName="&apos;Fail&apos;" />
						</DistanceGate>
						<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_animal_cancelAttackDistanceThreshold&apos;].value" High="$data:script_param[&apos;crime_animal_cancelAttackDistanceThreshold&apos;].value" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
							<Callback_empty EventName="&apos;Success&apos;" />
						</DistanceGate>
						<Sequence>
							<Wait duration="&apos;20s&apos;" timeType="GameTime" doFail="false" variation="" />
							<Callback_empty EventName="&apos;Fail&apos;" />
						</Sequence>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="resultNotification">
			<Variables>
				<Variable name="distanceToTarget" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_switch_animal_oneshotDogBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_switch_animal_oneshotDogBark>
							</Loop>
							<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</DistanceGate>
							<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</DistanceGate>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Sequence>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dummyWandererHorse_leaveLevel" is_function="0">
		<Variables>
			<Variable name="levelExit" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="levelExits" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="speed" type="enum:movementSpeed" values="$enum:movementSpeed.walk" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="event_dummyWandererHorseIsAwake" target="">
					<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="200.000000" High="200.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
						<Sequence>
							<GraphSearch Origin="$__land" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<CategoryFilter categories="&apos;levelExit&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
								<Nodalyzer Quantifiers="ForAll" Parent="" Child="$levelExits" saveVersion="2">
									<Child0 canSkip="1">
										<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
									</Child0>
								</Nodalyzer>
							</GraphSearch>
							<Expression expressions="$levelExit = $levelExits[0]" />
							<TeleportAction Position="$levelExit" EndInterruptOnActionStart="false" />
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</DistanceGate>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_leaveLevel_move destination="$levelExit" speed="$speed" usePaths="true" nodeLabel="26661447" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="levelExit" comment="" />
				<Variable name="levelExits" comment="" />
				<Variable name="speed" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DistanceGate hasInputBreakpoint="0" comment="Teleport horse when dummyWanderer is despawned" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</CategoryFilter>
									<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Child0>
											<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</RangeSorter>
										</Child0>
									</Nodalyzer>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</TeleportAction>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</DistanceGate>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest>
				<Function_leaveLevel_move editorPosX="1240" editorPosY="60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_leaveLevel_move>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dummyWandererHorse_wakeUp" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="event_dummyWandererHorseIsAwake" target="">
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="tryGetHorseFromPool" is_function="0">
		<Variables>
			<Variable name="horse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="horseHasWokenUp" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="horseSoul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
			<Variable name="isPlayerHorse" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="linkedHorses" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="notSeenByPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="npcSoul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
			<Variable name="playerHorse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="selectedHorse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="targetPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="tries" type="_int" values="5" isPersistent="0" form="single" />
			<Variable name="usableHorses" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="wuidArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Sequence>
						<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;event_dummyWandererHorse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							<Nodalyzer Quantifiers="ForAll" Parent="" Child="$linkedHorses" saveVersion="2" />
						</GraphSearch>
						<ForEach startIndex="0" step="1" array="$linkedHorses" iterator="" value="$horse" break="">
							<RemoveLink From="$this.id" To="$horse" Tag="&apos;event_dummyWandererHorse&apos;" LinkOpHandleMode="Error" />
						</ForEach>
					</Sequence>
					<GetPlayerHorse HorseWuid="$playerHorse" />
					<ForEach startIndex="0" step="1" array="$wuidArray" iterator="" value="$horse" break="">
						<Sequence>
							<CheckWuidValid wuid="$playerHorse" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$isPlayerHorse = $horse == $playerHorse" />
								</Then>
							</CheckWuidValid>
							<IfCondition failOnCondition="false" condition="~$isPlayerHorse">
								<PushToArray array="$usableHorses" value="$horse" direction="Back" />
							</IfCondition>
						</Sequence>
					</ForEach>
					<IfElseCondition failOnCondition="false" condition="#usableHorses &gt; 0" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<RandomItem Array="$usableHorses" Result="$selectedHorse" Clamp="-1" />
								<Sequence>
									<Expression expressions="$npcSoul.value = $this.id &#10;$horseSoul.value = $selectedHorse" />
									<SendAIConceptSignal_dummyWanderer_horseSelected NPC="$npcSoul" horse="$horseSoul" />
								</Sequence>
								<Parallel successMode="Any" failureMode="Any">
									<EntityContextBarrier context="event_dummyWandererHorseIsAwake" target="$selectedHorse" Negation="false" RunLogic="KeepRunning">
										<Expression expressions="$horseHasWokenUp = true" />
									</EntityContextBarrier>
									<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Parallel>
								<IfElseCondition failOnCondition="false" condition="$horseHasWokenUp" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<LinkGate from="$selectedHorse" to="" tag="&apos;home&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
												<IsDeadCheck SoulWUID="$selectedHorse" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<Expression expressions="$npcSoul.value = $this.id &#10;$horseSoul.value = $selectedHorse" />
															<SendAIConceptSignal_dummyWanderer_revive NPC="$npcSoul" horse="$horseSoul" />
														</Sequence>
													</Then>
												</IsDeadCheck>
											</LinkGate>
											<AddLink From="$this.id" To="$selectedHorse" Tag="&apos;event_dummyWandererHorse&apos;" Data="" LinkOpHandleMode="Error" />
											<Function_tryGetRandomPosOnCircleBorder SO="$__object.id" discardIfNearPlayerThreshold="1.000000" innerCircleRadius="1.000000" outerCircleRadius="2.500000" referencePoint="$this.id" bestPos="$targetPos" nodeLabel="13997271" />
											<EntityContextBarrier context="event_dummyWandererHorseIsAwake" target="$selectedHorse" Negation="false" RunLogic="KeepRunning">
												<HorseUsageElement horse="$selectedHorse" decisionLabel="Label1" useDecision="true" enabled="true" saveVersion="2">
													<Search canSkip="1">
														<Success />
													</Search>
													<Exec canSkip="1">
														<StanceElement smartObject="$selectedHorse" stance="horse" allowAny="false" enabled="true">
															<TeleportAction Position="$targetPos" EndInterruptOnActionStart="false" />
														</StanceElement>
													</Exec>
												</HorseUsageElement>
											</EntityContextBarrier>
											<Callback_empty EventName="&apos;Success&apos;" />
										</Sequence>
									</Then>
									<Else canSkip="1">
										<Callback_empty EventName="&apos;Fail&apos;" />
									</Else>
								</IfElseCondition>
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Callback_empty EventName="&apos;Fail&apos;" />
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<While doFail="false" propagateChildFail="false" condition="$tries &gt; 0">
				<Sequence>
					<RandomItem Array="$usableHorses" Result="$selectedHorse" Clamp="-1" />
					<EntityContextCheck context="_MISSING_SCRIPT_CONTEXT_" target="$selectedHorse" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$wokenUpHorseFound = true &#10;$tries = 0" />
						</Then>
						<Else canSkip="1">
							<Expression expressions="$tries -= 1" />
						</Else>
					</EntityContextCheck>
					<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</While>
		</ForestContainer>
		<EditorData Signature="wuidArray" EventSet="resultNotification">
			<Variables>
				<Variable name="horse" comment="" />
				<Variable name="horseHasWokenUp" comment="" />
				<Variable name="horseSoul" comment="" />
				<Variable name="isPlayerHorse" comment="" />
				<Variable name="linkedHorses" comment="" />
				<Variable name="notSeenByPlayer" comment="" />
				<Variable name="npcSoul" comment="" />
				<Variable name="playerHorse" comment="" />
				<Variable name="selectedHorse" comment="" />
				<Variable name="targetPos" comment="" />
				<Variable name="tries" comment="" />
				<Variable name="usableHorses" comment="" />
				<Variable name="wuidArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="Cleanup previous links" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
								<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
								</Nodalyzer>
							</GraphSearch>
							<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</RemoveLink>
							</ForEach>
						</Sequence>
						<GetPlayerHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetPlayerHorse>
						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</CheckWuidValid>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</PushToArray>
								</IfCondition>
							</Sequence>
						</ForEach>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</RandomItem>
									<Sequence hasInputBreakpoint="0" comment="Send chosen horse to concept" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<SendAIConceptSignal_dummyWanderer_horseSelected hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SendAIConceptSignal_dummyWanderer_horseSelected>
									</Sequence>
									<Parallel hasInputBreakpoint="0" comment="Wait for WakeUp" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</EntityContextBarrier>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Parallel>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkGate hasInputBreakpoint="0" comment="We can only revive when horse has home, because otherwise it has revive protection from switch horseBrain" breakpointFlags="0">
													<OutputBreakpoints />
													<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="Revive" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<SendAIConceptSignal_dummyWanderer_revive hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</SendAIConceptSignal_dummyWanderer_revive>
															</Sequence>
														</Then>
													</IsDeadCheck>
												</LinkGate>
												<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AddLink>
												<Function_tryGetRandomPosOnCircleBorder hasInputBreakpoint="0" comment="Best way to fix KCD2-449452 because of FF in event npcs" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_tryGetRandomPosOnCircleBorder>
												<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<HorseUsageElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Search>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Search>
														<Exec>
															<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</TeleportAction>
															</StanceElement>
														</Exec>
													</HorseUsageElement>
												</EntityContextBarrier>
												<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Callback_empty>
											</Sequence>
										</Then>
										<Else>
											<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Callback_empty>
										</Else>
									</IfElseCondition>
								</Sequence>
							</Then>
							<Else>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<While editorPosX="2440" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</RandomItem>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</EntityContextCheck>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</While>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="announce" is_function="0">
		<Variables>
			<Variable name="announcePoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="dialogTrigger" type="event:hlasatel:dialogTrigger" values="" isPersistent="0" form="single" />
			<Variable name="forceStartEventTimer" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="listener" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="listeners" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;announcePoint&apos;" prune="true" negprune="unknown" Parent="" Child="$announcePoint" Data="" />
					</GraphSearch>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$announcePoint" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$announcePoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<EntityContext context="situation_eventHlasatel_hlasatel" target="">
						<Sequence>
							<Expression expressions="$forceStartEventTimer = $data:script_param[&apos;event_forceStartAfterTimer&apos;].value * 1000" />
							<Parallel successMode="Any" failureMode="Any">
								<DistanceGate Origin="$__player" ReferencePt="$this.id" Low="$data:script_param[&apos;event_startDistance&apos;].value" High="$data:script_param[&apos;event_startDistance&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
									<Success />
								</DistanceGate>
								<Wait duration="$forceStartEventTimer" timeType="GameTime" doFail="false" variation="" />
							</Parallel>
							<EntityContext context="event_started" target="">
								<Parallel successMode="Any" failureMode="Any">
									<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
										<Child canSkip="1">
											<Sequence>
												<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.ingameDialogPoseAndAnimations" context="" lookAtId="" metarole="$data" skipInLod="false" subtitlesDown="false" nodeLabel="39154078" />
												<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
											</Sequence>
										</Child>
										<OnSuccess canSkip="1">
											<Callback_empty EventName="&apos;OnFinished&apos;" />
										</OnSuccess>
									</FuseBox>
									<Loop count="-1">
										<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$dialogTrigger" senderInfo="" inbox="&apos;hlasatel_dialogTrigger&apos;" condition="" answerVar="">
											<SuppressFailure>
												<Sequence>
													<ReinitVariable variable="$listeners" />
													<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;hlasatel_listener&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
														<Nodalyzer Quantifiers="ForAll" Parent="" Child="$listeners" saveVersion="2" />
													</GraphSearch>
													<IfCondition failOnCondition="false" condition="#listeners &gt; 0">
														<InstantMultiSendMessageToNPC targets="$listeners" successMode="Any" failureMode="Any" type="&apos;event:hlasatel:dialogTrigger&apos;" values="" />
													</IfCondition>
												</Sequence>
											</SuppressFailure>
										</ProcessMessage>
									</Loop>
								</Parallel>
							</EntityContext>
						</Sequence>
					</EntityContext>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="endNotification">
			<Variables>
				<Variable name="announcePoint" comment="" />
				<Variable name="dialogTrigger" comment="" />
				<Variable name="forceStartEventTimer" comment="" />
				<Variable name="listener" comment="" />
				<Variable name="listeners" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DistanceGate>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Parallel>
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Child>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_schedulerMonolog>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Sequence>
											</Child>
											<OnSuccess>
												<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Callback_empty>
											</OnSuccess>
										</FuseBox>
										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ReinitVariable>
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
															<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
															</Nodalyzer>
														</GraphSearch>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</InstantMultiSendMessageToNPC>
														</IfCondition>
													</Sequence>
												</SuppressFailure>
											</ProcessMessage>
										</Loop>
									</Parallel>
								</EntityContext>
							</Sequence>
						</EntityContext>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="doNothing" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="preach" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitInCooldown" is_function="0">
		<Variables>
			<Variable name="usableObject" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;leaningSpotEntity&apos;" prune="true" negprune="unknown" Parent="" Child="$usableObject" Data="" />
					</GraphSearch>
					<Loop count="-1">
						<CallBehavior Target="$usableObject" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="35054080" />
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="usableObject" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CallBehavior>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="surrender" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="combat_actorSupressHitreactionAnimation" target="$this.id">
				<Parallel successMode="All" failureMode="All">
					<SuppressFailure>
						<Function_speech_dialogInitiator alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.ingame" recipient="$__player" recipientMetaroles="" nodeLabel="25231518" />
					</SuppressFailure>
						<UnstanceAction unstance="CrimeSurrender" locationObject="$__null" slaveObject="" />
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
				</Parallel>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="10" editorPosY="200" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_dialogInitiator>
						</SuppressFailure>
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Parallel>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fleeToTheGang" is_function="0">
		<Variables>
			<Variable name="next_point" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="pathfind_params" type="pathFindingParams" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$next_point = $data &#10;$pathfind_params.useGeneratedNSO=true" />
			</OnInit>
			<Behavior canSkip="1">
				<Loop count="-1">
					<Sequence>
						<ExactMove directionType="AlignWithEntity" directionSpecification="$next_point" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$next_point" destinationSpecification2="" destinationSpecification3="" speed="SlowSprint" additionalParams="" pathFindingParams="$pathfind_params" staminaPolicy="" pathInfo="" />
						<Selector>
							<GraphSearch Origin="$next_point" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="$next_point" />
							</GraphSearch>
							<Callback_empty EventName="&apos;OnFinished&apos;" />
						</Selector>
					</Sequence>
				</Loop>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="next_point" comment="" />
				<Variable name="pathfind_params" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AnyLinkFilter>
								</GraphSearch>
								<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Callback_empty>
							</Selector>
						</Sequence>
					</Loop>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="lookAroundAfterFleeing" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="All" failureMode="Any">
					<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="87978966" />
					<Sequence>
						<Turn target="$__player" align="false" />
						<UnstanceAction unstance="FleeLookingAround" locationObject="" slaveObject="" />
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-120" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_speech_schedulerMonolog>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Turn>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="randomWalk" is_function="0">
		<Variables>
			<Variable name="currentWalkWaypoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="walkWaypoints" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;walkWaypoint&apos;" prune="true" negprune="unknown" Parent="" Child="$walkWaypoints" Data="" />
					</GraphSearch>
					<RandomItem Array="$walkWaypoints" Result="$currentWalkWaypoint" Clamp="-1" />
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$currentWalkWaypoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="currentWalkWaypoint" comment="" />
				<Variable name="walkWaypoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</RandomItem>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitForPlayerToDismount" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Loop count="-1">
					<Sequence>
						<SuppressFailure>
							<Function_speech_dialogInitiator alias="$string" animationApproach="$enum:animationApproach.ingameDialogPoseAndAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="61418601" />
						</SuppressFailure>
						<Wait duration="&apos;30s&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</Loop>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_dialogInitiator>
							</SuppressFailure>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</Loop>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="eventNPC_surrender" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<HasGenderCheck Gender="Male" SoulWUID="" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<UnstanceAction unstance="CrimeSurrender" locationObject="" slaveObject="" />
						</Then>
						<Else canSkip="1">
							<UnstanceAction unstance="Cower" locationObject="" slaveObject="" />
						</Else>
					</HasGenderCheck>
					<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</UnstanceAction>
							</Then>
							<Else>
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</UnstanceAction>
							</Else>
						</HasGenderCheck>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="jardasFriend_cheerJarda" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ForceLook LookTarget="$wuid" DisableVariations="true">
					<Parallel successMode="Any" failureMode="Any">
						<Loop count="-1">
							<Sequence>
								<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" subtitlesDown="false" nodeLabel="50233687" />
								<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
							</Sequence>
						</Loop>
						<CrimeFollower Target="$__player" Mode="Default" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="false" />
					</Parallel>
				</ForceLook>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-20" editorPosY="170" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_schedulerMonolog>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Loop>
							<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CrimeFollower>
						</Parallel>
					</ForceLook>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="watchWhileAmbush" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="anchor" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="maxRange" type="_float" values="2" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_drawWeapon_withTorchAtNight nodeLabel="52886540" />
					<AnyDecorator preset="crime_keepItems" enabled="true">
						<Sequence>
							<IsNightTimeOfDay saveVersion="2">
								<Then canSkip="1">
									<WaitAction />
								</Then>
								<Else canSkip="1">
									<UnstanceAction unstance="LookingAround" locationObject="" slaveObject="" />
								</Else>
							</IsNightTimeOfDay>
							<Function_randomMove anchor="$anchor" maxRange="3.000000" nodeLabel="91717974" />
						</Sequence>
					</AnyDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="randomMove" EventSet="">
			<Variables>
				<Variable name="anchor" comment="" />
				<Variable name="maxRange" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_drawWeapon_withTorchAtNight hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_drawWeapon_withTorchAtNight>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IsNightTimeOfDay hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
									</Then>
									<Else>
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
									</Else>
								</IsNightTimeOfDay>
								<Function_randomMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_randomMove>
							</Sequence>
						</AnyDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="urgeDialog_prepadeniNaCeste" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="ignoreHasNotSeenPlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="leader" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_scatterAroundPoint SO="$__object.id" referencePoint="$leader" isFastForwarded="$ignoreHasNotSeenPlayer" nodeLabel="48959390" />
					<IfElseCondition failOnCondition="false" condition="$this.id == $leader" saveVersion="2">
						<Then canSkip="1">
							<Parallel successMode="Any" failureMode="Any">
								<Loop count="-1">
									<SuppressFailure>
										<TenseCircumstanceBarrier RunLogic="Halt">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</TenseCircumstanceBarrier>
									</SuppressFailure>
								</Loop>
								<Sequence>
									<Sequence>
										<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;waveAtPlayerLock&apos;" />
										<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;drawWeaponLock&apos;" />
									</Sequence>
									<CallDecorator_urgeDialogNotifications>
										<Subtree canSkip="1">
											<Function_urgeDialog drawWeaponIfPlayerDoes="true" movementType="$enum:movementType.FollowPlayer" playerFleeDistanceBeforeReaction="2" secondsAfterUrgeBeforeReaction="0" urgeAliasOrMetarole="$alias" urgeIsChat="true" useMetarole="false" waveAtPlayer="false" nodeLabel="53704987" />
										</Subtree>
										<OnFail canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnFail&apos;" />
											</CallbackEventCatch_empty>
										</OnFail>
										<HasNotSeenPlayer canSkip="1">
											<CallbackEventCatch_empty>
												<IfCondition failOnCondition="false" condition="~$ignoreHasNotSeenPlayer">
													<Callback_empty EventName="&apos;HasNotSeenPlayer&apos;" />
												</IfCondition>
											</CallbackEventCatch_empty>
										</HasNotSeenPlayer>
										<OnPlayerFlee canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnPlayerFlee&apos;" />
											</CallbackEventCatch_empty>
										</OnPlayerFlee>
										<OnTimeout canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnTimeout&apos;" />
											</CallbackEventCatch_empty>
										</OnTimeout>
										<OnPlayerWeaponDraw canSkip="1">
											<CallbackEventCatch_empty>
												<Callback_empty EventName="&apos;OnPlayerWeaponDraw&apos;" />
											</CallbackEventCatch_empty>
										</OnPlayerWeaponDraw>
									</CallDecorator_urgeDialogNotifications>
								</Sequence>
							</Parallel>
						</Then>
						<Else canSkip="1">
							<AnyDecorator preset="crime_keepItems" enabled="true">
								<CrimeFollower Target="$__player" Mode="DontBackOff" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="false" />
							</AnyDecorator>
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="urgeDialog_prepadeniNaCeste" EventSet="urgeDialogNotifications">
			<Variables>
				<Variable name="alias" comment="" />
				<Variable name="ignoreHasNotSeenPlayer" comment="" />
				<Variable name="leader" comment="" />
				<Variable name="metarole" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_scatterAroundPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_scatterAroundPoint>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<TenseCircumstanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</TenseCircumstanceBarrier>
										</SuppressFailure>
									</Loop>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="I wouldn&apos;t call it a hack, I like it " breakpointFlags="0">
											<OutputBreakpoints />
											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SetExternalLock>
											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SetExternalLock>
										</Sequence>
										<CallDecorator_urgeDialogNotifications hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Subtree>
												<Function_urgeDialog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_urgeDialog>
											</Subtree>
											<OnFail>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnFail>
											<HasNotSeenPlayer>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Callback_empty>
													</IfCondition>
												</CallbackEventCatch_empty>
											</HasNotSeenPlayer>
											<OnPlayerFlee>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnPlayerFlee>
											<OnTimeout>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnTimeout>
											<OnPlayerWeaponDraw>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_empty>
												</CallbackEventCatch_empty>
											</OnPlayerWeaponDraw>
										</CallDecorator_urgeDialogNotifications>
									</Sequence>
								</Parallel>
							</Then>
							<Else>
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</CrimeFollower>
								</AnyDecorator>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="randomMove" is_function="1">
		<Variables>
			<Variable name="randomPos" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="anchor" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="maxRange" type="_float" values="2" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetRandomPos StartPos="$anchor" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="$maxRange" Precise="false" MaxIterantions="10" Target="$randomPos" navAgentType="Automatic" pathFindingParams="" />
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$randomPos" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="randomMove" EventSet="">
			<Variables>
				<Variable name="randomPos" comment="" />
				<Variable name="anchor" comment="" />
				<Variable name="maxRange" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetRandomPos>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="eventLeaveLevel" is_function="1">
		<Variables>
			<Variable name="reachedLevelExit" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="souls" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="speed" type="enum:movementSpeed" values="$enum:movementSpeed.walk" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="event_isLeavingLevel" target="">
					<Sequence>
						<PushToArray array="$souls" value="$this.id" direction="Back" />
						<IfGate atomic="false" condition="~$reachedLevelExit" RunLogic="Halt">
							<CallDecorator_leaveLevel>
								<Subtree canSkip="1">
									<Function_leaveLevel souls="$souls" speed="$speed" nodeLabel="12407549" />
								</Subtree>
								<UnstreamGroup canSkip="1">
									<CallbackEventCatch_empty>
										<Expression expressions="$reachedLevelExit = true" />
									</CallbackEventCatch_empty>
								</UnstreamGroup>
							</CallDecorator_leaveLevel>
						</IfGate>
						<WaitAction />
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer>
			<Despawn DeSpawnedEntity="$this.id" />
		</ForestContainer>
		<EditorData Signature="eventLeaveLevel" EventSet="">
			<Variables>
				<Variable name="reachedLevelExit" comment="" />
				<Variable name="souls" comment="" />
				<Variable name="speed" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</PushToArray>
							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CallDecorator_leaveLevel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Subtree>
										<Function_leaveLevel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_leaveLevel>
									</Subtree>
									<UnstreamGroup>
										<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</CallbackEventCatch_empty>
									</UnstreamGroup>
								</CallDecorator_leaveLevel>
							</IfGate>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<Wait hasInputBreakpoint="0" comment="I could despawn it, but why would I? Event system is already taking care of safe event despawning.. Also despawning one NPC from AI could produce errors in logic that still running and caring about the NPC (concept logic of event?). It also doesn&apos;t really solves any problems? So lets just wait for ES to despawn the whole event" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest>
				<Despawn editorPosX="870" editorPosY="310" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Despawn>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="watchPlayerFight" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextElement context="actorCondition_forcedCrimeWatching_violent" enabled="true">
					<CrimeFollower Target="$__player" Role="Observer" RelativeSpeedLimit="Dash" BlockWay="false" NoMoveOnlyTurn="false" />
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CrimeFollower>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitForPlayerDialog" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Loop count="-1">
						<Sequence>
							<Turn target="$__player" align="false" />
							<Wait duration="&apos;200ms&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Sequence>
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<HasGenderCheck Gender="Male" SoulWUID="" FailSubtMissing="false" saveVersion="2">
					<Then canSkip="1">
						<UnstanceAction unstance="npc_nervous2" locationObject="" slaveObject="" />
					</Then>
					<Else canSkip="1">
						<UnstanceAction unstance="AlertedLookingAround" locationObject="" slaveObject="" />
					</Else>
				</HasGenderCheck>
				<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				<WaitAction />
			</Sequence>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Turn>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="490" editorPosY="-380" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
						</Then>
						<Else>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
						</Else>
					</HasGenderCheck>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
					<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</WaitAction>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="lootCorpse" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Move stopWithinDistance="1.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<Turn target="$data" align="false" />
					<Parallel successMode="Any" failureMode="Any">
						<Loop count="-1">
							<Sequence>
								<UnstanceAction unstance="Loot" locationObject="" slaveObject="" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</Loop>
						<Function_lootItemTransfer badLootBark="" corpse="$data" enableBarks="false" goodLootBark="" lootingBark="" minPriceForGoodLoot="100" nodeLabel="37601006" />
					</Parallel>
					<Callback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Turn>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Loop>
							<Function_lootItemTransfer hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_lootItemTransfer>
						</Parallel>
						<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveToCorpse" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Turn target="$data" align="false" />
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Turn>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wolfSlowlyGettingCloser" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="4.000000" High="4.000000" Negation="true" OpenInMiddle="false" RunLogic="Halt">
						<ForceLook LookTarget="$data" DisableVariations="false">
							<Loop count="-1">
								<Sequence>
									<DistanceCondition Origin="$this.id" ReferencePt="$data" Low="4.500000" High="4.500000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
										<Parallel successMode="Any" failureMode="Any">
											<CrimeFollower Target="$data" Mode="Default" Role="Assist" RelativeSpeedLimit="Walk" DisableGhosting="false" />
											<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
										</Parallel>
									</DistanceCondition>
									<Function_switch_animal_oneshotDogBark barkTarget="$data" count="1" shouldConsiderPerk="true" nodeLabel="12678561" />
								</Sequence>
							</Loop>
						</ForceLook>
					</DistanceGate>
					<Turn target="$__player" align="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-570" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</CrimeFollower>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Parallel>
										</DistanceCondition>
										<Function_switch_animal_oneshotDogBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_switch_animal_oneshotDogBark>
									</Sequence>
								</Loop>
							</ForceLook>
						</DistanceGate>
						<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Turn>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="victimReactsToWolves" is_function="0">
		<Variables>
			<Variable name="currentWolf" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="nebakovPruzkum_kapitanStraziAHracKostek" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContextElement context="actorCondition_forcedCrimeWatching_violent" enabled="true">
							<Sequence>
								<WaitAction />
								<Parallel successMode="Any" failureMode="Any">
									<Loop count="-1">
										<Sequence>
											<RandomItem Array="$participants" Result="$currentWolf" Clamp="-1" />
											<ForceLook LookTarget="$currentWolf" DisableVariations="true">
												<Parallel successMode="Any" failureMode="Any">
													<Sequence>
														<Function_speech_schedulerMonolog alias="$alias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" subtitlesDown="false" nodeLabel="70154975" />
														<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
													</Sequence>
													<CrimeFollower Target="$currentWolf" Mode="NoMoveOnlyTurn" Role="Observer" RelativeSpeedLimit="Dash" DisableGhosting="false" />
												</Parallel>
											</ForceLook>
										</Sequence>
									</Loop>
									<Wait duration="&apos;60s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Parallel>
							</Sequence>
						</EntityContextElement>
					</Child>
					<OnSuccess canSkip="1">
						<Callback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidArray_string" EventSet="endNotification">
			<Variables>
				<Variable name="currentWolf" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="participants" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="Prevent event FF" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</RandomItem>
												<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
														<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</CrimeFollower>
													</Parallel>
												</ForceLook>
											</Sequence>
										</Loop>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Parallel>
								</Sequence>
							</EntityContextElement>
						</Child>
						<OnSuccess>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="eatCorpse" is_function="0">
		<Variables>
			<Variable name="corpse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isAwareOfPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reactDistance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="rotationTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stopDistance" type="_float" values="0.8" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
					<Sequence>
						<Selector>
							<Sequence>
								<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;deadbody_fastforward&apos;" prune="true" negprune="unknown" Parent="" Child="$corpse" Data="" />
								</GraphSearch>
								<Expression expressions="$stopDistance = 0.8" />
							</Sequence>
							<Sequence>
								<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;deadbody_fastforward_horse&apos;" prune="true" negprune="unknown" Parent="" Child="$corpse" Data="" />
								</GraphSearch>
								<Expression expressions="$stopDistance = 1" />
							</Sequence>
							<Sequence>
								<Expression expressions="$corpse = $data" />
								<EntityContextCheck context="switch_isHorse" target="$corpse" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$stopDistance = 1" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$stopDistance = 0.8" />
									</Else>
								</EntityContextCheck>
							</Sequence>
						</Selector>
					<Expression expressions="$rotationTarget = $corpse" />
					<IsFastTraveling saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$rotationTarget = $__player" />
						</Then>
						<Else canSkip="1">
							<Success />
						</Else>
					</IsFastTraveling>
					<Function_scatterAroundPoint SO="$__object.id" innerCircleRadius="2.000000" outerCircleRadius="3.000000" referencePoint="$corpse" rotateTowardsTarget="$rotationTarget" isFastForwarded="" nodeLabel="16561357" />
					<Function_crime_checkPlayerAwareness timeThreshold="10000" isAwareOfPlayer="$isAwareOfPlayer" nodeLabel="90860505" />
					<IfCondition failOnCondition="false" condition="~$isAwareOfPlayer">
							<Sequence>
								<Move stopWithinDistance="$stopDistance" stopDistanceVariation="0.200000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$corpse" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<Turn target="$corpse" align="false" />
								<UnstanceAction unstance="dog_eatingStanding" locationObject="" slaveObject="" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
					</IfCondition>
					</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<Parallel successMode="Any" failureMode="Any">
				<CrimeFollower Target="$corpse" Mode="Default" Role="Main" RelativeSpeedLimit="Walk" DisableGhosting="false" />
				<DistanceGate Origin="$this.id" ReferencePt="$corpse" Low="4.000000" High="4.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
					<Sequence>
						<GetLastNavmeshPosition Target="$this.id" OutPos="$wolf_prevPos" TrackingMode="NPCPos" />
						<LoopUntil until="Success" attemptCount="0">
							<Sequence>
								<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
								<GetLastNavmeshPosition Target="$this.id" OutPos="$wolf_currentPos" TrackingMode="NPCPos" />
								<IfElseCondition failOnCondition="false" condition="$wolf_currentPos == $wolf_prevPos" saveVersion="2">
									<Then canSkip="1">
										<Success />
									</Then>
									<Else canSkip="1">
										<Sequence>
											<Expression expressions="$wolf_prevPos = $wolf_currentPos" />
											<Fail />
										</Sequence>
									</Else>
								</IfElseCondition>
							</Sequence>
						</LoopUntil>
					</Sequence>
				</DistanceGate>
			</Parallel>
			<Loop count="-1">
				<Sequence>
					<RandomItem Array="$wuidArray" Result="$corpse" Clamp="-1" />
					<IfCondition failOnCondition="false" condition="$corpse ~= $prev_corpse">
						<Sequence>
							<EntityContextCheck context="switch_isHorse" target="$corpse" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$stopDistance = 1" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$stopDistance = 0.8" />
								</Else>
							</EntityContextCheck>
							<Move stopWithinDistance="$stopDistance" stopDistanceVariation="0.200000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$corpse" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						</Sequence>
					</IfCondition>
					<Expression expressions="$prev_corpse = $corpse" />
				</Sequence>
			</Loop>
		</ForestContainer>
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="corpse" comment="" />
				<Variable name="isAwareOfPlayer" comment="" />
				<Variable name="reactDistance" comment="" />
				<Variable name="rotationTarget" comment="" />
				<Variable name="stopDistance" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
								<Sequence hasInputBreakpoint="0" comment="Not crimeScene, corpse is sent via EnableBehavior" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</EntityContextCheck>
								</Sequence>
							</Selector>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<IsFastTraveling hasInputBreakpoint="0" comment="FT interruption" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Else>
						</IsFastTraveling>
							<Function_scatterAroundPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_scatterAroundPoint>
						<Function_crime_checkPlayerAwareness hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_checkPlayerAwareness>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="Lets just eat one corpse, its impossible to make wolves not to clip into one another with several corpses" breakpointFlags="0">
									<OutputBreakpoints />
									<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Move>
									<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Turn>
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
						</IfCondition>
						</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<Parallel editorPosX="1850" editorPosY="330" hasInputBreakpoint="0" comment="Lets try position wolves so they dont intersect each other at the final spot" breakpointFlags="0">
					<OutputBreakpoints />
					<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</CrimeFollower>
					<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GetLastNavmeshPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetLastNavmeshPosition>
							<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
									<GetLastNavmeshPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetLastNavmeshPosition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Then>
										<Else>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</Sequence>
										</Else>
									</IfElseCondition>
								</Sequence>
							</LoopUntil>
						</Sequence>
					</DistanceGate>
				</Parallel>
				<Loop editorPosX="1930" editorPosY="790" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</RandomItem>
						<IfCondition hasInputBreakpoint="0" comment="the only robust way of making the wolf stay at its place while eating the corpse, believe me..." breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</EntityContextCheck>
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
							</Sequence>
						</IfCondition>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Sequence>
				</Loop>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="eventLeaveLevel_useHorse" is_function="0">
		<Variables>
			<Variable name="horse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="horseIsPlayerHorse" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="levelExit" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="levelExits" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="playerHorse" type="_wuid" values="false" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<GraphSearch Origin="$__land" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<CategoryFilter categories="&apos;levelExit&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
					<Nodalyzer Quantifiers="ForAll" Parent="" Child="$levelExits" saveVersion="2">
						<Child0 canSkip="1">
							<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
						</Child0>
					</Nodalyzer>
				</GraphSearch>
				<Expression expressions="$levelExit = $levelExits[0]" />
				<Sequence>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;event_dummyWandererHorse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<Nodalyzer Quantifiers="Exists" Parent="" Child="$horse" saveVersion="2" />
					</GraphSearch>
					<Sequence>
						<GetPlayerHorse HorseWuid="$playerHorse" />
						<CheckWuidValid wuid="$playerHorse" FailSubtMissing="false" saveVersion="2">
							<Then canSkip="1">
								<IfCondition failOnCondition="false" condition="$playerHorse == $horse">
									<Expression expressions="$horseIsPlayerHorse = true" />
								</IfCondition>
							</Then>
							<Else canSkip="1">
								<Success />
							</Else>
						</CheckWuidValid>
					</Sequence>
					<Selector>
						<IfCondition failOnCondition="true" condition="~$horseIsPlayerHorse">
							<StanceCheck soul="$__player" stance="horse" smartObject="$horse" negate="false" failOnCondition="false" saveVersion="2">
								<Then canSkip="1">
									<Fail />
								</Then>
								<Else canSkip="1">
									<HorseUsageElement horse="$horse" decisionLabel="Label1" useDecision="true" enabled="true" saveVersion="2">
										<Search canSkip="1">
											<Success />
										</Search>
										<Exec canSkip="1">
											<StanceElement smartObject="$horse" stance="horse" allowAny="false" enabled="true">
												<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="5.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$levelExit" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
											</StanceElement>
										</Exec>
									</HorseUsageElement>
								</Else>
							</StanceCheck>
						</IfCondition>
						<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="5.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$levelExit" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					</Selector>
				</Sequence>
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
			</Sequence>
		</ForestContainer>
		<EditorData Signature="eventLeaveLevel" EventSet="">
			<Variables>
				<Variable name="horse" comment="" />
				<Variable name="horseIsPlayerHorse" comment="" />
				<Variable name="levelExit" comment="" />
				<Variable name="levelExits" comment="" />
				<Variable name="playerHorse" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="OBSOLETE USE eventLeaveLevel INSTEAD" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="450" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CategoryFilter>
						<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child0>
								<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</RangeSorter>
							</Child0>
						</Nodalyzer>
					</GraphSearch>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SoulIsAliveFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GetPlayerHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetPlayerHorse>
							<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
								</Then>
								<Else>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Else>
							</CheckWuidValid>
						</Sequence>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Fail>
									</Then>
									<Else>
										<HorseUsageElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Search>
											<Exec>
												<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Move>
												</StanceElement>
											</Exec>
										</HorseUsageElement>
									</Else>
								</StanceCheck>
							</IfCondition>
							<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Move>
						</Selector>
					</Sequence>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="jardasFriend_afterFightReaction" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<ForceLook LookTarget="$wuid" DisableVariations="true">
								<Parallel successMode="All" failureMode="Any">
									<IsLoadedGate saveVersion="2">
										<Else canSkip="1">
											<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;startBark&apos;" RunLogic="KeepRunning">
												<Sequence>
													<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
													<SuppressFailure>
														<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" subtitlesDown="false" nodeLabel="28560212" />
													</SuppressFailure>
												</Sequence>
											</ExternalLock>
										</Else>
									</IsLoadedGate>
									<IsUnconsciousCheck SoulWUID="$wuid" FailSubtMissing="false" saveVersion="2">
										<Then canSkip="1">
											<Parallel successMode="Any" failureMode="Any">
												<DeadUnconsciousGate Who="$wuid" State="Dead" Negation="false" RunLogic="KeepRunning">
													<Success />
												</DeadUnconsciousGate>
												<LinkGate from="$wuid" to="$__player" tag="&apos;bodyCarrier&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
													<Success />
												</LinkGate>
												<Sequence>
													<Move stopWithinDistance="0.500000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													<Turn target="$wuid" align="false" />
													<AnimationAction fragment="&apos;GuardWakeup&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;startBark&apos;" />
													<AddBuff SoulWUID="$wuid" BuffGUID="&apos;bd22f98a-e61f-4d83-b39c-79d1d85b6b91&apos;" />
												</Sequence>
											</Parallel>
										</Then>
										<Else canSkip="1">
											<IsLoadedGate saveVersion="2">
												<Else canSkip="1">
													<Sequence>
														<Turn target="$wuid" align="false" />
														<UnstanceAction unstance="cheering" locationObject="" slaveObject="" />
														<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;startBark&apos;" />
														<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
													</Sequence>
												</Else>
											</IsLoadedGate>
										</Else>
									</IsUnconsciousCheck>
								</Parallel>
							</ForceLook>
							<UrgencyDecorator Urgency="Slow">
								<WaitAction />
							</UrgencyDecorator>
							<ForceLook LookTarget="$__player" DisableVariations="false">
								<Parallel successMode="Any" failureMode="Any">
									<Loop count="-1">
										<Sequence>
											<Turn target="$__player" align="false" />
											<Wait duration="&apos;200ms&apos;" timeType="GameTime" doFail="false" variation="" />
										</Sequence>
									</Loop>
									<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Parallel>
							</ForceLook>
						</Sequence>
					</Child>
					<OnFail canSkip="1">
						<Callback_empty EventName="&apos;OnFinished&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-60" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Else>
												<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</SuppressFailure>
													</Sequence>
												</ExternalLock>
											</Else>
										</IsLoadedGate>
										<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</DeadUnconsciousGate>
													<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</LinkGate>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
														<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Turn>
														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AnimationAction>
														<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SetExternalLock>
														<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AddBuff>
													</Sequence>
												</Parallel>
											</Then>
											<Else>
												<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Else>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Turn>
															<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</UnstanceAction>
															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetExternalLock>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
													</Else>
												</IsLoadedGate>
											</Else>
										</IsUnconsciousCheck>
									</Parallel>
								</ForceLook>
								<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
								</UrgencyDecorator>
								<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Turn>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</Loop>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Parallel>
								</ForceLook>
							</Sequence>
						</Child>
						<OnFail>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="regroup" is_function="0">
		<Variables>
			<Variable name="npcs_count" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidDataArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<IfElseCondition failOnCondition="false" condition="$this.id ~= $wuidData" saveVersion="2">
								<Then canSkip="1">
									<Move stopWithinDistance="1.500000" stopDistanceVariation="0.300000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuidData" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								</Then>
								<Else canSkip="1">
									<WaitAction />
								</Else>
							</IfElseCondition>
							<Expression expressions="$npcs_count = #wuidDataArray" />
							<Synchronize SemaphoreCount="$npcs_count" InsideTimerValue="&apos;2m&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;randomEvent_regroup&apos;" RunLogic="KeepRunning">
								<Success />
							</Synchronize>
						</Sequence>
					</Child>
					<OnFail canSkip="1">
						<Callback_empty EventName="&apos;OnFinished&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidDataWuidDataArray" EventSet="endNotification">
			<Variables>
				<Variable name="npcs_count" comment="" />
				<Variable name="wuidData" comment="" />
				<Variable name="wuidDataArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-70" editorPosY="50" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Move>
									</Then>
									<Else>
										<WaitAction hasInputBreakpoint="0" comment="Undraw weapon just in case to have no delay for leaveLevel" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
									</Else>
								</IfElseCondition>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Synchronize>
							</Sequence>
						</Child>
						<OnFail>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="scatterWolvesAroundPoint" is_function="0">
		<Variables>
			<Variable name="center_pos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="random_pos" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_scatterAroundPoint SO="$__object.id" innerCircleRadius="7.000000" outerCircleRadius="15.000000" referencePoint="$data" rotateTowardsTarget="$data" isFastForwarded="" nodeLabel="26699791" />
					<Callback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<TeleportAction Position="$random_pos" EndInterruptOnActionStart="false" />
			<GetSpatialInfo In="$data" Out="$center_pos" What="Position" />
			<Expression expressions="$random_pos = $center_pos" />
			<LoopUntil until="Success" attemptCount="5">
				<Sequence>
					<GetRandomPos StartPos="$center_pos" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="15.000000" Precise="false" MaxIterantions="5" Target="$random_pos" navAgentType="Automatic" pathFindingParams="" />
					<MeasureDistance position1="$random_pos" position2="$center_pos" mode="ThreeDimensions" result="$distance" />
					<IfElseCondition failOnCondition="false" condition="$distance &gt; 5" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
						<Else canSkip="1">
							<Fail />
						</Else>
					</IfElseCondition>
				</Sequence>
			</LoopUntil>
		</ForestContainer>
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="center_pos" comment="" />
				<Variable name="distance" comment="" />
				<Variable name="random_pos" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_scatterAroundPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_scatterAroundPoint>
						<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<TeleportAction editorPosX="800" editorPosY="-90" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</TeleportAction>
				<GetSpatialInfo editorPosX="800" editorPosY="-370" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</GetSpatialInfo>
				<Expression editorPosX="800" editorPosY="-280" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Expression>
				<LoopUntil editorPosX="800" editorPosY="-180" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetRandomPos>
						<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</MeasureDistance>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
							<Else>
								<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Fail>
							</Else>
						</IfElseCondition>
					</Sequence>
				</LoopUntil>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="scatterAroundPoint" is_function="1">
		<Variables>
			<Variable name="randomPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="referencePos" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="SO" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="innerCircleRadius" type="_float" values="0.5" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isFastForwarded" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" optional="1" />
			<Variable name="outerCircleRadius" type="_float" values="2.0" isPersistent="0" form="single" requirementType="In" />
			<Variable name="referencePoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="rotateTowardsTarget" type="_wuid" values="$__player" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IsFastForwarded failOnCondition="false" saveVersion="2">
					<Then canSkip="1">
						<Sequence>
							<Function_tryGetRandomPosOnCircleBorder SO="$SO" discardIfNearPlayerThreshold="1.000000" innerCircleRadius="$innerCircleRadius" outerCircleRadius="$outerCircleRadius" referencePoint="$referencePoint" bestPos="$randomPos" nodeLabel="50973742" />
							<ExactMove directionType="FromVariable" directionSpecification="$rotateTowardsTarget" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$randomPos" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<Expression expressions="$isFastForwarded = true" />
						</Sequence>
					</Then>
					<Else canSkip="1">
						<Success />
					</Else>
				</IsFastForwarded>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<GetSpatialInfo In="$referencePoint" Out="$referencePos" What="Position" />
				<Loop count="10">
					<Sequence>
						<GetRandomPos StartPos="$referencePos" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="3.000000" Precise="false" MaxIterantions="1" Target="$randomPos" navAgentType="Automatic" pathFindingParams="" />
						<PushToArray array="$randomPositions" value="$randomPos" direction="Back" />
					</Sequence>
				</Loop>
				<ExecuteLua code="Dump(&quot;Raw&quot;) &#10;Dump(data.randomPositions) &#10; &#10;local playerPos = player:GetPos() &#10;local maxDist = VectorUtils.DistanceSquared2D(data.randomPositions[0], playerPos) &#10;local maxDistIndex = 0 &#10;for i = 1, #data.randomPositions do &#10;  local calculatedDist = VectorUtils.DistanceSquared2D(data.randomPositions[i], playerPos) &#10;  if calculatedDist &gt; maxDist then &#10;    maxDist = calculatedDist &#10;    maxDistIndex = i &#10;  end &#10;end &#10; &#10;Dump(&quot;minDist:&quot; .. maxDist .. &quot; index: &quot; .. maxDistIndex) &#10;Dump(&quot;old&quot;) &#10;Dump(data.randomPos) &#10;data.randomPos = data.randomPositions[maxDistIndex] &#10;Dump(&quot;new&quot;) &#10;Dump(data.randomPos)" />
				<ExactMove directionType="FromVariable" directionSpecification="$__player" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$randomPos" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
			</Sequence>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="randomPos" comment="" />
				<Variable name="referencePos" comment="" />
				<Variable name="SO" comment="" />
				<Variable name="innerCircleRadius" comment="" />
				<Variable name="isFastForwarded" comment="" />
				<Variable name="outerCircleRadius" comment="" />
				<Variable name="referencePoint" comment="" />
				<Variable name="rotateTowardsTarget" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_tryGetRandomPosOnCircleBorder hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_tryGetRandomPosOnCircleBorder>
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
								<Expression hasInputBreakpoint="0" comment="When checking for HasNotSeenPlayer later inside urgeDialog we are already outside of FastTravel, so its fails. We should ignore that check so it always succeeds during FT interruption" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</Then>
						<Else>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Else>
					</IsFastForwarded>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="1280" editorPosY="-360" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</GetSpatialInfo>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetRandomPos>
							<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</PushToArray>
						</Sequence>
					</Loop>
					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExecuteLua>
					<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExactMove>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="tryGetRandomPosOnCircleBorder" is_function="1">
		<Variables>
			<Variable name="NPCsAround" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="bestDistance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="iterations" type="_int" values="10" isPersistent="0" form="single" />
			<Variable name="minDistBetweenResults" type="_float" values="0.7" isPersistent="0" form="single" />
			<Variable name="playerPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="randomPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="referencePos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="reservedPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="reservedPositions" type="vec3" values="" isPersistent="0" form="array" />
			<Variable name="tooCloseToReserved" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="zeroVec3" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="SO" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="bestPos" type="vec3" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="discardIfNearPlayerThreshold" type="_float" values="0" isPersistent="0" form="single" requirementType="In" />
			<Variable name="innerCircleRadius" type="_float" values="0.5" isPersistent="0" form="single" requirementType="In" />
			<Variable name="outerCircleRadius" type="_float" values="2" isPersistent="0" form="single" requirementType="In" />
			<Variable name="referencePoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<Sequence>
						<GraphSearch Origin="$SO" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;event_reservedPosition&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							<Datalyzer Tag="&apos;event_reservedPosition&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$reservedPositions" saveVersion="2" />
						</GraphSearch>
						<GetSpatialInfo In="$referencePoint" Out="$referencePos" What="Position" />
						<GetSpatialInfo In="$__player" Out="$playerPos" What="Position" />
						<SuppressFailure>
							<LoopUntil until="Success" attemptCount="$iterations">
								<Sequence>
									<GetRandomPos StartPos="$referencePos" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="$outerCircleRadius" Precise="true" MaxIterantions="20" Target="$randomPos" navAgentType="Automatic" pathFindingParams="" />
									<IfCondition failOnCondition="false" condition="$discardIfNearPlayerThreshold ~= 0">
										<Sequence>
											<MeasureDistance position1="$randomPos" position2="$playerPos" mode="TwoDimensions" result="$distance" />
											<IfCondition failOnCondition="false" condition="$distance &lt; $discardIfNearPlayerThreshold">
												<Fail />
											</IfCondition>
										</Sequence>
									</IfCondition>
									<Sequence>
										<Expression expressions="$tooCloseToReserved = false" />
										<ForEach startIndex="0" step="1" array="$reservedPositions" iterator="" value="$reservedPos" break="$tooCloseToReserved">
											<Sequence>
												<MeasureDistance position1="$reservedPos" position2="$randomPos" mode="TwoDimensions" result="$distance" />
												<IfCondition failOnCondition="false" condition="$distance &lt; $minDistBetweenResults">
													<Expression expressions="$tooCloseToReserved = true" />
												</IfCondition>
											</Sequence>
										</ForEach>
										<IfCondition failOnCondition="false" condition="$tooCloseToReserved">
											<Fail />
										</IfCondition>
									</Sequence>
									<MeasureDistance position1="$randomPos" position2="$referencePoint" mode="TwoDimensions" result="$distance" />
									<IfCondition failOnCondition="false" condition="$distance &lt; $innerCircleRadius">
										<Sequence>
											<IfCondition failOnCondition="false" condition="$distance &gt; $bestDistance">
												<Expression expressions="$bestDistance = $distance &#10;$bestPos = $randomPos" />
											</IfCondition>
											<Fail />
										</Sequence>
									</IfCondition>
									<Expression expressions="$bestPos = $randomPos" />
								</Sequence>
							</LoopUntil>
						</SuppressFailure>
						<IfCondition failOnCondition="false" condition="$bestPos == $zeroVec3">
							<GetRandomPos StartPos="$referencePos" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="$outerCircleRadius" Precise="false" MaxIterantions="1" Target="$bestPos" navAgentType="Automatic" pathFindingParams="" />
						</IfCondition>
						<AddLink From="$SO" To="$this.id" Tag="&apos;event_reservedPosition&apos;" Data="$bestPos" LinkOpHandleMode="Error" />
					</Sequence>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="NPCsAround" comment="" />
				<Variable name="bestDistance" comment="" />
				<Variable name="distance" comment="" />
				<Variable name="iterations" comment="" />
				<Variable name="minDistBetweenResults" comment="" />
				<Variable name="playerPos" comment="" />
				<Variable name="randomPos" comment="" />
				<Variable name="referencePos" comment="" />
				<Variable name="reservedPos" comment="" />
				<Variable name="reservedPositions" comment="" />
				<Variable name="tooCloseToReserved" comment="" />
				<Variable name="zeroVec3" comment="" />
				<Variable name="SO" comment="" />
				<Variable name="bestPos" comment="" />
				<Variable name="discardIfNearPlayerThreshold" comment="" />
				<Variable name="innerCircleRadius" comment="" />
				<Variable name="outerCircleRadius" comment="" />
				<Variable name="referencePoint" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="10" editorPosY="70" hasInputBreakpoint="0" comment="I am so so sorry..." breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
								<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
								</Datalyzer>
							</GraphSearch>
							<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetSpatialInfo>
							<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetSpatialInfo>
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetRandomPos>
										<IfCondition hasInputBreakpoint="0" comment="Check near player" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</MeasureDistance>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Fail>
												</IfCondition>
											</Sequence>
										</IfCondition>
										<Sequence hasInputBreakpoint="0" comment="Check already reserved positions" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<ForEach hasInputBreakpoint="0" comment="Check already reserved positions" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</MeasureDistance>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
												</Sequence>
											</ForEach>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</IfCondition>
										</Sequence>
										<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</MeasureDistance>
										<IfCondition hasInputBreakpoint="0" comment="Check inner circle" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</Sequence>
										</IfCondition>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
								</LoopUntil>
							</SuppressFailure>
							<IfCondition hasInputBreakpoint="0" comment="Well, we tried..." breakpointFlags="0">
								<OutputBreakpoints />
								<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetRandomPos>
							</IfCondition>
							<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</AddLink>
						</Sequence>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="lootItemTransfer" is_function="1">
		<Variables>
			<Variable name="foundItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="itemAmount" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="itemPrice" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="remainingItemsInInventory" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="badLootBark" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" optional="1" />
			<Variable name="corpse" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="enableBarks" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="goodLootBark" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" optional="1" />
			<Variable name="lootingBark" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" optional="1" />
			<Variable name="minPriceForGoodLoot" type="_int" values="100" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<LoopUntil until="Fail" attemptCount="0">
						<Sequence>
							<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
							<IfCondition failOnCondition="false" condition="$enableBarks">
								<RandomGate opensWithChance="0.500000" saveVersion="2">
									<Then canSkip="1">
										<SuppressFailure>
											<Function_speech_schedulerMonolog alias="$lootingBark" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="33662173" />
										</SuppressFailure>
									</Then>
									<Else canSkip="1">
										<Success />
									</Else>
								</RandomGate>
							</IfCondition>
							<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
							<AtomicDecorator>
								<Sequence>
									<GraphSearch Origin="$corpse" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="&apos;inventory&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<ItemParamFilter Param="Equip" Source="Child" prune="true" negprune="unknown" Parent="" Child="$foundItem" />
									</GraphSearch>
									<GetItemProperty itemId="$foundItem" property="Amount" result="$itemAmount" />
									<GetItemProperty itemId="$foundItem" property="Price" result="$itemPrice" />
									<MoveItem Item="$foundItem" ItemGUID="" Source="$corpse" Target="$this.id" Amount="$itemAmount" FailOnDoesntExist="false" NotifyUI="false" MovedItem="" ChangeOwnership="false" />
								</Sequence>
							</AtomicDecorator>
							<IfCondition failOnCondition="false" condition="$enableBarks">
								<SuppressFailure>
									<IfElseCondition failOnCondition="false" condition="$itemPrice &gt;= $minPriceForGoodLoot" saveVersion="2">
										<Then canSkip="1">
											<Function_speech_schedulerMonolog alias="$goodLootBark" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="67332256" />
										</Then>
										<Else canSkip="1">
											<Function_speech_schedulerMonolog alias="$badLootBark" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="11701977" />
										</Else>
									</IfElseCondition>
								</SuppressFailure>
							</IfCondition>
						</Sequence>
					</LoopUntil>
					<AtomicDecorator>
						<Sequence>
							<ReinitVariable variable="$remainingItemsInInventory" />
							<GraphSearch Origin="$corpse" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="&apos;inventory&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<ItemParamFilter Param="All" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
								<Nodalyzer Quantifiers="ForAll" Parent="" Child="$remainingItemsInInventory" saveVersion="2" />
							</GraphSearch>
							<IfCondition failOnCondition="false" condition="#remainingItemsInInventory &gt; 0">
								<ForEach startIndex="0" step="1" array="$remainingItemsInInventory" iterator="" value="$foundItem" break="">
									<Sequence>
										<GetItemProperty itemId="$foundItem" property="Amount" result="$itemAmount" />
										<MoveItem Item="$foundItem" ItemGUID="" Source="$corpse" Target="$this.id" Amount="$itemAmount" FailOnDoesntExist="false" NotifyUI="false" MovedItem="" ChangeOwnership="false" />
									</Sequence>
								</ForEach>
							</IfCondition>
						</Sequence>
					</AtomicDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="foundItem" comment="" />
				<Variable name="itemAmount" comment="" />
				<Variable name="itemPrice" comment="" />
				<Variable name="remainingItemsInInventory" comment="" />
				<Variable name="badLootBark" comment="" />
				<Variable name="corpse" comment="" />
				<Variable name="enableBarks" comment="" />
				<Variable name="goodLootBark" comment="" />
				<Variable name="lootingBark" comment="" />
				<Variable name="minPriceForGoodLoot" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="50" editorPosY="780" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</SuppressFailure>
										</Then>
										<Else>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Else>
									</RandomGate>
								</IfCondition>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ItemParamFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ItemParamFilter>
										</GraphSearch>
										<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetItemProperty>
										<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetItemProperty>
										<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</MoveItem>
									</Sequence>
								</AtomicDecorator>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</Then>
											<Else>
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</Else>
										</IfElseCondition>
									</SuppressFailure>
								</IfCondition>
							</Sequence>
						</LoopUntil>
						<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ReinitVariable>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ItemParamFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ItemParamFilter>
									<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
									</Nodalyzer>
								</GraphSearch>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetItemProperty>
											<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</MoveItem>
										</Sequence>
									</ForEach>
								</IfCondition>
							</Sequence>
						</AtomicDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="npcPolylog_withWeapon" is_function="0">
		<Variables>
			<Variable name="npcsWithWeapons_keyOut" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="animationApproach" type="enum:animationApproach" values="ingameDialogPoseAndAnimations" isPersistent="0" form="single" requirementType="In" />
			<Variable name="fastForwardIncludesMove" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="npcs" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="npcsWithWeapons" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="places" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="speed" type="enum:movementSpeed" values="alertedWalk" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Selector>
						<Sequence>
							<FindInArray array="$npcsWithWeapons" keyOut="$npcsWithWeapons_keyOut" condition="$__value == $this.id" />
							<Function_drawWeapon_withTorchAtNight nodeLabel="71502661" />
						</Sequence>
						<Success />
					</Selector>
					<AnyDecorator preset="crime_keepItems" enabled="true">
						<CallDecorator_resultNotification>
							<Subtree canSkip="1">
								<Function_npcPolylog alias="$alias" animationApproach="$animationApproach" fastForwardIncludesMove="$fastForwardIncludesMove" haveWeaponDrawn="" npcs="$npcs" places="$places" speed="$speed" nodeLabel="51202723" />
							</Subtree>
							<Success canSkip="1">
								<CallbackEventCatch_empty>
									<Callback_empty EventName="&apos;Success&apos;" />
								</CallbackEventCatch_empty>
							</Success>
							<Fail canSkip="1">
								<CallbackEventCatch_empty>
									<Callback_empty EventName="&apos;Fail&apos;" />
								</CallbackEventCatch_empty>
							</Fail>
						</CallDecorator_resultNotification>
					</AnyDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="npcPolylog_withWeapon" EventSet="resultNotification">
			<Variables>
				<Variable name="npcsWithWeapons_keyOut" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="animationApproach" comment="" />
				<Variable name="fastForwardIncludesMove" comment="" />
				<Variable name="npcs" comment="" />
				<Variable name="npcsWithWeapons" comment="" />
				<Variable name="places" comment="" />
				<Variable name="speed" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</FindInArray>
								<Function_drawWeapon_withTorchAtNight hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_drawWeapon_withTorchAtNight>
							</Sequence>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Selector>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallDecorator_resultNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Subtree>
									<Function_npcPolylog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_npcPolylog>
								</Subtree>
								<Success>
									<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Callback_empty>
									</CallbackEventCatch_empty>
								</Success>
								<Fail>
									<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Callback_empty>
									</CallbackEventCatch_empty>
								</Fail>
							</CallDecorator_resultNotification>
						</AnyDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="drawWeapon_withTorchAtNight" is_function="1">
		<Variables>
			<Variable name="hand_left" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="hand_right" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IsWeaponDrawn who="" WeaponSet="Primary" saveVersion="2">
					<Then canSkip="1">
						<Success />
					</Then>
					<Else canSkip="1">
						<HandContentElement hand="Right" item="$hand_right" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
							<Search canSkip="1">
								<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$hand_left" RightHand="$hand_right" UseTorchWhenAppropriate="true" />
							</Search>
							<Exec canSkip="1">
								<HandContentElement hand="Left" item="$hand_left" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
									<Search canSkip="1">
										<Success />
									</Search>
									<Exec canSkip="1">
										<WaitAction />
									</Exec>
								</HandContentElement>
							</Exec>
						</HandContentElement>
					</Else>
				</IsWeaponDrawn>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="hand_left" comment="" />
				<Variable name="hand_right" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Then>
						<Else>
							<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Search>
									<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetWeaponsFromWeaponSet>
								</Search>
								<Exec>
									<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Search>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Search>
										<Exec>
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
										</Exec>
									</HandContentElement>
								</Exec>
							</HandContentElement>
						</Else>
					</IsWeaponDrawn>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>