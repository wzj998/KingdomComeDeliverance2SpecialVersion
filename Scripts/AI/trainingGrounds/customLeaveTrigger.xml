<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="trainingGrounds_customLeaveTrigger" is_function="0">
    <Variables>
      <Variable name="interruptSO" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="stopFight" type="stopFight" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;trainingGroundsSO&apos;" prune="true" negprune="unknown" Parent="" Child="$interruptSO" Data="" />
          </GraphSearch>
          <NPCStateGate State="Health" Target="$this.id" Low="30.000000" High="30.000000" Negation="false" RunLogic="KeepRunning">
            <Sequence>
              <GetSkirmishParticipants ReferenceNPC="$this.id" Active="true" Passive="false" Targets="false" HumanOnly="false" ParticipantsOutVar="$participants" />
              <IfElseCondition failOnCondition="false" condition="#participants &gt; 2" saveVersion="2">
                <Then canSkip="1">
                  <AddInterrupt_empty Target="$this.id" Host="$interruptSO" Behavior="&apos;leaveCombatArea&apos;" Priority="180" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" Aliveness="Alive" Privileged="false" FastForward="false" />
                </Then>
                <Else canSkip="1">
                  <InstantSendMessageToNPC target="$this.id" variable="$stopFight" />
                </Else>
              </IfElseCondition>
              <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </NPCStateGate>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="interruptSO" comment="" />
        <Variable name="participants" comment="" />
        <Variable name="stopFight" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <NPCStateGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetSkirmishParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetSkirmishParticipants>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <AddInterrupt_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </AddInterrupt_empty>
                  </Then>
                  <Else>
                    <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </InstantSendMessageToNPC>
                  </Else>
                </IfElseCondition>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </NPCStateGate>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>