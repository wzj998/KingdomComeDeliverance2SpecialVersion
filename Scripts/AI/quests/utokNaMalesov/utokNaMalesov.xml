<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="zizkaband_prepareForStealth" is_function="0">
		<Variables>
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stealthParticipants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="tagpoints" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="speech_readyForSwitchDialog" target="">
					<Sequence>
						<FindInArray array="$stealthParticipants" keyOut="$index" condition="$__value == $this.id" />
						<IfCondition failOnCondition="false" condition="$index ~= 0">
							<IsFastForwarded failOnCondition="false" saveVersion="2">
								<Else canSkip="1">
									<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;moveDesynchronizationSemaphore&apos;">
										<Sequence>
											<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
											<IfCondition failOnCondition="false" condition="#stealthParticipants &lt;= $index + 1">
												<SetExternalLock LockManagerType="Local" Locked="false" LockName="&apos;moveDesynchronizationExternalLock&apos;" />
											</IfCondition>
										</Sequence>
									</Semaphore>
								</Else>
							</IsFastForwarded>
						</IfCondition>
						<StanceCheck soul="$this.id" stance="crouch" smartObject="" negate="true" failOnCondition="false" saveVersion="2">
							<Then canSkip="1">
								<DistanceCondition Origin="$this.id" ReferencePt="$tagpoints[$index]" Low="0.500000" High="0.500000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
									<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
										<Sequence>
											<ExactMove directionType="AlignWithEntity" directionSpecification="$tagpoints[$index]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$tagpoints[$index]" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
											<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
										</Sequence>
									</StanceElement>
								</DistanceCondition>
							</Then>
							<Else canSkip="1">
								<Success />
							</Else>
						</StanceCheck>
						<UnstanceAction unstance="CrouchKneelIdle" locationObject="" slaveObject="" />
						<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_prepareForStealth" EventSet="">
			<Variables>
				<Variable name="index" comment="" />
				<Variable name="stealthParticipants" comment="" />
				<Variable name="tagpoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</FindInArray>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</SetExternalLock>
												</IfCondition>
											</Sequence>
										</Semaphore>
									</Else>
								</IsFastForwarded>
							</IfCondition>
							<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExactMove>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</StanceElement>
									</DistanceCondition>
								</Then>
								<Else>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Else>
							</StanceCheck>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="ptacek_startStealthMission" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="CrouchKneelIdle" locationObject="" slaveObject="" />
					<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="" subtitlesDown="false" nodeLabel="38712116" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_speech_schedulerMonolog>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shooter_move" is_function="0">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="behaviorHolders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="lockCount" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="lookSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;lookSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$lookSpot" Data="" />
					</GraphSearch>
					<SuppressFailure>
						<Sequence>
							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;turnBeforeMove&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							</GraphSearch>
							<Expression expressions="$addParams.turnBeforeMove = true" />
						</Sequence>
					</SuppressFailure>
					<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="true" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="false" />
						</Search>
						<Exec canSkip="1">
							<ForceLook LookTarget="$lookSpot" DisableVariations="true">
								<Sequence>
									<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;destination&apos;" prune="true" negprune="unknown" Parent="" Child="$destination" Data="" />
									</GraphSearch>
									<WaitAction />
									<GetBehaviorHolders area="$__object.id" behaviors="&apos;shooter_move&apos;" targetVar="$behaviorHolders" />
									<Expression expressions="$lockCount = #behaviorHolders" />
									<ActorStateBarrier Who="" ToState="idle" NegateTo="false" RunLogic="KeepRunning">
										<Synchronize SemaphoreCount="$lockCount" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;withdrawWeaponLock&apos;" RunLogic="KeepRunning">
											<SuppressFailure>
												<Sequence>
													<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;leader&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
													</GraphSearch>
													<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
												</Sequence>
											</SuppressFailure>
										</Synchronize>
									</ActorStateBarrier>
									<Synchronize SemaphoreCount="$lockCount" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;movingLock&apos;" RunLogic="KeepRunning">
										<Sequence>
											<Selector>
												<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;leader&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												</GraphSearch>
												<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;moveDesynchronizationLock&apos;">
													<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="&apos;200ms&apos;" />
												</Semaphore>
											</Selector>
											<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="2.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="$addParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
											<ExactMove directionType="AlignWithEntity" directionSpecification="$destination" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
										</Sequence>
									</Synchronize>
									<Synchronize SemaphoreCount="$lockCount" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;trackviewLock&apos;" RunLogic="KeepRunning">
										<Sequence>
											<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
											<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
										</Sequence>
									</Synchronize>
								</Sequence>
							</ForceLook>
						</Exec>
					</HandContentElement>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="endNotification">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="behaviorHolders" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="lockCount" comment="" />
				<Variable name="lookSpot" comment="" />
				<Variable name="rightHandItem" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</SuppressFailure>
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetWeaponsFromWeaponSet>
							</Search>
							<Exec>
								<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetBehaviorHolders>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
														<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantCallback_empty>
													</Sequence>
												</SuppressFailure>
											</Synchronize>
										</ActorStateBarrier>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Semaphore>
												</Selector>
												<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Move>
												<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExactMove>
											</Sequence>
										</Synchronize>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</Sequence>
										</Synchronize>
									</Sequence>
								</ForceLook>
							</Exec>
						</HandContentElement>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments>
				<Comment text="Only_for_trackview_recording" posX="50" posY="-240" width="300" height="127" resizeBorderWidth="300" resizeBorderHeight="100" color="0.65,0.65,0.65" author="aleks" />
			</Comments>
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="sam_urgePlayerToClimbLadder" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="barkingArea" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="barkingEnabled" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="barkingSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="cooldown" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="All" failureMode="Any">
					<Sequence>
						<SuppressFailure>
							<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;5s&apos;" LockManagerType="Local" SemaphoreName="&apos;moveDesynchronizationExternalLock&apos;" RunLogic="KeepRunning">
								<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
							</ExternalLock>
						</SuppressFailure>
						<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
							<Sequence>
								<ExactMove directionType="AlignWithEntity" directionSpecification="$barkingSpot" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$barkingSpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</StanceElement>
						<UnstanceAction unstance="CrouchKneelIdle" locationObject="" slaveObject="" />
					</Sequence>
					<IfGate atomic="false" condition="$barkingEnabled" RunLogic="KeepRunning">
						<Loop count="-1">
							<AreaPresenceGate aiObjects="$__player" area="$barkingArea" amount="AtLeastOne" presence="Present" RunLogic="Halt">
								<ActorStateBarrier Who="$__player" ToState="ladder" NegateTo="true" RunLogic="Halt">
									<ForceLook LookTarget="$__player" DisableVariations="false">
										<Function_monologRepeat alias="$alias" cooldown="$cooldown" repeat="-1" nodeLabel="29032136" />
									</ForceLook>
								</ActorStateBarrier>
							</AreaPresenceGate>
						</Loop>
					</IfGate>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_urgingPlayerToClimbLadder" EventSet="">
			<Variables>
				<Variable name="alias" comment="" />
				<Variable name="barkingArea" comment="" />
				<Variable name="barkingEnabled" comment="" />
				<Variable name="barkingSpot" comment="" />
				<Variable name="cooldown" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</ExternalLock>
							</SuppressFailure>
							<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</StanceElement>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
						</Sequence>
						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_monologRepeat hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_monologRepeat>
										</ForceLook>
									</ActorStateBarrier>
								</AreaPresenceGate>
							</Loop>
						</IfGate>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="zizka_orderVillageAttack" is_function="0">
		<Variables>
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
								<WaitAction />
							</AnyDecorator>
							<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
							<Expression expressions="$useWeapon = $rightHandItem ~= $__null &#10;$useShield = ($leftHandItem ~= $__null &amp; $rightHandItem ~= $__null)" />
							<IfCondition failOnCondition="false" condition="$rightHandItem ~= $__null">
								<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
									<Search canSkip="1">
										<Success />
									</Search>
									<Exec canSkip="1">
										<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
											<Search canSkip="1">
												<Success />
											</Search>
											<Exec canSkip="1">
												<Parallel successMode="All" failureMode="Any">
													<AnimationAction fragment="&apos;Quest_ChargeForward&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													<EntityContextBarrier context="utokNaMalesov_inAnimation" target="$this.id" Negation="true" RunLogic="KeepRunning">
														<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="10209626" />
													</EntityContextBarrier>
												</Parallel>
											</Exec>
										</HandContentElement>
									</Exec>
								</HandContentElement>
							</IfCondition>
						</Sequence>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="string" EventSet="endNotification">
			<Variables>
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
								</AnyDecorator>
								<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetWeaponsFromWeaponSet>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Search>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Search>
										<Exec>
											<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Search>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Search>
												<Exec>
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AnimationAction>
														<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</EntityContextBarrier>
													</Parallel>
												</Exec>
											</HandContentElement>
										</Exec>
									</HandContentElement>
								</IfCondition>
							</Sequence>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="giveOrders" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="bool" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="boolRef" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<EntityContext context="combat_disableAllSkirmishBarks" target="">
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<Parallel successMode="Any" failureMode="Any">
									<IfElseCondition failOnCondition="false" condition="$bool" saveVersion="2">
										<Then canSkip="1">
											<Sequence>
												<DistanceCondition Origin="$wuid" ReferencePt="$this.id" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
													<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
												</DistanceCondition>
												<IfGate atomic="false" condition="$boolRef" RunLogic="KeepRunning">
													<Sequence>
														<AnimationAction fragment="&apos;Quest_ChargeForward&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
													</Sequence>
												</IfGate>
											</Sequence>
										</Then>
										<Else canSkip="1">
											<MeleeOffenseAutomationDecorator active="true">
												<MeleeDefenseAutomationDecorator active="true">
													<MeleeGuardAutomationDecorator GuardMode="automate" active="true">
														<WeaponAutomationDecorator WeaponChange="none" active="true">
															<CombatFollowerDecorator ProbablisticDrivenSweetSpot="true" RPGSweetSpotArcDriver="true" active="true">
																<BattleAction />
															</CombatFollowerDecorator>
														</WeaponAutomationDecorator>
													</MeleeGuardAutomationDecorator>
												</MeleeDefenseAutomationDecorator>
											</MeleeOffenseAutomationDecorator>
										</Else>
									</IfElseCondition>
									<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="85065716" />
								</Parallel>
							</Child>
							<OnSuccess canSkip="1">
								<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
							</OnSuccess>
						</FuseBox>
					</EntityContext>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuid_string_bool_boolRef" EventSet="endNotification">
			<Variables>
				<Variable name="bool" comment="" />
				<Variable name="boolRef" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExactMove>
													</DistanceCondition>
													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AnimationAction>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
													</IfGate>
												</Sequence>
											</Then>
											<Else>
												<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<MeleeDefenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<CombatFollowerDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<BattleAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</BattleAction>
																</CombatFollowerDecorator>
															</WeaponAutomationDecorator>
														</MeleeGuardAutomationDecorator>
													</MeleeDefenseAutomationDecorator>
												</MeleeOffenseAutomationDecorator>
											</Else>
										</IfElseCondition>
										<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerMonolog>
									</Parallel>
								</Child>
								<OnSuccess>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</OnSuccess>
							</FuseBox>
						</EntityContext>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="zizkaband_lookAround" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<DistanceCondition Origin="$this.id" ReferencePt="$__object.id" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
						<ExactMove directionType="AlignWithEntity" directionSpecification="$__object.id" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					</DistanceCondition>
					<UnstanceAction unstance="LookingForSt" locationObject="$__object.id" slaveObject="" />
					<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
						</DistanceCondition>
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="zizkaband_cheerUpPlayer" is_function="0">
		<Variables>
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="bool" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
					<Expression expressions="$useWeapon = ($rightHandItem ~= $__null &amp; !$bool) &#10;$useShield = (($leftHandItem ~= $__null &amp; $rightHandItem ~= $__null) &amp; !$bool)" />
					<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
						<Search canSkip="1">
							<Success />
						</Search>
						<Exec canSkip="1">
							<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
								<Search canSkip="1">
									<Success />
								</Search>
								<Exec canSkip="1">
									<Sequence>
										<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
										<IfElseCondition failOnCondition="false" condition="$bool" saveVersion="2">
											<Then canSkip="1">
												<Parallel successMode="All" failureMode="Any">
													<Loop count="-1">
														<AnimationAction fragment="&apos;Exhausted&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													</Loop>
													<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="Halt">
														<SuppressFailure>
															<Function_speech_dialogInitiator alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="97855001" />
														</SuppressFailure>
													</DistanceGate>
												</Parallel>
											</Then>
											<Else canSkip="1">
												<Loop count="-1">
													<Sequence>
														<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
															<ForceLook LookTarget="$__player" DisableVariations="true">
																<Parallel successMode="All" failureMode="Any">
																	<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="63149636" />
																	<RandomGate opensWithChance="0.750000" saveVersion="2">
																		<Then canSkip="1">
																			<AnimationAction fragment="&apos;Soldier_Cheers&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																		</Then>
																		<Else canSkip="1">
																			<Success />
																		</Else>
																	</RandomGate>
																</Parallel>
															</ForceLook>
														</DistanceGate>
														<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="&apos;5s&apos;" />
													</Sequence>
												</Loop>
											</Else>
										</IfElseCondition>
									</Sequence>
								</Exec>
							</HandContentElement>
						</Exec>
					</HandContentElement>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_bool_string" EventSet="">
			<Variables>
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="bool" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetWeaponsFromWeaponSet>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Search>
							<Exec>
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Search>
									<Exec>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AnimationAction>
														</Loop>
														<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_speech_dialogInitiator>
															</SuppressFailure>
														</DistanceGate>
													</Parallel>
												</Then>
												<Else>
													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_speech_schedulerMonolog>
																		<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</AnimationAction>
																			</Then>
																			<Else>
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Else>
																		</RandomGate>
																	</Parallel>
																</ForceLook>
															</DistanceGate>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
													</Loop>
												</Else>
											</IfElseCondition>
										</Sequence>
									</Exec>
								</HandContentElement>
							</Exec>
						</HandContentElement>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="bergov_encourageSoldiers" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveAndWait" is_function="0">
		<Variables>
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="keepItemsInHand" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="spots" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$participants" keyOut="$index" condition="$__value == $this.id" />
					<AnyDecorator preset="bothHands_changeEquipment" enabled="$keepItemsInHand">
						<Sequence>
							<EntityContext context="utokNaMalesov_movingToSpot" target="">
								<ExactMove directionType="AlignWithEntity" directionSpecification="$spots[$index]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$spots[$index]" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
							</EntityContext>
							<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Sequence>
					</AnyDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_spotsAndParticipants" EventSet="">
			<Variables>
				<Variable name="index" comment="" />
				<Variable name="keepItemsInHand" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="spots" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
								</EntityContext>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</AnyDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shooter_stayOnSpot" is_function="0">
		<Variables>
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="perceptionInfo" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="watchingPlayer" type="_bool" values="" isPersistent="1" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_ranged" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
					</Search>
					<Exec canSkip="1">
						<Sequence>
							<WaitAction />
							<Parallel successMode="Any" failureMode="Any">
								<Loop count="-1">
									<IfGate atomic="false" condition="$watchingPlayer" RunLogic="Halt">
										<EntityContext context="utokNaMalesov_shooterIsWatchingPlayer" target="">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</EntityContext>
									</IfGate>
								</Loop>
								<ContinuousSwitch>
									<IfCondition failOnCondition="false" condition="$watchingPlayer">
										<Function_continuousPlayerPerceptionCheck NPC="$this.id" loopTime="&apos;1s&apos;" doesSeePlayer="$watchingPlayer" nodeLabel="19640523" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="!$watchingPlayer">
										<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$perceptionInfo" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
											<Switch>
												<IfCondition failOnCondition="false" condition="$perceptionInfo.perceptible == $__player &amp; &#10;$perceptionInfo.threshold == 1">
													<Expression expressions="$watchingPlayer = true" />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$perceptionInfo.perceptible ~= $__player">
													<IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$perceptionInfo.perceptible" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
												</IfCondition>
												<DefaultBranch>
													<Success />
												</DefaultBranch>
											</Switch>
										</ProcessMessage>
									</IfCondition>
								</ContinuousSwitch>
							</Parallel>
						</Sequence>
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfElseCondition failOnCondition="false" condition="$perceptionInfo.perceptible == $__player &amp; &#10;$perceptionInfo.threshold == 1" saveVersion="2">
				<Then canSkip="1">
					<Expression expressions="$watchingPlayer = true" />
				</Then>
				<Else canSkip="1">
					<IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$perceptionInfo.perceptible" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
				</Else>
			</IfElseCondition>
			<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$perceptionInfo" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
				<IfCondition failOnCondition="false" condition="$perceptionInfo.perceptible == $__player &amp; &#10;$perceptionInfo.threshold == 0">
					<Expression expressions="$watchingPlayer = false" />
				</IfCondition>
			</ProcessMessage>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="leftHandItem" comment="" />
				<Variable name="perceptionInfo" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="watchingPlayer" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetWeaponsFromWeaponSet>
						</Search>
						<Exec>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</EntityContext>
										</IfGate>
									</Loop>
									<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_continuousPlayerPerceptionCheck hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_continuousPlayerPerceptionCheck>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</IgnorePerception>
													</IfCondition>
													<DefaultBranch>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</DefaultBranch>
												</Switch>
											</ProcessMessage>
										</IfCondition>
									</ContinuousSwitch>
								</Parallel>
							</Sequence>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest>
				<IfElseCondition editorPosX="1020" editorPosY="700" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Then>
					<Else>
						<IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</IgnorePerception>
					</Else>
				</IfElseCondition>
				<ProcessMessage editorPosX="690" editorPosY="590" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</IfCondition>
				</ProcessMessage>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shooter_shootOnEnemy" is_function="0">
		<Variables>
			<Variable name="enemiesInRange" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="hand" type="enum:handType" values="" isPersistent="0" form="single" />
			<Variable name="itemToEquip" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="enemies" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="shootingRange" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Loop count="-1">
					<Sequence>
						<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
							<ExactMove directionType="AlignWithEntity" directionSpecification="$__object.id" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						</AnyDecorator>
						<DistanceGate Origin="$__object.id" ReferencePt="$this.id" Low="0.500000" High="0.500000" Negation="false" OpenInMiddle="false" RunLogic="Halt">
							<HandContentElement hand="$hand" item="$itemToEquip" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
								<Search canSkip="1">
									<Sequence>
										<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
										<IfElseCondition failOnCondition="false" condition="$leftHandItem == $__null" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$itemToEquip = $rightHandItem &#10;$hand = $enum:handType.right" />
											</Then>
											<Else canSkip="1">
												<Expression expressions="$itemToEquip = $leftHandItem &#10;$hand = $enum:handType.left" />
											</Else>
										</IfElseCondition>
									</Sequence>
								</Search>
								<Exec canSkip="1">
									<Parallel successMode="Any" failureMode="Any">
										<ContinuousSwitch>
											<IfCondition failOnCondition="false" condition="#enemiesInRange &gt; 0">
												<Sequence>
													<DeadUnconsciousGate Who="$enemiesInRange[0]" State="Any" Negation="true" RunLogic="Halt">
														<Parallel successMode="Any" failureMode="Any">
															<Loop count="-1">
																<IfGate atomic="false" condition="$alias ~= &apos;-&apos;" RunLogic="KeepRunning">
																	<Sequence>
																		<SuppressFailure>
																			<Function_speech_schedulerMonolog alias="$alias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="72489666" />
																		</SuppressFailure>
																		<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
																	</Sequence>
																</IfGate>
															</Loop>
															<MeleeOffenseAutomationDecorator active="true">
																<WeaponAutomationDecorator WeaponChange="missile" active="true">
																	<CombatAction TargetNPC="$enemiesInRange[0]" RelationOverride="None" />
																</WeaponAutomationDecorator>
															</MeleeOffenseAutomationDecorator>
														</Parallel>
													</DeadUnconsciousGate>
													<EraseFromArray array="$enemiesInRange" condition="$__value == $enemiesInRange[0]" />
												</Sequence>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="true">
												<ActorStateBarrier Who="$this.id" ToState="idle" NegateTo="false" RunLogic="KeepRunning">
													<Sequence>
														<IsWeaponLoaded failOnCondition="false" saveVersion="2">
															<Then canSkip="1">
																<Success />
															</Then>
															<Else canSkip="1">
																<LoadWeaponAction />
															</Else>
														</IsWeaponLoaded>
														<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
															<Sequence>
																<WaitAction />
																<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
														</StanceElement>
													</Sequence>
												</ActorStateBarrier>
											</IfCondition>
										</ContinuousSwitch>
										<Loop count="-1">
											<AreaPresenceListener aiObjects="$enemies" area="$shootingRange" trackIn="true" trackOut="true" reportInitialState="true">
												<IfElseCondition failOnCondition="false" condition="$__presence" saveVersion="2">
													<Then canSkip="1">
														<IsDeadCheck SoulWUID="$__presenceObject" FailSubtMissing="false" saveVersion="2">
															<Else canSkip="1">
																<IsUnconsciousCheck SoulWUID="$__presenceObject" FailSubtMissing="false" saveVersion="2">
																	<Else canSkip="1">
																		<PushToArray array="$enemiesInRange" value="$__presenceObject" direction="Front" />
																	</Else>
																</IsUnconsciousCheck>
															</Else>
														</IsDeadCheck>
													</Then>
													<Else canSkip="1">
														<EraseFromArray array="$enemiesInRange" condition="$__value == $__presenceObject" />
													</Else>
												</IfElseCondition>
											</AreaPresenceListener>
										</Loop>
									</Parallel>
								</Exec>
							</HandContentElement>
						</DistanceGate>
					</Sequence>
				</Loop>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<AreaPresenceGate aiObjects="$__player" area="$shootingRange" amount="AtLeastOne" presence="Present" RunLogic="Halt">
					<Sequence>
						<Expression expressions="$inShootingRange = true" />
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</AreaPresenceGate>
				<Expression expressions="$inShootingRange = false" />
			</Sequence>
			<EntityContext context="combat_missileAttackerIgnoreTrajectoryCollision" target="" />
		</ForestContainer>
		<EditorData Signature="utokNaMalesov_shooter_shootOnEnemy" EventSet="endNotification">
			<Variables>
				<Variable name="enemiesInRange" comment="" />
				<Variable name="hand" comment="" />
				<Variable name="itemToEquip" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="enemies" comment="" />
				<Variable name="shootingRange" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-290" editorPosY="90" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
							</AnyDecorator>
							<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetWeaponsFromWeaponSet>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Else>
											</IfElseCondition>
										</Sequence>
									</Search>
									<Exec>
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_speech_schedulerMonolog>
																			</SuppressFailure>
																			<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</InstantCallback_empty>
																		</Sequence>
																	</IfGate>
																</Loop>
																<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</CombatAction>
																	</WeaponAutomationDecorator>
																</MeleeOffenseAutomationDecorator>
															</Parallel>
														</DeadUnconsciousGate>
														<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</EraseFromArray>
													</Sequence>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IsWeaponLoaded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Then>
																<Else>
																	<LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LoadWeaponAction>
																</Else>
															</IsWeaponLoaded>
															<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</WaitAction>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</StanceElement>
														</Sequence>
													</ActorStateBarrier>
												</IfCondition>
											</ContinuousSwitch>
											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<AreaPresenceListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Else>
																	<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Else>
																			<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</PushToArray>
																		</Else>
																	</IsUnconsciousCheck>
																</Else>
															</IsDeadCheck>
														</Then>
														<Else>
															<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</EraseFromArray>
														</Else>
													</IfElseCondition>
												</AreaPresenceListener>
											</Loop>
										</Parallel>
									</Exec>
								</HandContentElement>
							</DistanceGate>
						</Sequence>
					</Loop>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="730" editorPosY="1330" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</AreaPresenceGate>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</Sequence>
				<EntityContext editorPosX="1810" editorPosY="980" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</EntityContext>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shooter_warnOthers" is_function="0">
		<Variables>
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid_target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="true" enabled="true" saveVersion="2">
							<Search canSkip="1">
								<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
							</Search>
							<Exec canSkip="1">
								<Sequence>
									<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid_target" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid_target" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									<IsWeaponLoaded failOnCondition="false" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
										<Else canSkip="1">
											<LoadWeaponAction />
										</Else>
									</IsWeaponLoaded>
									<AreaPresenceGate aiObjects="$__player" area="$wuid" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
										<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="58828000" />
									</AreaPresenceGate>
								</Sequence>
							</Exec>
						</HandContentElement>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuid_wuid_string" EventSet="endNotification">
			<Variables>
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
				<Variable name="wuid_target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Search>
									<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetWeaponsFromWeaponSet>
								</Search>
								<Exec>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ExactMove>
										<IsWeaponLoaded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
											<Else>
												<LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LoadWeaponAction>
											</Else>
										</IsWeaponLoaded>
										<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_schedulerMonolog>
										</AreaPresenceGate>
									</Sequence>
								</Exec>
							</HandContentElement>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="sam_chatOnPlayer" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="area" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="mySpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<Sequence>
								<ExactMove directionType="AlignWithEntity" directionSpecification="$mySpot" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$mySpot" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<IsInsideArea Origin="$__player" Area="$area" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<ForceLook LookTarget="$__player" DisableVariations="false">
											<Function_speech_dialogInitiator alias="$alias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="44875714" />
										</ForceLook>
									</Then>
								</IsInsideArea>
							</Sequence>
						</Child>
						<OnSuccess canSkip="1">
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</OnSuccess>
					</FuseBox>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_samChatOnPlayer" EventSet="endNotification">
			<Variables>
				<Variable name="alias" comment="" />
				<Variable name="area" comment="" />
				<Variable name="mySpot" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
									<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_dialogInitiator>
											</ForceLook>
										</Then>
									</IsInsideArea>
								</Sequence>
							</Child>
							<OnSuccess>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</OnSuccess>
						</FuseBox>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="sam_destroyDoor" is_function="0">
		<Variables>
			<Variable name="axe" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Right" item="$axe" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<GetItem InventoryHost="" ItemGUID="&apos;818d0dde-d4f1-4bdb-b8d3-9754d52f5799&apos;" ItemCategory="" FailIfNotFound="false" ItemOut="$axe" AmountOut="" />
					</Search>
					<Exec canSkip="1">
						<Sequence>
							<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<Loop count="-1">
								<Sequence>
									<UnstanceAction unstance="GateAttack" locationObject="$data" slaveObject="" />
									<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Sequence>
							</Loop>
						</Sequence>
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="axe" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<GetItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetItem>
						</Search>
						<Exec>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
								</Loop>
							</Sequence>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="hans_waitWithLadder" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<Sequence>
						<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="hans_placeLadder" is_function="0">
		<Variables>
			<Variable name="ladderEntity" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderSlot" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<HandContentElement hand="Right" item="$ladderItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_ladder" useDecision="true" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<Sequence>
								<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;placeSlot&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderSlot" Data="" />
								</GraphSearch>
								<Function_findItemOnSlot linkName="&apos;placeSlot&apos;" npc="$this.id" searchOrigin="$this.id" item="$ladderItem" nodeLabel="85687723" />
							</Sequence>
						</Search>
						<Exec canSkip="1">
							<PlaceAction item="$ladderItem" slot="$ladderSlot" />
						</Exec>
					</HandContentElement>
					<Selector>
						<GraphSearch Origin="$data" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;unhidden&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						</GraphSearch>
						<Sequence>
							<GraphSearch Origin="$data" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderEntity" Data="" />
							</GraphSearch>
							<SetVisibility ItemWUID="$ladderEntity" Visibility="true" />
							<SetVisibility ItemWUID="$ladderItem" Visibility="false" />
							<AddLink From="$data" To="$data" Tag="&apos;unhidden&apos;" Data="" LinkOpHandleMode="OverWrite" />
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</Sequence>
					</Selector>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="ladderEntity" comment="" />
				<Variable name="ladderItem" comment="" />
				<Variable name="ladderSlot" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Function_findItemOnSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_findItemOnSlot>
								</Sequence>
							</Search>
							<Exec>
								<PlaceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PlaceAction>
							</Exec>
						</HandContentElement>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
							</GraphSearch>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<SetVisibility hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SetVisibility>
								<SetVisibility hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SetVisibility>
								<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AddLink>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</Sequence>
						</Selector>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="hans_reactWithLadder" is_function="0">
		<Variables>
			<Variable name="lockName" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="awareOfIncomingNpc" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="incomingNpc" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Concatenation OutString="$lockName" Pattern="&apos;npcdialog_movetonpc;$incomingNpc&apos;" />
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$lockName&apos;" RunLogic="Halt">
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<WaitAction />
			<AnyDecorator preset="bothHands_changeEquipment" />
		</ForestContainer>
		<EditorData Signature="npcDialog_reaction" EventSet="">
			<Variables>
				<Variable name="lockName" comment="" />
				<Variable name="awareOfIncomingNpc" comment="" />
				<Variable name="incomingNpc" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Concatenation hasInputBreakpoint="0" comment="" comment_box="Pouzit_funkci__npcReaction_chovani_az_bude." comment_box_color="222,222,222,222" breakpointFlags="0">
							<OutputBreakpoints />
						</Concatenation>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<WaitAction editorPosX="580" editorPosY="-280" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</WaitAction>
				<AnyDecorator editorPosX="240" editorPosY="-300" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</AnyDecorator>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="stealthCommando_moveWithLadder" is_function="0">
		<Variables>
			<Variable name="formationLock" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="formationWUID" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="params" type="pathFindingParams" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="formationType" type="enum:formationType" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfElseCondition failOnCondition="false" condition="$this.id == $followFormationParams.formation.leader" saveVersion="2">
					<Then canSkip="1">
						<SubtreeDecorator saveVersion="2">
							<Init canSkip="1">
								<Sequence>
									<MakeFormation FormationName="$followFormationParams.formation.type" HandleVariable="$formationWUID" />
									<Concatenation OutString="$formationLock" Pattern="&apos;followNPC_leader_$this.id&apos;" />
								</Sequence>
							</Init>
							<Subtree canSkip="1">
								<Sequence>
									<SetExternalLock LockManagerType="Global" Locked="false" LockName="&apos;$formationLock&apos;" />
									<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="2.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="FastRun" additionalParams="" pathFindingParams="$params" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
								</Sequence>
							</Subtree>
							<Cleanup canSkip="1">
								<Sequence>
									<EndFormation FormationHandle="$formationWUID" />
									<SetExternalLock LockManagerType="Global" Locked="true" LockName="&apos;$formationLock&apos;" />
									<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
								</Sequence>
							</Cleanup>
						</SubtreeDecorator>
					</Then>
					<Else canSkip="1">
						<Function_moveInFormation_slave followFormationParams="$followFormationParams" nodeLabel="10236982" />
					</Else>
				</IfElseCondition>
			</Behavior>
		</Root>
		<ForestContainer>
			<Move stopWithinDistance="0.500000" stopDistanceVariation="2.000000" rayCasteFlee="false" successDistance="0.200000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="FastRun" additionalParams="" pathFindingParams="$params" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
			<GameContext context="Battle" />
		</ForestContainer>
		<EditorData Signature="utokNaMalesov_moveWithLadder" EventSet="endNotification">
			<Variables>
				<Variable name="formationLock" comment="" />
				<Variable name="formationWUID" comment="" />
				<Variable name="params" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="followFormationParams" comment="" />
				<Variable name="formationType" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Init>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<MakeFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</MakeFormation>
										<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Concatenation>
									</Sequence>
								</Init>
								<Subtree>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SetExternalLock>
										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Move>
									</Sequence>
								</Subtree>
								<Cleanup>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EndFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</EndFormation>
										<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SetExternalLock>
										<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantCallback_empty>
									</Sequence>
								</Cleanup>
							</SubtreeDecorator>
						</Then>
						<Else>
							<Function_moveInFormation_slave hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_moveInFormation_slave>
						</Else>
					</IfElseCondition>
				</Behavior>
			</Root>
			<Forest>
				<Move editorPosX="1530" editorPosY="-50" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Move>
				<GameContext editorPosX="640" editorPosY="-380" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</GameContext>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="commando_climbLadder" is_function="0">
		<Variables>
			<Variable name="helperInfo" type="helperInfo" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="ladder" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderStartPos" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidDataArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="combat_disabledAsTarget" target="">
					<Sequence>
						<FindInArray array="$wuidDataArray" keyOut="$index" condition="$__value == $this.id" />
						<GraphSearch Origin="$wuidData" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="$ladder" Data="" />
						</GraphSearch>
						<IfElseCondition failOnCondition="false" condition="$index == 0" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<GetHelper smartObjectName="$ladder" helperName="&apos;down&apos;" categoryName="&apos;Gate&apos;" targetVar="$helperInfo" policy="Name" />
									<GetHelperData smartObjectName="$ladder" helperID="$helperInfo.id" positionTargetVar="$ladderStartPos" orientationTargetVar="" transformTargetVar="" fragmentTargetVar="" tagsTargetVar="" />
									<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$ladderStartPos" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									<ActorStateCheck Who="" State="ladder" FailWithSubtreeMissing="false" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
										<Else canSkip="1">
											<GetOnLadder Ladder="$ladder" />
										</Else>
									</ActorStateCheck>
									<ClimbLadder Speed="1.000000" />
									<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
								</Sequence>
							</Then>
							<Else canSkip="1">
								<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
									<Sequence>
										<WaitAction />
										<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</StanceElement>
							</Else>
						</IfElseCondition>
					</Sequence>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer>
			<CallBehavior Target="$wuidData" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="31548186" />
		</ForestContainer>
		<EditorData Signature="wuidDataWuidDataArray" EventSet="endNotification">
			<Variables>
				<Variable name="helperInfo" comment="" />
				<Variable name="index" comment="" />
				<Variable name="ladder" comment="" />
				<Variable name="ladderStartPos" comment="" />
				<Variable name="wuidData" comment="" />
				<Variable name="wuidDataArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</FindInArray>
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
							</GraphSearch>
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetHelper>
										<GetHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetHelperData>
										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Move>
										<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
											<Else>
												<GetOnLadder hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetOnLadder>
											</Else>
										</ActorStateCheck>
										<ClimbLadder hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ClimbLadder>
										<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantCallback_empty>
									</Sequence>
								</Then>
								<Else>
									<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</StanceElement>
								</Else>
							</IfElseCondition>
						</Sequence>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest>
				<CallBehavior editorPosX="450" editorPosY="-590" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</CallBehavior>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="zizkaband_waitWithAnimation" is_function="0">
		<Variables>
			<Variable name="aliasIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="animationIndex" type="_int" values="0" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="0" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="aliases" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="animationFragments" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="animationTags" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="movementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitAfterAnimation" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitSpots" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="zizkaband" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$zizkaband" keyOut="$index" condition="$__value == $this.id" />
					<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
						<ExactMove directionType="AlignWithEntity" directionSpecification="$waitSpots[$index]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$waitSpots[$index]" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					</AnyDecorator>
					<Selector>
						<FindInArray array="$animationFragments" keyOut="$animationIndex" condition="$__key == $index" />
						<Expression expressions="$animationIndex = 0" />
					</Selector>
					<FindInArray array="$aliases" keyOut="$aliasIndex" condition="$__key == $index" />
					<Parallel successMode="Any" failureMode="Any">
						<EntityContextElement context="utokNaMalesov_inAnimation" enabled="true">
							<LoopUntil until="Fail" attemptCount="0">
								<Sequence>
									<AnimationAction fragment="$animationFragments[$animationIndex]" tags="$animationTags[$animationIndex]" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
									<IfElseCondition failOnCondition="false" condition="$waitAfterAnimation" saveVersion="2">
										<Then canSkip="1">
											<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
										</Then>
										<Else canSkip="1">
											<Fail />
										</Else>
									</IfElseCondition>
								</Sequence>
							</LoopUntil>
						</EntityContextElement>
						<IfGate atomic="false" condition="$aliases[$aliasIndex] ~= &apos;none&apos;" RunLogic="KeepRunning">
							<Function_monologRepeat alias="$aliases[$aliasIndex]" cooldown="&apos;30s&apos;" repeat="-1" nodeLabel="80108457" />
						</IfGate>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_waitWithAnimation" EventSet="">
			<Variables>
				<Variable name="aliasIndex" comment="" />
				<Variable name="animationIndex" comment="" />
				<Variable name="index" comment="" />
				<Variable name="aliases" comment="" />
				<Variable name="animationFragments" comment="" />
				<Variable name="animationTags" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="waitAfterAnimation" comment="" />
				<Variable name="waitSpots" comment="" />
				<Variable name="zizkaband" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
						</AnyDecorator>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</FindInArray>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Selector>
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Then>
											<Else>
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</Else>
										</IfElseCondition>
									</Sequence>
								</LoopUntil>
							</EntityContextElement>
							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_monologRepeat hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_monologRepeat>
							</IfGate>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="runAndHide" is_function="0">
		<Variables>
			<Variable name="hitReaction" type="hitReaction" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stealthParticipants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="tagpoints" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="utokNaMalesov_runningAndHiding" target="">
					<MoveParamsDecorator speed="Run" pathFindingParams="" doorClosingPolicy="LeaveClosed">
						<Sequence>
							<FindInArray array="$stealthParticipants" keyOut="$index" condition="$__value == $this.id" />
							<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
								<EntityContext context="utokNaMalesov_movingToSpot" target="">
									<DistanceCondition Origin="$this.id" ReferencePt="$tagpoints[$index]" Low="0.200000" High="0.200000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
										<ExactMove directionType="AlignWithEntity" directionSpecification="$tagpoints[$index]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$tagpoints[$index]" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</DistanceCondition>
								</EntityContext>
							</AnyDecorator>
							<Parallel successMode="Any" failureMode="Any">
								<Sequence>
									<Parallel successMode="Any" failureMode="Any">
										<Selector>
											<Sequence>
												<GraphSearch Origin="$tagpoints[$index]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;hideInFreeblock&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												</GraphSearch>
												<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
												<IfCondition failOnCondition="false" condition="$leftHandItem ~= $__null &amp; &#10;$rightHandItem ~= $__null">
													<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
														<Search canSkip="1">
															<Success />
														</Search>
														<Exec canSkip="1">
															<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
																<Search canSkip="1">
																	<Success />
																</Search>
																<Exec canSkip="1">
																	<MeleeGuardAutomationDecorator GuardMode="freeBlock" active="true">
																		<WaitAction />
																	</MeleeGuardAutomationDecorator>
																</Exec>
															</HandContentElement>
														</Exec>
													</HandContentElement>
												</IfCondition>
											</Sequence>
											<Sequence>
												<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
												<Expression expressions="$useWeapon = $rightHandItem ~= $__null &#10;$useShield = ($leftHandItem ~= $__null &amp; $rightHandItem ~= $__null)" />
												<IfCondition failOnCondition="true" condition="$rightHandItem ~= $__null">
													<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
														<Search canSkip="1">
															<Success />
														</Search>
														<Exec canSkip="1">
															<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
																<Search canSkip="1">
																	<Success />
																</Search>
																<Exec canSkip="1">
																	<UnstanceAction unstance="Quest_SoldierHidingBarricadeFront_NoLocationObject" locationObject="" slaveObject="" />
																</Exec>
															</HandContentElement>
														</Exec>
													</HandContentElement>
												</IfCondition>
											</Sequence>
											<UnstanceAction unstance="Kneel" locationObject="" slaveObject="" />
										</Selector>
										<ActorStateBarrier Who="" ToState="land" NegateTo="false" RunLogic="KeepRunning">
											<Fail />
										</ActorStateBarrier>
									</Parallel>
									<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Sequence>
								<LoopUntil until="Success" attemptCount="0">
									<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitReaction" senderInfo="" inbox="&apos;hitReaction&apos;" condition="" answerVar="">
										<IfCondition failOnCondition="true" condition="$hitReaction.hitStrength &gt; $enum:HitReactionStrength.Unpleasant">
											<Success />
										</IfCondition>
									</ProcessMessage>
								</LoopUntil>
							</Parallel>
						</Sequence>
					</MoveParamsDecorator>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_prepareForStealth" EventSet="">
			<Variables>
				<Variable name="hitReaction" comment="" />
				<Variable name="index" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="stealthParticipants" comment="" />
				<Variable name="tagpoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</FindInArray>
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
										</DistanceCondition>
									</EntityContext>
								</AnyDecorator>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetWeaponsFromWeaponSet>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Search>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Search>
															<Exec>
																<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Search>
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</Search>
																	<Exec>
																		<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</WaitAction>
																		</MeleeGuardAutomationDecorator>
																	</Exec>
																</HandContentElement>
															</Exec>
														</HandContentElement>
													</IfCondition>
												</Sequence>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetWeaponsFromWeaponSet>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Search>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Search>
															<Exec>
																<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Search>
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</Search>
																	<Exec>
																		<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</UnstanceAction>
																	</Exec>
																</HandContentElement>
															</Exec>
														</HandContentElement>
													</IfCondition>
												</Sequence>
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</Selector>
											<ActorStateBarrier hasInputBreakpoint="0" comment="Chtelo by probrat s programatory. Kdyz NPC pada, tak UnstanceAction failne." breakpointFlags="0">
												<OutputBreakpoints />
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</ActorStateBarrier>
										</Parallel>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
									<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</IfCondition>
										</ProcessMessage>
									</LoopUntil>
								</Parallel>
							</Sequence>
						</MoveParamsDecorator>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveAndBark" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<Parallel successMode="Any" failureMode="Any">
								<Sequence>
									<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;barkAndMoveLock&apos;" RunLogic="KeepRunning">
										<Success />
									</Synchronize>
								</Sequence>
								<Loop count="-1">
									<Sequence>
										<SuppressFailure>
											<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="15458519" />
										</SuppressFailure>
										<Selector>
											<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;2s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;barkAndMoveLock&apos;" RunLogic="KeepRunning">
												<Success />
											</Synchronize>
											<Wait duration="&apos;1000ms&apos;" timeType="GameTime" doFail="false" variation="&apos;500ms&apos;" />
										</Selector>
									</Sequence>
								</Loop>
							</Parallel>
						</Child>
						<OnSuccess canSkip="1">
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</OnSuccess>
					</FuseBox>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ExactMove>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Synchronize>
									</Sequence>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</SuppressFailure>
											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Synchronize>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Selector>
										</Sequence>
									</Loop>
								</Parallel>
							</Child>
							<OnSuccess>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</OnSuccess>
						</FuseBox>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootVykuchFromSpot" is_function="0">
		<Variables>
			<Variable name="currentShootingSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="hitReaction" type="hitReaction" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alies" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="crouch" type="_bool" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="shootingEnabled" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="shootingSpots" type="_wuid" values="" isPersistent="0" form="array" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$alies" keyOut="$index" condition="$__value == $this.id" />
					<MoveParamsDecorator speed="Run" pathFindingParams="" doorClosingPolicy="Automatic">
						<Parallel successMode="Any" failureMode="Any">
							<Sequence>
								<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
									<EntityContext context="utokNaMalesov_runningAndHiding" target="">
										<ExactMove directionType="AlignWithEntity" directionSpecification="$shootingSpots[$index]" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$shootingSpots[$index]" destinationSpecification2="" destinationSpecification3="" speed="FastRun" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</EntityContext>
								</AnyDecorator>
								<Loop count="-1">
									<IfElseCondition failOnCondition="false" condition="$shootingEnabled" saveVersion="2">
										<Then canSkip="1">
											<IfGate atomic="false" condition="$shootingEnabled" RunLogic="Halt">
												<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="$crouch[$index]">
													<EntityContext context="combat_unlimitedMissileRange" target="">
														<EntityContext context="combat_missileAttackerIgnoreTrajectoryCollision" target="">
															<MeleeOffenseAutomationDecorator active="true">
																<WeaponAutomationDecorator WeaponChange="missile" active="true">
																	<BattleAction />
																</WeaponAutomationDecorator>
															</MeleeOffenseAutomationDecorator>
														</EntityContext>
													</EntityContext>
												</StanceElement>
											</IfGate>
										</Then>
										<Else canSkip="1">
											<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
												<Sequence>
													<WaitAction />
													<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Sequence>
											</StanceElement>
										</Else>
									</IfElseCondition>
								</Loop>
							</Sequence>
							<LoopUntil until="Success" attemptCount="0">
								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitReaction" senderInfo="" inbox="&apos;hitReaction&apos;" condition="" answerVar="">
									<IfCondition failOnCondition="true" condition="$hitReaction.hitStrength &gt; $enum:HitReactionStrength.Unpleasant">
										<Success />
									</IfCondition>
								</ProcessMessage>
							</LoopUntil>
							<Sequence>
								<Expression expressions="$currentShootingSpot = $shootingSpots[$index]" />
								<IfGate atomic="false" condition="$currentShootingSpot ~= $shootingSpots[$index]" RunLogic="KeepRunning">
									<Success />
								</IfGate>
							</Sequence>
						</Parallel>
					</MoveParamsDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_shootVykuchFromSpot" EventSet="">
			<Variables>
				<Variable name="currentShootingSpot" comment="" />
				<Variable name="hitReaction" comment="" />
				<Variable name="index" comment="" />
				<Variable name="alies" comment="" />
				<Variable name="crouch" comment="" />
				<Variable name="shootingEnabled" comment="" />
				<Variable name="shootingSpots" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
										</EntityContext>
									</AnyDecorator>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<BattleAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</BattleAction>
																	</WeaponAutomationDecorator>
																</MeleeOffenseAutomationDecorator>
															</EntityContext>
														</EntityContext>
													</StanceElement>
												</IfGate>
											</Then>
											<Else>
												<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</WaitAction>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</StanceElement>
											</Else>
										</IfElseCondition>
									</Loop>
								</Sequence>
								<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</IfCondition>
									</ProcessMessage>
								</LoopUntil>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</IfGate>
								</Sequence>
							</Parallel>
						</MoveParamsDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveToInnerCourtyard" is_function="0">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="aliasKey" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="barkingSoulsLength" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="currentPhase" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="positionKey" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="aliases" type="_string" values="" isPersistent="0" form="array" requirementType="ConstReference" />
			<Variable name="barkingSouls" type="_wuid" values="" isPersistent="0" form="array" requirementType="ConstReference" />
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="formationParticipants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="formationType" type="enum:formationType" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="phase" type="_int" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="preferredPosition" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="successDistance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="tagpoints" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$addParams.continueWhenHalting = true" />
			</OnInit>
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<Parallel successMode="Any" failureMode="Any">
						<MeleeGuardAutomationDecorator GuardMode="freeBlock" active="true">
							<Sequence>
								<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
								<Expression expressions="$useShield = $leftHand ~= $__null &#10;$useWeapon = $rightHand ~= $__null" />
								<FindInArray array="$formationParticipants" keyOut="$positionKey" condition="$__value == $this.id" />
								<Selector>
									<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
										<Search canSkip="1">
											<Success />
										</Search>
										<Exec canSkip="1">
											<HandContentElement hand="Left" item="$leftHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
												<Search canSkip="1">
													<Success />
												</Search>
												<Exec canSkip="1">
													<Sequence>
														<IsFastForwarded failOnCondition="false" saveVersion="2">
															<Then canSkip="1">
																<WaitAction />
															</Then>
															<Else canSkip="1">
																<Success />
															</Else>
														</IsFastForwarded>
														<DisableCollisionAvoidance>
															<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$successDistance" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$tagpoints[$positionKey]" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="$addParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
														</DisableCollisionAvoidance>
													</Sequence>
												</Exec>
											</HandContentElement>
										</Exec>
									</HandContentElement>
									<DisableCollisionAvoidance>
										<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$successDistance" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$tagpoints[$positionKey]" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="$addParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</DisableCollisionAvoidance>
								</Selector>
							</Sequence>
						</MeleeGuardAutomationDecorator>
						<Loop count="-1">
							<Sequence>
								<Expression expressions="$currentPhase = $phase" />
								<SuppressFailure>
									<Sequence>
										<FindInArray array="$barkingSouls" keyOut="$aliasKey" condition="$__value == $this.id" />
										<Expression expressions="$barkingSoulsLength = #barkingSouls" />
										<SuppressFailure>
											<IfElseCondition failOnCondition="false" condition="$barkingSoulsLength &gt; 1" saveVersion="2">
												<Then canSkip="1">
													<Function_speech_monolog alias="$aliases[$aliasKey]" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="$this.id" wait="true" nodeLabel="17827598" />
												</Then>
												<Else canSkip="1">
													<Function_speech_schedulerMonolog alias="$aliases[$aliasKey]" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="90534518" />
												</Else>
											</IfElseCondition>
										</SuppressFailure>
										<Synchronize SemaphoreCount="$barkingSoulsLength" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;barkingFinishedLock&apos;" RunLogic="KeepRunning">
											<IfCondition failOnCondition="false" condition="$barkingSouls[0] == $this.id">
												<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
											</IfCondition>
										</Synchronize>
									</Sequence>
								</SuppressFailure>
								<IfGate atomic="false" condition="$currentPhase ~= $phase" RunLogic="KeepRunning">
									<Success />
								</IfGate>
							</Sequence>
						</Loop>
					</Parallel>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_moveInFormation_inFormation destination="$destination" followEnabled="false" followFormationParams="$followFormationParams" pathOffset="0.500000" successDistance="$successDistance" nodeLabel="83954515" />
			<Sequence>
				<Switch>
					<IfCondition failOnCondition="false" condition="$formationType == $enum:formationType.KeepDistance">
						<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.KeepDistance" />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$formationType == $enum:formationType.MoveHistory">
						<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.MoveHistory" />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$formationType == $enum:formationType.KeepShape">
						<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.KeepShape" />
					</IfCondition>
					<DefaultBranch>
						<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.Relaxed" />
					</DefaultBranch>
				</Switch>
				<IfCondition failOnCondition="false" condition="$followFormationParams.formation.leader ~= $this.id">
					<Sequence>
						<FindInArray array="$formationParticipants" keyOut="$positionKey" condition="$__value == $this.id" />
						<Expression expressions="$followFormationParams.formation.preferedPosition = $preferredPosition[$positionKey]" />
					</Sequence>
				</IfCondition>
			</Sequence>
		</ForestContainer>
		<EditorData Signature="utokNaMalesov_moveToInnerCourtyard" EventSet="endNotification">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="aliasKey" comment="" />
				<Variable name="barkingSoulsLength" comment="" />
				<Variable name="currentPhase" comment="" />
				<Variable name="leftHand" comment="" />
				<Variable name="positionKey" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="aliases" comment="" />
				<Variable name="barkingSouls" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="followFormationParams" comment="" />
				<Variable name="formationParticipants" comment="" />
				<Variable name="formationType" comment="" />
				<Variable name="phase" comment="" />
				<Variable name="preferredPosition" comment="" />
				<Variable name="successDistance" comment="" />
				<Variable name="tagpoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetWeaponsFromWeaponSet>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</FindInArray>
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Search>
											<Exec>
												<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Search>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Search>
													<Exec>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</WaitAction>
																</Then>
																<Else>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Else>
															</IsFastForwarded>
															<DisableCollisionAvoidance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Move>
															</DisableCollisionAvoidance>
														</Sequence>
													</Exec>
												</HandContentElement>
											</Exec>
										</HandContentElement>
										<DisableCollisionAvoidance hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Move>
										</DisableCollisionAvoidance>
									</Selector>
								</Sequence>
							</MeleeGuardAutomationDecorator>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</FindInArray>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_speech_monolog>
													</Then>
													<Else>
														<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_speech_schedulerMonolog>
													</Else>
												</IfElseCondition>
											</SuppressFailure>
											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantCallback_empty>
												</IfCondition>
											</Synchronize>
										</Sequence>
									</SuppressFailure>
									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</IfGate>
								</Sequence>
							</Loop>
						</Parallel>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest>
				<Function_moveInFormation_inFormation editorPosX="1880" editorPosY="-610" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_moveInFormation_inFormation>
				<Sequence editorPosX="1500" editorPosY="-980" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<DefaultBranch>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</DefaultBranch>
					</Switch>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</FindInArray>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</IfCondition>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="defendTowerRoom" is_function="0">
		<Variables>
			<Variable name="attackData" type="switch:interruptData:attack" values="" isPersistent="0" form="single" />
			<Variable name="behaviorHolder" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="behaviorHolders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="currentAreaToDefend" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="enemiesInArea" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="enemiesOutsideArea" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="enemy" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="inQuestSkirmish" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="questFightStatus" type="combat:questFightStatus" values="" isPersistent="0" form="single" />
			<Variable name="target" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="areaToDefend" type="_wuid" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="enemies" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="leader" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$leader == $this.id">
						<Sequence>
							<GetBehaviorHolders area="$__object.id" behaviors="&apos;defendTowerRoom&apos;" targetVar="$behaviorHolders" />
							<EraseFromArray array="$behaviorHolders" condition="$__value == $this.id" />
							<ForEach startIndex="0" step="1" array="$behaviorHolders" iterator="" value="$behaviorHolder" break="$break">
								<IsDeadCheck SoulWUID="$behaviorHolder" FailSubtMissing="false" saveVersion="2">
									<Else canSkip="1">
										<Expression expressions="$break = true" />
									</Else>
								</IsDeadCheck>
							</ForEach>
							<IfCondition failOnCondition="false" condition="$break == true">
								<Sequence>
									<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
									<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
										<MeleeGuardAutomationDecorator GuardMode="freeBlock" active="true">
											<Sequence>
												<WaitAction />
												<Parallel successMode="Any" failureMode="Any">
													<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="3.000000" High="3.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
														<Success />
													</DistanceGate>
													<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Parallel>
											</Sequence>
										</MeleeGuardAutomationDecorator>
									</AnyDecorator>
								</Sequence>
							</IfCondition>
						</Sequence>
					</IfCondition>
					<Parallel successMode="Any" failureMode="Any">
						<IfGate atomic="false" condition="$target ~= $__null" RunLogic="KeepRunning">
							<Parallel successMode="Any" failureMode="Any">
								<MeleeOffenseAutomationDecorator active="true">
									<MeleeDefenseAutomationDecorator active="true">
										<MeleeGuardAutomationDecorator GuardMode="automate" active="true">
											<WeaponAutomationDecorator WeaponChange="none" active="true">
												<CombatFollowerDecorator ProbablisticDrivenSweetSpot="true" RPGSweetSpotArcDriver="true" active="true">
													<CombatAction TargetNPC="$target" RelationOverride="None" />
												</CombatFollowerDecorator>
											</WeaponAutomationDecorator>
										</MeleeGuardAutomationDecorator>
									</MeleeDefenseAutomationDecorator>
								</MeleeOffenseAutomationDecorator>
								<Loop count="-1">
									<IfElseCondition failOnCondition="false" condition="$leader == this.id" saveVersion="2">
										<Then canSkip="1">
											<Function_crime_surrenderDecision attackData="$attackData" inQuestSkirmish="$inQuestSkirmish" myTarget="$target" questFightStatus="$questFightStatus" nodeLabel="23520827" />
										</Then>
										<Else canSkip="1">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</Else>
									</IfElseCondition>
								</Loop>
								<Loop count="-1">
									<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_surrenderingMaxDistance&apos;].value" High="$data:script_param[&apos;crime_surrenderingMaxDistance&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="Halt">
										<GameContext context="combat_playerSurrenderDistanceCondition">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</GameContext>
									</DistanceGate>
								</Loop>
							</Parallel>
						</IfGate>
						<Loop count="-1">
							<Sequence>
								<Expression expressions="$currentAreaToDefend = $areaToDefend" />
								<ReinitVariable variable="$enemiesInArea" />
								<ReinitVariable variable="$enemiesOutsideArea" />
								<ForEach startIndex="0" step="1" array="$enemies" iterator="" value="$enemy" break="">
									<IsDeadCheck SoulWUID="$enemy" FailSubtMissing="false" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
										<Else canSkip="1">
											<IsUnconsciousCheck SoulWUID="$enemy" FailSubtMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Success />
												</Then>
												<Else canSkip="1">
													<IsInsideArea Origin="$enemy" Area="$currentAreaToDefend" FailSubtMissing="false" saveVersion="2">
														<Then canSkip="1">
															<PushToArray array="$enemiesInArea" value="$enemy" direction="Back" />
														</Then>
														<Else canSkip="1">
															<PushToArray array="$enemiesOutsideArea" value="$enemy" direction="Back" />
														</Else>
													</IsInsideArea>
												</Else>
											</IsUnconsciousCheck>
										</Else>
									</IsDeadCheck>
								</ForEach>
								<IfElseCondition failOnCondition="false" condition="#enemiesOutsideArea &gt; 0" saveVersion="2">
									<Then canSkip="1">
										<RandomItem Array="$enemiesInArea" Result="$target" Clamp="-1" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$target = $enemiesInArea[0]" />
									</Else>
								</IfElseCondition>
								<Parallel successMode="Any" failureMode="Any">
									<IfElseCondition failOnCondition="false" condition="#enemiesOutsideArea &gt; 0" saveVersion="2">
										<Then canSkip="1">
											<AreaPresenceGate aiObjects="$target" area="$currentAreaToDefend" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
												<RelationContext context="combat_forcedTarget" source="$this.id" target="$target">
													<DeadUnconsciousGate Who="$target" State="Any" Negation="true" RunLogic="Halt">
														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
													</DeadUnconsciousGate>
												</RelationContext>
											</AreaPresenceGate>
										</Then>
										<Else canSkip="1">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</Else>
									</IfElseCondition>
									<IfGate atomic="false" condition="#enemiesOutsideArea &gt; 0" RunLogic="KeepRunning">
										<AreaPresenceGate aiObjects="$enemiesOutsideArea" area="$areaToDefend" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
											<Success />
										</AreaPresenceGate>
									</IfGate>
									<IfGate atomic="false" condition="$currentAreaToDefend ~= $areaToDefend" RunLogic="KeepRunning">
										<Success />
									</IfGate>
									<AreaPresenceGate aiObjects="$enemiesInArea" area="$currentAreaToDefend" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
										<Success />
									</AreaPresenceGate>
								</Parallel>
							</Sequence>
						</Loop>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<AreaPresenceListener aiObjects="$enemies" area="$areaToDefend" trackIn="true" trackOut="false" reportInitialState="false" />
			<IfElseCondition failOnCondition="false" condition="" saveVersion="2" />
		</ForestContainer>
		<EditorData Signature="utokNaMalesov_defendTowerRoom" EventSet="">
			<Variables>
				<Variable name="attackData" comment="" />
				<Variable name="behaviorHolder" comment="" />
				<Variable name="behaviorHolders" comment="" />
				<Variable name="break" comment="" />
				<Variable name="currentAreaToDefend" comment="" />
				<Variable name="enemiesInArea" comment="" />
				<Variable name="enemiesOutsideArea" comment="" />
				<Variable name="enemy" comment="" />
				<Variable name="inQuestSkirmish" comment="" />
				<Variable name="questFightStatus" comment="" />
				<Variable name="target" comment="" />
				<Variable name="areaToDefend" comment="" />
				<Variable name="enemies" comment="" />
				<Variable name="leader" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetBehaviorHolders>
								<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</EraseFromArray>
								<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IsDeadCheck>
								</ForEach>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</DrawAction>
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</WaitAction>
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</DistanceGate>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Parallel>
												</Sequence>
											</MeleeGuardAutomationDecorator>
										</AnyDecorator>
									</Sequence>
								</IfCondition>
							</Sequence>
						</IfCondition>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<MeleeDefenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<CombatFollowerDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</CombatAction>
													</CombatFollowerDecorator>
												</WeaponAutomationDecorator>
											</MeleeGuardAutomationDecorator>
										</MeleeDefenseAutomationDecorator>
									</MeleeOffenseAutomationDecorator>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Function_crime_surrenderDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_surrenderDecision>
											</Then>
											<Else>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Else>
										</IfElseCondition>
									</Loop>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</GameContext>
										</DistanceGate>
									</Loop>
								</Parallel>
							</IfGate>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
											<Else>
												<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Then>
													<Else>
														<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PushToArray>
															</Then>
															<Else>
																<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PushToArray>
															</Else>
														</IsInsideArea>
													</Else>
												</IsUnconsciousCheck>
											</Else>
										</IsDeadCheck>
									</ForEach>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</RandomItem>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RelationContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</DeadUnconsciousGate>
													</RelationContext>
												</AreaPresenceGate>
											</Then>
											<Else>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Else>
										</IfElseCondition>
										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</AreaPresenceGate>
										</IfGate>
										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</IfGate>
										<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</AreaPresenceGate>
									</Parallel>
								</Sequence>
							</Loop>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<AreaPresenceListener editorPosX="190" editorPosY="720" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</AreaPresenceListener>
				<IfElseCondition editorPosX="2260" editorPosY="-110" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
				</IfElseCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="loadWeaponAndWait" is_function="0">
		<Variables>
			<Variable name="destinationIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="loadWeaponIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="shouldLoadWeapon" type="_bool" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="stealthParticipants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="tagpoints" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$stealthParticipants" keyOut="$destinationIndex" condition="$__value == $this.id" />
					<FindInArray array="$stealthParticipants" keyOut="$loadWeaponIndex" condition="$__value == $this.id" />
					<DistanceCondition Origin="$this.id" ReferencePt="$tagpoints[$destinationIndex]" Low="0.500000" High="0.500000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
						<IsFastForwarded failOnCondition="false" saveVersion="2">
							<Else canSkip="1">
								<EntityContext context="utokNaMalesov_movingToSpot" target="">
									<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
										<ExactMove directionType="AlignWithEntity" directionSpecification="$tagpoints[$destinationIndex]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$tagpoints[$destinationIndex]" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</AnyDecorator>
								</EntityContext>
							</Else>
						</IsFastForwarded>
					</DistanceCondition>
					<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
					<Selector>
						<IfCondition failOnCondition="true" condition="$leftHandItem ~= $__null">
							<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_ranged" useDecision="true" enabled="true" saveVersion="2">
								<Search canSkip="1">
									<Success />
								</Search>
								<Exec canSkip="1">
									<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
										<Sequence>
											<WaitAction />
											<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;loadingWeaponLock&apos;">
												<Wait duration="&apos;300ms&apos;" timeType="GameTime" doFail="false" variation="&apos;100ms&apos;" />
											</Semaphore>
											<IfCondition failOnCondition="false" condition="$shouldLoadWeapon[$loadWeaponIndex]">
												<IsWeaponLoaded failOnCondition="false" saveVersion="2">
													<Else canSkip="1">
														<LoadWeaponAction />
													</Else>
												</IsWeaponLoaded>
											</IfCondition>
										</Sequence>
									</StanceElement>
								</Exec>
							</HandContentElement>
						</IfCondition>
						<Sequence>
							<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
							<Expression expressions="$useWeapon = $rightHandItem ~= $__null &#10;$useShield = ($leftHandItem ~= $__null &amp; $rightHandItem ~= $__null)" />
							<IfCondition failOnCondition="true" condition="$rightHandItem ~= $__null">
								<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
									<Search canSkip="1">
										<Success />
									</Search>
									<Exec canSkip="1">
										<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
											<Search canSkip="1">
												<Success />
											</Search>
											<Exec canSkip="1">
												<UnstanceAction unstance="Quest_SoldierHidingBarricadeFront" locationObject="$tagpoints[$destinationIndex]" slaveObject="" />
											</Exec>
										</HandContentElement>
									</Exec>
								</HandContentElement>
							</IfCondition>
						</Sequence>
						<UnstanceAction unstance="Kneel" locationObject="" slaveObject="" />
					</Selector>
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_ambushWaiting" EventSet="">
			<Variables>
				<Variable name="destinationIndex" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="loadWeaponIndex" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="shouldLoadWeapon" comment="" />
				<Variable name="stealthParticipants" comment="" />
				<Variable name="tagpoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
										</AnyDecorator>
									</EntityContext>
								</Else>
							</IsFastForwarded>
						</DistanceCondition>
						<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetWeaponsFromWeaponSet>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Search>
									<Exec>
										<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WaitAction>
												<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Semaphore>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IsWeaponLoaded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Else>
															<LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LoadWeaponAction>
														</Else>
													</IsWeaponLoaded>
												</IfCondition>
											</Sequence>
										</StanceElement>
									</Exec>
								</HandContentElement>
							</IfCondition>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetWeaponsFromWeaponSet>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Search>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Search>
										<Exec>
											<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Search>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Search>
												<Exec>
													<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</UnstanceAction>
												</Exec>
											</HandContentElement>
										</Exec>
									</HandContentElement>
								</IfCondition>
							</Sequence>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
						</Selector>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveAndKneel" is_function="0">
		<Variables>
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stealthParticipants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="tagpoints" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$stealthParticipants" keyOut="$index" condition="$__value == $this.id" />
					<DistanceCondition Origin="$this.id" ReferencePt="$tagpoints[$index]" Low="0.500000" High="0.500000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
						<EntityContext context="utokNaMalesov_movingToSpot" target="">
							<ExactMove directionType="AlignWithEntity" directionSpecification="$tagpoints[$index]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$tagpoints[$index]" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
						</EntityContext>
					</DistanceCondition>
					<UnstanceAction unstance="Kneel" locationObject="" slaveObject="" />
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_prepareForStealth" EventSet="">
			<Variables>
				<Variable name="index" comment="" />
				<Variable name="stealthParticipants" comment="" />
				<Variable name="tagpoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
							</EntityContext>
						</DistanceCondition>
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cowerAndChat" is_function="0">
		<Variables>
			<Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" />
			<Variable name="perceptionInfo" type="perceptionInfo" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<MoveParamsDecorator speed="FastRun" pathFindingParams="" doorClosingPolicy="Automatic">
								<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="7.000000" High="7.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
									<Selector>
										<Sequence>
											<GraphSearch Origin="$wuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;cryingKneeling&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</GraphSearch>
											<UnstanceAction unstance="cryingKneeling" locationObject="$wuid" slaveObject="" />
										</Sequence>
										<Sequence>
											<GraphSearch Origin="$wuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;cryingStanding&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</GraphSearch>
											<UnstanceAction unstance="cryingStanding" locationObject="$wuid" slaveObject="" />
										</Sequence>
										<Sequence>
											<GraphSearch Origin="$wuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;prayKneeling&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</GraphSearch>
											<UnstanceAction unstance="PrayKneelingGround_female" locationObject="$wuid" slaveObject="" />
										</Sequence>
										<Sequence>
											<GraphSearch Origin="$wuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;weepingGround&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</GraphSearch>
											<UnstanceAction unstance="weepingGround" locationObject="$wuid" slaveObject="" />
										</Sequence>
										<Sequence>
											<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="FastRun" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
											<UnstanceAction unstance="ScaredIdle" locationObject="" slaveObject="" />
										</Sequence>
									</Selector>
								</DistanceCondition>
							</MoveParamsDecorator>
							<Parallel successMode="Any" failureMode="Any">
								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitData" senderInfo="" inbox="&apos;hitData&apos;" condition="" answerVar="">
									<Success />
								</ProcessMessage>
								<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="7.000000" High="7.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
									<Parallel successMode="All" failureMode="Any">
										<UrgencyDecorator Urgency="Slow">
											<UnstanceAction unstance="ScaredIdle" locationObject="" slaveObject="" />
										</UrgencyDecorator>
										<Function_speech_dialogInitiator alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="88321692" />
									</Parallel>
								</DistanceGate>
							</Parallel>
						</Sequence>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="hitData" comment="" />
				<Variable name="perceptionInfo" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</Sequence>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</Sequence>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</Sequence>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</Sequence>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExactMove>
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</Sequence>
										</Selector>
									</DistanceCondition>
								</MoveParamsDecorator>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</ProcessMessage>
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</UrgencyDecorator>
											<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_dialogInitiator>
										</Parallel>
									</DistanceGate>
								</Parallel>
							</Sequence>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="zizkaband_duelObserving" is_function="0">
		<Variables>
			<Variable name="followerRole" type="enum:crimeFollowingRole" values="" isPersistent="0" form="single" />
			<Variable name="following" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="lightSource" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="barkAliases" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="followEnabled" type="_bool" values="false" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="hasTorch" type="_bool" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="stances" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="tagpoints" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$participants" keyOut="$index" condition="$__value == $this.id" />
					<ForceLook LookTarget="$__player" DisableVariations="true">
						<HandContentElement hand="Left" item="$lightSource" allowAny="false" decisionLabel="lightSource" useDecision="true" enabled="$hasTorch[$index]" saveVersion="2">
							<Search canSkip="1">
								<GetLightSourceItem Item="$lightSource" />
							</Search>
							<Exec canSkip="1">
								<ContinuousSwitch>
									<IfCondition failOnCondition="false" condition="!$followEnabled">
										<UrgencyDecorator Urgency="Slow">
											<Sequence>
												<IfElseCondition failOnCondition="false" condition="$hasTorch[$index]" saveVersion="2">
													<Then canSkip="1">
														<ExactMove directionType="AlignWithEntity" directionSpecification="$tagpoints[$index]" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$tagpoints[$index]" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													</Then>
													<Else canSkip="1">
														<UnstanceAction unstance="$stances[$index]" locationObject="$tagpoints[$index]" slaveObject="" />
													</Else>
												</IfElseCondition>
												<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
											</Sequence>
										</UrgencyDecorator>
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$followEnabled">
										<Parallel successMode="Any" failureMode="Any">
											<UrgencyDecorator Urgency="Slow">
												<Sequence>
													<ReinitVariable variable="$following" />
													<ContinuousSwitch>
														<IfCondition failOnCondition="false" condition="$following">
															<Parallel successMode="Any" failureMode="Any">
																<ContinuousSwitch>
																	<IfCondition failOnCondition="false" condition="$followerRole == $enum:crimeFollowingRole.observer">
																		<CrimeFollower Target="$__player" Mode="Default" Role="Observer" RelativeSpeedLimit="Dash" DisableGhosting="false" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$followerRole == $enum:crimeFollowingRole.assist">
																		<CrimeFollower Target="$__player" Mode="Default" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="false" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="true">
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</IfCondition>
																</ContinuousSwitch>
																<Loop count="-1">
																	<Sequence>
																		<Expression expressions="$followerRole = $enum:crimeFollowingRole.assist" />
																		<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="8.000000" High="8.000000" Negation="false" OpenInMiddle="false" RunLogic="Halt">
																			<Sequence>
																				<Expression expressions="$followerRole = $enum:crimeFollowingRole.observer" />
																				<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="3.000000" High="3.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
																					<Expression expressions="$following = false" />
																				</DistanceGate>
																			</Sequence>
																		</DistanceGate>
																	</Sequence>
																</Loop>
															</Parallel>
														</IfCondition>
														<IfCondition failOnCondition="false" condition="!$following">
															<Parallel successMode="Any" failureMode="Any">
																<Sequence>
																	<WaitAction />
																	<Turn target="$__player" align="false" />
																	<IfCondition failOnCondition="false" condition="!$hasTorch[$index]">
																		<UnstanceAction unstance="$stances[$index]" locationObject="$this.id" slaveObject="" />
																	</IfCondition>
																	<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
																</Sequence>
																<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="8.000000" High="8.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
																	<Expression expressions="$following = true" />
																</DistanceGate>
																<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="3.000000" High="3.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																	<Expression expressions="$following = true" />
																</DistanceGate>
															</Parallel>
														</IfCondition>
													</ContinuousSwitch>
												</Sequence>
											</UrgencyDecorator>
											<Loop count="-1">
												<Sequence>
													<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;utokNaMalesov_cheeringBark&apos;">
														<Sequence>
															<SuppressFailure>
																<Function_speech_schedulerMonolog alias="$barkAliases[$index]" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="84869202" />
															</SuppressFailure>
															<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
														</Sequence>
													</Semaphore>
													<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Sequence>
											</Loop>
										</Parallel>
									</IfCondition>
								</ContinuousSwitch>
							</Exec>
						</HandContentElement>
					</ForceLook>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_duelObserving" EventSet="">
			<Variables>
				<Variable name="followerRole" comment="" />
				<Variable name="following" comment="" />
				<Variable name="index" comment="" />
				<Variable name="lightSource" comment="" />
				<Variable name="barkAliases" comment="" />
				<Variable name="followEnabled" comment="" />
				<Variable name="hasTorch" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="stances" comment="" />
				<Variable name="tagpoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Search>
									<GetLightSourceItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetLightSourceItem>
								</Search>
								<Exec>
									<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ExactMove>
														</Then>
														<Else>
															<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</UnstanceAction>
														</Else>
													</IfElseCondition>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Sequence>
											</UrgencyDecorator>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ReinitVariable>
														<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</CrimeFollower>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</CrimeFollower>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</IfCondition>
																	</ContinuousSwitch>
																	<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</DistanceGate>
																				</Sequence>
																			</DistanceGate>
																		</Sequence>
																	</Loop>
																</Parallel>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</WaitAction>
																		<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Turn>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</UnstanceAction>
																		</IfCondition>
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																	</Sequence>
																	<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</DistanceGate>
																	<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</DistanceGate>
																</Parallel>
															</IfCondition>
														</ContinuousSwitch>
													</Sequence>
												</UrgencyDecorator>
												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_speech_schedulerMonolog>
																</SuppressFailure>
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
															</Sequence>
														</Semaphore>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</Loop>
											</Parallel>
										</IfCondition>
									</ContinuousSwitch>
								</Exec>
							</HandContentElement>
						</ForceLook>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="playUnstanceOnSpot" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="$string" locationObject="$wuid" slaveObject="" />
					<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="berta_searchChest" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="SearchingChest" locationObject="$data" slaveObject="$data" />
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="hagenTrot_eatFromBowl" is_function="0">
		<Variables>
			<Variable name="bowl" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<StanceElement smartObject="$data" stance="sitting" allowAny="false" enabled="true">
					<HandContentElement hand="Left" item="$bowl" allowAny="false" decisionLabel="tavern_bowls" useDecision="true" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<GetItem InventoryHost="$this.id" ItemGUID="&apos;578a6bb7-4eae-4d06-9272-bdf692b249c6&apos;" ItemCategory="" FailIfNotFound="false" ItemOut="$bowl" AmountOut="" />
						</Search>
						<Exec canSkip="1">
							<Sequence>
								<UnstanceAction unstance="eatingMashSitting" locationObject="" slaveObject="" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</Exec>
					</HandContentElement>
				</StanceElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="bowl" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<GetItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetItem>
							</Search>
							<Exec>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Exec>
						</HandContentElement>
					</StanceElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="sittingGroundSharpeningSword" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer>
			<UnstanceAction unstance="AlertedLookingAround" locationObject="" slaveObject="" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest>
				<UnstanceAction editorPosX="284" editorPosY="75" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</UnstanceAction>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="captureBergov" is_function="0">
		<Variables>
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
					<Expression expressions="$useShield = $leftHand ~= $__null &#10;$useWeapon = $rightHand ~= $__null" />
					<HandContentElement hand="Right" item="$rightHand" allowAny="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
						<Search canSkip="1">
							<Success />
						</Search>
						<Exec canSkip="1">
							<HandContentElement hand="Left" item="$leftHand" allowAny="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
								<Search canSkip="1">
									<Success />
								</Search>
								<Exec canSkip="1">
									<Sequence>
										<Parallel successMode="Any" failureMode="Any">
											<CrimeFollower Target="$data" Role="Assist" RelativeSpeedLimit="Run" BlockWay="false" NoMoveOnlyTurn="false" />
											<DistanceGate Origin="$data" ReferencePt="$this.id" Low="4.000000" High="4.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
												<Success />
											</DistanceGate>
										</Parallel>
										<Switch>
											<IfCondition failOnCondition="false" condition="$useWeapon &amp; &#10;$useShield">
												<MeleeGuardAutomationDecorator GuardMode="freeBlock" active="true">
													<WaitAction />
												</MeleeGuardAutomationDecorator>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$useWeapon">
												<UnstanceAction unstance="BattleLngsw" locationObject="" slaveObject="" />
											</IfCondition>
											<DefaultBranch>
												<Success />
											</DefaultBranch>
										</Switch>
										<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
									</Sequence>
								</Exec>
							</HandContentElement>
						</Exec>
					</HandContentElement>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<UnstanceAction unstance="BattleShswShld" locationObject="" slaveObject="" />
		</ForestContainer>
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="leftHand" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetWeaponsFromWeaponSet>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Search>
							<Exec>
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Search>
									<Exec>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</CrimeFollower>
												<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DistanceGate>
											</Parallel>
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</WaitAction>
													</MeleeGuardAutomationDecorator>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</UnstanceAction>
												</IfCondition>
												<DefaultBranch>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DefaultBranch>
											</Switch>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</Exec>
								</HandContentElement>
							</Exec>
						</HandContentElement>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<UnstanceAction editorPosX="1760" editorPosY="50" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</UnstanceAction>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cower" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="Cower" locationObject="" slaveObject="" />
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="saddleUpHorse" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<JoinedAnimationAction requiresMovement="true" lockContext="$__object.id" lockName="&apos;horseMaintance&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;HorseMaintenance&apos;" tags="" eventReferenceObject="" alignObject="$__object.id" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</JoinedAnimationAction>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="defendTower" is_function="0">
		<Variables>
			<Variable name="enemiesInRange" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="enemyInRange" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="enemyIsInRange" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shootingSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stoneImpactArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stoneImpactAreas" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="stonePile" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stonePileToUse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stonePiles" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="throwStones" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidDataArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SyncWithTrackview NPC="$this.id" />
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;destination&apos;" prune="true" negprune="unknown" Parent="" Child="$shootingSpot" Data="" />
					</GraphSearch>
					<Parallel successMode="Any" failureMode="Any">
						<ContinuousSwitch>
							<IfCondition failOnCondition="false" condition="$throwStones">
								<MoveParamsDecorator speed="Run" pathFindingParams="" doorClosingPolicy="Automatic">
									<Sequence>
										<LoopUntil until="Fail" attemptCount="0">
											<Sequence>
												<ForgetDecision decisionLabel="battle_stones" />
												<ReinitVariable variable="$stonePiles" />
												<ReinitVariable variable="$stonePileToUse" />
												<MinigameElement minigameType="StoneThrowing" minigameObject="$stonePileToUse" decisionLabel="battle_stones" useDecision="true" enabled="true" saveVersion="2">
													<Search canSkip="1">
														<Sequence>
															<GraphSearch Origin="$wuidData" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<IsMinigameAvailableFilter minigameType="StoneThrowing" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																<Nodalyzer Quantifiers="ForAll" Parent="" Child="$stonePiles" saveVersion="2" />
															</GraphSearch>
															<Expression expressions="$enemyIsInRange = false" />
															<ForEach startIndex="0" step="1" array="$stonePiles" iterator="" value="$stonePile" break="$enemyIsInRange">
																<ForEach startIndex="0" step="1" array="$enemiesInRange" iterator="" value="$enemyInRange" break="$enemyIsInRange">
																	<IsDeadCheck SoulWUID="$enemyInRange" FailSubtMissing="false" saveVersion="2">
																		<Else canSkip="1">
																			<IsUnconsciousCheck SoulWUID="$enemyInRange" FailSubtMissing="false" saveVersion="2">
																				<Else canSkip="1">
																					<DistanceCondition Origin="$enemyInRange" ReferencePt="$stonePile" Low="14.000000" High="14.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																						<Expression expressions="$enemyIsInRange = true &#10;$stonePileToUse = $stonePile" />
																					</DistanceCondition>
																				</Else>
																			</IsUnconsciousCheck>
																		</Else>
																	</IsDeadCheck>
																</ForEach>
															</ForEach>
															<IfCondition failOnCondition="false" condition="$stonePileToUse == $__null">
																<Fail />
															</IfCondition>
														</Sequence>
													</Search>
													<Exec canSkip="1">
														<IfCondition failOnCondition="true" condition="$enemyIsInRange">
															<LoopUntil until="Fail" attemptCount="0">
																<Sequence>
																	<WaitAction />
																	<ActorStateBarrier Who="" ToState="stoneThrowing" NegateTo="true" RunLogic="KeepRunning">
																		<IsDeadCheck SoulWUID="$enemyInRange" FailSubtMissing="false" saveVersion="2">
																			<Then canSkip="1">
																				<Fail />
																			</Then>
																			<Else canSkip="1">
																				<IsUnconsciousCheck SoulWUID="$enemyInRange" FailSubtMissing="true" saveVersion="2">
																					<Then canSkip="1">
																						<Fail />
																					</Then>
																					<Else canSkip="1">
																						<IsInsideArea Origin="$enemyInRange" Area="$wuidData" FailSubtMissing="true" saveVersion="2">
																							<Then canSkip="1">
																								<Success />
																							</Then>
																						</IsInsideArea>
																					</Else>
																				</IsUnconsciousCheck>
																			</Else>
																		</IsDeadCheck>
																	</ActorStateBarrier>
																</Sequence>
															</LoopUntil>
														</IfCondition>
													</Exec>
												</MinigameElement>
											</Sequence>
										</LoopUntil>
										<Expression expressions="$throwStones = false" />
									</Sequence>
								</MoveParamsDecorator>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="true">
								<Sequence>
									<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
										<ExactMove directionType="AlignWithEntity" directionSpecification="$shootingSpot" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$shootingSpot" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</AnyDecorator>
									<MeleeOffenseAutomationDecorator active="true">
										<WeaponAutomationDecorator WeaponChange="missile" active="true">
											<CombatAction TargetNPC="$__player" RelationOverride="None" />
										</WeaponAutomationDecorator>
									</MeleeOffenseAutomationDecorator>
								</Sequence>
							</IfCondition>
						</ContinuousSwitch>
						<AreaPresenceListener aiObjects="$wuidDataArray" area="$wuidData" trackIn="true" trackOut="true" reportInitialState="true">
							<IfElseCondition failOnCondition="false" condition="$__presence" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<PushToArray array="$enemiesInRange" value="$__presenceObject" direction="Front" />
										<Expression expressions="$throwStones = true" />
									</Sequence>
								</Then>
								<Else canSkip="1">
									<EraseFromArray array="$enemiesInRange" condition="$__value == $__presenceObject" />
								</Else>
							</IfElseCondition>
						</AreaPresenceListener>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<AreaPresenceGate aiObjects="$wuidDataArray" area="$wuidData" amount="AtLeastOne" presence="Present" RunLogic="Halt">
					<Sequence>
						<ReinitVariable variable="$throwStones" />
						<ReinitVariable variable="$stoneImpactAreas" />
						<GraphSearch Origin="$wuidData" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;stoneImpactArea&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							<Nodalyzer Quantifiers="ForAll" Parent="" Child="$stoneImpactAreas" saveVersion="2" />
						</GraphSearch>
						<Loop count="-1">
							<Sequence>
								<ForEach startIndex="0" step="1" array="$stoneImpactAreas" iterator="" value="$stoneImpactArea" break="$throwStones">
									<IsInsideArea Origin="$wuidDataArray[0]" Area="$stoneImpactArea" FailSubtMissing="false" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$throwStones = true" />
										</Then>
									</IsInsideArea>
								</ForEach>
								<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</Loop>
					</Sequence>
				</AreaPresenceGate>
				<Expression expressions="$throwStones = false" />
			</Sequence>
		</ForestContainer>
		<EditorData Signature="wuidDataWuidDataArray" EventSet="">
			<Variables>
				<Variable name="enemiesInRange" comment="" />
				<Variable name="enemyInRange" comment="" />
				<Variable name="enemyIsInRange" comment="" />
				<Variable name="shootingSpot" comment="" />
				<Variable name="stoneImpactArea" comment="" />
				<Variable name="stoneImpactAreas" comment="" />
				<Variable name="stonePile" comment="" />
				<Variable name="stonePileToUse" comment="" />
				<Variable name="stonePiles" comment="" />
				<Variable name="throwStones" comment="" />
				<Variable name="wuidData" comment="" />
				<Variable name="wuidDataArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SyncWithTrackview hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SyncWithTrackview>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ForgetDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ForgetDecision>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<MinigameElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Search>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IsMinigameAvailableFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</IsMinigameAvailableFilter>
																	<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																	</Nodalyzer>
																</GraphSearch>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Else>
																				<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Else>
																						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</DistanceCondition>
																					</Else>
																				</IsUnconsciousCheck>
																			</Else>
																		</IsDeadCheck>
																	</ForEach>
																</ForEach>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Fail>
																</IfCondition>
															</Sequence>
														</Search>
														<Exec>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</WaitAction>
																		<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Fail>
																				</Then>
																				<Else>
																					<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Fail>
																						</Then>
																						<Else>
																							<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Success>
																								</Then>
																							</IsInsideArea>
																						</Else>
																					</IsUnconsciousCheck>
																				</Else>
																			</IsDeadCheck>
																		</ActorStateBarrier>
																	</Sequence>
																</LoopUntil>
															</IfCondition>
														</Exec>
													</MinigameElement>
												</Sequence>
											</LoopUntil>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</MoveParamsDecorator>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
										</AnyDecorator>
										<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</CombatAction>
											</WeaponAutomationDecorator>
										</MeleeOffenseAutomationDecorator>
									</Sequence>
								</IfCondition>
							</ContinuousSwitch>
							<AreaPresenceListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</PushToArray>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</Then>
									<Else>
										<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</EraseFromArray>
									</Else>
								</IfElseCondition>
							</AreaPresenceListener>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="620" editorPosY="1340" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ReinitVariable>
							<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ReinitVariable>
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
								<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
								</Nodalyzer>
							</GraphSearch>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</IsInsideArea>
									</ForEach>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Loop>
						</Sequence>
					</AreaPresenceGate>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="lookAround" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="speech_readyForIngamePolylog" target="">
					<Sequence>
						<UnstanceAction unstance="LookingForSt" locationObject="$data" slaveObject="" />
						<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="&apos;5s&apos;" />
					</Sequence>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="getReadyForAmbush" is_function="0">
		<Variables>
			<Variable name="ambusherSpotIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="loadWeaponIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="ambushSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="ambusherSpots" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="ambushers" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="shouldLoadWeapon" type="_bool" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="victimDistanceToAmbushSpot" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="victims" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<DistanceCondition Origin="$ambushSpot" ReferencePt="$victims[0]" Low="$victimDistanceToAmbushSpot" High="$victimDistanceToAmbushSpot" Negation="true" ValueOnMiddle="false" failOnCondition="false">
						<Sequence>
							<FindInArray array="$ambushers" keyOut="$ambusherSpotIndex" condition="$__value == $this.id" />
							<FindInArray array="$ambushers" keyOut="$loadWeaponIndex" condition="$__value == $this.id" />
							<DistanceCondition Origin="$this.id" ReferencePt="$ambusherSpots[$ambusherSpotIndex]" Low="0.500000" High="0.500000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
								<IsFastForwarded failOnCondition="false" saveVersion="2">
									<Else canSkip="1">
										<EntityContext context="utokNaMalesov_movingToSpot" target="">
											<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
												<ExactMove directionType="AlignWithEntity" directionSpecification="$ambusherSpots[$ambusherSpotIndex]" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$ambusherSpots[$ambusherSpotIndex]" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
											</AnyDecorator>
										</EntityContext>
									</Else>
								</IsFastForwarded>
							</DistanceCondition>
							<Selector>
								<Sequence>
									<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
									<IfCondition failOnCondition="true" condition="$leftHandItem ~= $__null">
										<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_ranged" useDecision="true" enabled="true" saveVersion="2">
											<Search canSkip="1">
												<Success />
											</Search>
											<Exec canSkip="1">
												<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
													<Sequence>
														<IsFastForwarded failOnCondition="false" saveVersion="2">
															<Then canSkip="1">
																<UnstanceAction unstance="Quest_CrouchWithRangedWeapon" locationObject="$ambusherSpots[$ambusherSpotIndex]" slaveObject="" />
															</Then>
														</IsFastForwarded>
														<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;loadingWeaponLock&apos;">
															<Wait duration="&apos;300ms&apos;" timeType="GameTime" doFail="false" variation="&apos;100ms&apos;" />
														</Semaphore>
														<IfCondition failOnCondition="false" condition="$shouldLoadWeapon[$loadWeaponIndex]">
															<IsWeaponLoaded failOnCondition="false" saveVersion="2">
																<Else canSkip="1">
																	<LoadWeaponAction />
																</Else>
															</IsWeaponLoaded>
														</IfCondition>
													</Sequence>
												</StanceElement>
											</Exec>
										</HandContentElement>
									</IfCondition>
								</Sequence>
								<Sequence>
									<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
									<Expression expressions="$useWeapon = $rightHandItem ~= $__null &#10;$useShield = ($leftHandItem ~= $__null &amp; $rightHandItem ~= $__null)" />
									<IfCondition failOnCondition="true" condition="$rightHandItem ~= $__null">
										<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
											<Search canSkip="1">
												<Success />
											</Search>
											<Exec canSkip="1">
												<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
													<Search canSkip="1">
														<Success />
													</Search>
													<Exec canSkip="1">
														<UnstanceAction unstance="Quest_SoldierHidingBarricadeFront" locationObject="$ambusherSpots[$ambusherSpotIndex]" slaveObject="" />
													</Exec>
												</HandContentElement>
											</Exec>
										</HandContentElement>
									</IfCondition>
								</Sequence>
								<UnstanceAction unstance="CrouchKneelIdle" locationObject="" slaveObject="" />
							</Selector>
						</Sequence>
					</DistanceCondition>
					<DistanceGate Origin="$ambushSpot" ReferencePt="$victims[0]" Low="$victimDistanceToAmbushSpot" High="$victimDistanceToAmbushSpot" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
						<UrgencyDecorator Urgency="Slow">
							<Selector>
								<Sequence>
									<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
									<IfCondition failOnCondition="true" condition="$leftHandItem ~= $__null">
										<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_ranged" useDecision="true" enabled="true" saveVersion="2">
											<Search canSkip="1">
												<Success />
											</Search>
											<Exec canSkip="1">
												<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
													<Sequence>
														<IfCondition failOnCondition="false" condition="$loadWeaponIndex ~= 0">
															<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;turnDesynchronizationSemaphore&apos;">
																<Wait duration="&apos;1000ms&apos;" timeType="GameTime" doFail="false" variation="&apos;500ms&apos;" />
															</Semaphore>
														</IfCondition>
														<Loop count="-1">
															<Sequence>
																<Turn target="$victims[0]" align="false" />
																<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
															</Sequence>
														</Loop>
													</Sequence>
												</StanceElement>
											</Exec>
										</HandContentElement>
									</IfCondition>
								</Sequence>
								<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
									<WaitAction />
								</AnyDecorator>
							</Selector>
						</UrgencyDecorator>
					</DistanceGate>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="utokNaMalesov_getReadyForAmbush" EventSet="">
			<Variables>
				<Variable name="ambusherSpotIndex" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="loadWeaponIndex" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="ambushSpot" comment="" />
				<Variable name="ambusherSpots" comment="" />
				<Variable name="ambushers" comment="" />
				<Variable name="shouldLoadWeapon" comment="" />
				<Variable name="victimDistanceToAmbushSpot" comment="" />
				<Variable name="victims" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</FindInArray>
								<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</FindInArray>
								<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Else>
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ExactMove>
												</AnyDecorator>
											</EntityContext>
										</Else>
									</IsFastForwarded>
								</DistanceCondition>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetWeaponsFromWeaponSet>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Search>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Search>
												<Exec>
													<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<UnstanceAction hasInputBreakpoint="0" comment="KCD2-75655" breakpointFlags="0">
																		<OutputBreakpoints />
																	</UnstanceAction>
																</Then>
															</IsFastForwarded>
															<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
															</Semaphore>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IsWeaponLoaded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Else>
																		<LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LoadWeaponAction>
																	</Else>
																</IsWeaponLoaded>
															</IfCondition>
														</Sequence>
													</StanceElement>
												</Exec>
											</HandContentElement>
										</IfCondition>
									</Sequence>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetWeaponsFromWeaponSet>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Search>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Search>
												<Exec>
													<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Search>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Search>
														<Exec>
															<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</UnstanceAction>
														</Exec>
													</HandContentElement>
												</Exec>
											</HandContentElement>
										</IfCondition>
									</Sequence>
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
								</Selector>
							</Sequence>
						</DistanceCondition>
						<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetWeaponsFromWeaponSet>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Search>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Search>
												<Exec>
													<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Semaphore>
															</IfCondition>
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Turn>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</Loop>
														</Sequence>
													</StanceElement>
												</Exec>
											</HandContentElement>
										</IfCondition>
									</Sequence>
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
									</AnyDecorator>
								</Selector>
							</UrgencyDecorator>
						</DistanceGate>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootFromBattlement" is_function="0">
		<Variables>
			<Variable name="battlementLinkSource" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isShooting" type="_bool" values="true" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="boolRef" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="firstWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="secondWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;destination&apos;" prune="true" negprune="unknown" Parent="" Child="$battlementLinkSource" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<Sequence>
						<SyncWithTrackview NPC="$this.id" />
						<WaitAction />
						<Parallel successMode="Any" failureMode="Any">
							<Function_battlementShooting battlementLinkSource="$battlementLinkSource" checkForCloseEnemies="$boolRef" enemyGroupControllers="$firstWuid" isShooting="$isShooting" shooterArea="$secondWuid" nodeLabel="17536811" />
							<Loop count="-1">
								<Sequence>
									<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;battlementShootingBarkingLock&apos;">
										<Sequence>
											<SuppressFailure>
												<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;BATTLE_IDLE_BARK&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="82287907" />
											</SuppressFailure>
											<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
										</Sequence>
									</Semaphore>
									<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Sequence>
							</Loop>
						</Parallel>
					</Sequence>
					<Loop count="-1">
						<IfGate atomic="false" condition="$boolRef" RunLogic="Halt">
							<EntityContext context="combat_disabledAsTarget" target="">
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</EntityContext>
						</IfGate>
					</Loop>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuid_wuid_boolRef" EventSet="">
			<Variables>
				<Variable name="battlementLinkSource" comment="" />
				<Variable name="isShooting" comment="" />
				<Variable name="boolRef" comment="" />
				<Variable name="firstWuid" comment="" />
				<Variable name="secondWuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SyncWithTrackview hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SyncWithTrackview>
							<WaitAction hasInputBreakpoint="0" comment="" comment_box="Hot_fix..._some_NPCs_won_t_use_battlemets_if_they_don_t_steath_their_weapon_first" comment_box_color="222,222,222,222" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_battlementShooting hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_battlementShooting>
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_schedulerMonolog>
												</SuppressFailure>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</Semaphore>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
								</Loop>
							</Parallel>
						</Sequence>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</EntityContext>
							</IfGate>
						</Loop>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="interrupt_weaponSetupVillageReinforcements" is_function="0">
		<Variables>
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="lightSource" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<UrgencyDecorator Urgency="Instant">
					<Selector>
						<Sequence>
							<GetWeaponsFromWeaponSet WeaponSet="Oversized" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
							<IfCondition failOnCondition="true" condition="$rightHand ~= $__null">
								<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_halbert" useDecision="true" enabled="true" saveVersion="2">
									<Search canSkip="1">
										<Success />
									</Search>
									<Exec canSkip="1">
										<WaitAction />
									</Exec>
								</HandContentElement>
							</IfCondition>
						</Sequence>
						<IfCondition failOnCondition="true" condition="$data == &apos;melee,torch&apos;">
							<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="true" saveVersion="2">
								<Search canSkip="1">
									<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
								</Search>
								<Exec canSkip="1">
									<HandContentElement hand="Left" item="$lightSource" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_torch" useDecision="true" enabled="true" saveVersion="2">
										<Search canSkip="1">
											<GetLightSourceItem Item="$lightSource" />
										</Search>
										<Exec canSkip="1">
											<WaitAction />
										</Exec>
									</HandContentElement>
								</Exec>
							</HandContentElement>
						</IfCondition>
						<Sequence>
							<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
							<IfElseCondition failOnCondition="false" condition="$leftHand == $__null" saveVersion="2">
								<Then canSkip="1">
									<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="true" saveVersion="2">
										<Search canSkip="1">
											<Success />
										</Search>
										<Exec canSkip="1">
											<WaitAction />
										</Exec>
									</HandContentElement>
								</Then>
								<Else canSkip="1">
									<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="true" saveVersion="2">
										<Search canSkip="1">
											<Success />
										</Search>
										<Exec canSkip="1">
											<HandContentElement hand="Left" item="$leftHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="true" saveVersion="2">
												<Search canSkip="1">
													<Success />
												</Search>
												<Exec canSkip="1">
													<WaitAction />
												</Exec>
											</HandContentElement>
										</Exec>
									</HandContentElement>
								</Else>
							</IfElseCondition>
						</Sequence>
					</Selector>
				</UrgencyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="">
			<Variables>
				<Variable name="leftHand" comment="" />
				<Variable name="lightSource" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetWeaponsFromWeaponSet>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Search>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Search>
										<Exec>
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
										</Exec>
									</HandContentElement>
								</IfCondition>
							</Sequence>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetWeaponsFromWeaponSet>
									</Search>
									<Exec>
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<GetLightSourceItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetLightSourceItem>
											</Search>
											<Exec>
												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WaitAction>
											</Exec>
										</HandContentElement>
									</Exec>
								</HandContentElement>
							</IfCondition>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetWeaponsFromWeaponSet>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Search>
											<Exec>
												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WaitAction>
											</Exec>
										</HandContentElement>
									</Then>
									<Else>
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Search>
											<Exec>
												<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Search>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Search>
													<Exec>
														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</WaitAction>
													</Exec>
												</HandContentElement>
											</Exec>
										</HandContentElement>
									</Else>
								</IfElseCondition>
							</Sequence>
						</Selector>
					</UrgencyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="holdLightOnSpot" is_function="0">
		<Variables>
			<Variable name="light" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Left" item="$light" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="lightSource" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<GetLightSourceItem Item="$light" />
					</Search>
					<Exec canSkip="1">
						<Sequence>
							<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="light" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<GetLightSourceItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetLightSourceItem>
						</Search>
						<Exec>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitActionAndWait" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="villager_mournInVillage" is_function="0">
		<Variables>
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="mournContext" type="_float" values="" isPersistent="0" form="associative" />
		</Variables>
		<Parameters>
			<Variable name="firstWuidArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="secondWuidArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Selector>
						<Sequence>
							<FindInArray array="$firstWuidArray" keyOut="$index" condition="$__value == $this.id" />
							<IfCondition failOnCondition="true" condition="$index &lt; #secondWuidArray">
								<Selector>
									<Sequence>
										<GraphSearch Origin="$secondWuidArray[$index]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;cryingKneeling&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										</GraphSearch>
										<UnstanceAction unstance="cryingKneeling" locationObject="$secondWuidArray[$index]" slaveObject="" />
									</Sequence>
									<Sequence>
										<GraphSearch Origin="$secondWuidArray[$index]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;cryingStanding&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										</GraphSearch>
										<UnstanceAction unstance="cryingStanding" locationObject="$secondWuidArray[$index]" slaveObject="" />
									</Sequence>
								</Selector>
							</IfCondition>
							<Selector>
								<Sequence>
									<GraphSearch Origin="$secondWuidArray[$index]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;mourningForMan&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									</GraphSearch>
									<Expression expressions="$mournContext[&apos;isMan&apos;] = 1" />
								</Sequence>
								<Expression expressions="$mournContext[&apos;isMan&apos;] = 0" />
							</Selector>
						</Sequence>
						<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
							<Sequence>
								<RandomGate opensWithChance="0.500000" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$mournContext[&apos;isMan&apos;] = 0" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$mournContext[&apos;isMan&apos;] = 1" />
									</Else>
								</RandomGate>
								<HasGenderCheck Gender="Female" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<UnstanceAction unstance="cryingOnBench" locationObject="" slaveObject="" />
									</Then>
									<Else canSkip="1">
										<UnstanceAction unstance="Quest_SittingSad" locationObject="" slaveObject="" />
									</Else>
								</HasGenderCheck>
							</Sequence>
						</StanceElement>
						<ErrorNode Message="&apos;No valid unstance found&apos;" />
					</Selector>
					<SuppressFailure>
						<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$mournContext" lookAtId="" metarole="&apos;NPC_TRUCHLI_NAD_ZMIZENIM_BLIZKEHO&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="95255634" />
					</SuppressFailure>
					<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="&apos;15s&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidArray_wuidArray" EventSet="">
			<Variables>
				<Variable name="index" comment="" />
				<Variable name="mournContext" comment="" />
				<Variable name="firstWuidArray" comment="" />
				<Variable name="secondWuidArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</FindInArray>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</UnstanceAction>
										</Sequence>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</UnstanceAction>
										</Sequence>
									</Selector>
								</IfCondition>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Selector>
							</Sequence>
							<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</RandomGate>
									<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</UnstanceAction>
										</Then>
										<Else>
											<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</UnstanceAction>
										</Else>
									</HasGenderCheck>
								</Sequence>
							</StanceElement>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</Selector>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_schedulerMonolog>
						</SuppressFailure>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveToDrawbridge" is_function="0">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="hitReaction" type="hitReaction" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useShield" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useWeapon" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidDataArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$addParams.continueWhenHalting = true" />
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="false" />
					<Expression expressions="$useWeapon = $rightHandItem ~= $__null &#10;$useShield = ($leftHandItem ~= $__null &amp; $rightHandItem ~= $__null)" />
					<FindInArray array="$wuidDataArray" keyOut="$index" condition="$__value == $this.id" />
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_weapon" useDecision="true" enabled="$useWeapon" saveVersion="2">
								<Search canSkip="1">
									<Success />
								</Search>
								<Exec canSkip="1">
									<HandContentElement hand="Left" item="$leftHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="battle_shield" useDecision="true" enabled="$useShield" saveVersion="2">
										<Search canSkip="1">
											<Success />
										</Search>
										<Exec canSkip="1">
											<Parallel successMode="Any" failureMode="Any">
												<Move stopWithinDistance="$index" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="3.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuidData" destinationSpecification2="" destinationSpecification3="" speed="Sprint" additionalParams="$addParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
												<LoopUntil until="Fail" attemptCount="0">
													<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitReaction" senderInfo="" inbox="&apos;hitReaction&apos;" condition="" answerVar="">
														<IfCondition failOnCondition="false" condition="$hitReaction.hitStrength &gt; $enum:HitReactionStrength.Unpleasant">
															<Fail />
														</IfCondition>
													</ProcessMessage>
												</LoopUntil>
											</Parallel>
										</Exec>
									</HandContentElement>
								</Exec>
							</HandContentElement>
						</Child>
						<OnSuccess canSkip="1">
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</OnSuccess>
					</FuseBox>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidDataWuidDataArray" EventSet="endNotification">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="hitReaction" comment="" />
				<Variable name="index" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="useShield" comment="" />
				<Variable name="useWeapon" comment="" />
				<Variable name="wuidData" comment="" />
				<Variable name="wuidDataArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetWeaponsFromWeaponSet>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Search>
									<Exec>
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Search>
											<Exec>
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Move>
													<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Fail>
															</IfCondition>
														</ProcessMessage>
													</LoopUntil>
												</Parallel>
											</Exec>
										</HandContentElement>
									</Exec>
								</HandContentElement>
							</Child>
							<OnSuccess>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</OnSuccess>
						</FuseBox>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="interrupt_withdrawLightAndOpenVisor" is_function="0">
		<Variables>
			<Variable name="hasVisor" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="light" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Left" item="$light" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="lightSource" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<GetLightSourceItem Item="$light" />
					</Search>
					<Exec canSkip="1">
						<Sequence>
							<Function_crime_hasVisor npc="$this.id" hasVisor="$hasVisor" nodeLabel="85613061" />
							<IfElseCondition failOnCondition="false" condition="$hasVisor" saveVersion="2">
								<Then canSkip="1">
									<AnimationAction fragment="&apos;OpenVisor&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								</Then>
								<Else canSkip="1">
									<WaitAction />
								</Else>
							</IfElseCondition>
						</Sequence>
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="hasVisor" comment="" />
				<Variable name="light" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<GetLightSourceItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetLightSourceItem>
						</Search>
						<Exec>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_hasVisor hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_hasVisor>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
									</Then>
									<Else>
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
									</Else>
								</IfElseCondition>
							</Sequence>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="player_runToIdle" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<AnimationAction fragment="&apos;Quest_RunToIdle&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="endNotification">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</AnimationAction>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="playerAction_runToSpot" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitInGuard" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<Sequence>
						<WaitAction />
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer>
			<MeleeGuardAutomationDecorator GuardMode="freeBlock" active="true" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest>
				<MeleeGuardAutomationDecorator editorPosX="540" editorPosY="-230" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</MeleeGuardAutomationDecorator>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>