<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="onUpdate" is_function="0">
    <Variables>
      <Variable name="activityMessage" type="dogpack" values="" isPersistent="0" form="single" />
      <Variable name="alphaDead" type="_bool" values="false" isPersistent="1" form="single" />
      <Variable name="alphaDog" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="animalAttackData" type="switch:animal_interruptData:attack" values="" isPersistent="0" form="single" />
      <Variable name="animalEscapeData" type="switch:animal_interruptData:escape" values="" isPersistent="0" form="single" />
      <Variable name="behaviourChangeRequest" type="lovvlku:behaviourChangeRequest" values="" isPersistent="0" form="single" />
      <Variable name="betaDead" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="betaDogs" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="despawnData" type="animal" values="" isPersistent="0" form="single" />
      <Variable name="despawnSender" type="senderInfo" values="" isPersistent="0" form="single" />
      <Variable name="dog" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="dogNumber" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="dogs" type="_wuid" values="" isPersistent="1" form="array" />
      <Variable name="entities_actual" type="_int" values="-1" isPersistent="1" form="single" />
      <Variable name="entities_max" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="entities_spawned" type="_int" values="" isPersistent="1" form="single" />
      <Variable name="maxMorale" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="morale" type="_int" values="" isPersistent="1" form="single" />
      <Variable name="moraleLoss" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="pfParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
      <Variable name="redkev" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="runAway" type="_bool" values="" isPersistent="1" form="single" />
      <Variable name="sender" type="senderInfo" values="" isPersistent="0" form="single" />
      <Variable name="soulId" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="spawnCenterPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="spawnCounter" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="spawnEnt" type="_wuid" values="" isPersistent="1" form="single" />
      <Variable name="spawnName" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="spawnParams" type="animal:spawnParameters" values="" isPersistent="0" form="single" />
      <Variable name="spawnPoint" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="spawnPos" type="vec3" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$dogs" saveVersion="2" />
            <LinkTagFilter tag="&apos;dog&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
          </GraphSearch>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$betaDogs" saveVersion="2" />
            <LinkTagFilter tag="&apos;dogBeta&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
          </GraphSearch>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;dogAlpha&apos;" prune="true" negprune="unknown" Parent="" Child="$alphaDog" Data="" />
          </GraphSearch>
          <IfCondition failOnCondition="false" condition="#dogs &gt; 0">
            <Expression expressions="$maxMorale = (#dogs * 10) &#10;$entities_spawned = #dogs &#10;$spawnCounter = #dogs" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$alphaDog == $__null">
            <Expression expressions="$alphaDead = true" />
          </IfCondition>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;animalSpawn&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$spawnParams" />
          </GraphSearch>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;spawnPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$spawnPoint" Data="" />
          </GraphSearch>
          <Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.sprint &#10;$animalEscapeData.distanceToFlee = 50 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false" />
          <Expression expressions="$animalAttackData.previousReaction = $enum:crime_animal_reactionKind.attack &#10;$animalAttackData.stimulusKind = $enum:crime_animal_stimulusKind.combat" />
          <SuppressFailure>
            <Function_crime_getRedkev redkev="$redkev" nodeLabel="34737010" />
          </SuppressFailure>
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <Sequence>
          <Expression expressions="$entities_max = $spawnParams.amount" />
          <IfCondition failOnCondition="false" condition="$entities_actual == -1">
            <Expression expressions="$entities_actual = $entities_max" />
          </IfCondition>
          <IfGate atomic="false" condition="!$runAway" RunLogic="KeepRunning">
            <Parallel successMode="Any" failureMode="Any">
              <Loop count="-1">
                <ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$activityMessage" senderInfo="$sender" inbox="&apos;dogPack&apos;" condition="" answerVar="">
                  <Switch>
                    <IfCondition failOnCondition="false" condition="$activityMessage.action == &apos;killed&apos;">
                      <Sequence>
                        <Expression expressions="$runAway = true &#10;$betaDead = false" />
                        <IfElseCondition failOnCondition="false" condition="$sender.id == $alphaDog" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$alphaDead = true" />
                          </Then>
                          <Else canSkip="1">
                            <ForEach startIndex="0" step="1" array="$betaDogs" iterator="" value="$dog" break="">
                              <IfCondition failOnCondition="false" condition="$sender.id == $dog">
                                <Expression expressions="$betaDead = true" />
                              </IfCondition>
                            </ForEach>
                          </Else>
                        </IfElseCondition>
                        <Switch>
                          <IfCondition failOnCondition="false" condition="$sender.id == $alphaDog">
                            <Sequence>
                              <GenerateRandomInteger lowerBoundary="20" upperBoundary="30" result="$moraleLoss" />
                              <Expression expressions="$alphaDog = $__null" />
                            </Sequence>
                          </IfCondition>
                          <IfCondition failOnCondition="false" condition="$betaDead">
                            <Sequence>
                              <GenerateRandomInteger lowerBoundary="10" upperBoundary="20" result="$moraleLoss" />
                              <ForEach startIndex="0" step="1" array="$betaDogs" iterator="$dogNumber" value="$dog" break="">
                                <IfCondition failOnCondition="false" condition="$dog == $sender.id">
                                  <VarOperation varName="$betaDogs" targetVarName="" operation="Erase" argument="$dogNumber" />
                                </IfCondition>
                              </ForEach>
                            </Sequence>
                          </IfCondition>
                          <DefaultBranch>
                            <GenerateRandomInteger lowerBoundary="5" upperBoundary="15" result="$moraleLoss" />
                          </DefaultBranch>
                        </Switch>
                        <Expression expressions="$morale = $morale + $moraleLoss &#10;$entities_actual -= 1" />
                        <ForEach startIndex="0" step="1" array="$dogs" iterator="$dogNumber" value="$dog" break="">
                          <IfCondition failOnCondition="false" condition="$dog == $sender.id">
                            <VarOperation varName="$dogs" targetVarName="" operation="Erase" argument="$dogNumber" />
                          </IfCondition>
                        </ForEach>
                        <IfElseCondition failOnCondition="false" condition="$morale &gt; $maxMorale &amp; $alphaDead" saveVersion="2">
                          <Then canSkip="1">
                            <Sequence>
                              <IfCondition failOnCondition="false" condition="#dogs&gt;0">
                                <ForEach startIndex="0" step="1" array="$dogs" iterator="" value="$dog" break="">
                                  <IsDeadCheck SoulWUID="$dog" FailSubtMissing="false" saveVersion="2">
                                    <Then canSkip="1">
                                      <Success />
                                    </Then>
                                    <Else canSkip="1">
                                      <Sequence>
                                        <Expression expressions="$behaviourChangeRequest.behaviour = $enum:lovVlku_behaviourType.Flee &#10;$behaviourChangeRequest.target = $activityMessage.member" />
                                        <InstantSendMessageToNPC target="$dog" variable="$behaviourChangeRequest" />
                                      </Sequence>
                                    </Else>
                                  </IsDeadCheck>
                                </ForEach>
                              </IfCondition>
                              <Selector>
                                <SendAIConceptSignal_lovVlku_dogPackFlee flee="true" />
                                <Success />
                              </Selector>
                              <VarOperation varName="$dogs" targetVarName="" operation="Reinit" argument="" />
                            </Sequence>
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$runAway = false" />
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </IfCondition>
                    <IfCondition failOnCondition="false" condition="$activityMessage.action == &apos;fight&apos; &amp; !$runAway">
                      <ForEach startIndex="0" step="1" array="$dogs" iterator="" value="$dog" break="">
                        <IsDeadCheck SoulWUID="$dog" FailSubtMissing="false" saveVersion="2">
                          <Then canSkip="1">
                            <Success />
                          </Then>
                          <Else canSkip="1">
                            <Sequence>
                              <Expression expressions="$behaviourChangeRequest.behaviour = $enum:lovVlku_behaviourType.Fight &#10;$behaviourChangeRequest.target = $activityMessage.member" />
                              <InstantSendMessageToNPC target="$dog" variable="$behaviourChangeRequest" />
                            </Sequence>
                          </Else>
                        </IsDeadCheck>
                      </ForEach>
                    </IfCondition>
                    <DefaultBranch>
                      <Success />
                    </DefaultBranch>
                  </Switch>
                </ProcessMessage>
              </Loop>
              <LinkGate from="$this.id" to="" tag="&apos;animalSpawn&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
                <Parallel successMode="Any" failureMode="Any">
                  <Loop count="-1">
                    <Sequence>
                      <AddLink From="$this.id" To="$this.id" Tag="&apos;animalDespawn&apos;" Data="" LinkOpHandleMode="Success" />
                      <RemoveLink From="$this.id" To="$this.id" Tag="&apos;animalDespawn&apos;" LinkOpHandleMode="Error" />
                      <IfCondition failOnCondition="false" condition="&apos;Dog&apos; == $spawnParams.class">
                        <Expression expressions="$soulId = &apos;4ffab0bb-617a-a998-8c03-73d409edc8b2&apos; &#10;$morale = 0 &#10;$maxMorale = $entities_actual * 10 &#10;$runAway = false" />
                      </IfCondition>
                      <While doFail="false" propagateChildFail="false" condition="true">
                        <IfGate atomic="false" condition="$entities_spawned &lt; $entities_actual | $spawnEnt ~= $__null" RunLogic="KeepRunning">
                          <Sequence>
                            <GetSpatialInfo In="$this.id" Out="$spawnCenterPos" What="Position" />
                            <Expression expressions="$pfParams.autoAllowedSmartObjects = false &#10;$pfParams.useSmartObjects = false &#10;$pfParams.useDoorPortals = false" />
                            <GetRandomPos StartPos="$spawnCenterPos" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="$spawnParams.radius" Precise="false" MaxIterantions="8" Target="$spawnPos" navAgentType="MediumSizedCharacters" pathFindingParams="$pfParams" />
                            <Concatenation OutString="$spawnName" Pattern="&apos;$this.name;$spawnCounter&apos;" />
                            <Spawn EntityClass="$spawnParams.class" Name="$spawnName" SharedGuid="$soulId" LayerReferenceEntity="$this.id" TagPoint="" Pos="$spawnPos" Rot="" NoAI="false" SuspendedAI="false" PerceptorObjectAI="true" PerceptibleObjectAI="true" SpawnedEntity="$spawnEnt" SchedulerProxy="$spawnPoint" />
                            <AtomicDecorator>
                              <Sequence>
                                <AddLink From="$spawnEnt" To="$this.id" Tag="&apos;pack&apos;" Data="" LinkOpHandleMode="Success" />
                                <Expression expressions="$entities_spawned += 1" />
                                <IfElseCondition failOnCondition="false" condition="$spawnCounter &gt; 98" saveVersion="2">
                                  <Then canSkip="1">
                                    <Expression expressions="$spawnCounter = 10" />
                                  </Then>
                                  <Else canSkip="1">
                                    <Expression expressions="$spawnCounter += 1" />
                                  </Else>
                                </IfElseCondition>
                                <IfElseCondition failOnCondition="false" condition="$alphaDead" saveVersion="2">
                                  <Then canSkip="1">
                                    <Sequence>
                                      <AddLink From="$this.id" To="$spawnEnt" Tag="&apos;dogAlpha&apos;" Data="" LinkOpHandleMode="Success" />
                                      <Expression expressions="$alphaDog = $spawnEnt &#10;$alphaDead = false" />
                                    </Sequence>
                                  </Then>
                                  <Else canSkip="1">
                                    <RandomGate opensWithChance="0.250000" saveVersion="2">
                                      <Then canSkip="1">
                                        <Sequence>
                                          <AddLink From="$this.id" To="$spawnEnt" Tag="&apos;dogBeta&apos;" Data="" LinkOpHandleMode="Success" />
                                          <VarOperation varName="$betaDogs" targetVarName="" operation="PushBack" argument="($spawnEnt)" />
                                        </Sequence>
                                      </Then>
                                      <Else canSkip="1">
                                        <Success />
                                      </Else>
                                    </RandomGate>
                                  </Else>
                                </IfElseCondition>
                                <VarOperation varName="$dogs" targetVarName="" operation="PushBack" argument="($spawnEnt)" />
                                <AddLink From="$this.id" To="$spawnEnt" Tag="&apos;dog&apos;" Data="" LinkOpHandleMode="Success" />
                                <Expression expressions="$spawnEnt = $__null" />
                              </Sequence>
                            </AtomicDecorator>
                            <Wait duration="&apos;0&apos;" timeType="GameTime" doFail="false" variation="&apos;250ms&apos;" />
                          </Sequence>
                        </IfGate>
                      </While>
                    </Sequence>
                  </Loop>
                  <Loop count="-1">
                    <ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$despawnData" senderInfo="$despawnSender" inbox="&apos;animal_all&apos;" condition="" answerVar="">
                      <Sequence>
                        <IfCondition failOnCondition="false" condition="$despawnSender.id == $alphaDog">
                          <Expression expressions="$alphaDog = $__null &#10;$alphaDead = true" />
                        </IfCondition>
                        <ForEach startIndex="0" step="1" array="$betaDogs" iterator="$dogNumber" value="$dog" break="">
                          <IfCondition failOnCondition="false" condition="$dog == $despawnSender.id">
                            <VarOperation varName="$betaDogs" targetVarName="" operation="Erase" argument="$dogNumber" />
                          </IfCondition>
                        </ForEach>
                        <ForEach startIndex="0" step="1" array="$dogs" iterator="$dogNumber" value="$dog" break="">
                          <IfCondition failOnCondition="false" condition="$dog == $despawnSender.id">
                            <VarOperation varName="$dogs" targetVarName="" operation="Erase" argument="$dogNumber" />
                          </IfCondition>
                        </ForEach>
                        <Despawn DeSpawnedEntity="$despawnSender.id" />
                        <Expression expressions="$entities_spawned -= 1" />
                      </Sequence>
                    </ProcessMessage>
                  </Loop>
                  <Loop count="-1">
                    <IfGate atomic="false" condition="$entities_actual &lt; $entities_max" RunLogic="KeepRunning">
                      <Sequence>
                        <Wait duration="$spawnParams.respawn" timeType="WorldTime" doFail="false" variation="" />
                        <Expression expressions="$entities_actual += 1" />
                      </Sequence>
                    </IfGate>
                  </Loop>
                </Parallel>
              </LinkGate>
            </Parallel>
          </IfGate>
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer>
      <Sequence>
        <GetTargetPosition ReferenceNPC="$dog" TargetPositionVarOut="$animalEscapeData.target" />
        <Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.dash &#10;$animalEscapeData.distanceToFlee = 50 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false &#10;$animalEscapeData.stimulusKind = $enum:crime_animal_stimulusKind.combat" />
        <AddInterrupt_animal_escape animalEscapeData="$animalEscapeData" Target="$dog" Host="$redkev" Behavior="&apos;interrupt_animal_escape&apos;" Priority="162" IgnorePriorityOnPreviousInterrupt="false" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
      </Sequence>
      <Sequence>
        <Expression expressions="$animalAttackData.initiatedBy = $enum:switch_interruptInitiator.scheduler &#10;$animalAttackData.target = $activityMessage.member" />
        <AddInterrupt_animal_attack animalAttackData="$animalAttackData" Target="$dog" Host="$redkev" Behavior="&apos;interrupt_animal_attack&apos;" Priority="160" IgnorePriorityOnPreviousInterrupt="false" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
      </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="activityMessage" comment="" />
        <Variable name="alphaDead" comment="" />
        <Variable name="alphaDog" comment="" />
        <Variable name="animalAttackData" comment="" />
        <Variable name="animalEscapeData" comment="" />
        <Variable name="behaviourChangeRequest" comment="" />
        <Variable name="betaDead" comment="" />
        <Variable name="betaDogs" comment="" />
        <Variable name="despawnData" comment="" />
        <Variable name="despawnSender" comment="" />
        <Variable name="dog" comment="" />
        <Variable name="dogNumber" comment="" />
        <Variable name="dogs" comment="" />
        <Variable name="entities_actual" comment="" />
        <Variable name="entities_max" comment="" />
        <Variable name="entities_spawned" comment="" />
        <Variable name="maxMorale" comment="" />
        <Variable name="morale" comment="" />
        <Variable name="moraleLoss" comment="" />
        <Variable name="pfParams" comment="" />
        <Variable name="redkev" comment="" />
        <Variable name="runAway" comment="" />
        <Variable name="sender" comment="" />
        <Variable name="soulId" comment="" />
        <Variable name="spawnCenterPos" comment="" />
        <Variable name="spawnCounter" comment="" />
        <Variable name="spawnEnt" comment="" />
        <Variable name="spawnName" comment="" />
        <Variable name="spawnParams" comment="" />
        <Variable name="spawnPoint" comment="" />
        <Variable name="spawnPos" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Function_crime_getRedkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_crime_getRedkev>
            </SuppressFailure>
          </Sequence>
        </OnInit>
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfCondition hasInputBreakpoint="0" comment="morale" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </IfCondition>
                              </ForEach>
                            </Else>
                          </IfElseCondition>
                          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </GenerateRandomInteger>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </IfCondition>
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </GenerateRandomInteger>
                                <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </VarOperation>
                                  </IfCondition>
                                </ForEach>
                              </Sequence>
                            </IfCondition>
                            <DefaultBranch>
                              <GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GenerateRandomInteger>
                            </DefaultBranch>
                          </Switch>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </VarOperation>
                            </IfCondition>
                          </ForEach>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                      <OutputBreakpoints />
                                      <Then>
                                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Success>
                                      </Then>
                                      <Else>
                                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Expression>
                                          <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </InstantSendMessageToNPC>
                                        </Sequence>
                                      </Else>
                                    </IsDeadCheck>
                                  </ForEach>
                                </IfCondition>
                                <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <SendAIConceptSignal_lovVlku_dogPackFlee hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </SendAIConceptSignal_lovVlku_dogPackFlee>
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </Selector>
                                <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </VarOperation>
                              </Sequence>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </IfElseCondition>
                        </Sequence>
                      </IfCondition>
                      <IfCondition hasInputBreakpoint="0" comment="fight" breakpointFlags="0">
                        <OutputBreakpoints />
                        <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Success>
                            </Then>
                            <Else>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                                <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </InstantSendMessageToNPC>
                              </Sequence>
                            </Else>
                          </IsDeadCheck>
                        </ForEach>
                      </IfCondition>
                      <DefaultBranch>
                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </DefaultBranch>
                    </Switch>
                  </ProcessMessage>
                </Loop>
                <LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Parallel hasInputBreakpoint="0" comment="spawner" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Loop hasInputBreakpoint="0" comment="spawn" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddLink>
                        <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </RemoveLink>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <While hasInputBreakpoint="0" comment="smazat" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GetSpatialInfo>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                              <GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GetRandomPos>
                              <Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Concatenation>
                              <Spawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Spawn>
                              <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </AddLink>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Then>
                                    <Else>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Else>
                                  </IfElseCondition>
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </AddLink>
                                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Expression>
                                      </Sequence>
                                    </Then>
                                    <Else>
                                      <RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                        <OutputBreakpoints />
                                        <Then>
                                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                            <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </AddLink>
                                            <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </VarOperation>
                                          </Sequence>
                                        </Then>
                                        <Else>
                                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Success>
                                        </Else>
                                      </RandomGate>
                                    </Else>
                                  </IfElseCondition>
                                  <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </VarOperation>
                                  <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </AddLink>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Sequence>
                              </AtomicDecorator>
                              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Wait>
                            </Sequence>
                          </IfGate>
                        </While>
                      </Sequence>
                    </Loop>
                    <Loop hasInputBreakpoint="0" comment="despawn" breakpointFlags="0">
                      <OutputBreakpoints />
                      <ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </IfCondition>
                          <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </VarOperation>
                            </IfCondition>
                          </ForEach>
                          <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </VarOperation>
                            </IfCondition>
                          </ForEach>
                          <Despawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Despawn>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </ProcessMessage>
                    </Loop>
                    <Loop hasInputBreakpoint="0" comment="respawn" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Wait>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </IfGate>
                    </Loop>
                  </Parallel>
                </LinkGate>
              </Parallel>
            </IfGate>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="3930" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <GetTargetPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </GetTargetPosition>
          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Expression>
          <AddInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </AddInterrupt_animal_escape>
        </Sequence>
        <Sequence editorPosX="3920" editorPosY="280" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Expression>
          <AddInterrupt_animal_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </AddInterrupt_animal_attack>
        </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="sheep_teleport" is_function="0">
    <Variables />
    <Parameters>
      <Variable name="tagpoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <TeleportAction Position="$tagpoint" EndInterruptOnActionStart="false" />
          <InstantCallback_empty EventName="&apos;OnFinished&apos;" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData Signature="goto" EventSet="endNotification">
      <Variables>
        <Variable name="tagpoint" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </TeleportAction>
            <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </InstantCallback_empty>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="lovVlku_wait" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <WaitAction />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="sheep_follow" is_function="0">
    <Variables>
      <Variable name="additionalParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
      <Variable name="behavior" type="_string" values="&apos;wait&apos;" isPersistent="0" form="single" />
      <Variable name="carrotGuid" type="_string" values="&apos;b7ee311c-736b-4f7c-987b-8431ce3b5600&apos;" isPersistent="0" form="single" />
      <Variable name="foodInInventory" type="_bool" values="true" isPersistent="0" form="single" />
      <Variable name="foodOnGround" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="itemAmount" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="itemDropped" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="itemGuid" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="itemInInventory" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="itemsDropped" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="pathFindingParams" type="pathFindingParams" values="usePaths(false),useSmartObjects(false),useGeneratedNSO(false)" isPersistent="0" form="single" />
      <Variable name="sheepPath" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="speed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
          <LinkTagFilter tag="&apos;sheepFollowArea&apos;" prune="true" negprune="unknown" Parent="" Child="$sheepPath" Data="" />
        </GraphSearch>
      </OnInit>
      <Behavior canSkip="1">
        <Parallel successMode="All" failureMode="All">
          <ContinuousSwitch>
            <IfCondition failOnCondition="false" condition="$behavior == &apos;move&apos;">
              <Loop count="-1">
                <Sequence>
                  <Move stopWithinDistance="3.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__player" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="$additionalParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
                  <Expression expressions="$behavior = &apos;wait&apos;" />
                  <Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
                </Sequence>
              </Loop>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$behavior == &apos;wait&apos;">
              <Loop count="-1">
                <Sequence>
                  <Turn target="$__player" align="false" />
                  <Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
                </Sequence>
              </Loop>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$behavior == &apos;eat&apos;">
              <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                <Child canSkip="1">
                  <Sequence>
                    <CircularSpatialQuery Radius="10.000000" Center="$this.id" ToFill="$itemsDropped" Precision="Exact" Filter="PerceivableItems" />
                    <ForEach startIndex="0" step="1" array="$itemsDropped" iterator="" value="$itemDropped" break="">
                      <CheckWuidValid wuid="$itemDropped" FailSubtMissing="false" saveVersion="2">
                        <Then canSkip="1">
                          <Sequence>
                            <GetItemProperty itemId="$itemDropped" property="Guid" result="$itemGuid" />
                            <IfCondition failOnCondition="false" condition="$itemGuid == $carrotGuid">
                              <Parallel successMode="Any" failureMode="Any">
                                <SuppressFailure>
                                  <LoopUntil until="Fail" attemptCount="0">
                                    <Sequence>
                                      <AtomicDecorator>
                                        <CheckWuidValid wuid="$itemDropped" FailSubtMissing="false" saveVersion="2">
                                          <Then canSkip="1">
                                            <Sequence>
                                              <GetItemProperty itemId="$itemDropped" property="InInventory" result="$itemInInventory" />
                                              <IfElseCondition failOnCondition="false" condition="$itemInInventory" saveVersion="2">
                                                <Then canSkip="1">
                                                  <Fail />
                                                </Then>
                                                <Else canSkip="1">
                                                  <Success />
                                                </Else>
                                              </IfElseCondition>
                                            </Sequence>
                                          </Then>
                                          <Else canSkip="1">
                                            <Fail />
                                          </Else>
                                        </CheckWuidValid>
                                      </AtomicDecorator>
                                      <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
                                    </Sequence>
                                  </LoopUntil>
                                </SuppressFailure>
                                <Sequence>
                                  <Move stopWithinDistance="0.600000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$itemDropped" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$additionalParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
                                  <Turn target="$itemDropped" align="false" />
                                  <UnstanceAction unstance="SheepEating" locationObject="" slaveObject="" />
                                  <ExecuteSoundTrigger entity="$this.id" triggerName="&apos;b_sheep_eat&apos;" stop="false" />
                                  <Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
                                  <CheckWuidValid wuid="$itemDropped" FailSubtMissing="false" saveVersion="2">
                                    <Then canSkip="1">
                                      <AtomicDecorator>
                                        <Sequence>
                                          <ExecuteLua code="entity.inventory:AddItem(data.itemDropped)" />
                                          <GetItemProperty itemId="$itemDropped" property="Amount" result="$itemAmount" />
                                          <UseItem item="$itemDropped" count="$itemAmount" bodyPartId="-1" combineWithItem="" />
                                        </Sequence>
                                      </AtomicDecorator>
                                    </Then>
                                  </CheckWuidValid>
                                </Sequence>
                              </Parallel>
                            </IfCondition>
                          </Sequence>
                        </Then>
                      </CheckWuidValid>
                    </ForEach>
                    <WaitAction />
                    <ExecuteSoundTrigger entity="$this.id" triggerName="&apos;b_sheep_baa&apos;" stop="false" />
                  </Sequence>
                </Child>
                <OnSuccess canSkip="1">
                  <Expression expressions="$behavior = &apos;wait&apos; &#10;$foodOnGround = false" />
                </OnSuccess>
              </FuseBox>
            </IfCondition>
          </ContinuousSwitch>
          <Loop count="-1">
            <Sequence>
              <IfGate atomic="false" condition="!$foodOnGround &amp; $foodInInventory" RunLogic="Halt">
                <Selector>
                  <DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="true">
                    <Expression expressions="$behavior = &apos;move&apos; &#10;$speed = $enum:movementSpeed.walk" />
                  </DistanceCondition>
                  <DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="7.000000" High="7.000000" Negation="false" ValueOnMiddle="false" failOnCondition="true">
                    <Expression expressions="$behavior = &apos;move&apos; &#10;$speed = $enum:movementSpeed.run" />
                  </DistanceCondition>
                  <Expression expressions="$behavior = &apos;move&apos; &#10;$speed = $enum:movementSpeed.sprint" />
                </Selector>
              </IfGate>
              <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
            </Sequence>
          </Loop>
          <Loop count="-1">
            <Sequence>
              <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;10s&apos;" />
              <IfCondition failOnCondition="false" condition="$behavior == &apos;move&apos;">
                <ExecuteSoundTrigger entity="$this.id" triggerName="&apos;b_sheep_baa&apos;" stop="false" />
              </IfCondition>
            </Sequence>
          </Loop>
          <Loop count="-1">
            <Sequence>
              <FuseBox StatusPropagation="Success" OneCleanup="false" saveVersion="2">
                <Child canSkip="1">
                  <Function_ignaz_checkFoodInInventory sheepPath="$sheepPath" nodeLabel="95859020" />
                </Child>
                <OnSuccess canSkip="1">
                  <Expression expressions="$foodInInventory = true" />
                </OnSuccess>
                <OnFail canSkip="1">
                  <Sequence>
                    <Expression expressions="$foodInInventory = false" />
                    <IfCondition failOnCondition="false" condition="!$foodInInventory &amp; !$foodOnGround">
                      <Expression expressions="$behavior = &apos;wait&apos;" />
                    </IfCondition>
                  </Sequence>
                </OnFail>
              </FuseBox>
              <Wait duration="&apos;1500&apos;" timeType="GameTime" doFail="false" variation="" />
            </Sequence>
          </Loop>
          <Loop count="-1">
            <InventoryListener operation="Remove" inventoryHost="$__player" itemsToCheck="" categoryToCheck="&apos;food.*.*&apos;" reportInitialState="false">
              <Sequence>
                <CheckWuidValid wuid="$__item" FailSubtMissing="false" saveVersion="2">
                  <Then canSkip="1">
                    <Sequence>
                      <GetItemProperty itemId="$__item" property="Guid" result="$itemGuid" />
                      <IfCondition failOnCondition="false" condition="$itemGuid == $carrotGuid">
                        <IsInsideArea Origin="$__player" Area="$sheepPath" FailSubtMissing="false" saveVersion="2">
                          <Then canSkip="1">
                            <DistanceCondition Origin="" ReferencePt="$__item" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
                              <Expression expressions="$foodOnGround = true" />
                            </DistanceCondition>
                          </Then>
                        </IsInsideArea>
                      </IfCondition>
                    </Sequence>
                  </Then>
                </CheckWuidValid>
                <IfCondition failOnCondition="false" condition="$foodOnGround">
                  <Expression expressions="$behavior = &apos;eat&apos;" />
                </IfCondition>
                <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
              </Sequence>
            </InventoryListener>
          </Loop>
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer>
      <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="additionalParams" comment="" />
        <Variable name="behavior" comment="" />
        <Variable name="carrotGuid" comment="" />
        <Variable name="foodInInventory" comment="" />
        <Variable name="foodOnGround" comment="" />
        <Variable name="itemAmount" comment="" />
        <Variable name="itemDropped" comment="" />
        <Variable name="itemGuid" comment="" />
        <Variable name="itemInInventory" comment="" />
        <Variable name="itemsDropped" comment="" />
        <Variable name="pathFindingParams" comment="" />
        <Variable name="sheepPath" comment="" />
        <Variable name="speed" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LinkTagFilter>
          </GraphSearch>
        </OnInit>
        <Behavior>
          <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ContinuousSwitch hasInputBreakpoint="0" comment="Execute move" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Move>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                    <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                  </Sequence>
                </Loop>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Turn>
                    <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                  </Sequence>
                </Loop>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Child>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </CircularSpatialQuery>
                      <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GetItemProperty>
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <LoopUntil hasInputBreakpoint="0" comment="Guard for somebody picking the item up" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                            <OutputBreakpoints />
                                            <Then>
                                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                <OutputBreakpoints />
                                                <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                  <OutputBreakpoints />
                                                </GetItemProperty>
                                                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                                  <OutputBreakpoints />
                                                  <Then>
                                                    <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                      <OutputBreakpoints />
                                                    </Fail>
                                                  </Then>
                                                  <Else>
                                                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                      <OutputBreakpoints />
                                                    </Success>
                                                  </Else>
                                                </IfElseCondition>
                                              </Sequence>
                                            </Then>
                                            <Else>
                                              <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                <OutputBreakpoints />
                                              </Fail>
                                            </Else>
                                          </CheckWuidValid>
                                        </AtomicDecorator>
                                        <Wait hasInputBreakpoint="0" comment="The item is still available; continue eating and check again after a while" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Wait>
                                      </Sequence>
                                    </LoopUntil>
                                  </SuppressFailure>
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Move>
                                    <Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Turn>
                                    <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </UnstanceAction>
                                    <ExecuteSoundTrigger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </ExecuteSoundTrigger>
                                    <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Wait>
                                    <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                      <OutputBreakpoints />
                                      <Then>
                                        <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </ExecuteLua>
                                            <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </GetItemProperty>
                                            <UseItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </UseItem>
                                          </Sequence>
                                        </AtomicDecorator>
                                      </Then>
                                    </CheckWuidValid>
                                  </Sequence>
                                </Parallel>
                              </IfCondition>
                            </Sequence>
                          </Then>
                        </CheckWuidValid>
                      </ForEach>
                      <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </WaitAction>
                      <ExecuteSoundTrigger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </ExecuteSoundTrigger>
                    </Sequence>
                  </Child>
                  <OnSuccess>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </OnSuccess>
                </FuseBox>
              </IfCondition>
            </ContinuousSwitch>
            <Loop hasInputBreakpoint="0" comment="Decide move" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </DistanceCondition>
                    <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </DistanceCondition>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Selector>
                </IfGate>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Loop>
            <Loop hasInputBreakpoint="0" comment="Make sound" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Wait hasInputBreakpoint="0" comment="baah cooldown" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <ExecuteSoundTrigger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ExecuteSoundTrigger>
                </IfCondition>
              </Sequence>
            </Loop>
            <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Child>
                    <Function_ignaz_checkFoodInInventory hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Function_ignaz_checkFoodInInventory>
                  </Child>
                  <OnSuccess>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </OnSuccess>
                  <OnFail>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </IfCondition>
                    </Sequence>
                  </OnFail>
                </FuseBox>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Loop>
            <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <InventoryListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </GetItemProperty>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </DistanceCondition>
                            </Then>
                          </IsInsideArea>
                        </IfCondition>
                      </Sequence>
                    </Then>
                  </CheckWuidValid>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </InventoryListener>
            </Loop>
          </Parallel>
        </Behavior>
      </Root>
      <Forest>
        <Wait editorPosX="2830" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
        </Wait>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="sheep_stay" is_function="0">
    <Variables>
      <Variable name="additionalParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
      <Variable name="carrotGuid" type="_string" values="&apos;b7ee311c-736b-4f7c-987b-8431ce3b5600&apos;" isPersistent="0" form="single" />
      <Variable name="itemAmount" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="itemDropped" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="itemGuid" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="itemInInventory" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="itemsDropped" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="pathFindingParams" type="pathFindingParams" values="usePaths(false),useSmartObjects(false),useGeneratedNSO(false)" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <CircularSpatialQuery Radius="10.000000" Center="$this.id" ToFill="$itemsDropped" Precision="Exact" Filter="PerceivableItems" />
          <ForEach startIndex="0" step="1" array="$itemsDropped" iterator="" value="$itemDropped" break="">
            <CheckWuidValid wuid="$itemDropped" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <GetItemProperty itemId="$itemDropped" property="Guid" result="$itemGuid" />
                  <IfCondition failOnCondition="false" condition="$itemGuid == $carrotGuid">
                    <Parallel successMode="Any" failureMode="Any">
                      <SuppressFailure>
                        <LoopUntil until="Fail" attemptCount="0">
                          <Sequence>
                            <AtomicDecorator>
                              <CheckWuidValid wuid="$itemDropped" FailSubtMissing="false" saveVersion="2">
                                <Then canSkip="1">
                                  <Sequence>
                                    <GetItemProperty itemId="$itemDropped" property="InInventory" result="$itemInInventory" />
                                    <IfElseCondition failOnCondition="false" condition="$itemInInventory" saveVersion="2">
                                      <Then canSkip="1">
                                        <Fail />
                                      </Then>
                                      <Else canSkip="1">
                                        <Success />
                                      </Else>
                                    </IfElseCondition>
                                  </Sequence>
                                </Then>
                                <Else canSkip="1">
                                  <Fail />
                                </Else>
                              </CheckWuidValid>
                            </AtomicDecorator>
                            <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                          </Sequence>
                        </LoopUntil>
                      </SuppressFailure>
                      <Sequence>
                        <Move stopWithinDistance="0.600000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$itemDropped" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$additionalParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                        <Turn target="$itemDropped" align="false" />
                        <UnstanceAction unstance="SheepEating" locationObject="" slaveObject="" />
                        <ExecuteSoundTrigger entity="$this.id" triggerName="&apos;b_sheep_eat&apos;" stop="false" />
                        <Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        <CheckWuidValid wuid="$itemDropped" FailSubtMissing="false" saveVersion="2">
                          <Then canSkip="1">
                            <AtomicDecorator>
                              <Sequence>
                                <ExecuteLua code="entity.inventory:AddItem(data.itemDropped)" />
                                <GetItemProperty itemId="$itemDropped" property="Amount" result="$itemAmount" />
                                <UseItem item="$itemDropped" count="$itemAmount" bodyPartId="-1" combineWithItem="" />
                              </Sequence>
                            </AtomicDecorator>
                          </Then>
                        </CheckWuidValid>
                      </Sequence>
                    </Parallel>
                  </IfCondition>
                </Sequence>
              </Then>
            </CheckWuidValid>
          </ForEach>
          <WaitAction />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer>
      <RandomGate opensWithChance="0.500000" saveVersion="2">
        <Then canSkip="1">
          <UnstanceAction unstance="SheepEating" locationObject="" slaveObject="" />
        </Then>
        <Else canSkip="1">
          <UnstanceAction unstance="SheepLying" locationObject="" slaveObject="" />
        </Else>
      </RandomGate>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="additionalParams" comment="" />
        <Variable name="carrotGuid" comment="" />
        <Variable name="itemAmount" comment="" />
        <Variable name="itemDropped" comment="" />
        <Variable name="itemGuid" comment="" />
        <Variable name="itemInInventory" comment="" />
        <Variable name="itemsDropped" comment="" />
        <Variable name="pathFindingParams" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </CircularSpatialQuery>
            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetItemProperty>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LoopUntil hasInputBreakpoint="0" comment="Guard for somebody picking the item up" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                  <OutputBreakpoints />
                                  <Then>
                                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </GetItemProperty>
                                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                        <OutputBreakpoints />
                                        <Then>
                                          <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Fail>
                                        </Then>
                                        <Else>
                                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Success>
                                        </Else>
                                      </IfElseCondition>
                                    </Sequence>
                                  </Then>
                                  <Else>
                                    <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Fail>
                                  </Else>
                                </CheckWuidValid>
                              </AtomicDecorator>
                              <Wait hasInputBreakpoint="0" comment="The item is still available; continue eating and check again after a while" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Wait>
                            </Sequence>
                          </LoopUntil>
                        </SuppressFailure>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Move>
                          <Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Turn>
                          <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </UnstanceAction>
                          <ExecuteSoundTrigger hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteSoundTrigger>
                          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Wait>
                          <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </ExecuteLua>
                                  <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </GetItemProperty>
                                  <UseItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </UseItem>
                                </Sequence>
                              </AtomicDecorator>
                            </Then>
                          </CheckWuidValid>
                        </Sequence>
                      </Parallel>
                    </IfCondition>
                  </Sequence>
                </Then>
              </CheckWuidValid>
            </ForEach>
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest>
        <RandomGate editorPosX="-230" editorPosY="340" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
          <Then>
            <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </UnstanceAction>
          </Then>
          <Else>
            <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </UnstanceAction>
          </Else>
        </RandomGate>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="sheep_runFromPlayer" is_function="0">
    <Variables>
      <Variable name="additionalParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
      <Variable name="fleeDistance" type="_float" values="15" isPersistent="0" form="single" />
      <Variable name="fleeSafe" type="_float" values="0" isPersistent="0" form="single" />
      <Variable name="pathFindingParams" type="pathFindingParams" values="usePaths(false),useSmartObjects(false),useGeneratedNSO(false)" isPersistent="0" form="single" />
      <Variable name="sheepPoint" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;sheepPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$sheepPoint" Data="" />
          </GraphSearch>
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="$fleeDistance" destinationSpecification3="$fleeSafe" speed="Run" additionalParams="$additionalParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
          <InstantCallback_empty EventName="&apos;OnFinished&apos;" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData Signature="wuidData" EventSet="endNotification">
      <Variables>
        <Variable name="additionalParams" comment="" />
        <Variable name="fleeDistance" comment="" />
        <Variable name="fleeSafe" comment="" />
        <Variable name="pathFindingParams" comment="" />
        <Variable name="sheepPoint" comment="" />
        <Variable name="data" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </InstantCallback_empty>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="sheep_home" is_function="0">
    <Variables>
      <Variable name="point" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;sheepHomePoint&apos;" prune="true" negprune="unknown" Parent="" Child="$point" Data="" />
          </GraphSearch>
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$point" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <UnstanceAction unstance="SheepLying" locationObject="" slaveObject="" />
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="point" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </UnstanceAction>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>