<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="wantPlayerAttention_agressive" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="0" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cheering_dynamic" is_function="1">
		<Variables>
			<Variable name="angle" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="animation" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="backOff" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="breakDistance" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="breakP" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="breakSmallMove" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="count" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="distanceToFriend" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distanceToTarget" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distancesToTarget" type="_float" values="" isPersistent="0" form="array" />
			<Variable name="done" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="fail" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hisPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="i" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="instant" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="lockName" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="lockParticipantNumber" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="lockParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="meOrientation" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="mePosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="myPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="params" type="perceptibleParams" values="" isPersistent="0" form="single" />
			<Variable name="participant" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="participantPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="participantsIn" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="position" type="testCheering" values="" isPersistent="0" form="single" />
			<Variable name="position2wuid" type="_wuid,_int" values="" isPersistent="0" form="custom_associative" />
			<Variable name="positionInside" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="positionString" type="_string" values="&apos;1&apos;" isPersistent="0" form="single" />
			<Variable name="positions" type="testCheering" values="" isPersistent="0" form="array" />
			<Variable name="randomRange" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="smallMoveVec" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="targetOnNavmesh" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="targetPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="tooClose" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="tooFar" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="distance" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="globalLockName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="numberOfPositions" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participantIn" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Semaphore SemaphoreCount="666" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$globalLockName&apos;">
					<Parallel successMode="Any" failureMode="Any">
						<While doFail="false" propagateChildFail="false" condition="true">
							<Sequence>
								<VarOperation varName="$positions" targetVarName="" operation="Reinit" argument="" />
								<Loop count="$numberOfPositions">
									<Sequence>
										<Expression expressions="$count += 1" />
										<GetSpatialInfo In="$this.id" Out="$mePosition" What="Position" />
										<GetSpatialInfo In="$participantIn" Out="$participantPosition" What="Position" />
										<ExecuteLua code="data.angle = (360/data.numberOfPositions)*data.count &#10;data.targetPosition.x = (data.distance*math.cos(data.angle)) &#10;data.targetPosition.y = (data.distance*math.sin(data.angle)) &#10;data.targetPosition.x = data.participantPosition.x + data.targetPosition.x &#10;data.targetPosition.y = data.participantPosition.y + data.targetPosition.y &#10;data.targetPosition.z = data.participantPosition.z" />
										<Expression expressions="$position.index = $count &#10;$position.targetRaw = $targetPosition" />
										<NumericalOperation In1VariableName="mePosition" In2VariableName="position.targetRaw" In3VariableName="" OutVariableName="$distanceToTarget" Operation="distance2d" />
										<Expression expressions="$position.distance = $distanceToTarget" />
										<ExecuteLua code="data.position.indexString = tostring(data.position.index)" />
										<SpawnPerceptibleVolume Position="$position.target" Radius="1.000000" Height="1.000000" Label="" OnlyVisiblePointsFromCenter="false" PerceptibleParams="$params" OutWuid="" />
										<VarOperation varName="$positions" targetVarName="" operation="PushFront" argument="($position)" />
									</Sequence>
								</Loop>
								<VarOperation varName="$positions.distance" targetVarName="" operation="Sort" argument="&apos;asc&apos;" />
								<Expression expressions="$break = false" />
								<For startIndex="0" endIndex="-1" step="1" array="$positions" iterator="" value="$position" break="$break">
									<Sequence>
										<Expression expressions="$break = false &#10;$lockName = $globalLockName + $position.indexString" />
										<InstantSemaphore SemaphoreCount="1" LockManagerType="Global" SemaphoreName="&apos;$lockName&apos;">
											<Sequence>
												<Expression expressions="$tooClose =  $distance/2 &#10;$backOff =  $distance/2 + $distance/4 &#10;$tooFar = $distance + $distance/2" />
												<Selector>
													<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$position.targetRaw" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													<Sequence>
														<Expression expressions="$count = 0" />
														<LoopUntil until="Success" attemptCount="30">
															<Sequence>
																<Expression expressions="$fail = false &#10;$randomRange += $count &#10;$count += 1" />
																<GetRandomPos StartPos="$targetPosition" PosExtentHor="$randomRange" PosExtentVert="$randomRange" MaxRange="$randomRange" Precise="true" MaxIterantions="100" Target="$targetOnNavmesh" navAgentType="Automatic" pathFindingParams="" />
																<NumericalOperation In1VariableName="participantPosition" In2VariableName="targetOnNavmesh" In3VariableName="" OutVariableName="$distanceToTarget" Operation="distance2d" />
																<IfCondition failOnCondition="false" condition="$distanceToTarget &gt; $distance + $distance/3 | $distanceToTarget &lt; $distance">
																	<Fail />
																</IfCondition>
																<For startIndex="0" endIndex="-1" step="1" array="$positions" iterator="$i" value="$position" break="">
																	<Sequence>
																		<NumericalOperation In1VariableName="position.target" In2VariableName="targetOnNavmesh" In3VariableName="" OutVariableName="$distanceToFriend" Operation="distance2d" />
																		<IfCondition failOnCondition="false" condition="$distanceToFriend &lt; 1">
																			<Expression expressions="$fail = true" />
																		</IfCondition>
																	</Sequence>
																</For>
																<IfCondition failOnCondition="false" condition="$fail == true">
																	<Fail />
																</IfCondition>
															</Sequence>
														</LoopUntil>
														<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$targetOnNavmesh" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													</Sequence>
												</Selector>
												<Parallel successMode="Any" failureMode="Any">
													<Loop count="-1">
														<While doFail="false" propagateChildFail="false" condition="true">
															<Selector>
																<Parallel successMode="Any" failureMode="Any">
																	<ForceLook LookTarget="$participantIn" DisableVariations="false">
																		<Sequence>
																			<Turn target="$participantIn" align="false" />
																			<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
																		</Sequence>
																	</ForceLook>
																	<While doFail="false" propagateChildFail="false" condition="true">
																		<Sequence>
																			<UnstanceAction unstance="mildCheering" locationObject="" slaveObject="" />
																		</Sequence>
																	</While>
																	<DistanceGate Origin="$this.id" ReferencePt="$participantIn" Low="$backOff" High="$backOff" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																		<Fail />
																	</DistanceGate>
																</Parallel>
																<Sequence>
																	<Expression expressions="$breakSmallMove = true" />
																	<While doFail="false" propagateChildFail="false" condition="$breakSmallMove">
																		<Selector>
																			<Sequence>
																				<GetSpatialInfo In="$this.id" Out="$mePosition" What="Position" />
																				<GetSpatialInfo In="$this.id" Out="$meOrientation" What="Orientation" />
																				<GetSpatialInfo In="$participantIn" Out="$hisPosition" What="Position" />
																				<NumericalOperation In1VariableName="mePosition" In2VariableName="hisPosition" In3VariableName="" OutVariableName="$distanceToTarget" Operation="distance2d" />
																				<ExecuteLua code="local a = (data.mePosition.x-data.hisPosition.x) &#10;local b = (data.mePosition.y-data.hisPosition.y) &#10;--Dump({data.mePosition.x,data.mePosition.y}) &#10;--Dump({data.hisPosition.x,data.hisPosition.y}) &#10;local c = data.distanceToTarget &#10;local newC = 0.5 &#10;local uA= math.atan(math.abs(b)/math.abs(a)) &#10; &#10;local xb=1 &#10;local yb=1 &#10;if a&lt;0 then &#10;xb=-1 &#10;end &#10;if b&lt;0 then &#10;yb=-1 &#10;end &#10;data.smallMoveVec.x = data.mePosition.x + ((newC)*math.cos(uA))*xb &#10;data.smallMoveVec.y = data.mePosition.y + ((newC)*math.sin(uA))*yb &#10;data.smallMoveVec.z = data.mePosition.z &#10;--Dump({data.smallMoveVec.x}) &#10;--Dump({data.smallMoveVec.y})" />
																				<ExactMove directionType="FromVariable" directionSpecification="$participantIn" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$smallMoveVec" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
																				<Fail />
																			</Sequence>
																			<DistanceCondition Origin="$this.id" ReferencePt="$participantIn" Low="$tooClose" High="$tooClose" Negation="true" ValueOnMiddle="false" failOnCondition="false">
																				<Expression expressions="$breakSmallMove = false" />
																			</DistanceCondition>
																		</Selector>
																	</While>
																</Sequence>
															</Selector>
														</While>
													</Loop>
													<DistanceGate Origin="$this.id" ReferencePt="$participantIn" Low="$tooClose" High="$tooClose" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
														<Expression expressions="$break = true" />
													</DistanceGate>
													<DistanceGate Origin="$this.id" ReferencePt="$participantIn" Low="$tooFar" High="$tooFar" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
														<Expression expressions="$break = true" />
													</DistanceGate>
													<Loop count="-1">
														<Sequence>
															<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" skipInLOD="false" />
															<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="" value="$participant" break="$breakP">
																<Sequence>
																	<Expression expressions="$breakP = false" />
																	<GetSpatialInfo In="$this.id" Out="$mePosition" What="Position" />
																	<GetSpatialInfo In="$participant" Out="$hisPosition" What="Position" />
																	<NumericalOperation In1VariableName="mePosition" In2VariableName="hisPosition" In3VariableName="" OutVariableName="$distanceToTarget" Operation="distance2d" />
																	<IfCondition failOnCondition="false" condition="$distanceToTarget &lt; 1">
																		<Expression expressions="$breakP = true" />
																	</IfCondition>
																</Sequence>
															</For>
															<IfCondition failOnCondition="false" condition="$breakP ==true">
																<Fail />
															</IfCondition>
														</Sequence>
													</Loop>
												</Parallel>
											</Sequence>
										</InstantSemaphore>
									</Sequence>
								</For>
							</Sequence>
						</While>
						<Loop count="-1">
							<Sequence>
								<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
								<GetLockParticipants OutArray="$participants" IncludeSelf="false" />
							</Sequence>
						</Loop>
					</Parallel>
				</Semaphore>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="angle" comment="" />
				<Variable name="animation" comment="" />
				<Variable name="backOff" comment="" />
				<Variable name="break" comment="" />
				<Variable name="breakDistance" comment="" />
				<Variable name="breakP" comment="" />
				<Variable name="breakSmallMove" comment="" />
				<Variable name="count" comment="" />
				<Variable name="distanceToFriend" comment="" />
				<Variable name="distanceToTarget" comment="" />
				<Variable name="distancesToTarget" comment="" />
				<Variable name="done" comment="" />
				<Variable name="fail" comment="" />
				<Variable name="hisPosition" comment="" />
				<Variable name="i" comment="" />
				<Variable name="instant" comment="" />
				<Variable name="lockName" comment="" />
				<Variable name="lockParticipantNumber" comment="" />
				<Variable name="lockParticipants" comment="" />
				<Variable name="meOrientation" comment="" />
				<Variable name="mePosition" comment="" />
				<Variable name="myPosition" comment="" />
				<Variable name="params" comment="" />
				<Variable name="participant" comment="" />
				<Variable name="participantPosition" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="participantsIn" comment="" />
				<Variable name="position" comment="" />
				<Variable name="position2wuid" comment="" />
				<Variable name="positionInside" comment="" />
				<Variable name="positionString" comment="" />
				<Variable name="positions" comment="" />
				<Variable name="randomRange" comment="" />
				<Variable name="smallMoveVec" comment="" />
				<Variable name="targetOnNavmesh" comment="" />
				<Variable name="targetPosition" comment="" />
				<Variable name="tooClose" comment="" />
				<Variable name="tooFar" comment="" />
				<Variable name="distance" comment="" />
				<Variable name="globalLockName" comment="" />
				<Variable name="numberOfPositions" comment="" />
				<Variable name="participantIn" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="130" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</VarOperation>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetSpatialInfo>
											<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetSpatialInfo>
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</NumericalOperation>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
											<SpawnPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SpawnPerceptibleVolume>
											<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</VarOperation>
										</Sequence>
									</Loop>
									<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</VarOperation>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<GetRandomPos hasInputBreakpoint="0" comment="This could be solved with better node, something like, getClosest navmesh point." breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetRandomPos>
																	<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</NumericalOperation>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Fail>
																	</IfCondition>
																	<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</NumericalOperation>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																		</Sequence>
																	</For>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Fail>
																	</IfCondition>
																</Sequence>
															</LoopUntil>
															<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Move>
														</Sequence>
													</Selector>
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Turn>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</Sequence>
																		</ForceLook>
																		<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</UnstanceAction>
																			</Sequence>
																		</While>
																		<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Fail>
																		</DistanceGate>
																	</Parallel>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetSpatialInfo>
																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetSpatialInfo>
																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetSpatialInfo>
																					<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</NumericalOperation>
																					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ExecuteLua>
																					<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ExactMove>
																					<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Fail>
																				</Sequence>
																				<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</DistanceCondition>
																			</Selector>
																		</While>
																	</Sequence>
																</Selector>
															</While>
														</Loop>
														<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</DistanceGate>
														<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</DistanceGate>
														<Loop hasInputBreakpoint="0" comment="hack, if participants get too close to each other." breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
																<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetSpatialInfo>
																		<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetSpatialInfo>
																		<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</NumericalOperation>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																	</Sequence>
																</For>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Fail>
																</IfCondition>
															</Sequence>
														</Loop>
													</Parallel>
												</Sequence>
											</InstantSemaphore>
										</Sequence>
									</For>
								</Sequence>
							</While>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
									<GetLockParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetLockParticipants>
								</Sequence>
							</Loop>
						</Parallel>
					</Semaphore>
				</Behavior>
			</Root>
			<Forest />
			<Comments>
				<Comment text="We_can_add_a_second_circle_of_partipants_if_we_expect_more_ppl_to_come._this_is_todo_but_it_can_\nbe_done_by_marking_an_overflowing_participant_as_second_circle_and_incresing_his_distance_from\n_target_as_well_as_offsetting_his_lockName." posX="-80" posY="-280" width="870" height="237" resizeBorderWidth="850" resizeBorderHeight="210" color="0.65,0.65,0.65" author="josef.vachek" />
			</Comments>
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="cheering_static" is_function="1">
		<Variables>
			<Variable name="animation" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="simplePosition" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="simplePositionReserved" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="simplePositions" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="instant" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="source" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfElseCondition failOnCondition="false" condition="$source == $__null" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$source = $__object.id" />
						</Then>
					</IfElseCondition>
					<GraphSearch Origin="$source" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;cheerPosition&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$simplePositions" saveVersion="2">
							<Child0 canSkip="1">
								<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
							</Child0>
						</Nodalyzer>
					</GraphSearch>
					<For startIndex="0" endIndex="-1" step="1" array="$simplePositions" iterator="" value="$simplePosition" break="$done">
						<AtomicDecorator>
							<Selector>
								<Sequence>
									<GraphSearch Origin="$simplePosition" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;reservedCheeringPosition&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
										<Nodalyzer Quantifiers="ForAll" Parent="" Child="" saveVersion="2" />
									</GraphSearch>
									<Expression expressions="$simplePositionReserved = $simplePosition &#10;$done = true" />
								</Sequence>
								<Sequence>
									<Invertor>
										<GraphSearch Origin="$simplePosition" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;reservedCheeringPosition&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										</GraphSearch>
									</Invertor>
									<AddLink From="$simplePosition" To="$this.id" Tag="&apos;reservedCheeringPosition&apos;" Data="" LinkOpHandleMode="Error" />
									<Expression expressions="$simplePositionReserved = $simplePosition &#10;$done = true" />
								</Sequence>
							</Selector>
						</AtomicDecorator>
					</For>
					<IfElseCondition failOnCondition="false" condition="$instant" saveVersion="2">
						<Then canSkip="1">
							<TeleportAction Position="$simplePositionReserved" EndInterruptOnActionStart="false" />
						</Then>
						<Else canSkip="1">
							<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$simplePositionReserved" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						</Else>
					</IfElseCondition>
					<While doFail="false" propagateChildFail="false" condition="true">
						<Sequence>
							<UnstanceAction unstance="tournament_happyCheering" locationObject="" slaveObject="" />
						</Sequence>
					</While>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animation" comment="" />
				<Variable name="simplePosition" comment="" />
				<Variable name="simplePositionReserved" comment="" />
				<Variable name="simplePositions" comment="" />
				<Variable name="instant" comment="" />
				<Variable name="source" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="needs links to tagpoints [cheerPosition] for each participant" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
						</IfElseCondition>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child0>
									<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</RangeSorter>
								</Child0>
							</Nodalyzer>
						</GraphSearch>
						<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
											<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WUIDFilter>
											<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
											</Nodalyzer>
										</GraphSearch>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Invertor hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
										</Invertor>
										<AddLink hasInputBreakpoint="0" comment="musi byt revesni" breakpointFlags="0">
											<OutputBreakpoints />
										</AddLink>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
								</Selector>
							</AtomicDecorator>
						</For>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</TeleportAction>
							</Then>
							<Else>
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
							</Else>
						</IfElseCondition>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</UnstanceAction>
							</Sequence>
						</While>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="move_animation" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="animationName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="animationTags" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="target" type="wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitForAnimation" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$target" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animationName" comment="" />
				<Variable name="animationTags" comment="" />
				<Variable name="target" comment="" />
				<Variable name="waitForAnimation" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-400" editorPosY="-100" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitingForNpcDialog" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="lockName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="target" type="wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$target" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$target" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$lockName&apos;" RunLogic="KeepRunning">
						<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="waitForNpcDialog" EventSet="">
			<Variables>
				<Variable name="lockName" comment="" />
				<Variable name="target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wantPlayerAttention" is_function="1">
		<Variables>
			<Variable name="close" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="closeFirstTime" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="closeFirstTimeOnly" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="firstTimeApproached" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="leaveSaid" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="seePlayer" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="seePlayerCooldownReset" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="subscriptionEvent" type="" values="" isPersistent="0" form="single" />
			<Variable name="t_nextBehavior" type="" values="" isPersistent="0" form="single" />
			<Variable name="wasCloseLongTime" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="aliasClose" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="aliasCloseAnnoyed" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="aliasCloseFirstTime" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="aliasCloseFirstTimeOnly" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="aliasLeaving" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="alwaysSeePlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="distanceClose" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="mode" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="target" type="wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="timeout" type="_int" values="-1" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;gerhart_wantPlayerAttention&apos;" prune="true" negprune="unknown" Parent="" Child="$place" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;opatHouse&apos;" prune="true" negprune="unknown" Parent="" Child="$opatHome" Data="" />
					</GraphSearch>
					<Function_speech_monolog alias="&apos;drak_gerhartWantsToTalk&apos;" canBeDelayed="false" important="false" lookAtId="$__null" metarole="" target="$this.id" wait="false" nodeLabel="91097403" />
					<Parallel successMode="All" failureMode="Any">
						<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$place" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
						<AreaPresenceGate aiObjects="$this.id" area="$opatHome" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
							<Sequence>
								<SuppressFailure>
									<LoopUntil until="Success" attemptCount="5">
										<Function_speech_dialogInitiator alias="&apos;drak_gerhart_close&apos;" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" nodeLabel="89110877" />
									</LoopUntil>
								</SuppressFailure>
								<Callback_empty EventName="&apos;OnFinished&apos;" />
							</Sequence>
						</AreaPresenceGate>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="close" comment="" />
				<Variable name="closeFirstTime" comment="" />
				<Variable name="closeFirstTimeOnly" comment="" />
				<Variable name="firstTimeApproached" comment="" />
				<Variable name="leaveSaid" comment="" />
				<Variable name="seePlayer" comment="" />
				<Variable name="seePlayerCooldownReset" comment="" />
				<Variable name="subscriptionEvent" comment="" />
				<Variable name="t_nextBehavior" comment="" />
				<Variable name="wasCloseLongTime" comment="" />
				<Variable name="aliasClose" comment="" />
				<Variable name="aliasCloseAnnoyed" comment="" />
				<Variable name="aliasCloseFirstTime" comment="" />
				<Variable name="aliasCloseFirstTimeOnly" comment="" />
				<Variable name="aliasLeaving" comment="" />
				<Variable name="alwaysSeePlayer" comment="" />
				<Variable name="distanceClose" comment="" />
				<Variable name="mode" comment="" />
				<Variable name="target" comment="" />
				<Variable name="timeout" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="20" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkDataFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkDataFilter>
						</GraphSearch>
						<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_speech_monolog>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Move>
							<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_dialogInitiator>
										</LoopUntil>
									</SuppressFailure>
									<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Callback_empty>
								</Sequence>
							</AreaPresenceGate>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wantPlayerAttention_aggresive" is_function="1">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="destChangedThreshold(&apos;500ms&apos;)" isPersistent="0" form="single" />
			<Variable name="moveTowardsPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pathInfo" type="pathInfo" values="" isPersistent="0" form="single" />
			<Variable name="pathfind_params" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="speed" type="enum:movementSpeed" values="$enum:movementSpeed.run" isPersistent="0" form="single" />
			<Variable name="time" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="trespassOverrideReactionTarget" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="distanceBreak" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="monologAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="repeatMonolog" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="result" type="_string" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="run2sprint" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="run2walk" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="sprint2run" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="sprint2walk" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="timeout" type="_int" values="-1" isPersistent="0" form="single" requirementType="In" />
			<Variable name="walk2run" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="walk2sprint" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<DisableMoveTransitions>
						<Loop count="-1">
							<Sequence>
								<ContinuousSwitch>
									<IfCondition failOnCondition="false" condition="!$moveTowardsPlayer">
										<Parallel successMode="Any" failureMode="Any">
											<While doFail="false" propagateChildFail="false" condition="true">
												<Sequence>
													<Turn target="$__player" align="false" />
													<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="&apos;250ms&apos;" skipInLOD="false" />
												</Sequence>
											</While>
											<DistanceGate Origin="" ReferencePt="$__player" Low="0.000000" High="3.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
												<Expression expressions="$moveTowardsPlayer=true" />
											</DistanceGate>
										</Parallel>
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$moveTowardsPlayer">
										<Sequence>
											<Move stopWithinDistance="2.500000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__player" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="$addParams" pathFindingParams="$pathfind_params" staminaPolicy="" pathInfo="&apos;pathInfo&apos;" />
											<Expression expressions="$moveTowardsPlayer=false" />
										</Sequence>
									</IfCondition>
								</ContinuousSwitch>
							</Sequence>
						</Loop>
					</DisableMoveTransitions>
					<Function_monologRepeat alias="$monologAlias" cooldown="&apos;5s&apos;" repeat="$repeatMonolog" nodeLabel="20851287" />
					<Loop count="-1">
						<Sequence>
							<Function_getSpeedFromDistance distance="$pathInfo.distance" speedEnumOut="$speed" nodeLabel="16527233" />
							<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Sequence>
					</Loop>
					<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$distanceBreak" High="$distanceBreak" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
						<Expression expressions="$result = &apos;distanceTooFar&apos;" />
					</DistanceGate>
					<Sequence>
						<Function_timeoutPersistent timeout="$timeout" nodeLabel="11860847" />
						<Expression expressions="$result = &apos;timeOut&apos;" />
					</Sequence>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="moveTowardsPlayer" comment="" />
				<Variable name="pathInfo" comment="" />
				<Variable name="pathfind_params" comment="" />
				<Variable name="speed" comment="" />
				<Variable name="time" comment="" />
				<Variable name="trespassOverrideReactionTarget" comment="" />
				<Variable name="distanceBreak" comment="" />
				<Variable name="monologAlias" comment="" />
				<Variable name="repeatMonolog" comment="" />
				<Variable name="result" comment="" />
				<Variable name="run2sprint" comment="" />
				<Variable name="run2walk" comment="" />
				<Variable name="sprint2run" comment="" />
				<Variable name="sprint2walk" comment="" />
				<Variable name="timeout" comment="" />
				<Variable name="walk2run" comment="" />
				<Variable name="walk2sprint" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="20" editorPosY="30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DisableMoveTransitions hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ContinuousSwitch hasInputBreakpoint="0" comment="Move/watch player" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="Watch player" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Turn>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</While>
												<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</DistanceGate>
											</Parallel>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="Move towards player" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Move>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</IfCondition>
									</ContinuousSwitch>
								</Sequence>
							</Loop>
						</DisableMoveTransitions>
						<Function_monologRepeat hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_monologRepeat>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_getSpeedFromDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_getSpeedFromDistance>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</Loop>
						<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</DistanceGate>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_timeoutPersistent hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_timeoutPersistent>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="timeoutPersistent" is_function="1">
		<Variables>
			<Variable name="timeoutPersistent" type="_int" values="-1" isPersistent="1" form="single" />
		</Variables>
		<Parameters>
			<Variable name="timeout" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$timeout == -1 | $timeout == 0">
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$timeoutPersistent == -1">
						<Expression expressions="$timeoutPersistent = $timeout" />
					</IfCondition>
					<While doFail="false" propagateChildFail="false" condition="$timeoutPersistent &gt; 0">
						<Sequence>
							<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							<Expression expressions="$timeoutPersistent -= 3" />
						</Sequence>
					</While>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="timeoutPersistent" comment="" />
				<Variable name="timeout" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</While>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="waitForNpcDialog" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="lockCount" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="lockName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="target" type="wuid" values="$__null" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="$target ~= $__null">
						<ExactMove directionType="AlignWithEntity" directionSpecification="$target" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$target" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					</IfCondition>
					<SuppressFailure>
						<Synchronize SemaphoreCount="$lockCount" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$lockName&apos;" RunLogic="KeepRunning">
							<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Synchronize>
					</SuppressFailure>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="waitForNpcDialog" EventSet="">
			<Variables>
				<Variable name="lockCount" comment="" />
				<Variable name="lockName" comment="" />
				<Variable name="target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
						</IfCondition>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Synchronize>
						</SuppressFailure>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="getNumberOfReadySouls" is_function="1">
		<Variables>
			<Variable name="souls" type="wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="linkName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="linkParent" type="wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="numberOfReadySouls" type="_int" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$linkParent" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="$linkName" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$souls" saveVersion="2" />
					</GraphSearch>
					<Expression expressions="$numberOfReadySouls = #souls" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<SoulIsUnconsciousFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="souls" comment="" />
				<Variable name="linkName" comment="" />
				<Variable name="linkParent" comment="" />
				<Variable name="numberOfReadySouls" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SoulIsAliveFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<SoulIsUnconsciousFilter editorPosX="790" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</SoulIsUnconsciousFilter>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="chatOnPlayer" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="aliasChat" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="crime_keepStance" enabled="true">
					<AnyDecorator preset="crime_keepStateAndItems" enabled="true">
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<Parallel successMode="Any" failureMode="Any">
									<Sequence>
										<WaitAction />
										<ForceLook LookTarget="$__player" DisableVariations="false">
											<StanceCheck soul="$this.id" stance="standing" smartObject="" negate="false" failOnCondition="false" saveVersion="2">
												<Then canSkip="1">
													<Loop count="-1">
														<Sequence>
															<Turn target="$__player" align="false" />
															<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
														</Sequence>
													</Loop>
												</Then>
												<Else canSkip="1">
													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
												</Else>
											</StanceCheck>
										</ForceLook>
									</Sequence>
									<LoopUntil until="Success" attemptCount="5">
										<Function_speech_dialogInitiator alias="$aliasChat" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="89110877" />
									</LoopUntil>
								</Parallel>
							</Child>
							<OnSuccess canSkip="1">
								<Callback_empty EventName="&apos;OnFinished&apos;" />
							</OnSuccess>
						</FuseBox>
					</AnyDecorator>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="chatOnPlayer" EventSet="endNotification">
			<Variables>
				<Variable name="aliasChat" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="20" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Turn>
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
															</Sequence>
														</Loop>
													</Then>
													<Else>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Else>
												</StanceCheck>
											</ForceLook>
										</Sequence>
										<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_dialogInitiator>
										</LoopUntil>
									</Parallel>
								</Child>
								<OnSuccess>
									<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Callback_empty>
								</OnSuccess>
							</FuseBox>
						</AnyDecorator>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="chatOnPlayerFailable" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="aliasChat" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<Parallel successMode="Any" failureMode="Any">
							<Loop count="-1">
								<Sequence>
									<Turn target="$__player" align="false" />
									<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
								</Sequence>
							</Loop>
							<Function_speech_dialogInitiator alias="$aliasChat" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="82307127" />
						</Parallel>
					</Child>
					<OnSuccess canSkip="1">
						<Callback_empty EventName="&apos;Success&apos;" />
					</OnSuccess>
					<OnFail canSkip="1">
						<Callback_empty EventName="&apos;Fail&apos;" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="chatOnPlayer" EventSet="resultNotification">
			<Variables>
				<Variable name="aliasChat" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Turn>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
								</Loop>
								<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_dialogInitiator>
							</Parallel>
						</Child>
						<OnSuccess>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnSuccess>
						<OnFail>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="barkOnPlayerSeenLoop" is_function="1">
		<Variables>
			<Variable name="seenEntity" type="perceptionInfo" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Loop count="-1">
					<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$seenEntity" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
						<ForceLook LookTarget="$__player" DisableVariations="false">
							<IfCondition failOnCondition="false" condition="$seenEntity.perceptible == $__player">
								<Function_speech_monolog alias="$string" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__null" metarole="" target="$this.id" wait="false" nodeLabel="96631807" />
							</IfCondition>
						</ForceLook>
					</ProcessMessage>
				</Loop>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="seenEntity" comment="" />
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_monolog>
								</IfCondition>
							</ForceLook>
						</ProcessMessage>
					</Loop>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="barkAndTurnOnPlayerSeenLoop" is_function="1">
		<Variables>
			<Variable name="seenEntity" type="perceptionInfo" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$seenEntity" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
					<IfCondition failOnCondition="false" condition="$seenEntity.perceptible == $__player">
						<Parallel successMode="Any" failureMode="Any">
							<Function_speech_monolog alias="$string" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__null" metarole="" target="$this.id" wait="true" nodeLabel="96631807" />
							<Function_waitAndLookAtPlayer nodeLabel="44602550" />
						</Parallel>
					</IfCondition>
				</ProcessMessage>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="seenEntity" comment="" />
				<Variable name="string" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_monolog>
								<Function_waitAndLookAtPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_waitAndLookAtPlayer>
							</Parallel>
						</IfCondition>
					</ProcessMessage>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wait" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="npc_dialogAndLean" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid_target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<CallBehavior Target="$wuid_target" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="75588446" />
					<Sequence>
						<Function_npc_ingameDialogInitiator alias="$string" participants="$wuid" nodeLabel="47818086" />
						<Callback_empty EventName="&apos;OnFinished&apos;" />
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuid_wuid_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
				<Variable name="wuid_target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CallBehavior>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_npc_ingameDialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_npc_ingameDialogInitiator>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="npc_reactAndLean" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<CallBehavior Target="$wuid" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="83366173" />
					<Loop count="-1">
						<Function_barkAndTurnOnPlayerSeenLoop string="$string" nodeLabel="49055301" />
					</Loop>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="60" editorPosY="30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CallBehavior>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_barkAndTurnOnPlayerSeenLoop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_barkAndTurnOnPlayerSeenLoop>
						</Loop>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="nightAttack_moveToBattle" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="men_nightPatrol" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="nightGuard" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="12.000000" High="12.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
					<Sequence>
						<Function_speech_monolog alias="&apos;oblehaniSuchdole_podezrelyHlidacVarujeUtocniky&apos;" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="false" nodeLabel="55979889" />
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
				</DistanceGate>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_monolog>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</DistanceGate>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="duelChat" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="aliasChat" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<ForceLook LookTarget="$__player" DisableVariations="false">
							<Parallel successMode="Any" failureMode="Any">
								<Sequence>
									<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
									<Turn target="$__player" align="false" />
									<Function_speech_dialogInitiator alias="$aliasChat" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="17838463" />
								</Sequence>
								<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
									<Success />
								</DistanceGate>
								<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="10.000000" High="10.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
									<Success />
								</DistanceGate>
							</Parallel>
						</ForceLook>
					</Child>
					<OnSuccess canSkip="1">
						<Callback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="chatOnPlayer" EventSet="endNotification">
			<Variables>
				<Variable name="aliasChat" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</DrawAction>
										<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Turn>
										<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_dialogInitiator>
									</Sequence>
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DistanceGate>
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DistanceGate>
								</Parallel>
							</ForceLook>
						</Child>
						<OnSuccess>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>