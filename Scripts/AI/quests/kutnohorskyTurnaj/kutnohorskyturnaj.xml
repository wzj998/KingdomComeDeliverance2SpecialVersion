<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="moveAndWaitTime" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<DistanceCondition Origin="$this.id" ReferencePt="$wuid" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
				<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
			</DistanceCondition>
		</ForestContainer>
		<EditorData Signature="wuidUpdated" EventSet="endNotification">
			<Variables>
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-300" editorPosY="-20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<DistanceCondition editorPosX="370" editorPosY="-250" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExactMove>
				</DistanceCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveAndWaitOnFighterSpot" is_function="0">
		<Variables>
			<Variable name="firstTime" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="selectedWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="usingActivity" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="wuidType" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidDataArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetType WUID="$wuidData" OutString="$wuidType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
					<ContinuousSwitch>
						<IfCondition failOnCondition="false" condition="$usingActivity == false">
							<Loop count="-1">
								<Sequence>
									<RandomGate opensWithChance="0.700000" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$usingActivity = true" />
										</Then>
										<Else canSkip="1">
											<Success />
										</Else>
									</RandomGate>
									<DistanceCondition Origin="$this.id" ReferencePt="$wuidData" Low="1.900000" High="1.900000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
										<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="2.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuidData" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</DistanceCondition>
									<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="2.500000" High="2.500000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
										<StanceCheck soul="$__player" stance="sitting" smartObject="" negate="false" failOnCondition="false" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$usingActivity = true" />
											</Then>
											<Else canSkip="1">
												<Success />
											</Else>
										</StanceCheck>
									</DistanceCondition>
									<IfCondition failOnCondition="false" condition="$usingActivity == false">
										<Sequence>
											<IfElseCondition failOnCondition="false" condition="$wuidType == &apos;SO&apos;" saveVersion="2">
												<Then canSkip="1">
													<StanceElement smartObject="$wuidData" stance="sitting" allowAny="false" enabled="true">
														<AnimationAction fragment="&apos;TournamentSittingStretch&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													</StanceElement>
												</Then>
												<Else canSkip="1">
													<Sequence>
														<Turn target="$wuidData" align="true" />
														<AnimationAction fragment="&apos;TournamentStandStretch&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													</Sequence>
												</Else>
											</IfElseCondition>
											<Wait duration="&apos;11s&apos;" timeType="GameTime" doFail="false" variation="&apos;9s&apos;" />
										</Sequence>
									</IfCondition>
								</Sequence>
							</Loop>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$usingActivity == true">
							<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<SuppressFailure>
											<Semaphore SemaphoreCount="3" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;2s&apos;" LockManagerType="Local" SemaphoreName="&apos;maxIdleFighters&apos;">
												<Sequence>
													<RandomItem Array="$wuidDataArray" Result="$selectedWuid" Clamp="-1" />
													<Selector>
														<GraphSearch Origin="$selectedWuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;reserved&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
														</GraphSearch>
														<SubtreeDecorator saveVersion="2">
															<Init canSkip="1">
																<AddLink From="$selectedWuid" To="$this.id" Tag="&apos;reserved&apos;" Data="" LinkOpHandleMode="Error" />
															</Init>
															<Subtree canSkip="1">
																<Selector>
																	<CallBehavior Target="$selectedWuid" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="37719935" />
																	<CallBehavior Target="$selectedWuid" BehaviorName="&apos;washFace&apos;" ignoreDropUnloading="false" nodeLabel="40124586" />
																</Selector>
															</Subtree>
															<Cleanup canSkip="1">
																<RemoveLink From="$selectedWuid" To="$this.id" Tag="&apos;reserved&apos;" LinkOpHandleMode="Error" />
															</Cleanup>
														</SubtreeDecorator>
													</Selector>
													<Expression expressions="$usingActivity = false" />
												</Sequence>
											</Semaphore>
										</SuppressFailure>
										<Turn target="$__object.id" align="false" />
										<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;5s&apos;" />
									</Sequence>
								</Child>
								<OnSuccess canSkip="1">
									<Expression expressions="$usingActivity = false" />
								</OnSuccess>
							</FuseBox>
						</IfCondition>
					</ContinuousSwitch>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<SuppressFailure>
					<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
						<Child canSkip="1">
							<GraphSearch Origin="$asdf" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;benchOccupant&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							</GraphSearch>
						</Child>
						<OnSuccess canSkip="1">
							<Expression expressions="$usingActivity = true" />
						</OnSuccess>
					</FuseBox>
				</SuppressFailure>
			</Sequence>
		</ForestContainer>
		<EditorData Signature="wuidDataWuidDataArray" EventSet="">
			<Variables>
				<Variable name="firstTime" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="selectedWuid" comment="" />
				<Variable name="usingActivity" comment="" />
				<Variable name="wuidType" comment="" />
				<Variable name="wuidData" comment="" />
				<Variable name="wuidDataArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetType>
						<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Else>
										</RandomGate>
										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Move>
										</DistanceCondition>
										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Else>
											</StanceCheck>
										</DistanceCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AnimationAction hasInputBreakpoint="0" comment="UnstanceAction m sto tohodle? nn, neni to loop animace" breakpointFlags="0">
																<OutputBreakpoints />
															</AnimationAction>
														</StanceElement>
													</Then>
													<Else>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Turn>
															<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AnimationAction>
														</Sequence>
													</Else>
												</IfElseCondition>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</IfCondition>
									</Sequence>
								</Loop>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</RandomItem>
														<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
															</GraphSearch>
															<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Init>
																	<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</AddLink>
																</Init>
																<Subtree>
																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</CallBehavior>
																		<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</CallBehavior>
																	</Selector>
																</Subtree>
																<Cleanup>
																	<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</RemoveLink>
																</Cleanup>
															</SubtreeDecorator>
														</Selector>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Sequence>
												</Semaphore>
											</SuppressFailure>
											<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Turn>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</Child>
									<OnSuccess>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</OnSuccess>
								</FuseBox>
							</IfCondition>
						</ContinuousSwitch>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="1700" editorPosY="-520" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
							</Child>
							<OnSuccess>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</OnSuccess>
						</FuseBox>
					</SuppressFailure>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="duelSurrendering" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="integerData" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<WeaponAutomationDecorator WeaponChange="melee" active="true">
					<Sequence>
						<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
						<WaitAction />
						<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						<UnstanceAction unstance="CrimeSurrender" locationObject="" slaveObject="" />
						<WaitAction />
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</Sequence>
				</WeaponAutomationDecorator>
			</Behavior>
		</Root>
		<ForestContainer>
			<Switch>
				<IfCondition failOnCondition="false" condition="$integerData == 0">
					<AnimationAction fragment="&apos;NoWeaponSurrender&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
				</IfCondition>
				<IfCondition failOnCondition="false" condition="$integerData == 1">
					<AnimationAction fragment="&apos;TournamentSurrender&apos;" tags="&apos;l_shield+r_sword&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
				</IfCondition>
				<IfCondition failOnCondition="false" condition="$integerData == 2">
					<AnimationAction fragment="&apos;TournamentSurrender&apos;" tags="&apos;r_longsword&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
				</IfCondition>
			</Switch>
		</ForestContainer>
		<EditorData Signature="integerInput" EventSet="endNotification">
			<Variables>
				<Variable name="integerData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-350" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</DrawAction>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</Sequence>
					</WeaponAutomationDecorator>
				</Behavior>
			</Root>
			<Forest>
				<Switch editorPosX="640" editorPosY="-330" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AnimationAction>
					</IfCondition>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AnimationAction>
					</IfCondition>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AnimationAction>
					</IfCondition>
				</Switch>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_moveToFanSpot" is_function="0">
		<Variables>
			<Variable name="currentFanSpot" type="_wuid" values="" isPersistent="1" form="single" />
			<Variable name="fanHub" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="fanPoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="fanSpots" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="leanSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leaningPointExist" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pickedSoulInArena" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="tempFanSpot" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="cheeringTrigger" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="isPositive" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="itsApplause" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="soulsInArena" type="_wuid" values="" isPersistent="0" form="array" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;fanHub&apos;" prune="true" negprune="unknown" Parent="" Child="$fanHub" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$fanHub" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;fanSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$fanSpots" saveVersion="2">
							<Child0 canSkip="1">
								<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
							</Child0>
						</Nodalyzer>
					</GraphSearch>
					<ContinuousSwitch>
						<IfCondition failOnCondition="false" condition="$currentFanSpot == $__null">
							<Sequence>
								<AtomicDecorator>
									<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
										<Child canSkip="1">
											<GraphSearch Origin="$fanSpots[0]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;reserved&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</GraphSearch>
										</Child>
										<OnSuccess canSkip="1">
											<PopFromArray array="$fanSpots" valueOut="" direction="Front" />
										</OnSuccess>
										<OnFail canSkip="1">
											<Sequence>
												<AddLink From="$fanSpots[0]" To="$this.id" Tag="&apos;reserved&apos;" Data="" LinkOpHandleMode="Error" />
												<Expression expressions="$currentFanSpot= $fanSpots[0]" />
											</Sequence>
										</OnFail>
									</FuseBox>
								</AtomicDecorator>
								<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$currentFanSpot ~= $__null">
							<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<Function_fan_common_moveToFanSpot currentFanSpot="$currentFanSpot" fanPoint="$fanPoint" leanSpot="$leanSpot" leaningPointExist="$leaningPointExist" unstanceVariant="$unstanceVariant" nodeLabel="43435783" />
										<Loop count="-1">
											<Sequence>
												<RandomItem Array="$soulsInArena" Result="$pickedSoulInArena" Clamp="-1" />
												<ForceLook LookTarget="$pickedSoulInArena" DisableVariations="false">
													<Function_fan_common_leaningSpotDecision alias="$alias" cheeringTrigger="$cheeringTrigger" fanPoint="$fanPoint" isReactionPositive="$isPositive" itsApplause="$itsApplause" leanSpot="$leanSpot" leaningPointExist="$leaningPointExist" pickedSoulInArena="$pickedSoulInArena" unstanceVariant="$unstanceVariant" nodeLabel="20010145" />
												</ForceLook>
											</Sequence>
										</Loop>
									</Sequence>
								</Child>
								<OnSuccess canSkip="1">
									<Sequence>
										<RemoveLink From="$currentFanSpot" To="$this.id" Tag="&apos;reserved&apos;" LinkOpHandleMode="Error" />
										<Expression expressions="$currentFanSpot = $__null" />
									</Sequence>
								</OnSuccess>
							</FuseBox>
						</IfCondition>
					</ContinuousSwitch>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="kutnohorskyTurnaj_fanCheering" EventSet="">
			<Variables>
				<Variable name="currentFanSpot" comment="" />
				<Variable name="fanHub" comment="" />
				<Variable name="fanPoint" comment="" />
				<Variable name="fanSpots" comment="" />
				<Variable name="leanSpot" comment="" />
				<Variable name="leaningPointExist" comment="" />
				<Variable name="pickedSoulInArena" comment="" />
				<Variable name="tempFanSpot" comment="" />
				<Variable name="unstanceVariant" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="cheeringTrigger" comment="" />
				<Variable name="isPositive" comment="" />
				<Variable name="itsApplause" comment="" />
				<Variable name="soulsInArena" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child0>
									<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</RangeSorter>
								</Child0>
							</Nodalyzer>
						</GraphSearch>
						<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Child>
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
											</Child>
											<OnSuccess>
												<PopFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</PopFromArray>
											</OnSuccess>
											<OnFail>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddLink>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</OnFail>
										</FuseBox>
									</AtomicDecorator>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_fan_common_moveToFanSpot hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_fan_common_moveToFanSpot>
											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</RandomItem>
													<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Function_fan_common_leaningSpotDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_fan_common_leaningSpotDecision>
													</ForceLook>
												</Sequence>
											</Loop>
										</Sequence>
									</Child>
									<OnSuccess>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</RemoveLink>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</OnSuccess>
								</FuseBox>
							</IfCondition>
						</ContinuousSwitch>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_moveAround" is_function="0">
		<Variables>
			<Variable name="currentWalkPoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="fanHub" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="randomUnstance" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="startPositionVec" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="typeOfWalkPoint" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="walkPoints" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetLastNavmeshPosition Target="$this.id" OutPos="$startPositionVec" TrackingMode="NPCPos" />
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;fanHub&apos;" prune="true" negprune="unknown" Parent="" Child="$fanHub" Data="" />
					</GraphSearch>
					<SuppressFailure>
						<Semaphore SemaphoreCount="4" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;4s&apos;" LockManagerType="Local" SemaphoreName="&apos;maxFansWalkingAround&apos;">
							<SubtreeDecorator saveVersion="2">
								<Init canSkip="1">
									<GraphSearch Origin="$fanHub" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;fanWalkPoint&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										<Nodalyzer Quantifiers="ForAll" Parent="" Child="$walkPoints" saveVersion="2" />
									</GraphSearch>
								</Init>
								<Subtree canSkip="1">
									<Parallel successMode="Any" failureMode="Any">
										<Loop count="-1">
											<IfGate atomic="true" condition="$currentWalkPoint == $__null" RunLogic="KeepRunning">
												<SuppressFailure>
													<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
														<Child canSkip="1">
															<GraphSearch Origin="$walkPoints[0]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;reserved&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															</GraphSearch>
														</Child>
														<OnSuccess canSkip="1">
															<PopFromArray array="$walkPoints" valueOut="" direction="Front" />
														</OnSuccess>
														<OnFail canSkip="1">
															<Sequence>
																<Expression expressions="$currentWalkPoint= $walkPoints[0]" />
																<AddLink From="$currentWalkPoint" To="$this.id" Tag="&apos;reserved&apos;" Data="" LinkOpHandleMode="Error" />
															</Sequence>
														</OnFail>
													</FuseBox>
												</SuppressFailure>
											</IfGate>
										</Loop>
										<IfGate atomic="false" condition="$currentWalkPoint ~= $__null" RunLogic="KeepRunning">
											<Sequence>
												<Move stopWithinDistance="1.000000" stopDistanceVariation="2.000000" rayCasteFlee="false" successDistance="1.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$currentWalkPoint" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
												<GetType WUID="$currentWalkPoint" OutString="$typeOfWalkPoint" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
												<IfCondition failOnCondition="false" condition="$typeOfWalkPoint == &apos;SO&apos;">
													<CallBehavior Target="$currentWalkPoint" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="68781759" />
												</IfCondition>
											</Sequence>
										</IfGate>
									</Parallel>
								</Subtree>
								<Cleanup canSkip="1">
									<RemoveLink From="$currentWalkPoint" To="$this.id" Tag="&apos;reserved&apos;" LinkOpHandleMode="Error" />
								</Cleanup>
							</SubtreeDecorator>
						</Semaphore>
					</SuppressFailure>
					<Move stopWithinDistance="1.000000" stopDistanceVariation="2.000000" rayCasteFlee="false" successDistance="1.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$startPositionVec" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<Turn target="$fanHub" align="false" />
					<WaitAction />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="currentWalkPoint" comment="" />
				<Variable name="fanHub" comment="" />
				<Variable name="randomUnstance" comment="" />
				<Variable name="startPositionVec" comment="" />
				<Variable name="typeOfWalkPoint" comment="" />
				<Variable name="walkPoints" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-960" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetLastNavmeshPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetLastNavmeshPosition>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Init>
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
											<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
											</Nodalyzer>
										</GraphSearch>
									</Init>
									<Subtree>
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Child>
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																</GraphSearch>
															</Child>
															<OnSuccess>
																<PopFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PopFromArray>
															</OnSuccess>
															<OnFail>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</AddLink>
																</Sequence>
															</OnFail>
														</FuseBox>
													</SuppressFailure>
												</IfGate>
											</Loop>
											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Move>
													<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetType>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</CallBehavior>
													</IfCondition>
												</Sequence>
											</IfGate>
										</Parallel>
									</Subtree>
									<Cleanup>
										<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</RemoveLink>
									</Cleanup>
								</SubtreeDecorator>
							</Semaphore>
						</SuppressFailure>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Turn>
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_moveAroundTest" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_turnToDialog" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="nobleFan_sit" is_function="0">
		<Variables>
			<Variable name="altSit" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="chair" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
					<RandomGate opensWithChance="0.500000" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<GraphSearch Origin="$data" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;chair&apos;" prune="true" negprune="unknown" Parent="" Child="$chair" Data="" />
								</GraphSearch>
								<CallBehavior Target="$chair" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="32276334" />
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<GraphSearch Origin="$data" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;sitAltSO&apos;" prune="true" negprune="unknown" Parent="" Child="$altSit" Data="" />
								</GraphSearch>
								<Selector>
									<CallBehavior Target="$altSit" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="41513082" />
									<CallBehavior Target="$altSit" BehaviorName="&apos;partyStanding&apos;" ignoreDropUnloading="false" nodeLabel="53081885" />
								</Selector>
							</Sequence>
						</Else>
					</RandomGate>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<CalculateAbsoluteValue value="0.000000" result="" />
		</ForestContainer>
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="altSit" comment="" />
				<Variable name="chair" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-290" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
						<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</CallBehavior>
								</Sequence>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</CallBehavior>
										<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</CallBehavior>
									</Selector>
								</Sequence>
							</Else>
						</RandomGate>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<CalculateAbsoluteValue editorPosX="5007" editorPosY="-428" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</CalculateAbsoluteValue>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_preFight" is_function="0">
		<Variables>
			<Variable name="handL" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="handR" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="integerData" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Switch>
						<IfCondition failOnCondition="false" condition="$integerData == 0">
							<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
								</Child>
								<OnFail canSkip="1">
									<Success />
								</OnFail>
							</FuseBox>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$integerData == 1">
							<HandContentElement hand="Right" item="$handR" allowAny="false" decisionLabel="Label1" useDecision="true" enabled="true" saveVersion="2">
								<Search canSkip="1">
									<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$handL" RightHand="$handR" UseTorchWhenAppropriate="false" />
								</Search>
								<Exec canSkip="1">
									<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
										<AnimationAction fragment="&apos;TournamentIntroShld&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
									</AnyDecorator>
								</Exec>
							</HandContentElement>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$integerData == 2">
							<Sequence>
								<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
								<AnimationAction fragment="&apos;TournamentIntro&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
							</Sequence>
						</IfCondition>
						<DefaultBranch>
							<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</DefaultBranch>
					</Switch>
					<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</AnyDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<JoinedAnimationAction requiresMovement="true" lockContext="" lockName="" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
		</ForestContainer>
		<EditorData Signature="integerInput" EventSet="endNotification">
			<Variables>
				<Variable name="handL" comment="" />
				<Variable name="handR" comment="" />
				<Variable name="integerData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-130" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</DrawAction>
									</Child>
									<OnFail>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</OnFail>
								</FuseBox>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetWeaponsFromWeaponSet>
									</Search>
									<Exec>
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AnimationAction>
										</AnyDecorator>
									</Exec>
								</HandContentElement>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</DrawAction>
									<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AnimationAction>
								</Sequence>
							</IfCondition>
							<DefaultBranch>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</DefaultBranch>
						</Switch>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</AnyDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<JoinedAnimationAction editorPosX="1170" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</JoinedAnimationAction>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_getSoulName" is_function="0">
		<Variables>
			<Variable name="soulName" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$soulName = $this.name" />
					<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					<Callback_endData data="$soulName" EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="empty" EventSet="endData">
			<Variables>
				<Variable name="soulName" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
						<Callback_endData hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_endData>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="walkToDespawn" is_function="0">
		<Variables>
			<Variable name="currentPoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="waitTimeString" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="walkPoint" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IsTimeSkipping saveVersion="2">
					<Then canSkip="1">
						<Sequence>
							<LogToConsole LogLevel="Debug" Message="&apos;a30 tournament despawn entity in timeskip&apos;" />
							<Despawn DeSpawnedEntity="$this.id" />
						</Sequence>
					</Then>
					<Else canSkip="1">
						<Sequence>
							<ExecuteLua code="local limit = 15 &#10;data.waitTimeString = math.random(limit+7) .. &apos;s&apos;" />
							<Wait duration="$waitTimeString" timeType="GameTime" doFail="false" variation="" />
							<SubtreeDecorator saveVersion="2">
								<Init canSkip="1">
									<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;walkToDespawn&apos;" prune="true" negprune="unknown" Parent="" Child="$walkPoint" Data="" />
									</GraphSearch>
								</Init>
								<Subtree canSkip="1">
									<Parallel successMode="Any" failureMode="Any">
										<Loop count="-1">
											<ForEach startIndex="0" step="1" array="$walkPoint" iterator="" value="$currentPoint" break="">
												<Sequence>
													<ExecuteLua code="local limit = 6 &#10;data.waitTimeString = math.random(limit) .. &apos;s&apos;" />
													<Wait duration="$waitTimeString" timeType="GameTime" doFail="false" variation="" />
													<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="10.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$currentPoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
												</Sequence>
											</ForEach>
										</Loop>
										<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="100.000000" High="100.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
											<Success />
										</DistanceGate>
									</Parallel>
								</Subtree>
								<Cleanup canSkip="1">
									<Sequence>
										<LogToConsole LogLevel="Info" Message="&apos;a30 tournament despawn entity&apos;" />
										<Despawn DeSpawnedEntity="$this.id" />
									</Sequence>
								</Cleanup>
							</SubtreeDecorator>
						</Sequence>
					</Else>
				</IsTimeSkipping>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="currentPoint" comment="" />
				<Variable name="waitTimeString" comment="" />
				<Variable name="walkPoint" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-160" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LogToConsole>
								<Despawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Despawn>
							</Sequence>
						</Then>
						<Else>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExecuteLua>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
								<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Init>
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
									</Init>
									<Subtree>
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExecuteLua>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
													</Sequence>
												</ForEach>
											</Loop>
											<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DistanceGate>
										</Parallel>
									</Subtree>
									<Cleanup>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LogToConsole>
											<Despawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Despawn>
										</Sequence>
									</Cleanup>
								</SubtreeDecorator>
							</Sequence>
						</Else>
					</IsTimeSkipping>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="sazkar_moveInLoop" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveAndWaitPoint" is_function="1">
		<Variables>
			<Variable name="movePoint" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="speed" type="enum:movementSpeed" values="enum:movementSpeed.walk" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;TargetPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$movePoint" Data="" />
					</GraphSearch>
					<Loop count="2">
						<Sequence>
							<DistanceCondition Origin="$this.id" ReferencePt="$movePoint" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
								<ExactMove directionType="AlignWithEntity" directionSpecification="$movePoint" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$movePoint" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							</DistanceCondition>
							<GraphSearch Origin="$movePoint" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;next&apos;" prune="true" negprune="unknown" Parent="" Child="$movePoint" Data="" />
							</GraphSearch>
							<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="movePoint" comment="" />
				<Variable name="speed" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
								</DistanceCondition>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_cheeringPositive" is_function="0">
		<Variables>
			<Variable name="entityType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="gender" type="enum:humanGender" values="enum:humanGender.male" isPersistent="0" form="single" />
			<Variable name="spot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="spotType" type="enum:tournamentCrowdSpotType" values="enum:tournamentCrowdSpotType.standing" isPersistent="0" form="single" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Parallel successMode="All" failureMode="Any">
						<RandomGate opensWithChance="0.750000" saveVersion="2">
							<Then canSkip="1">
								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
									<Child canSkip="1">
										<Sequence>
											<HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$gender = $enum:humanGender.female" />
												</Then>
											</HasGenderCheck>
											<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;fanPoint&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="$spot" />
											</GraphSearch>
											<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
												<Child canSkip="1">
													<GraphSearch Origin="$spot" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;leanPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$spot" Data="" />
													</GraphSearch>
												</Child>
												<OnFail canSkip="1">
													<Success />
												</OnFail>
											</FuseBox>
											<GetType WUID="$spot" OutString="$entityType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
											<IfCondition failOnCondition="false" condition="$entityType == &apos;SO&apos;">
												<HasHelpers smartObject="$spot" name="&apos;tournamentCrowd_leaning&apos;" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$spotType = $enum:tournamentCrowdSpotType.leaning" />
													</Then>
												</HasHelpers>
											</IfCondition>
											<ExecuteLua code="local limit &#10; &#10;if data.spotType == enum_tournamentCrowdSpotType.leaning then &#10;    if data.gender == enum_humanGender.female then &#10;        limit = 2 &#10;    else &#10;        limit = 3 &#10;    end &#10;    data.unstanceVariant = &apos;tournamentCrowd_leaning_&apos; .. math.random(limit) &#10;else -- Default type is standing &#10;    if data.gender == enum_humanGender.female then &#10;        limit = 3 &#10;    else &#10;        limit = 6 &#10;    end &#10;    data.unstanceVariant = &apos;tournamentCrowd_standing_&apos; .. math.random(limit) &#10;end" />
											<Sequence>
												<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" skipInLOD="false" />
												<AnimationAction fragment="&apos;TournamentCrowdHappy&apos;" tags="$unstanceVariant" eventReferenceObject="" alignObject="" slaveObject="" />
												<WaitAction />
											</Sequence>
										</Sequence>
									</Child>
									<OnSuccess canSkip="1">
										<Success />
									</OnSuccess>
								</FuseBox>
							</Then>
							<Else canSkip="1">
								<Success />
							</Else>
						</RandomGate>
						<RandomGate opensWithChance="0.750000" saveVersion="2">
							<Then canSkip="1">
								<Function_speech_monolog alias="$data" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="true" nodeLabel="74190635" />
							</Then>
							<Else canSkip="1">
								<Success />
							</Else>
						</RandomGate>
					</Parallel>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<While doFail="false" propagateChildFail="false" condition="true" />
			<UnstanceElement unstance="$unstanceVariant" locationObject="$spot" slaveObject="" />
		</ForestContainer>
		<EditorData Signature="stringData" EventSet="endNotification">
			<Variables>
				<Variable name="entityType" comment="" />
				<Variable name="gender" comment="" />
				<Variable name="spot" comment="" />
				<Variable name="spotType" comment="" />
				<Variable name="unstanceVariant" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Child>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
												</HasGenderCheck>
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AnyLinkFilter>
												</GraphSearch>
												<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Child>
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
													</Child>
													<OnFail>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</OnFail>
												</FuseBox>
												<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetType>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<HasHelpers hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
													</HasHelpers>
												</IfCondition>
												<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExecuteLua>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
													<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<OutputBreakpoints />
													</AnimationAction>
													<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</WaitAction>
												</Sequence>
											</Sequence>
										</Child>
										<OnSuccess>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</OnSuccess>
									</FuseBox>
								</Then>
								<Else>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Else>
							</RandomGate>
							<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_monolog>
								</Then>
								<Else>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Else>
							</RandomGate>
						</Parallel>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<While editorPosX="1390" editorPosY="500" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</While>
				<UnstanceElement editorPosX="1620" editorPosY="410" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</UnstanceElement>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_cheeringNegative" is_function="0">
		<Variables>
			<Variable name="entityType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="gender" type="enum:humanGender" values="enum:humanGender.male" isPersistent="0" form="single" />
			<Variable name="spot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="spotType" type="enum:tournamentCrowdSpotType" values="enum:tournamentCrowdSpotType.standing" isPersistent="0" form="single" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Parallel successMode="All" failureMode="Any">
						<RandomGate opensWithChance="0.750000" saveVersion="2">
							<Then canSkip="1">
								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
									<Child canSkip="1">
										<Sequence>
											<Parallel successMode="All" failureMode="Any">
												<RandomGate opensWithChance="0.750000" saveVersion="2">
													<Then canSkip="1">
														<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
															<Child canSkip="1">
																<Sequence>
																	<HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$gender = $enum:humanGender.female" />
																		</Then>
																	</HasGenderCheck>
																	<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;fanPoint&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="$spot" />
																	</GraphSearch>
																	<GetType WUID="$spot" OutString="$entityType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
																	<IfCondition failOnCondition="false" condition="$entityType == &apos;SO&apos;">
																		<HasHelpers smartObject="$spot" name="&apos;tournamentCrowd_leaning&apos;" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$spotType = $enum:tournamentCrowdSpotType.leaning" />
																			</Then>
																		</HasHelpers>
																	</IfCondition>
																	<ExecuteLua code="local limit &#10; &#10;if data.spotType == enum_tournamentCrowdSpotType.leaning then &#10;    if data.gender == enum_humanGender.female then &#10;        limit = 2 &#10;    else &#10;        limit = 3 &#10;    end &#10;    data.unstanceVariant = &apos;tournamentCrowd_leaning_&apos; .. math.random(limit) &#10;else -- Default type is standing &#10;    if data.gender == enum_humanGender.female then &#10;        limit = 3 &#10;    else &#10;        limit = 6 &#10;    end &#10;    data.unstanceVariant = &apos;tournamentCrowd_standing_&apos; .. math.random(limit) &#10;end" />
																	<UnstanceAction unstance="$unstanceVariant" locationObject="$spot" slaveObject="" />
																	<Sequence>
																		<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
																		<UnstanceElement unstance="$unstanceVariant" locationObject="$spot" slaveObject="">
																			<AnimationAction fragment="&apos;TournamentCrowdSad&apos;" tags="$unstanceVariant" eventReferenceObject="" alignObject="" slaveObject="" />
																		</UnstanceElement>
																	</Sequence>
																</Sequence>
															</Child>
															<OnSuccess canSkip="1">
																<Success />
															</OnSuccess>
														</FuseBox>
													</Then>
													<Else canSkip="1">
														<Success />
													</Else>
												</RandomGate>
												<RandomGate opensWithChance="0.750000" saveVersion="2">
													<Then canSkip="1">
														<Function_speech_monolog alias="$data" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="true" nodeLabel="47182426" />
													</Then>
													<Else canSkip="1">
														<Success />
													</Else>
												</RandomGate>
											</Parallel>
											<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
										</Sequence>
									</Child>
									<OnSuccess canSkip="1">
										<Success />
									</OnSuccess>
								</FuseBox>
							</Then>
							<Else canSkip="1">
								<Success />
							</Else>
						</RandomGate>
						<RandomGate opensWithChance="0.750000" saveVersion="2">
							<Then canSkip="1">
								<Function_speech_monolog alias="$data" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="true" nodeLabel="12835483" />
							</Then>
							<Else canSkip="1">
								<Success />
							</Else>
						</RandomGate>
					</Parallel>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="empty" EventSet="endData">
			<Variables>
				<Variable name="entityType" comment="" />
				<Variable name="gender" comment="" />
				<Variable name="spot" comment="" />
				<Variable name="spotType" comment="" />
				<Variable name="unstanceVariant" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Child>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Child>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																		</HasGenderCheck>
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AnyLinkFilter>
																		</GraphSearch>
																		<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetType>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<HasHelpers hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																			</HasHelpers>
																		</IfCondition>
																		<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ExecuteLua>
																		<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<OutputBreakpoints />
																		</UnstanceAction>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																			<UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<OutputBreakpoints />
																				</AnimationAction>
																			</UnstanceElement>
																		</Sequence>
																	</Sequence>
																</Child>
																<OnSuccess>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</OnSuccess>
															</FuseBox>
														</Then>
														<Else>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Else>
													</RandomGate>
													<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_monolog>
														</Then>
														<Else>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Else>
													</RandomGate>
												</Parallel>
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</Sequence>
										</Child>
										<OnSuccess>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</OnSuccess>
									</FuseBox>
								</Then>
								<Else>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Else>
							</RandomGate>
							<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_monolog>
								</Then>
								<Else>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Else>
							</RandomGate>
						</Parallel>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reditel_monolog" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_speech_monolog alias="$data" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="true" nodeLabel="47993014" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_speech_monolog>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reditel_waitOnSpot" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
					<Sequence>
						<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="1.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-470" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Move>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reditel_forceChat" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_speech_dialogInitiator alias="$data" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="78076608" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_speech_dialogInitiator>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_winnerWalk" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<IsTimeSkipping saveVersion="2">
						<Then canSkip="1">
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</Then>
						<Else canSkip="1">
							<Sequence>
								<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;khturnaj_winnerwalk&apos;" RunLogic="KeepRunning">
									<Sequence>
										<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
										<SuppressFailure>
											<Selector>
												<AnimationAction fragment="&apos;TournamentWon&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
												<DrawAction WeaponSet="Primary" fullBody="true" tags="&apos;showOff&apos;" useSelectedWeaponSet="false" />
											</Selector>
										</SuppressFailure>
									</Sequence>
								</Synchronize>
								<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
							</Sequence>
						</Else>
					</IsTimeSkipping>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="10" editorPosY="-120" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
									<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AnimationAction>
													<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</DrawAction>
												</Selector>
											</SuppressFailure>
										</Sequence>
									</Synchronize>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</Sequence>
							</Else>
						</IsTimeSkipping>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="player_tournamentCheering" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="integerData" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Switch>
						<IfCondition failOnCondition="false" condition="$integerData == 1">
							<Sequence>
								<DrawAction WeaponSet="Primary" fullBody="true" tags="&apos;showOff&apos;" useSelectedWeaponSet="false" />
								<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$integerData == 2">
							<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
								<Sequence>
									<AnimationAction fragment="&apos;Soldier_Cheers&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
									<WaitAction />
								</Sequence>
							</AnyDecorator>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$integerData == 3">
							<Sequence>
								<AnimationAction fragment="&apos;Greetings&apos;" tags="&apos;bowBig&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								<WaitAction />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$integerData == 4">
							<Sequence>
								<AnimationAction fragment="&apos;Soldier_Cheers&apos;" tags="&apos;player&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								<WaitAction />
							</Sequence>
						</IfCondition>
					</Switch>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="integerInput" EventSet="endNotification">
			<Variables>
				<Variable name="integerData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-280" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</DrawAction>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
									</Sequence>
								</AnyDecorator>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AnimationAction>
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AnimationAction>
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
								</Sequence>
							</IfCondition>
						</Switch>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_addGreetingsRole" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfElseCondition failOnCondition="false" condition="$data" saveVersion="2">
						<Then canSkip="1">
							<ExecuteLua code="entity.soul:AddRoleByName(&apos;TURNAJNICI_KH_TURNAJ_VE_SVETE_VYHRA&apos;)" />
						</Then>
						<Else canSkip="1">
							<ExecuteLua code="entity.soul:AddRoleByName(&apos;TURNAJNICI_KH_TURNAJ_VE_SVETE_PROHRA&apos;)" />
						</Else>
					</IfElseCondition>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="bool" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExecuteLua>
							</Then>
							<Else>
								<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExecuteLua>
							</Else>
						</IfElseCondition>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="beforeFightSync" is_function="0">
		<Variables>
			<Variable name="animationAtStart" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="beforeArenaSpot" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="fightStart" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="integerData" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfElseCondition failOnCondition="false" condition="$this.name ~= &apos;kkut_kumel&apos;" saveVersion="2">
					<Then canSkip="1">
						<IsFastForwarded failOnCondition="false" saveVersion="2">
							<Then canSkip="1">
								<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
							</Then>
							<Else canSkip="1">
								<Sequence>
									<IfElseCondition failOnCondition="false" condition="$fightStart" saveVersion="2">
										<Then canSkip="1">
											<SuppressFailure>
												<RandomGate opensWithChance="0.300000" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;tpReditelSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$beforeArenaSpot" Data="" />
															</GraphSearch>
															<ExactMove directionType="AlignWithEntity" directionSpecification="$beforeArenaSpot" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$beforeArenaSpot" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
															<Expression expressions="$animationAtStart = true" />
															<DrawAction WeaponSet="Primary" fullBody="true" tags="&apos;showOff&apos;" useSelectedWeaponSet="false" />
														</Sequence>
													</Then>
													<Else canSkip="1">
														<Success />
													</Else>
												</RandomGate>
											</SuppressFailure>
										</Then>
										<Else canSkip="1">
											<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
										</Else>
									</IfElseCondition>
									<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
										<Sequence>
											<ActorStateCheck Who="$__player" State="skipTime" FailWithSubtreeMissing="false" saveVersion="2">
												<Then canSkip="1">
													<TeleportAction Position="$wuidData" EndInterruptOnActionStart="false" />
												</Then>
												<Else canSkip="1">
													<ExactMove directionType="AlignWithEntity" directionSpecification="$wuidData" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$wuidData" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
												</Else>
											</ActorStateCheck>
											<IfElseCondition failOnCondition="false" condition="$fightStart" saveVersion="2">
												<Then canSkip="1">
													<SuppressFailure>
														<IfElseCondition failOnCondition="false" condition="$animationAtStart" saveVersion="2">
															<Then canSkip="1">
																<Success />
															</Then>
															<Else canSkip="1">
																<DrawAction WeaponSet="Primary" fullBody="true" tags="&apos;showOff&apos;" useSelectedWeaponSet="false" />
															</Else>
														</IfElseCondition>
													</SuppressFailure>
												</Then>
												<Else canSkip="1">
													<DrawAction WeaponSet="Primary" fullBody="false" tags="" useSelectedWeaponSet="false" />
												</Else>
											</IfElseCondition>
											<ActorStateCheck Who="$__player" State="skipTime" FailWithSubtreeMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
												</Then>
												<Else canSkip="1">
													<Synchronize SemaphoreCount="$integerData" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;50s&apos;" LockManagerType="Local" SemaphoreName="&apos;waitToFight&apos;" RunLogic="KeepRunning">
														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
													</Synchronize>
												</Else>
											</ActorStateCheck>
										</Sequence>
									</AnyDecorator>
								</Sequence>
							</Else>
						</IsFastForwarded>
					</Then>
					<Else canSkip="1">
						<EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
							<Sequence>
								<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
								<ExactMove directionType="AlignWithEntity" directionSpecification="$wuidData" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$wuidData" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<ActorStateCheck Who="$__player" State="skipTime" FailWithSubtreeMissing="false" saveVersion="2">
									<Then canSkip="1">
										<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
									</Then>
									<Else canSkip="1">
										<Synchronize SemaphoreCount="$integerData" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;50s&apos;" LockManagerType="Local" SemaphoreName="&apos;waitToFight&apos;" RunLogic="Halt">
											<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
										</Synchronize>
									</Else>
								</ActorStateCheck>
							</Sequence>
						</EntityContextElement>
					</Else>
				</IfElseCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="kutnohorskyTurnaj_fightSync" EventSet="endNotification">
			<Variables>
				<Variable name="animationAtStart" comment="" />
				<Variable name="beforeArenaSpot" comment="" />
				<Variable name="fightStart" comment="" />
				<Variable name="integerData" comment="" />
				<Variable name="wuidData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-680" editorPosY="-50" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</DrawAction>
								</Then>
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkDataFilter>
																</GraphSearch>
																<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</ExactMove>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</DrawAction>
															</Sequence>
														</Then>
														<Else>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Else>
													</RandomGate>
												</SuppressFailure>
											</Then>
											<Else>
												<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</DrawAction>
											</Else>
										</IfElseCondition>
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</TeleportAction>
													</Then>
													<Else>
														<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExactMove>
													</Else>
												</ActorStateCheck>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Then>
																<Else>
																	<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</DrawAction>
																</Else>
															</IfElseCondition>
														</SuppressFailure>
													</Then>
													<Else>
														<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</DrawAction>
													</Else>
												</IfElseCondition>
												<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Then>
													<Else>
														<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Synchronize>
													</Else>
												</ActorStateCheck>
											</Sequence>
										</AnyDecorator>
									</Sequence>
								</Else>
							</IsFastForwarded>
						</Then>
						<Else>
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
									<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantCallback_empty>
										</Then>
										<Else>
											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</Synchronize>
										</Else>
									</ActorStateCheck>
								</Sequence>
							</EntityContextElement>
						</Else>
					</IfElseCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="beforePlayerFightSync" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<DistanceCondition Origin="$this.id" ReferencePt="$destination" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
						<ExactMove directionType="AlignWithEntity" directionSpecification="$destination" animationTriggerDist="0.150000" precise="true" changeNPCState="true" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					</DistanceCondition>
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;waitToFight&apos;" RunLogic="KeepRunning">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
						</DistanceCondition>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_findSpot" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<AddLink From="$this.id" To="$data" Tag="&apos;fanPoint&apos;" Data="" LinkOpHandleMode="Error" />
					<Synchronize SemaphoreCount="10" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;fansDocked&apos;" RunLogic="KeepRunning">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="60" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AddLink>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_removeGreetingsRole" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExecuteLua code="entity.soul:RemoveRoleByName(&apos;TURNAJNICI_KH_TURNAJ_VE_SVETE_VYHRA&apos;)" />
					<ExecuteLua code="entity.soul:RemoveRoleByName(&apos;TURNAJNICI_KH_TURNAJ_VE_SVETE_PROHRA&apos;)" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="instantDespawn" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Despawn DeSpawnedEntity="$this.id" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="10" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Despawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Despawn>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shuffleArray" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="objectsBefore" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="objectsBefore" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_talkEachother" is_function="0">
		<Variables>
			<Variable name="synchronizeName" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="synchronizeWuid" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="wuidData" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuidDataArray" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$wuidData" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuidData" destinationSpecification2="" destinationSpecification3="" speed="RelaxedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Expression expressions="$synchronizeWuid = $wuidDataArray[0]" />
					<ExecuteLua code="data.synchronizeName = XGenAIModule.GetEntityByWUID(data.synchronizeWuid):GetName()" />
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$synchronizeName&apos;" RunLogic="KeepRunning">
						<IfElseCondition failOnCondition="false" condition="$this.id == $wuidDataArray[0]" saveVersion="2">
							<Then canSkip="1">
								<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.ingameDialogPoseAndAnimations" context="" customParameters="" metarole="&apos;GOSSIP&apos;" preset="$enum:dialogPreset.ingame" recipient="$wuidDataArray[1]" recipientMetaroles="&apos;GOSSIP&apos;" nodeLabel="47310451" />
							</Then>
							<Else canSkip="1">
								<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
							</Else>
						</IfElseCondition>
					</Synchronize>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidDataWuidDataArray" EventSet="">
			<Variables>
				<Variable name="synchronizeName" comment="" />
				<Variable name="synchronizeWuid" comment="" />
				<Variable name="wuidData" comment="" />
				<Variable name="wuidDataArray" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_dialogInitiator>
								</Then>
								<Else>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Else>
							</IfElseCondition>
						</Synchronize>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="nobleFan_leaning" is_function="0">
		<Variables>
			<Variable name="leanSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="pickedSoulInArena" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="cheeringTrigger" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isPositive" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="soulsToLook" type="_wuid" values="" isPersistent="0" form="array" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$data" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;leanSO&apos;" prune="true" negprune="unknown" Parent="" Child="$leanSpot" Data="" />
					</GraphSearch>
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="2.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$leanSpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<Turn target="$leanSpot" align="true" />
					<ExecuteLua code="local limit &#10;limit = 3 &#10;data.unstanceVariant = &apos;tournamentCrowd_leaning_&apos; .. math.random(limit)" />
					<Loop count="-1">
						<Sequence>
							<RandomItem Array="$soulsToLook" Result="$pickedSoulInArena" Clamp="-1" />
							<ForceLook LookTarget="$pickedSoulInArena" DisableVariations="false">
								<Sequence>
									<UnstanceAction unstance="$unstanceVariant" locationObject="$leanSpot" slaveObject="" />
									<RandomGate opensWithChance="0.300000" saveVersion="2">
										<Then canSkip="1">
											<UnstanceElement unstance="$unstanceVariant" locationObject="$leanSpot" slaveObject="" enabled="true">
												<IfGate atomic="false" condition="$cheeringTrigger" RunLogic="KeepRunning">
													<RandomGate opensWithChance="0.600000" saveVersion="2">
														<Then canSkip="1">
															<Sequence>
																<IfElseCondition failOnCondition="false" condition="$isPositive" saveVersion="2">
																	<Then canSkip="1">
																		<AnimationAction fragment="&apos;TournamentCrowdHappy&apos;" tags="$unstanceVariant" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																	</Then>
																	<Else canSkip="1">
																		<AnimationAction fragment="&apos;TournamentCrowdSad&apos;" tags="$unstanceVariant" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																	</Else>
																</IfElseCondition>
																<Expression expressions="$cheeringTrigger = false" />
															</Sequence>
														</Then>
														<Else canSkip="1">
															<Success />
														</Else>
													</RandomGate>
												</IfGate>
											</UnstanceElement>
										</Then>
										<Else canSkip="1">
											<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
										</Else>
									</RandomGate>
								</Sequence>
							</ForceLook>
						</Sequence>
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="kutnohorskyTurnaj_nobleFanCheering" EventSet="">
			<Variables>
				<Variable name="leanSpot" comment="" />
				<Variable name="pickedSoulInArena" comment="" />
				<Variable name="unstanceVariant" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="cheeringTrigger" comment="" />
				<Variable name="data" comment="" />
				<Variable name="isPositive" comment="" />
				<Variable name="soulsToLook" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Turn>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RandomItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</RandomItem>
								<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
										<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AnimationAction>
																		</Then>
																		<Else>
																			<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AnimationAction>
																		</Else>
																	</IfElseCondition>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</Then>
															<Else>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Else>
														</RandomGate>
													</IfGate>
												</UnstanceElement>
											</Then>
											<Else>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Else>
										</RandomGate>
									</Sequence>
								</ForceLook>
							</Sequence>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="createFighterArray" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_dontParticipant" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SuppressFailure>
						<CallBehavior Target="$data" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="85198837" />
					</SuppressFailure>
					<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CallBehavior>
						</SuppressFailure>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_idleActivity" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Selector>
						<CallBehavior Target="$data" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="44762787" />
						<Sequence>
							<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="1.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<RandomGate opensWithChance="0.500000" saveVersion="2">
								<Then canSkip="1">
									<UnstanceAction unstance="waiting_armAkimbo" locationObject="$data" slaveObject="" />
								</Then>
								<Else canSkip="1">
									<UnstanceAction unstance="waiting_armsCrossed" locationObject="$data" slaveObject="" />
								</Else>
							</RandomGate>
						</Sequence>
					</Selector>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="40" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CallBehavior>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
								<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
									</Then>
									<Else>
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
									</Else>
								</RandomGate>
							</Sequence>
						</Selector>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_moveToFanSpot_noSouls" is_function="0">
		<Variables>
			<Variable name="alias" type="_string" values="&apos;&apos;" isPersistent="0" form="single" />
			<Variable name="fanPoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isReactionPositive" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="itsApplause" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="leanSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leaningPointExist" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;fanSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$fanPoint" Data="" />
					</GraphSearch>
					<Function_fan_common_moveToFanSpot currentFanSpot="$fanPoint" fanPoint="$fanPoint" leanSpot="$leanSpot" leaningPointExist="$leaningPointExist" unstanceVariant="$unstanceVariant" nodeLabel="12613018" />
					<Loop count="-1">
						<Sequence>
							<RandomGate opensWithChance="0.500000" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$isReactionPositive = false" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$isReactionPositive = true" />
								</Else>
							</RandomGate>
							<Function_fan_common_leaningSpotDecision alias="$alias" cheeringTrigger="$data" fanPoint="$fanPoint" isReactionPositive="$isReactionPositive" itsApplause="$itsApplause" leanSpot="$leanSpot" leaningPointExist="$leaningPointExist" pickedSoulInArena="$__null" unstanceVariant="$unstanceVariant" nodeLabel="65826893" />
						</Sequence>
					</Loop>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="boolReference" EventSet="">
			<Variables>
				<Variable name="alias" comment="" />
				<Variable name="fanPoint" comment="" />
				<Variable name="isReactionPositive" comment="" />
				<Variable name="itsApplause" comment="" />
				<Variable name="leanSpot" comment="" />
				<Variable name="leaningPointExist" comment="" />
				<Variable name="unstanceVariant" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Function_fan_common_moveToFanSpot hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_fan_common_moveToFanSpot>
						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</RandomGate>
								<Function_fan_common_leaningSpotDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_fan_common_leaningSpotDecision>
							</Sequence>
						</Loop>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_common_moveToFanSpot" is_function="1">
		<Variables>
			<Variable name="gender" type="enum:humanGender" values="$enum:humanGender.male" isPersistent="0" form="single" />
			<Variable name="wuidType" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="currentFanSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="fanPoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="leanSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" optional="1" />
			<Variable name="leaningPointExist" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$fanPoint = $currentFanSpot" />
					<HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$gender = $enum:humanGender.female" />
						</Then>
					</HasGenderCheck>
					<GetType WUID="$currentFanSpot" OutString="$wuidType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
					<IfCondition failOnCondition="false" condition="$wuidType == &apos;SO&apos;">
						<Expression expressions="$leaningPointExist = true" />
					</IfCondition>
					<ExecuteLua code="local limit &#10;local selectedNumber &#10; &#10;--if data.spotType == enum_tournamentCrowdSpotType.leaning then &#10;if data.leaningPointExist == true then &#10;    if data.gender == enum_humanGender.female then &#10;        limit = 2 &#10;    else &#10;        limit = 3 &#10;    end &#10;    data.unstanceVariant = &apos;tournamentCrowd_leaning_&apos; .. math.random(limit) &#10;else -- Default type is standing &#10;    if data.gender == enum_humanGender.female then &#10;        limit = 2 &#10;    else &#10;        limit = 5 &#10;    end &#10;    data.unstanceVariant = &apos;tournamentCrowd_standing_&apos; .. math.random(limit) &#10;end" />
					<Selector>
						<DistanceCondition Origin="$this.id" ReferencePt="$fanPoint" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
							<IfElseCondition failOnCondition="false" condition="$leaningPointExist" saveVersion="2">
								<Then canSkip="1">
									<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.500000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$fanPoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								</Then>
								<Else canSkip="1">
									<ExactMove directionType="AlignWithEntity" directionSpecification="$fanPoint" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$fanPoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								</Else>
							</IfElseCondition>
						</DistanceCondition>
						<Turn target="$fanPoint" align="true" />
					</Selector>
					<WaitAction />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="gender" comment="" />
				<Variable name="wuidType" comment="" />
				<Variable name="currentFanSpot" comment="" />
				<Variable name="fanPoint" comment="" />
				<Variable name="leanSpot" comment="" />
				<Variable name="leaningPointExist" comment="" />
				<Variable name="unstanceVariant" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="20" editorPosY="340" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
						</HasGenderCheck>
						<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetType>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Move>
									</Then>
									<Else>
										<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ExactMove>
									</Else>
								</IfElseCondition>
							</DistanceCondition>
							<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Turn>
						</Selector>
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_wait" is_function="0">
		<Variables>
			<Variable name="fanPoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="unstanceName" type="_string" values="&apos;waiting_armAkimbo&apos;" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$unstanceName = &apos;waiting_holdingArm&apos;" />
						</Then>
					</HasGenderCheck>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;fanPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$fanPoint" Data="" />
					</GraphSearch>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="$unstanceName" locationObject="$fanPoint" slaveObject="" />
					<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="fanPoint" comment="" />
				<Variable name="unstanceName" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
						</HasGenderCheck>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
					</Sequence>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_common_cheerReaction" is_function="1">
		<Variables>
			<Variable name="randomWaitTime" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="cheeringTrigger" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="fanPoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isPositive" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="itsApplause" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfGate atomic="false" condition="$cheeringTrigger" RunLogic="KeepRunning">
					<Sequence>
						<Parallel successMode="All" failureMode="Any">
							<IfElseCondition failOnCondition="false" condition="$itsApplause" saveVersion="2">
								<Then canSkip="1">
									<IfElseCondition failOnCondition="false" condition="$isPositive" saveVersion="2">
										<Then canSkip="1">
											<AnimationAction fragment="&apos;ApplauseHappy&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</Then>
										<Else canSkip="1">
											<AnimationAction fragment="&apos;ApplauseSad&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</Else>
									</IfElseCondition>
								</Then>
								<Else canSkip="1">
									<IfElseCondition failOnCondition="false" condition="$isPositive" saveVersion="2">
										<Then canSkip="1">
											<AnimationAction fragment="&apos;TournamentCrowdHappy&apos;" tags="$unstanceVariant" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</Then>
										<Else canSkip="1">
											<AnimationAction fragment="&apos;TournamentCrowdSad&apos;" tags="$unstanceVariant" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</Else>
									</IfElseCondition>
								</Else>
							</IfElseCondition>
							<SuppressFailure>
								<IfCondition failOnCondition="false" condition="$alias ~= &apos;&apos;">
									<Semaphore SemaphoreCount="6" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;3s&apos;" LockManagerType="Local" SemaphoreName="&apos;mluviciFanousek&apos;">
										<Sequence>
											<ExecuteLua code="data.randomWaitTime = math.random(100, 2000) .. &apos;ms&apos;;" />
											<Wait duration="$randomWaitTime" timeType="GameTime" doFail="false" variation="" />
											<Function_speech_monolog alias="$alias" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="true" nodeLabel="38101182" />
										</Sequence>
									</Semaphore>
								</IfCondition>
							</SuppressFailure>
						</Parallel>
						<Expression expressions="$cheeringTrigger = false" />
					</Sequence>
				</IfGate>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="randomWaitTime" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="cheeringTrigger" comment="" />
				<Variable name="fanPoint" comment="" />
				<Variable name="isPositive" comment="" />
				<Variable name="itsApplause" comment="" />
				<Variable name="unstanceVariant" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="20" editorPosY="50" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</Then>
											<Else>
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</Else>
										</IfElseCondition>
									</Then>
									<Else>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</Then>
											<Else>
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</Else>
										</IfElseCondition>
									</Else>
								</IfElseCondition>
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExecuteLua>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
												<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_monolog>
											</Sequence>
										</Semaphore>
									</IfCondition>
								</SuppressFailure>
							</Parallel>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</IfGate>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fan_common_leaningSpotDecision" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="cheeringTrigger" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="fanPoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isReactionPositive" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="itsApplause" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="leanSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="leaningPointExist" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="pickedSoulInArena" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="unstanceVariant" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Turn target="$fanPoint" align="true" />
					<WaitAction />
					<IfElseCondition failOnCondition="false" condition="$leaningPointExist" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<UnstanceAction unstance="$unstanceVariant" locationObject="$fanPoint" slaveObject="" />
								<UnstanceElement unstance="$unstanceVariant" locationObject="$fanPoint" slaveObject="" enabled="true">
									<Function_fan_common_cheerReaction alias="$alias" cheeringTrigger="$cheeringTrigger" fanPoint="$fanPoint" isPositive="$isReactionPositive" itsApplause="$itsApplause" unstanceVariant="$unstanceVariant" nodeLabel="96792232" />
								</UnstanceElement>
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<UnstanceAction unstance="$unstanceVariant" locationObject="$fanPoint" slaveObject="" />
								<Parallel successMode="Any" failureMode="Any">
									<UnstanceElement unstance="$unstanceVariant" locationObject="$fanPoint" slaveObject="" enabled="true">
										<Function_fan_common_cheerReaction alias="$alias" cheeringTrigger="$cheeringTrigger" fanPoint="$fanPoint" isPositive="$isReactionPositive" itsApplause="$itsApplause" unstanceVariant="$unstanceVariant" nodeLabel="91574944" />
									</UnstanceElement>
									<Loop count="-1">
										<Sequence>
											<IfCondition failOnCondition="false" condition="$pickedSoulInArena ~= $__null">
												<Turn target="$pickedSoulInArena" align="false" />
											</IfCondition>
											<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
										</Sequence>
									</Loop>
								</Parallel>
							</Sequence>
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="alias" comment="" />
				<Variable name="cheeringTrigger" comment="" />
				<Variable name="fanPoint" comment="" />
				<Variable name="isReactionPositive" comment="" />
				<Variable name="itsApplause" comment="" />
				<Variable name="leanSpot" comment="" />
				<Variable name="leaningPointExist" comment="" />
				<Variable name="pickedSoulInArena" comment="" />
				<Variable name="unstanceVariant" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="10" editorPosY="50" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Turn>
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
									<UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_fan_common_cheerReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_fan_common_cheerReaction>
									</UnstanceElement>
								</Sequence>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_fan_common_cheerReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_fan_common_cheerReaction>
										</UnstanceElement>
										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Turn>
												</IfCondition>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</Loop>
									</Parallel>
								</Sequence>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="npc_changeEquip" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ActorStateCheck Who="$__player" State="skipTime" FailWithSubtreeMissing="false" saveVersion="2">
					<Then canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</Then>
					<Else canSkip="1">
						<Sequence>
							<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="3.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<Function_checkChest chest="$data" nodeLabel="14451428" />
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</Sequence>
					</Else>
				</ActorStateCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</Then>
						<Else>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
								<Function_checkChest hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_checkChest>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</Sequence>
						</Else>
					</ActorStateCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="moveAndWaitPointFast" is_function="0">
		<Variables>
			<Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distanceInt" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="movePoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="waitDuration" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="integerData" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;TargetPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$movePoint" Data="" />
					</GraphSearch>
					<DistanceCondition Origin="$this.id" ReferencePt="$movePoint" Low="2.000000" High="2.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
						<Sequence>
							<MeasureDistance position1="$this.id" position2="$movePoint" mode="ThreeDimensions" result="$distance" />
							<Expression expressions="$distance = $distance * 120 - 600" />
							<Round value="$distance" step="1.000000" operation="Nearest" result="$distanceInt" />
							<Concatenation OutString="$waitDuration" Pattern="&apos;$distanceInt;ms&apos;" />
							<WaitAction />
							<Synchronize SemaphoreCount="$integerData" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="true" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;kutnohorskyTurnaj_synchronizedLeaving&apos;" RunLogic="KeepRunning">
								<Success />
							</Synchronize>
							<Wait duration="$waitDuration" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</DistanceCondition>
					<MoveParamsDecorator speed="FastRun" pathFindingParams="" doorClosingPolicy="Automatic">
						<Function_moveAndWaitPoint speed="$enum:movementSpeed.fastRun" nodeLabel="90581462" />
					</MoveParamsDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="integerInput" EventSet="">
			<Variables>
				<Variable name="distance" comment="" />
				<Variable name="distanceInt" comment="" />
				<Variable name="movePoint" comment="" />
				<Variable name="waitDuration" comment="" />
				<Variable name="integerData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</MeasureDistance>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<Round hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Round>
								<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Concatenation>
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Synchronize>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</DistanceCondition>
						<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_moveAndWaitPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_moveAndWaitPoint>
						</MoveParamsDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_animRoundEnd" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SuppressFailure>
						<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
							<IfElseCondition failOnCondition="false" condition="$data" saveVersion="2">
								<Then canSkip="1">
									<AnimationAction fragment="&apos;Soldier_Cheers&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								</Then>
								<Else canSkip="1">
									<AnimationAction fragment="&apos;TournamentLost&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								</Else>
							</IfElseCondition>
						</AnyDecorator>
					</SuppressFailure>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="bool" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="80" editorPosY="-190" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
									</Then>
									<Else>
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
									</Else>
								</IfElseCondition>
							</AnyDecorator>
						</SuppressFailure>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reditel_winnerWalk" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="AlertedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<IsTimeSkipping saveVersion="2">
						<Then canSkip="1">
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</Then>
						<Else canSkip="1">
							<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;30s&apos;" LockManagerType="Local" SemaphoreName="&apos;khturnaj_winnerwalk&apos;" RunLogic="KeepRunning">
								<Sequence>
									<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
								</Sequence>
							</Synchronize>
						</Else>
					</IsTimeSkipping>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</Then>
							<Else>
								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantCallback_empty>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Sequence>
								</Synchronize>
							</Else>
						</IsTimeSkipping>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reditel_monologOnTagpoint" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IsTimeSkipping saveVersion="2">
					<Then canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</Then>
					<Else canSkip="1">
						<Sequence>
							<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="AlertedWalk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<Function_speech_monolog alias="$string" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="true" nodeLabel="71709637" />
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</Sequence>
					</Else>
				</IsTimeSkipping>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-190" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</Then>
						<Else>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
								<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_monolog>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</Sequence>
						</Else>
					</IsTimeSkipping>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_useObject" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExecuteLua code="data.__resource.id = data.wuid" />
					<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
					<SuppressFailure>
						<CallBehavior Target="$wuid" BehaviorName="$string" ignoreDropUnloading="false" nodeLabel="89540100" />
					</SuppressFailure>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints>
									<Breakpoint PortIndex="0" />
								</OutputBreakpoints>
							</CallBehavior>
						</SuppressFailure>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_healing" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<CallBehavior Target="$wuid" BehaviorName="$string" ignoreDropUnloading="false" nodeLabel="89540100" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<SuppressFailure />
		</ForestContainer>
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CallBehavior>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<SuppressFailure editorPosX="390" editorPosY="-100" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</SuppressFailure>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_getHeal" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="firstWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="secondWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExecuteLua code="data.__resource.id = data.secondWuid" />
					<SuppressFailure>
						<CallBehavior Target="$firstWuid" BehaviorName="&apos;use_injured&apos;" ignoreDropUnloading="false" nodeLabel="98207780" />
					</SuppressFailure>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuid_wuid" EventSet="endNotification">
			<Variables>
				<Variable name="firstWuid" comment="" />
				<Variable name="secondWuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CallBehavior>
						</SuppressFailure>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="fighter_getWin" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="3.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<Function_checkChest chest="$data" nodeLabel="72690841" />
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Function_checkChest hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_checkChest>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>