<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="horse_goToSuchdol" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$followFormationParams.formation.speedLimit = $enum:movementSpeed.dash &#10;$followFormationParams.formation.policy = $enum:formationMode.KeepShape" />
					<Function_moveInFormation_inFormation destination="$destination" followFormationParams="$followFormationParams" nodeLabel="69387488" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="zachranaPtacka_ridingToRatbor" EventSet="">
			<Variables>
				<Variable name="destination" comment="" />
				<Variable name="followFormationParams" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Function_moveInFormation_inFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_moveInFormation_inFormation>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="ptacek_makeMeIdleAfterGoingToCorridor" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ActorStateBarrier Who="" ToState="idle" NegateTo="false" RunLogic="KeepRunning">
					<Sequence>
						<Function_speech_interruptIngameDialogs nodeLabel="16737464" />
						<Callback_empty EventName="&apos;OnFinished&apos;" />
					</Sequence>
				</ActorStateBarrier>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="empty" EventSet="endNotification">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_speech_interruptIngameDialogs hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_interruptIngameDialogs>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</Sequence>
					</ActorStateBarrier>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="player_getOnHorse" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExecuteLua code="System.GetEntityByName(data.this.name).human:ForceMount(XGenAIModule.GetEntityIdByWUID(data.data));" />
					<Callback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="40" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="prisoners_movementInMalesov" is_function="1">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="currentDestination" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="movementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="reachedDestination" type="_wuid" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$currentDestination = $destination &#10;$followFormationParams.formation.policy = $enum:formationMode.KeepShape" />
			</OnInit>
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<Sequence>
						<IfCondition failOnCondition="false" condition="$currentDestination ~= $this.id">
							<MoveParamsDecorator speed="$movementSpeed" pathFindingParams="" doorClosingPolicy="LeaveOpened">
								<Selector>
									<DistanceCondition Origin="$this.id" ReferencePt="$currentDestination" Low="15.000000" High="15.000000" Negation="true" ValueOnMiddle="false" failOnCondition="true">
										<IfElseCondition failOnCondition="false" condition="$followFormationParams.formation.leader == $this.id" saveVersion="2">
											<Then canSkip="1">
												<Function_moveInFormation_leader destination="$currentDestination" followEnabled="false" followFormationParams="$followFormationParams" pathOffset="0.500000" successDistance="3.000000" nodeLabel="54040659" />
											</Then>
											<Else canSkip="1">
												<DistanceCondition Origin="$this.id" ReferencePt="$followFormationParams.formation.leader" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="true">
													<IsUnconsciousCheck SoulWUID="$followFormationParams.formation.leader" FailSubtMissing="false" saveVersion="2">
														<Then canSkip="1">
															<Fail />
														</Then>
														<Else canSkip="1">
															<Function_moveInFormation_slave followFormationParams="$followFormationParams" nodeLabel="65110671" />
														</Else>
													</IsUnconsciousCheck>
												</DistanceCondition>
											</Else>
										</IfElseCondition>
									</DistanceCondition>
									<DistanceCondition Origin="$this.id" ReferencePt="$currentDestination" Low="1.000000" High="1.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
										<ExactMove directionType="AlignWithEntity" directionSpecification="$currentDestination" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$currentDestination" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</DistanceCondition>
								</Selector>
							</MoveParamsDecorator>
						</IfCondition>
						<Expression expressions="$reachedDestination = $currentDestination" />
					</Sequence>
					<IfGate atomic="false" condition="$currentDestination ~= $destination" RunLogic="KeepRunning">
						<Success />
					</IfGate>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="currentDestination" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="followFormationParams" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="reachedDestination" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="50" editorPosY="620" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DistanceCondition hasInputBreakpoint="0" comment="NPC will not move in formation if it is close to destination" breakpointFlags="0">
											<OutputBreakpoints />
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Function_moveInFormation_leader hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_moveInFormation_leader>
												</Then>
												<Else>
													<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Fail>
															</Then>
															<Else>
																<Function_moveInFormation_slave hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_moveInFormation_slave>
															</Else>
														</IsUnconsciousCheck>
													</DistanceCondition>
												</Else>
											</IfElseCondition>
										</DistanceCondition>
										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
										</DistanceCondition>
									</Selector>
								</MoveParamsDecorator>
							</IfCondition>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</IfGate>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onRequest" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Success />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Success>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onRelease" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Success />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Success>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="prisoners_movementSwitch" is_function="0">
		<Variables>
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="light" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reachedDestination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="seenEntity" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="weapon" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="barkOnMoveStart" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="barkOnMoveStartAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="movementMode" type="enum:zachranaPtacka_prisonersMovementMode" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="unconsciousLeaderBarkAlias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitingAnimation" type="enum:zachranaPtacka_prisonersWaitingAnimation" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="waitingBarkAlias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="withdrawnItemMode" type="enum:zachranaPtacka_prisonersWithdrawnItemMode" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="zachranaPtacka_prisonerEscaping" target="">
					<Parallel successMode="Any" failureMode="Any">
						<ContinuousSwitch>
							<IfCondition failOnCondition="false" condition="$reachedDestination == $__null">
								<UrgencyDecorator Urgency="Slow">
									<Parallel successMode="Any" failureMode="Any">
										<Selector>
											<IfCondition failOnCondition="true" condition="$destination ~= $this.id &amp; &#10;$withdrawnItemMode == $enum:zachranaPtacka_prisonersWithdrawnItemMode.Weapon">
												<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="zachranaPtacka_prisonerWeapon" useDecision="true" enabled="true" saveVersion="2">
													<Search canSkip="1">
														<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
													</Search>
													<Exec canSkip="1">
														<Sequence>
															<IfCondition failOnCondition="false" condition="$followFormationParams.formation.leader ~= $this.id">
																<Sequence>
																	<WaitAction />
																	<DistanceGate Origin="$this.id" ReferencePt="$followFormationParams.formation.leader" Low="4.000000" High="4.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
																		<Turn target="$followFormationParams.formation.leader" align="false" />
																	</DistanceGate>
																</Sequence>
															</IfCondition>
															<Function_prisoners_movementInMalesov destination="$destination" followFormationParams="$followFormationParams" movementSpeed="$enum:movementSpeed.run" reachedDestination="$reachedDestination" nodeLabel="16555494" />
														</Sequence>
													</Exec>
												</HandContentElement>
											</IfCondition>
											<Sequence>
												<IfCondition failOnCondition="false" condition="$withdrawnItemMode == $enum:zachranaPtacka_prisonersWithdrawnItemMode.TorchBeforeMovement">
													<HandContentElement hand="Left" item="$light" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="lightSource" useDecision="true" enabled="true" saveVersion="2">
														<Search canSkip="1">
															<GetLightSourceItem Item="$light" />
														</Search>
														<Exec canSkip="1">
															<EntityContext context="HighVisibilityTorch" target="">
																<Sequence>
																	<WaitAction />
																	<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																</Sequence>
															</EntityContext>
														</Exec>
													</HandContentElement>
												</IfCondition>
												<Function_prisoners_movementInMalesov destination="$destination" followFormationParams="$followFormationParams" movementSpeed="$enum:movementSpeed.run" reachedDestination="$reachedDestination" nodeLabel="14514737" />
											</Sequence>
										</Selector>
										<Sequence>
											<IfCondition failOnCondition="false" condition="$barkOnMoveStart">
												<SuppressFailure>
													<Sequence>
														<IfCondition failOnCondition="false" condition="$followFormationParams.formation.leader ~= $this.id">
															<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
														</IfCondition>
														<Function_speech_schedulerMonolog alias="$barkOnMoveStartAlias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="75331979" />
													</Sequence>
												</SuppressFailure>
											</IfCondition>
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</Sequence>
									</Parallel>
								</UrgencyDecorator>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$reachedDestination ~= $__null">
								<Parallel successMode="Any" failureMode="Any">
									<Switch>
										<IfCondition failOnCondition="false" condition="$waitingAnimation == $enum:zachranaPtacka_prisonersWaitingAnimation.Kneel">
											<Loop count="-1">
												<Sequence>
													<UnstanceAction unstance="zachranaPtacka_kneel" locationObject="$destination" slaveObject="" />
													<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Sequence>
											</Loop>
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$waitingAnimation == $enum:zachranaPtacka_prisonersWaitingAnimation.WaitingNervous">
											<Loop count="-1">
												<Sequence>
													<UnstanceAction unstance="waiting_nervous_armOnChin" locationObject="$destination" slaveObject="" />
													<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Sequence>
											</Loop>
										</IfCondition>
										<DefaultBranch>
											<Loop count="-1">
												<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
													<Sequence>
														<WaitAction />
														<Turn target="$destination" align="true" />
														<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
													</Sequence>
												</StanceElement>
											</Loop>
										</DefaultBranch>
									</Switch>
									<ForceLook LookTarget="$__player" DisableVariations="false">
										<Sequence>
											<LoopUntil until="Success" attemptCount="0">
												<RelationContext context="PerceptionPriorityBoost" source="$this.id" target="$__player">
													<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$seenEntity" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
														<IfCondition failOnCondition="true" condition="$seenEntity.perceptible == $__player">
															<Function_speech_schedulerMonolog alias="$waitingBarkAlias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="96373700" />
														</IfCondition>
													</ProcessMessage>
												</RelationContext>
											</LoopUntil>
											<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="&apos;5s&apos;" />
										</Sequence>
									</ForceLook>
									<IfGate atomic="false" condition="$reachedDestination ~= $destination" RunLogic="KeepRunning">
										<Expression expressions="$reachedDestination = $__null" />
									</IfGate>
								</Parallel>
							</IfCondition>
						</ContinuousSwitch>
						<Sequence>
							<IfCondition failOnCondition="false" condition="$followFormationParams.formation.leader ~= $this.id">
								<DeadUnconsciousGate Who="$followFormationParams.formation.leader" State="Unconscious" Negation="false" RunLogic="KeepRunning">
									<SuppressFailure>
										<Function_speech_monolog alias="$unconsciousLeaderBarkAlias" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__player" metarole="" target="$this.id" wait="false" nodeLabel="50583276" />
									</SuppressFailure>
								</DeadUnconsciousGate>
							</IfCondition>
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</Parallel>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfCondition failOnCondition="false" condition="$movementMode == $enum:zachranaPtacka_prisonersMovementMode.Sneak &amp; &#10;$reachedDestination == $__null" />
			<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="&apos;inventory&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
				<ItemClassFilter ClassId="" Category="&apos;melee_weapon.*.*&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
				<ItemParamFilter Param="Equip" Source="Child" prune="true" negprune="unknown" Parent="" Child="$weapon" />
			</GraphSearch>
			<ClearInbox inbox="&apos;perceptionInfo&apos;" type="&apos;perceptionInfo&apos;" condition="" />
		</ForestContainer>
		<EditorData Signature="zachranaPtacka_movementInMalesov" EventSet="">
			<Variables>
				<Variable name="leftHandItem" comment="" />
				<Variable name="light" comment="" />
				<Variable name="reachedDestination" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="seenEntity" comment="" />
				<Variable name="weapon" comment="" />
				<Variable name="barkOnMoveStart" comment="" />
				<Variable name="barkOnMoveStartAlias" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="followFormationParams" comment="" />
				<Variable name="movementMode" comment="" />
				<Variable name="unconsciousLeaderBarkAlias" comment="" />
				<Variable name="waitingAnimation" comment="" />
				<Variable name="waitingBarkAlias" comment="" />
				<Variable name="withdrawnItemMode" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Search>
															<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetWeaponsFromWeaponSet>
														</Search>
														<Exec>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</WaitAction>
																		<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Turn>
																		</DistanceGate>
																	</Sequence>
																</IfCondition>
																<Function_prisoners_movementInMalesov hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_prisoners_movementInMalesov>
															</Sequence>
														</Exec>
													</HandContentElement>
												</IfCondition>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Search>
																<GetLightSourceItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetLightSourceItem>
															</Search>
															<Exec>
																<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</WaitAction>
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																	</Sequence>
																</EntityContext>
															</Exec>
														</HandContentElement>
													</IfCondition>
													<Function_prisoners_movementInMalesov hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_prisoners_movementInMalesov>
												</Sequence>
											</Selector>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
															</IfCondition>
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</Sequence>
													</SuppressFailure>
												</IfCondition>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</Parallel>
									</UrgencyDecorator>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</UnstanceAction>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</Loop>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</UnstanceAction>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</Loop>
											</IfCondition>
											<DefaultBranch>
												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</WaitAction>
															<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Turn>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
													</StanceElement>
												</Loop>
											</DefaultBranch>
										</Switch>
										<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RelationContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_speech_schedulerMonolog>
															</IfCondition>
														</ProcessMessage>
													</RelationContext>
												</LoopUntil>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</ForceLook>
										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfGate>
									</Parallel>
								</IfCondition>
							</ContinuousSwitch>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_monolog>
										</SuppressFailure>
									</DeadUnconsciousGate>
								</IfCondition>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</Parallel>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest>
				<IfCondition editorPosX="450" editorPosY="-480" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</IfCondition>
				<GraphSearch editorPosX="3920" editorPosY="-1460" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<ItemClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ItemClassFilter>
					<ItemParamFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ItemParamFilter>
				</GraphSearch>
				<ClearInbox editorPosX="2150" editorPosY="310" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</ClearInbox>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="ofka_showPlayerHisBed" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
							<Sequence>
								<Selector>
									<DistanceCondition Origin="$this.id" ReferencePt="$wuid" Low="2.000000" High="2.000000" Negation="true" ValueOnMiddle="false" failOnCondition="true">
										<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
											<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
										</MoveParamsDecorator>
									</DistanceCondition>
									<Turn target="$__player" align="false" />
								</Selector>
								<ForceLook LookTarget="$__player" DisableVariations="false">
									<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" metarole="" subtitlesDown="false" nodeLabel="66985210" />
								</ForceLook>
							</Sequence>
						</DistanceCondition>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExactMove>
											</MoveParamsDecorator>
										</DistanceCondition>
										<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Turn>
									</Selector>
									<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerMonolog>
									</ForceLook>
								</Sequence>
							</DistanceCondition>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="gluttonDeliverer_goForFood" is_function="0">
		<Variables>
			<Variable name="itemAmountInStash" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="firstWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="secondWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
						<ExactMove directionType="AlignWithEntity" directionSpecification="$firstWuid" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$firstWuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					</MoveParamsDecorator>
					<Function_getItemAmountInInventory inventoryToSearch="$secondWuid" itemClassId="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" itemAmountInInventory="$itemAmountInStash" nodeLabel="39306769" />
					<SuppressFailure>
						<IfElseCondition failOnCondition="false" condition="$itemAmountInStash &gt;= 2" saveVersion="2">
							<Then canSkip="1">
								<Parallel successMode="All" failureMode="Any">
									<AnimationAction fragment="&apos;Quest_FakePick&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
									<Function_speech_schedulerMonolog alias="&apos;zachranaPtacka_vojakBarkyNaKlobasy&apos;" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="61166560" />
								</Parallel>
							</Then>
							<Else canSkip="1">
								<Function_speech_schedulerMonolog alias="&apos;zachranaPtacka_vojakBarkNaChybejiciKlobasy&apos;" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="96435812" />
							</Else>
						</IfElseCondition>
					</SuppressFailure>
					<AtomicDecorator>
						<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
							<Child canSkip="1">
								<MoveItem Item="" ItemGUID="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" Source="$secondWuid" Target="$this.id" Amount="2" FailOnDoesntExist="true" NotifyUI="false" MovedItem="" ChangeOwnership="true" />
							</Child>
							<OnSuccess canSkip="1">
								<InstantCallback_empty EventName="&apos;Success&apos;" />
							</OnSuccess>
							<OnFail canSkip="1">
								<InstantCallback_empty EventName="&apos;Fail&apos;" />
							</OnFail>
						</FuseBox>
					</AtomicDecorator>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<GraphSearch Origin="$__resource.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
				<LinkTagFilter tag="&apos;stash&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
				<Nodalyzer Quantifiers="Exists" Parent="" Child="$stash" saveVersion="2" />
			</GraphSearch>
			<Function_checkChest chest="$stash" nodeLabel="46315418" />
			<Parallel successMode="All" failureMode="Any" />
			<UnstanceAction unstance="LookingForSt" locationObject="$firstWuid" slaveObject="" />
		</ForestContainer>
		<EditorData Signature="wuid_wuid" EventSet="resultNotificationAtomic">
			<Variables>
				<Variable name="itemAmountInStash" comment="" />
				<Variable name="firstWuid" comment="" />
				<Variable name="secondWuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-300" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
						</MoveParamsDecorator>
						<Function_getItemAmountInInventory hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_getItemAmountInInventory>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
										<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerMonolog>
									</Parallel>
								</Then>
								<Else>
									<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_schedulerMonolog>
								</Else>
							</IfElseCondition>
						</SuppressFailure>
						<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</MoveItem>
								</Child>
								<OnSuccess>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</OnSuccess>
								<OnFail>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</OnFail>
							</FuseBox>
						</AtomicDecorator>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<GraphSearch editorPosX="950" editorPosY="-530" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</LinkTagFilter>
					<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
					</Nodalyzer>
				</GraphSearch>
				<Function_checkChest editorPosX="790" editorPosY="-630" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_checkChest>
				<Parallel editorPosX="300" editorPosY="-490" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Parallel>
				<UnstanceAction editorPosX="770" editorPosY="-440" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</UnstanceAction>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="glutton_reportNoMoreFood" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="false" changeNPCState="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Callback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="getItemAmountInInventory" is_function="1">
		<Variables>
			<Variable name="currentItemAmountInStack" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="currentItemStack" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="inventory" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="itemsInInventory" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="inventoryToSearch" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="itemAmountInInventory" type="_int" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="itemClassId" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$inventoryToSearch" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="&apos;inventory&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<ItemClassFilter ClassId="$itemClassId" Category="" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$itemsInInventory" saveVersion="2" />
					</GraphSearch>
					<IfElseCondition failOnCondition="false" condition="#itemsInInventory &gt; 0" saveVersion="2">
						<Then canSkip="1">
							<ForEach startIndex="0" step="1" array="$itemsInInventory" iterator="" value="$currentItemStack" break="">
								<Sequence>
									<GetItemProperty itemId="$currentItemStack" property="Amount" result="$currentItemAmountInStack" />
									<Expression expressions="$itemAmountInInventory += $currentItemAmountInStack" />
								</Sequence>
							</ForEach>
						</Then>
						<Else canSkip="1">
							<Expression expressions="$itemAmountInInventory = 0" />
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="currentItemAmountInStack" comment="" />
				<Variable name="currentItemStack" comment="" />
				<Variable name="inventory" comment="" />
				<Variable name="itemsInInventory" comment="" />
				<Variable name="inventoryToSearch" comment="" />
				<Variable name="itemAmountInInventory" comment="" />
				<Variable name="itemClassId" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ItemClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ItemClassFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetItemProperty>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
								</ForEach>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="glutton_eatFood" is_function="0">
		<Variables>
			<Variable name="itemToEat" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
					<Sequence>
						<EntityContext context="crime_delayPoisoningReactionUntilContextRemoved" target="">
							<LoopUntil until="Fail" attemptCount="0">
								<Sequence>
									<GetItem InventoryHost="" ItemGUID="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" ItemCategory="" FailIfNotFound="true" ItemOut="$itemToEat" AmountOut="" />
									<UseItem item="$itemToEat" count="1" bodyPartId="-1" combineWithItem="$__null" />
									<UnstanceAction unstance="specialSittingActivity_male_table_eatingSausage" locationObject="" slaveObject="" />
									<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
									<UrgencyDecorator Urgency="Slow">
										<WaitAction />
									</UrgencyDecorator>
								</Sequence>
							</LoopUntil>
						</EntityContext>
						<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;20s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;foodEatenLock&apos;" RunLogic="KeepRunning">
							<IfElseCondition failOnCondition="false" condition="$data == $this.id" saveVersion="2">
								<Then canSkip="1">
									<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
								</Then>
								<Else canSkip="1">
									<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
								</Else>
							</IfElseCondition>
						</Synchronize>
					</Sequence>
				</StanceElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="endNotification">
			<Variables>
				<Variable name="itemToEat" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetItem>
										<UseItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UseItem>
										<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</UnstanceAction>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
										<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
										</UrgencyDecorator>
									</Sequence>
								</LoopUntil>
							</EntityContext>
							<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantCallback_empty>
									</Then>
									<Else>
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</Else>
								</IfElseCondition>
							</Synchronize>
						</Sequence>
					</StanceElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="gluttonDeliverer_initiateDialog" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false">
					<Sequence>
						<WaitAction />
						<LoopUntil until="Success" attemptCount="0">
							<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
								<Child canSkip="1">
									<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;gluttonsFeastLock&apos;" RunLogic="KeepRunning">
										<Success />
									</Synchronize>
								</Child>
								<OnFail canSkip="1">
									<EntityContextCheck context="zachranaPtacka_gluttonFeasts" target="$wuid" saveVersion="2">
										<Then canSkip="1">
											<Fail />
										</Then>
										<Else canSkip="1">
											<InstantCallback_empty EventName="&apos;Fail&apos;" />
										</Else>
									</EntityContextCheck>
								</OnFail>
							</FuseBox>
						</LoopUntil>
						<Function_speech_schedulerPolylog_initiator alias="$string" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" customParameters="" metarole="" participants="$wuid" participantsMetaroles="" preset="$enum:dialogPreset.ingame" nodeLabel="54713713" />
						<Callback_empty EventName="&apos;Success&apos;" />
					</Sequence>
				</StanceElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="resultNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Synchronize>
									</Child>
									<OnFail>
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</Then>
											<Else>
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</Else>
										</EntityContextCheck>
									</OnFail>
								</FuseBox>
							</LoopUntil>
							<Function_speech_schedulerPolylog_initiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_schedulerPolylog_initiator>
							<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Callback_empty>
						</Sequence>
					</StanceElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="gluttonReceiver_receiveDialog" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="zachranaPtacka_gluttonFeasts" target="">
					<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false">
						<Sequence>
							<WaitAction />
							<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;gluttonsFeastLock&apos;" RunLogic="KeepRunning">
								<Function_speech_schedulerPolylog_receiver aliasOrMetarole="$string" initiator="$wuid" numberOfParticipants="2" nodeLabel="56245228" />
							</Synchronize>
						</Sequence>
					</StanceElement>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_speech_schedulerPolylog_receiver hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_schedulerPolylog_receiver>
								</Synchronize>
							</Sequence>
						</StanceElement>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="gluttonDeliverer_deliverFood" is_function="0">
		<Variables>
			<Variable name="kielbasasAmountInDelivererInventory" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="kielbasasAmountInReceiverInventory" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="deliverySpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="soulExpectingDelivery" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
						<ExactMove directionType="AlignWithEntity" directionSpecification="$deliverySpot" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$deliverySpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					</MoveParamsDecorator>
					<LoopUntil until="Success" attemptCount="0">
						<FuseBox StatusPropagation="CleanUp" OneCleanup="false" saveVersion="2">
							<Child canSkip="1">
								<Sequence>
									<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="true" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;gluttonsFeastLock&apos;" RunLogic="KeepRunning">
										<Sequence>
											<Function_getItemAmountInInventory inventoryToSearch="$this.id" itemClassId="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" itemAmountInInventory="$kielbasasAmountInDelivererInventory" nodeLabel="31381519" />
											<IfCondition failOnCondition="false" condition="$kielbasasAmountInDelivererInventory &gt;= 2">
												<MoveItem Item="" ItemGUID="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" Source="$this.id" Target="$soulExpectingDelivery" Amount="1" FailOnDoesntExist="false" NotifyUI="false" MovedItem="" ChangeOwnership="true" />
											</IfCondition>
										</Sequence>
									</Synchronize>
									<Function_getItemAmountInInventory inventoryToSearch="$soulExpectingDelivery" itemClassId="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" itemAmountInInventory="$kielbasasAmountInReceiverInventory" nodeLabel="91079794" />
									<IfCondition failOnCondition="false" condition="$kielbasasAmountInReceiverInventory &gt;= 1">
										<AnimationAction fragment="&apos;Quest_FakePlace&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
									</IfCondition>
								</Sequence>
							</Child>
							<OnSuccess canSkip="1">
								<AtomicDecorator>
									<Sequence>
										<Function_getItemAmountInInventory inventoryToSearch="$this.id" itemClassId="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" itemAmountInInventory="$kielbasasAmountInDelivererInventory" nodeLabel="26814925" />
										<Function_getItemAmountInInventory inventoryToSearch="$soulExpectingDelivery" itemClassId="&apos;29a4f58e-6e00-4f9c-9273-1a76e0eccff0&apos;" itemAmountInInventory="$kielbasasAmountInReceiverInventory" nodeLabel="54659868" />
										<IfElseCondition failOnCondition="false" condition="$kielbasasAmountInReceiverInventory &gt;= 1 | &#10;$kielbasasAmountInDelivererInventory &gt;= 1" saveVersion="2">
											<Then canSkip="1">
												<InstantCallback_empty EventName="&apos;KielbasasDelivered&apos;" />
											</Then>
											<Else canSkip="1">
												<InstantCallback_empty EventName="&apos;KielbasasLost&apos;" />
											</Else>
										</IfElseCondition>
									</Sequence>
								</AtomicDecorator>
							</OnSuccess>
							<OnFail canSkip="1">
								<EntityContextCheck context="zachranaPtacka_gluttonFeasts" target="$soulExpectingDelivery" saveVersion="2">
									<Then canSkip="1">
										<Fail />
									</Then>
									<Else canSkip="1">
										<InstantCallback_empty EventName="&apos;GluttonMissing&apos;" />
									</Else>
								</EntityContextCheck>
							</OnFail>
						</FuseBox>
					</LoopUntil>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="zachranaPtacka_foodDelivery" EventSet="zachranaPtacka_foodDelivery">
			<Variables>
				<Variable name="kielbasasAmountInDelivererInventory" comment="" />
				<Variable name="kielbasasAmountInReceiverInventory" comment="" />
				<Variable name="deliverySpot" comment="" />
				<Variable name="soulExpectingDelivery" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExactMove>
						</MoveParamsDecorator>
						<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_getItemAmountInInventory hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_getItemAmountInInventory>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</MoveItem>
												</IfCondition>
											</Sequence>
										</Synchronize>
										<Function_getItemAmountInInventory hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_getItemAmountInInventory>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AnimationAction>
										</IfCondition>
									</Sequence>
								</Child>
								<OnSuccess>
									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_getItemAmountInInventory hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_getItemAmountInInventory>
											<Function_getItemAmountInInventory hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_getItemAmountInInventory>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantCallback_empty>
												</Then>
												<Else>
													<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantCallback_empty>
												</Else>
											</IfElseCondition>
										</Sequence>
									</AtomicDecorator>
								</OnSuccess>
								<OnFail>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Fail>
										</Then>
										<Else>
											<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantCallback_empty>
										</Else>
									</EntityContextCheck>
								</OnFail>
							</FuseBox>
						</LoopUntil>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="gluttonReceiver_receiveFood" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="zachranaPtacka_gluttonFeasts" target="">
					<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false">
						<Sequence>
							<WaitAction />
							<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;gluttonsFeastLock&apos;" RunLogic="KeepRunning">
								<Success />
							</Synchronize>
						</Sequence>
					</StanceElement>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Synchronize>
							</Sequence>
						</StanceElement>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="gluttonDeliverer_lamentMissingGlutton" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" metarole="" subtitlesDown="false" nodeLabel="76203486" />
					<Callback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_speech_schedulerMonolog>
						<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="prisoners_getOnHorse" is_function="0">
		<Variables>
			<Variable name="horse" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;useHorse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<LinkDataFilter tag="&apos;useHorse&apos;" condition="$__link_useHorse==$data" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$horse" saveVersion="2" />
					</GraphSearch>
					<StanceElement smartObject="$horse" stance="horse" allowAny="false">
						<Sequence>
							<WaitAction />
							<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;mountUpLock&apos;" RunLogic="KeepRunning">
								<Callback_empty EventName="&apos;OnFinished&apos;" />
							</Synchronize>
						</Sequence>
					</StanceElement>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="endNotification">
			<Variables>
				<Variable name="horse" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkDataFilter>
							<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SoulIsAliveFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Callback_empty>
								</Synchronize>
							</Sequence>
						</StanceElement>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments>
				<Comment text="Az_bude_PostX_tak_se_muze_smazat" posX="430" posY="-470" width="324" height="127" resizeBorderWidth="300" resizeBorderHeight="100" color="0.65,0.65,0.65" author="alexandr.gregor" />
			</Comments>
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="brabant_followPlayer" is_function="0">
		<Variables>
			<Variable name="following" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Parallel successMode="Any" failureMode="Any">
							<ContinuousSwitch>
								<IfCondition failOnCondition="false" condition="$following">
									<Parallel successMode="Any" failureMode="Any">
										<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
											<CrimeFollower Target="$__player" Mode="Default" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="false" />
										</MoveParamsDecorator>
										<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="4.000000" High="4.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
											<Expression expressions="$following = false" />
										</DistanceGate>
									</Parallel>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="true">
									<Parallel successMode="Any" failureMode="Any">
										<Sequence>
											<WaitAction />
											<Loop count="-1">
												<Sequence>
													<Turn target="$__player" align="false" />
													<ForceLook LookTarget="$__player" DisableVariations="false">
														<Sequence>
															<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
															<Function_speech_schedulerMonolog alias="&apos;zachranaPtacka_brabantDlouhoStojim&apos;" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="23085698" />
														</Sequence>
													</ForceLook>
												</Sequence>
											</Loop>
										</Sequence>
										<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="4.000000" High="4.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
											<Expression expressions="$following = true" />
										</DistanceGate>
									</Parallel>
								</IfCondition>
							</ContinuousSwitch>
							<Sequence>
								<IfCondition failOnCondition="false" condition="$data">
									<Sequence>
										<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
											<Function_speech_schedulerMonolog alias="&apos;zachranaPtacka_brabantKdyzHracZvednePtacka&apos;" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="$__player" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="73961504" />
										</DialogGate>
										<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
									</Sequence>
								</IfCondition>
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</Parallel>
					</Child>
					<OnSuccess canSkip="1">
						<Function_speech_schedulerMonolog alias="&apos;zachranaPtacka_brabantKdyzHracPoloziPtacka&apos;" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="62995117" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="boolReference" EventSet="endNotification">
			<Variables>
				<Variable name="following" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</CrimeFollower>
											</MoveParamsDecorator>
											<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</DistanceGate>
										</Parallel>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WaitAction>
												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Turn>
														<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
																<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_speech_schedulerMonolog>
															</Sequence>
														</ForceLook>
													</Sequence>
												</Loop>
											</Sequence>
											<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</DistanceGate>
										</Parallel>
									</IfCondition>
								</ContinuousSwitch>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</DialogGate>
											<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantCallback_empty>
										</Sequence>
									</IfCondition>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</Parallel>
						</Child>
						<OnSuccess>
							<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_schedulerMonolog>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wait" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootFromSpot" is_function="0">
		<Variables>
			<Variable name="battlements" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
						</Search>
						<Exec canSkip="1">
							<Sequence>
								<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="FastRun" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<EntityContext context="combat_unlimitedMissileRange" target="">
									<EntityContext context="combat_missileAttackerIgnoreTrajectoryCollision" target="">
										<EntityContext context="BattleShooter" target="">
											<MeleeOffenseAutomationDecorator active="true">
												<WeaponAutomationDecorator WeaponChange="missile" active="true">
													<CombatAction TargetNPC="$__player" RelationOverride="None" />
												</WeaponAutomationDecorator>
											</MeleeOffenseAutomationDecorator>
										</EntityContext>
									</EntityContext>
								</EntityContext>
							</Sequence>
						</Exec>
					</HandContentElement>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="battlements" comment="" />
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetWeaponsFromWeaponSet>
							</Search>
							<Exec>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</CombatAction>
													</WeaponAutomationDecorator>
												</MeleeOffenseAutomationDecorator>
											</EntityContext>
										</EntityContext>
									</EntityContext>
								</Sequence>
							</Exec>
						</HandContentElement>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="stayInSafeSpot" is_function="0">
		<Variables>
			<Variable name="currentDistanceToSafeSpot" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="currentSafeSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="distanceToSafeSpot" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="safeSpot" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="safeSpots" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="towerArea" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="towerSafeSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="crime_keepState" enabled="true">
					<Sequence>
						<Selector>
							<IsInsideArea Origin="$this.id" Area="$towerArea" FailSubtMissing="true" saveVersion="2">
								<Then canSkip="1">
									<IsInsideArea Origin="$__player" Area="$towerArea" FailSubtMissing="true" saveVersion="2">
										<Else canSkip="1">
											<Expression expressions="$safeSpot = $towerSafeSpot" />
										</Else>
									</IsInsideArea>
								</Then>
							</IsInsideArea>
							<ForEach startIndex="0" step="1" array="$safeSpots" iterator="" value="$currentSafeSpot" break="">
								<Sequence>
									<MeasureDistance position1="$this.id" position2="$currentSafeSpot" mode="ThreeDimensions" result="$currentDistanceToSafeSpot" />
									<IfCondition failOnCondition="false" condition="$currentDistanceToSafeSpot &lt; $distanceToSafeSpot | &#10;$distanceToSafeSpot == 0">
										<Expression expressions="$safeSpot = $currentSafeSpot &#10;$distanceToSafeSpot = $currentDistanceToSafeSpot" />
									</IfCondition>
								</Sequence>
							</ForEach>
						</Selector>
						<DistanceCondition Origin="$this.id" ReferencePt="$safeSpot" Low="2.000000" High="2.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
							<ExactMove directionType="AlignWithEntity" directionSpecification="$safeSpot" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$safeSpot" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						</DistanceCondition>
						<HasGenderCheck Gender="Female" SoulWUID="" FailSubtMissing="false" saveVersion="2">
							<Then canSkip="1">
								<UnstanceAction unstance="standingNervous" locationObject="" slaveObject="" />
							</Then>
							<Else canSkip="1">
								<UnstanceAction unstance="Cower" locationObject="" slaveObject="" />
							</Else>
						</HasGenderCheck>
						<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="zachranaPtacka_stayInSafeSpot" EventSet="">
			<Variables>
				<Variable name="currentDistanceToSafeSpot" comment="" />
				<Variable name="currentSafeSpot" comment="" />
				<Variable name="distanceToSafeSpot" comment="" />
				<Variable name="safeSpot" comment="" />
				<Variable name="safeSpots" comment="" />
				<Variable name="towerArea" comment="" />
				<Variable name="towerSafeSpot" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Else>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Else>
										</IsInsideArea>
									</Then>
								</IsInsideArea>
								<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</MeasureDistance>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Sequence>
								</ForEach>
							</Selector>
							<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
							</DistanceCondition>
							<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
								</Then>
								<Else>
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</UnstanceAction>
								</Else>
							</HasGenderCheck>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="kunzlin_readSitting" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
					<Sequence>
						<UnstanceAction unstance="readingSittingWithTable" locationObject="$__resource.id" slaveObject="" />
						<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
				</StanceElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</UnstanceAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</StanceElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="roza_moveAndWait" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<EntityContext context="speech_readyForSwitchDialog" target="">
						<Loop count="-1">
							<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="8.000000" High="8.000000" Negation="false" OpenInMiddle="false" RunLogic="Halt">
								<ForceLook LookTarget="$__player" DisableVariations="true">
									<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
								</ForceLook>
							</DistanceGate>
						</Loop>
					</EntityContext>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
									</ForceLook>
								</DistanceGate>
							</Loop>
						</EntityContext>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="vavak_goBack" is_function="0">
		<Variables>
			<Variable name="leftHandItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandItem" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<HandContentElement hand="Right" item="$rightHandItem" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
							<Search canSkip="1">
								<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHandItem" RightHand="$rightHandItem" UseTorchWhenAppropriate="true" />
							</Search>
							<Exec canSkip="1">
								<Parallel successMode="All" failureMode="Any">
									<Sequence>
										<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
										<MeleeGuardAutomationDecorator GuardMode="freeBlock" active="true">
											<WaitAction />
										</MeleeGuardAutomationDecorator>
									</Sequence>
									<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="" skipInLod="false" subtitlesDown="false" nodeLabel="63614061" />
								</Parallel>
							</Exec>
						</HandContentElement>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="leftHandItem" comment="" />
				<Variable name="rightHandItem" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Search>
									<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetWeaponsFromWeaponSet>
								</Search>
								<Exec>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
											<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WaitAction>
											</MeleeGuardAutomationDecorator>
										</Sequence>
										<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerMonolog>
									</Parallel>
								</Exec>
							</HandContentElement>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="interrupt_fastForwardTurn" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<ExactMove directionType="FromVariable" directionSpecification="$data" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$this.id" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="70" editorPosY="-30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="glutton_goSitAndTalk" is_function="0">
		<Variables>
			<Variable name="amIInitiator" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Expression expressions="$amIInitiator = $participants[0] == $this.id" />
			</OnInit>
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
							<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
								<Parallel successMode="All" failureMode="Any">
									<WaitAction />
									<Function_speech_schedulerPolylog alias="$alias" amIInitiator="$amIInitiator" animationApproach="$enum:animationApproach.tryDialogAnimations" areaForPlayer="" npcs="$participants" nodeLabel="93817260" />
								</Parallel>
							</StanceElement>
						</MoveParamsDecorator>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidArray_string" EventSet="endNotification">
			<Variables>
				<Variable name="amIInitiator" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="participants" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Expression>
				</OnInit>
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Function_speech_schedulerPolylog hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerPolylog>
									</Parallel>
								</StanceElement>
							</MoveParamsDecorator>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="ofka_goToBed" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Parallel successMode="Any" failureMode="Any">
							<DistanceCondition Origin="$this.id" ReferencePt="$wuid" Low="5.000000" High="5.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
								<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
									<Parallel successMode="All" failureMode="Any">
										<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
										<ForceLook LookTarget="$__player" DisableVariations="false">
											<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="" subtitlesDown="false" nodeLabel="63251265" />
										</ForceLook>
									</Parallel>
								</MoveParamsDecorator>
							</DistanceCondition>
							<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="10.000000" High="10.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
								<Success />
							</DistanceGate>
						</Parallel>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExactMove>
											<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</ForceLook>
										</Parallel>
									</MoveParamsDecorator>
								</DistanceCondition>
								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</DistanceGate>
							</Parallel>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="hideAndTalk" is_function="0">
		<Variables>
			<Variable name="alreadyStarted" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="amIInitiator" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="animationApproach" type="enum:animationApproach" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="numberOfParticipants" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="hideSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="waitForDialogEndBeforeUnstance" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="waitingAnimation" type="enum:zachranaPtacka_prisonersWaitingAnimation" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<Expression expressions="$numberOfParticipants = #participants &#10;$amIInitiator = $participants[0] == $this.id" />
					<IfElseCondition failOnCondition="false" condition="$waitForDialogEndBeforeUnstance" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$animationApproach = $enum:animationApproach.tryDialogAnimations" />
						</Then>
						<Else canSkip="1">
							<Expression expressions="$animationApproach = $enum:animationApproach.dontPlayDialogAnimations" />
						</Else>
					</IfElseCondition>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Parallel successMode="All" failureMode="Any">
							<MoveParamsDecorator speed="Walk" pathFindingParams="" doorClosingPolicy="LeaveOpened">
								<Sequence>
									<IfCondition failOnCondition="false" condition="$waitForDialogEndBeforeUnstance">
										<Sequence>
											<FindInArray array="$participants" keyOut="$index" condition="$__value ~= $this.id" />
											<Parallel successMode="Any" failureMode="Any">
												<Sequence>
													<IfCondition failOnCondition="false" condition="!$amIInitiator &amp; &#10;!$alreadyStarted">
														<DistanceGate Origin="$this.id" ReferencePt="$participants[0]" Low="2.200000" High="2.200000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
															<Sequence>
																<Turn target="$hideSpot" align="false" />
																<Expression expressions="$alreadyStarted = true" />
															</Sequence>
														</DistanceGate>
													</IfCondition>
													<Move stopWithinDistance="3.500000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$hideSpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													<ForceLook LookTarget="$participants[$index]" DisableVariations="true">
														<Loop count="-1">
															<Sequence>
																<Turn target="$participants[$index]" align="false" />
																<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
															</Sequence>
														</Loop>
													</ForceLook>
												</Sequence>
												<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;dialogLock&apos;" RunLogic="KeepRunning">
													<Success />
												</Synchronize>
											</Parallel>
										</Sequence>
									</IfCondition>
									<Switch>
										<IfCondition failOnCondition="false" condition="$waitingAnimation == $enum:zachranaPtacka_prisonersWaitingAnimation.Kneel">
											<UnstanceAction unstance="zachranaPtacka_kneel" locationObject="$hideSpot" slaveObject="" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$waitingAnimation == $enum:zachranaPtacka_prisonersWaitingAnimation.WaitingNervous">
											<UnstanceAction unstance="waiting_nervous_armOnChin" locationObject="$hideSpot" slaveObject="" />
										</IfCondition>
										<DefaultBranch>
											<Sequence>
												<Selector>
													<DistanceCondition Origin="$this.id" ReferencePt="$hideSpot" Low="0.500000" High="0.500000" Negation="true" ValueOnMiddle="false" failOnCondition="true">
														<ExactMove directionType="AlignWithEntity" directionSpecification="$hideSpot" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$hideSpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													</DistanceCondition>
													<Turn target="$hideSpot" align="true" />
												</Selector>
												<StanceElement smartObject="" stance="crouch" allowAny="false" enabled="true">
													<WaitAction />
												</StanceElement>
											</Sequence>
										</DefaultBranch>
									</Switch>
									<Synchronize SemaphoreCount="$numberOfParticipants" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;finalPositionLock&apos;" RunLogic="KeepRunning">
										<Success />
									</Synchronize>
								</Sequence>
							</MoveParamsDecorator>
							<Parallel successMode="Any" failureMode="Any">
								<Sequence>
									<Function_speech_schedulerPolylog alias="$alias" amIInitiator="$amIInitiator" animationApproach="$animationApproach" areaForPlayer="" npcs="$participants" nodeLabel="19907017" />
									<IfCondition failOnCondition="false" condition="$waitForDialogEndBeforeUnstance">
										<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;dialogLock&apos;" RunLogic="KeepRunning">
											<Success />
										</Synchronize>
									</IfCondition>
								</Sequence>
								<DeadUnconsciousGate Who="$participants[0]" State="Unconscious" Negation="false" RunLogic="KeepRunning">
									<Success />
								</DeadUnconsciousGate>
							</Parallel>
						</Parallel>
					</Child>
					<OnSuccess canSkip="1">
						<IsUnconsciousCheck SoulWUID="$participants[0]" FailSubtMissing="false" saveVersion="2">
							<Then canSkip="1">
								<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
							</Then>
							<Else canSkip="1">
								<IfCondition failOnCondition="false" condition="$amIInitiator">
									<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
								</IfCondition>
							</Else>
						</IsUnconsciousCheck>
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="zachranaPtacka_hideAndTalk" EventSet="endNotification">
			<Variables>
				<Variable name="alreadyStarted" comment="" />
				<Variable name="amIInitiator" comment="" />
				<Variable name="animationApproach" comment="" />
				<Variable name="index" comment="" />
				<Variable name="numberOfParticipants" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="hideSpot" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="waitForDialogEndBeforeUnstance" comment="" />
				<Variable name="waitingAnimation" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</IfElseCondition>
					</Sequence>
				</OnInit>
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</FindInArray>
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Turn>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</DistanceGate>
														</IfCondition>
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
														<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Turn>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</Loop>
														</ForceLook>
													</Sequence>
													<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Synchronize>
												</Parallel>
											</Sequence>
										</IfCondition>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</UnstanceAction>
											</IfCondition>
											<DefaultBranch>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ExactMove>
														</DistanceCondition>
														<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Turn>
													</Selector>
													<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</WaitAction>
													</StanceElement>
												</Sequence>
											</DefaultBranch>
										</Switch>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Synchronize>
									</Sequence>
								</MoveParamsDecorator>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_speech_schedulerPolylog hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_schedulerPolylog>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Synchronize>
										</IfCondition>
									</Sequence>
									<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DeadUnconsciousGate>
								</Parallel>
							</Parallel>
						</Child>
						<OnSuccess>
							<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</Then>
								<Else>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantCallback_empty>
									</IfCondition>
								</Else>
							</IsUnconsciousCheck>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="brabant_barkOnPlayer" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid_target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="zachranaPtacka_kneel" locationObject="$wuid_target" slaveObject="" />
					<AreaPresenceGate aiObjects="$__player" area="$wuid" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
						<Sequence>
							<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="$__player" metarole="" subtitlesDown="false" nodeLabel="92360746" />
							<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
						</Sequence>
					</AreaPresenceGate>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuid_wuid_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
				<Variable name="wuid_target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</UnstanceAction>
						<AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_speech_schedulerMonolog>
								<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantCallback_empty>
							</Sequence>
						</AreaPresenceGate>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="soldier_guard" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<MoveParamsDecorator speed="Run" pathFindingParams="" doorClosingPolicy="Automatic">
						<Selector>
							<UnstanceAction unstance="halberdierGuard_atAttentionWithLocationObject" locationObject="$__object.id" slaveObject="" />
							<ExactMove directionType="AlignWithEntity" directionSpecification="$__object.id" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
						</Selector>
					</MoveParamsDecorator>
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</UnstanceAction>
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
							</Selector>
						</MoveParamsDecorator>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="roza_barkAndWave" is_function="0">
		<Variables>
			<Variable name="seenEntity" type="perceptionInfo" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<ExactMove directionType="AlignWithEntity" directionSpecification="$wuid" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wuid" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<While doFail="false" propagateChildFail="false" condition="$seenEntity.perceptible ~= $__player">
								<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="8.000000" High="8.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
									<ForceLook LookTarget="$__player" DisableVariations="true">
										<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$seenEntity" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
											<IfCondition failOnCondition="false" condition="$seenEntity.perceptible == $__player">
												<Parallel successMode="All" failureMode="Any">
													<AnimationAction fragment="&apos;GreetingsUpperBody&apos;" tags="&apos;waveSmall&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													<Function_speech_schedulerMonolog alias="$string" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="" subtitlesDown="false" nodeLabel="22893526" />
												</Parallel>
											</IfCondition>
										</ProcessMessage>
									</ForceLook>
								</DistanceGate>
							</While>
						</Sequence>
					</Child>
					<OnSuccess canSkip="1">
						<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="seenEntity" comment="" />
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExactMove>
								<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AnimationAction>
														<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_speech_schedulerMonolog>
													</Parallel>
												</IfCondition>
											</ProcessMessage>
										</ForceLook>
									</DistanceGate>
								</While>
							</Sequence>
						</Child>
						<OnSuccess>
							<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantCallback_empty>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="ptacek_reactOnFailedKnockOut" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<ForceLook LookTarget="$__player" DisableVariations="true">
					<Sequence>
						<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$data" subtitlesDown="false" nodeLabel="89256992" />
						<ActorStateBarrier Who="" ToState="idle" NegateTo="false" RunLogic="KeepRunning">
							<Success />
						</ActorStateBarrier>
					</Sequence>
				</ForceLook>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="stringData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_speech_schedulerMonolog>
							<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</ActorStateBarrier>
						</Sequence>
					</ForceLook>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reactOnFailedKnockOutPredicate" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="shouldOverride" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="stimulusHit" type="switch:stimulus:hit" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$stimulusHit.kind == $enum:crime_attackKind.stealth">
					<Expression expressions="$shouldOverride = true" />
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="shouldOverride" comment="" />
				<Variable name="stimulusHit" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="reactOnFailedKnockOutStimulusOverride" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AddInterrupt_stringData data="&apos;PRATELSKE_NPC_DOSTALO_ZASAH_(MELEE)&apos;" Target="$this.id" Host="$overrideQSO" Behavior="&apos;ptacek_reactOnFailedKnockOut&apos;" Priority="200" IgnorePriorityOnPreviousInterrupt="false" urgency="Slow" Aliveness="Alive" Privileged="false" FastForward="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="overrideQSO" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations>
				<Variable name="overrideQSO" type="_wuid" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
				<Variable name="stimulus" type="switch:stimulus:hit" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
			</ForwardDeclarations>
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AddInterrupt_stringData hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</AddInterrupt_stringData>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="horse_waitOnSpot" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExactMove>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="glutton_sleepOnTable" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
					<AddBuffElement Buff="&apos;cbbedb16-8ab8-4583-b740-a0e8a2521d95&apos;" enabled="true">
						<Sequence>
							<UnstanceAction unstance="SleepOnTable" locationObject="$__resource.id" slaveObject="" />
							<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</AddBuffElement>
				</StanceElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AddBuffElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</UnstanceAction>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</AddBuffElement>
					</StanceElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="standAndBeCool" is_function="0">
		<Variables>
			<Variable name="hand" type="enum:handType" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHandContentEnabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandContentEnabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="weaponSetToUse" type="enum:weaponSet" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="locationObjects" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="npcs" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="unstances" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="weaponSets" type="_string" values="" isPersistent="0" form="array" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<FindInArray array="$npcs" keyOut="$index" condition="$__value == $this.id" />
					<Switch>
						<IfCondition failOnCondition="false" condition="$weaponSets[$index] == &apos;primary&apos;">
							<Expression expressions="$weaponSetToUse = $enum:weaponSet.primary &#10;$hand = $enum:handType.right" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$weaponSets[$index] == &apos;secondary&apos;">
							<Expression expressions="$weaponSetToUse = $enum:weaponSet.secondary &#10;$hand = $enum:handType.left" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$weaponSets[$index] == &apos;oversized&apos;">
							<Expression expressions="$weaponSetToUse = $enum:weaponSet.oversized &#10;$hand = $enum:handType.right" />
						</IfCondition>
						<DefaultBranch>
							<Success />
						</DefaultBranch>
					</Switch>
					<Sequence>
						<IfCondition failOnCondition="false" condition="$weaponSets[$index] == &apos;primary&apos; | &#10;$weaponSets[$index] == &apos;secondary&apos; | &#10;$weaponSets[$index] == &apos;oversized&apos;">
							<Sequence>
								<GetWeaponsFromWeaponSet WeaponSet="$weaponSetToUse" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="false" />
								<Expression expressions="$leftHandContentEnabled = $leftHand ~= $__null &#10;$rightHandContentEnabled = $rightHand ~= $__null" />
							</Sequence>
						</IfCondition>
						<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="$rightHandContentEnabled" saveVersion="2">
							<Search canSkip="1">
								<Success />
							</Search>
							<Exec canSkip="1">
								<HandContentElement hand="Left" item="$leftHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="$leftHandContentEnabled" saveVersion="2">
									<Search canSkip="1">
										<Success />
									</Search>
									<Exec canSkip="1">
										<IfElseCondition failOnCondition="false" condition="$unstances[$index] ~= &apos;none&apos;" saveVersion="2">
											<Then canSkip="1">
												<UnstanceAction unstance="$unstances[$index]" locationObject="$locationObjects[$index]" slaveObject="" />
											</Then>
											<Else canSkip="1">
												<IfElseCondition failOnCondition="false" condition="$weaponSetToUse == $enum:weaponSet.secondary" saveVersion="2">
													<Then canSkip="1">
														<IsWeaponLoaded failOnCondition="false" saveVersion="2">
															<Then canSkip="1">
																<WaitAction />
															</Then>
															<Else canSkip="1">
																<LoadWeaponAction />
															</Else>
														</IsWeaponLoaded>
													</Then>
													<Else canSkip="1">
														<WaitAction />
													</Else>
												</IfElseCondition>
											</Else>
										</IfElseCondition>
									</Exec>
								</HandContentElement>
							</Exec>
						</HandContentElement>
					</Sequence>
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfElseCondition failOnCondition="false" condition="$weaponSets[$index] == &apos;primary&apos; | &#10;$weaponSets[$index] == &apos;secondary&apos; | &#10;$weaponSets[$index] == &apos;oversized&apos;" saveVersion="2">
				<Else canSkip="1">
					<IfElseCondition failOnCondition="false" condition="$unstances[$index] ~= &apos;none&apos;" saveVersion="2">
						<Then canSkip="1">
							<UnstanceAction unstance="$unstances[$index]" locationObject="$locationObjects[$index]" slaveObject="" />
						</Then>
						<Else canSkip="1">
							<WaitAction />
						</Else>
					</IfElseCondition>
				</Else>
			</IfElseCondition>
		</ForestContainer>
		<EditorData Signature="zachranaPtacka_standAndBeCool" EventSet="">
			<Variables>
				<Variable name="hand" comment="" />
				<Variable name="index" comment="" />
				<Variable name="leftHand" comment="" />
				<Variable name="leftHandContentEnabled" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="rightHandContentEnabled" comment="" />
				<Variable name="weaponSetToUse" comment="" />
				<Variable name="locationObjects" comment="" />
				<Variable name="npcs" comment="" />
				<Variable name="unstances" comment="" />
				<Variable name="weaponSets" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</FindInArray>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<DefaultBranch>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</DefaultBranch>
						</Switch>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetWeaponsFromWeaponSet>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Search>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Search>
								<Exec>
									<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Search>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Search>
										<Exec>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</UnstanceAction>
												</Then>
												<Else>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<IsWeaponLoaded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</WaitAction>
																</Then>
																<Else>
																	<LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LoadWeaponAction>
																</Else>
															</IsWeaponLoaded>
														</Then>
														<Else>
															<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</WaitAction>
														</Else>
													</IfElseCondition>
												</Else>
											</IfElseCondition>
										</Exec>
									</HandContentElement>
								</Exec>
							</HandContentElement>
						</Sequence>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<IfElseCondition editorPosX="770" editorPosY="660" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Else>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</UnstanceAction>
							</Then>
							<Else>
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
							</Else>
						</IfElseCondition>
					</Else>
				</IfElseCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="vavak_giveUp" is_function="0">
		<Variables />
		<Parameters>
			<Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="wuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="bothHands_changeEquipment" enabled="true">
					<Sequence>
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<ForceLook LookTarget="$wuid" DisableVariations="false">
									<Parallel successMode="All" failureMode="Any">
										<AnimationAction fragment="&apos;TournamentSurrender&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										<IfCondition failOnCondition="false" condition="$string ~= &apos;-&apos;">
											<SuppressFailure>
												<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$string" skipInLod="false" subtitlesDown="false" nodeLabel="29938820" />
											</SuppressFailure>
										</IfCondition>
									</Parallel>
								</ForceLook>
							</Child>
							<OnSuccess canSkip="1">
								<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
							</OnSuccess>
						</FuseBox>
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData_string" EventSet="endNotification">
			<Variables>
				<Variable name="string" comment="" />
				<Variable name="wuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AnimationAction>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_schedulerMonolog>
												</SuppressFailure>
											</IfCondition>
										</Parallel>
									</ForceLook>
								</Child>
								<OnSuccess>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</OnSuccess>
							</FuseBox>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>