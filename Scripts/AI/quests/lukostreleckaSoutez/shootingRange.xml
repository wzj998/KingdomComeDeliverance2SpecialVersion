<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="npc_wait" is_function="0">
		<Variables>
			<Variable name="wait" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;wait&apos;" prune="true" negprune="unknown" Parent="" Child="$wait" Data="" />
					</GraphSearch>
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$wait" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="wait" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="archer_shooting" is_function="0">
		<Variables>
			<Variable name="ammoClass" type="enum:ammo_class" values="" isPersistent="0" form="single" />
			<Variable name="arrows" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="doMonolog" type="archeryContest:doMonolog" values="" isPersistent="0" form="single" />
			<Variable name="fireData" type="fireData" values="" isPersistent="0" form="single" />
			<Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" />
			<Variable name="itemType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="itemTypeAtBeginning" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="refereeCommand" type="archeryContest:refereeCommand" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shootingSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="target" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="tellNextBark" type="_bool" values="true" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="numberOfParticipants" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextElement context="shootingRange_participant" enabled="true">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
								<Child canSkip="1">
									<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
										<Child canSkip="1">
											<Sequence>
												<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;archeryContest_shootingSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$shootingSpot" Data="" />
												</GraphSearch>
												<GraphSearch Origin="$shootingSpot" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;target&apos;" prune="true" negprune="unknown" Parent="" Child="$target" Data="" />
												</GraphSearch>
												<AddLink From="$this.id" To="$target" Tag="&apos;archeryContest_target&apos;" Data="" LinkOpHandleMode="OverWrite" />
												<IfCondition failOnCondition="false" condition="$this.id ~= $__player">
													<ExactMove directionType="AlignWithEntity" directionSpecification="$shootingSpot" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$shootingSpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
												</IfCondition>
												<Expression expressions="$numberOfParticipants += 1" />
												<Synchronize SemaphoreCount="$numberOfParticipants" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;archeryContest_waitForParticipants&apos;" RunLogic="KeepRunning">
													<HandContentElement hand="Left" item="$leftHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
														<Search canSkip="1">
															<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
														</Search>
														<Exec canSkip="1">
															<Sequence>
																<IfCondition failOnCondition="false" condition="$leftHand ~= $__null">
																	<GetItemType WUID="$leftHand" OutCategory="" OutType="$itemTypeAtBeginning" OutSubType="" />
																</IfCondition>
																<IfCondition failOnCondition="false" condition="$rightHand ~= $__null">
																	<GetItemType WUID="$rightHand" OutCategory="" OutType="$itemTypeAtBeginning" OutSubType="" />
																</IfCondition>
																<IfCondition failOnCondition="false" condition="$itemTypeAtBeginning == &apos;crossbow_light&apos; | &#10;$itemTypeAtBeginning == &apos;crossbow_medium&apos; | &#10;$itemTypeAtBeginning == &apos;crossbow_heavy&apos;">
																	<Expression expressions="$itemTypeAtBeginning = &apos;crossbow&apos;" />
																</IfCondition>
																<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
																	<Search canSkip="1">
																		<Success />
																	</Search>
																	<Exec canSkip="1">
																		<Parallel successMode="Any" failureMode="Any">
																			<Loop count="-1">
																				<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
																					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nextMessage&apos;" RunLogic="KeepRunning">
																						<Success />
																					</Synchronize>
																				</ProcessMessage>
																			</Loop>
																			<Loop count="-1">
																				<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$doMonolog" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
																					<IfCondition failOnCondition="false" condition="$this.id ~= $__player">
																						<Sequence>
																							<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.winner">
																								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																									<Child canSkip="1">
																										<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_STRELEC_VYHRAL&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="61167949" />
																									</Child>
																									<OnSuccess canSkip="1">
																										<InstantSynchronize SemaphoreCount="2" LockManagerType="Local" SemaphoreName="&apos;endShootingContest&apos;" RunLogic="KeepRunning">
																											<Success />
																										</InstantSynchronize>
																									</OnSuccess>
																								</FuseBox>
																							</IfCondition>
																							<IfElseCondition failOnCondition="false" condition="$tellNextBark" saveVersion="2">
																								<Then canSkip="1">
																									<Switch>
																										<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.hitPerfect">
																											<Function_shootingContest_archer_doMonologAboutHit metarole="&apos;STRELNICE_NA_TERC_STRELEC_ZASAHL_PRESNE&apos;" semaphorLockName="&apos;barkAboutPerfectHit&apos;" tellNextBark="$tellNextBark" nodeLabel="25120046" />
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.hitGood">
																											<Function_shootingContest_archer_doMonologAboutHit metarole="&apos;STRELNICE_NA_TERC_STRELEC_ZASAHL_DOBRE&apos;" semaphorLockName="&apos;barkAboutHit&apos;" tellNextBark="$tellNextBark" nodeLabel="77656947" />
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.hitBad">
																											<Function_shootingContest_archer_doMonologAboutHit metarole="&apos;STRELNICE_NA_TERC_STRELEC_ZASAHL_SPATNE&apos;" semaphorLockName="&apos;barkAboutHit&apos;" tellNextBark="$tellNextBark" nodeLabel="27705497" />
																										</IfCondition>
																										<DefaultBranch>
																											<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.miss">
																												<Function_shootingContest_archer_doMonologAboutHit metarole="&apos;STRELNICE_NA_TERC_STRELEC_MINUL&apos;" semaphorLockName="&apos;barkAboutHit&apos;" tellNextBark="$tellNextBark" nodeLabel="65327237" />
																											</IfCondition>
																										</DefaultBranch>
																									</Switch>
																								</Then>
																								<Else canSkip="1">
																									<Expression expressions="$tellNextBark = true" />
																								</Else>
																							</IfElseCondition>
																						</Sequence>
																					</IfCondition>
																				</ProcessMessage>
																			</Loop>
																			<ContinuousSwitch>
																				<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.none">
																					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																				</IfCondition>
																				<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.getReady">
																					<Sequence>
																						<Expression expressions="$arrows = $refereeCommand.numberOfAmmo &#10;$ammoClass = $refereeCommand.ammoClass" />
																						<Wait duration="&apos;0s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
																						<DrawAction WeaponSet="Secondary" fullBody="false" tags="" useSelectedWeaponSet="false" />
																						<IfCondition failOnCondition="false" condition="$this.id ~= $__player">
																							<InstantSetTarget Target="$target" />
																						</IfCondition>
																						<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nextMessage&apos;" RunLogic="KeepRunning">
																							<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
																						</Synchronize>
																					</Sequence>
																				</IfCondition>
																				<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.startShooting">
																					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nextMessage&apos;" RunLogic="KeepRunning">
																						<Parallel successMode="Any" failureMode="Any">
																							<Loop count="-1">
																								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitData" senderInfo="" inbox="&apos;hitData&apos;" condition="" answerVar="">
																									<Sequence>
																										<IfCondition failOnCondition="false" condition="$hitData.projectile ~= $__null">
																											<IfCondition failOnCondition="false" condition="$hitData.ammoClass == $ammoClass">
																												<InstantSendMessageToNPC target="$__area.id" variable="$hitData" />
																											</IfCondition>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$arrows == 0">
																											<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;stopShooting&apos;" RunLogic="KeepRunning">
																												<Success />
																											</Synchronize>
																										</IfCondition>
																									</Sequence>
																								</ProcessMessage>
																							</Loop>
																							<Loop count="-1">
																								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$fireData" senderInfo="" inbox="&apos;fireData&apos;" condition="" answerVar="">
																									<Sequence>
																										<GetItemType WUID="$fireData.weapon" OutCategory="" OutType="$itemType" OutSubType="" />
																										<IfCondition failOnCondition="false" condition="$itemType == &apos;crossbow_light&apos; | &#10;$itemType == &apos;crossbow_medium&apos; | &#10;$itemType == &apos;crossbow_heavy&apos;">
																											<Expression expressions="$itemType = &apos;crossbow&apos;" />
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$itemType == $itemTypeAtBeginning">
																											<Sequence>
																												<InstantSendMessageToNPC target="$__area.id" variable="$fireData" />
																												<Expression expressions="$arrows -= 1" />
																											</Sequence>
																										</IfCondition>
																									</Sequence>
																								</ProcessMessage>
																							</Loop>
																							<IfElseCondition failOnCondition="false" condition="$this.id ~= $__player" saveVersion="2">
																								<Then canSkip="1">
																									<MeleeOffenseAutomationDecorator active="true">
																										<Sequence>
																											<WaitAction />
																											<EntityContext context="combat_missileAttackerIgnoreTrajectoryCollision" target="$this.id">
																												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																											</EntityContext>
																										</Sequence>
																									</MeleeOffenseAutomationDecorator>
																								</Then>
																								<Else canSkip="1">
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Else>
																							</IfElseCondition>
																							<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;stopShooting&apos;" RunLogic="KeepRunning">
																								<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
																							</Synchronize>
																						</Parallel>
																					</Synchronize>
																				</IfCondition>
																				<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.endShooting">
																					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																				</IfCondition>
																			</ContinuousSwitch>
																		</Parallel>
																	</Exec>
																</HandContentElement>
															</Sequence>
														</Exec>
													</HandContentElement>
												</Synchronize>
											</Sequence>
										</Child>
										<OnSuccess canSkip="1">
											<RemoveLink From="$this.id" To="$target" Tag="&apos;archeryContest_target&apos;" LinkOpHandleMode="OverWrite" />
										</OnSuccess>
									</FuseBox>
								</Child>
								<OnFail canSkip="1">
									<InstantSynchronize SemaphoreCount="2" LockManagerType="Local" SemaphoreName="&apos;somethingWentWrong&apos;" RunLogic="KeepRunning">
										<Success />
									</InstantSynchronize>
								</OnFail>
							</FuseBox>
						</Child>
						<OnSuccess canSkip="1">
							<InstantSetTarget Target="$__null" />
						</OnSuccess>
					</FuseBox>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="archeryContestShooting" EventSet="">
			<Variables>
				<Variable name="ammoClass" comment="" />
				<Variable name="arrows" comment="" />
				<Variable name="doMonolog" comment="" />
				<Variable name="fireData" comment="" />
				<Variable name="hitData" comment="" />
				<Variable name="itemType" comment="" />
				<Variable name="itemTypeAtBeginning" comment="" />
				<Variable name="leftHand" comment="" />
				<Variable name="refereeCommand" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="shootingSpot" comment="" />
				<Variable name="target" comment="" />
				<Variable name="tellNextBark" comment="" />
				<Variable name="numberOfParticipants" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Child>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddLink>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExactMove>
													</IfCondition>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Search>
																<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetWeaponsFromWeaponSet>
															</Search>
															<Exec>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetItemType>
																	</IfCondition>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetItemType>
																	</IfCondition>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</IfCondition>
																	<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Search>
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</Search>
																		<Exec>
																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</Synchronize>
																					</ProcessMessage>
																				</Loop>
																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Child>
																											<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_speech_schedulerMonolog>
																										</Child>
																										<OnSuccess>
																											<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Success>
																											</InstantSynchronize>
																										</OnSuccess>
																									</FuseBox>
																								</IfCondition>
																								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_shootingContest_archer_doMonologAboutHit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_shootingContest_archer_doMonologAboutHit>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_shootingContest_archer_doMonologAboutHit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_shootingContest_archer_doMonologAboutHit>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_shootingContest_archer_doMonologAboutHit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_shootingContest_archer_doMonologAboutHit>
																											</IfCondition>
																											<DefaultBranch>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Function_shootingContest_archer_doMonologAboutHit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_shootingContest_archer_doMonologAboutHit>
																												</IfCondition>
																											</DefaultBranch>
																										</Switch>
																									</Then>
																									<Else>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Else>
																								</IfElseCondition>
																							</Sequence>
																						</IfCondition>
																					</ProcessMessage>
																				</Loop>
																				<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</IfCondition>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																							<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</DrawAction>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<InstantSetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</InstantSetTarget>
																							</IfCondition>
																							<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Synchronize>
																						</Sequence>
																					</IfCondition>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</InstantSendMessageToNPC>
																												</IfCondition>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</Synchronize>
																											</IfCondition>
																										</Sequence>
																									</ProcessMessage>
																								</Loop>
																								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetItemType>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</InstantSendMessageToNPC>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Sequence>
																											</IfCondition>
																										</Sequence>
																									</ProcessMessage>
																								</Loop>
																								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</WaitAction>
																												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																												</EntityContext>
																											</Sequence>
																										</MeleeOffenseAutomationDecorator>
																									</Then>
																									<Else>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Else>
																								</IfElseCondition>
																								<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Synchronize>
																							</Parallel>
																						</Synchronize>
																					</IfCondition>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</IfCondition>
																				</ContinuousSwitch>
																			</Parallel>
																		</Exec>
																	</HandContentElement>
																</Sequence>
															</Exec>
														</HandContentElement>
													</Synchronize>
												</Sequence>
											</Child>
											<OnSuccess>
												<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</RemoveLink>
											</OnSuccess>
										</FuseBox>
									</Child>
									<OnFail>
										<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</InstantSynchronize>
									</OnFail>
								</FuseBox>
							</Child>
							<OnSuccess>
								<InstantSetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantSetTarget>
							</OnSuccess>
						</FuseBox>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="referee" is_function="0">
		<Variables>
			<Variable name="refereeCommand" type="archeryContest:refereeCommand" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
					<Child canSkip="1">
						<EntityContextElement context="shootingRange_participant" enabled="true">
							<Sequence>
								<ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
								<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;archeryContest_waitForReferee&apos;" RunLogic="KeepRunning">
									<Parallel successMode="Any" failureMode="Any">
										<Loop count="-1">
											<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
												<Success />
											</ProcessMessage>
										</Loop>
										<ContinuousSwitch>
											<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.none">
												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.getReady">
												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
													<Child canSkip="1">
														<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_ZADAVATEL_PRIPRAVTE_SE&apos;" skipInLod="false" subtitlesDown="true" nodeLabel="96635222" />
													</Child>
													<OnSuccess canSkip="1">
														<Sequence>
															<InstantSendMessageToNPC target="$__area.id" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.getReady)" />
															<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
														</Sequence>
													</OnSuccess>
												</FuseBox>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.startShooting">
												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
													<Child canSkip="1">
														<Sequence>
															<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
															<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_ZADAVATEL_STRILEJTE&apos;" skipInLod="false" subtitlesDown="true" nodeLabel="54792176" />
														</Sequence>
													</Child>
													<OnSuccess canSkip="1">
														<Sequence>
															<InstantSendMessageToNPC target="$__area.id" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.startShooting)" />
															<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
														</Sequence>
													</OnSuccess>
												</FuseBox>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.timeIsRunningOut">
												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
													<Child canSkip="1">
														<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_ZADAVATEL_DOCHAZI_CAS&apos;" skipInLod="false" subtitlesDown="true" nodeLabel="92103660" />
													</Child>
													<OnSuccess canSkip="1">
														<Sequence>
															<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
														</Sequence>
													</OnSuccess>
												</FuseBox>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.timeIsUp">
												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
													<Child canSkip="1">
														<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_ZADAVATEL_CAS_DOSEL&apos;" skipInLod="false" subtitlesDown="true" nodeLabel="17067740" />
													</Child>
													<OnSuccess canSkip="1">
														<Sequence>
															<InstantSendMessageToNPC target="$__area.id" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.timeIsUp)" />
															<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
														</Sequence>
													</OnSuccess>
												</FuseBox>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.endShooting">
												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
													<Child canSkip="1">
														<InstantSendMessageToNPC target="$__area.id" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.endShooting)" />
													</Child>
													<OnSuccess canSkip="1">
														<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
													</OnSuccess>
												</FuseBox>
											</IfCondition>
										</ContinuousSwitch>
									</Parallel>
								</Synchronize>
							</Sequence>
						</EntityContextElement>
					</Child>
					<OnFail canSkip="1">
						<InstantSynchronize SemaphoreCount="2" LockManagerType="Local" SemaphoreName="&apos;somethingWentWrong&apos;" RunLogic="KeepRunning">
							<Success />
						</InstantSynchronize>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="wuidData" EventSet="">
			<Variables>
				<Variable name="refereeCommand" comment="" />
				<Variable name="data" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExactMove>
									<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</ProcessMessage>
											</Loop>
											<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child>
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</Child>
														<OnSuccess>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantSendMessageToNPC>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</OnSuccess>
													</FuseBox>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
																<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_speech_schedulerMonolog>
															</Sequence>
														</Child>
														<OnSuccess>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantSendMessageToNPC>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</OnSuccess>
													</FuseBox>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child>
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</Child>
														<OnSuccess>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</OnSuccess>
													</FuseBox>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child>
															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_speech_schedulerMonolog>
														</Child>
														<OnSuccess>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantSendMessageToNPC>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</OnSuccess>
													</FuseBox>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child>
															<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</InstantSendMessageToNPC>
														</Child>
														<OnSuccess>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</OnSuccess>
													</FuseBox>
												</IfCondition>
											</ContinuousSwitch>
										</Parallel>
									</Synchronize>
								</Sequence>
							</EntityContextElement>
						</Child>
						<OnFail>
							<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</InstantSynchronize>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="archer_shootingToBird" is_function="0">
		<Variables>
			<Variable name="ammoClass" type="enum:ammo_class" values="" isPersistent="0" form="single" />
			<Variable name="arrows" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="doMonolog" type="archeryContest:doMonolog" values="" isPersistent="0" form="single" />
			<Variable name="fireData" type="fireData" values="" isPersistent="0" form="single" />
			<Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" />
			<Variable name="itemType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="itemTypeAtBeginning" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="refereeCommand" type="archeryContest:refereeCommand" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shootingSpot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="target" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="tellNextBark" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="numberOfParticipants" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextElement context="shootingRange_participant" enabled="true">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;archeryContest_shootingSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$shootingSpot" Data="" />
										</GraphSearch>
										<IfCondition failOnCondition="false" condition="$this.id ~= $__player">
											<ExactMove directionType="AlignWithEntity" directionSpecification="$shootingSpot" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$shootingSpot" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
										</IfCondition>
										<Expression expressions="$numberOfParticipants += 1" />
										<Synchronize SemaphoreCount="$numberOfParticipants" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;archeryContest_waitForParticipants&apos;" RunLogic="KeepRunning">
											<HandContentElement hand="Left" item="$leftHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
												<Search canSkip="1">
													<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
												</Search>
												<Exec canSkip="1">
													<Sequence>
														<IfCondition failOnCondition="false" condition="$leftHand ~= $__null">
															<GetItemType WUID="$leftHand" OutCategory="" OutType="$itemTypeAtBeginning" OutSubType="" />
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$rightHand ~= $__null">
															<GetItemType WUID="$rightHand" OutCategory="" OutType="$itemTypeAtBeginning" OutSubType="" />
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$itemTypeAtBeginning == &apos;crossbow_light&apos; | &#10;$itemTypeAtBeginning == &apos;crossbow_medium&apos; | &#10;$itemTypeAtBeginning == &apos;crossbow_heavy&apos;">
															<Expression expressions="$itemTypeAtBeginning = &apos;crossbow&apos;" />
														</IfCondition>
														<HandContentElement hand="Right" item="$rightHand" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
															<Search canSkip="1">
																<Success />
															</Search>
															<Exec canSkip="1">
																<Parallel successMode="Any" failureMode="Any">
																	<Loop count="-1">
																		<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
																			<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nextMessage&apos;" RunLogic="KeepRunning">
																				<Success />
																			</Synchronize>
																		</ProcessMessage>
																	</Loop>
																	<Loop count="-1">
																		<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$doMonolog" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
																			<IfCondition failOnCondition="false" condition="$this.id ~= $__player">
																				<Switch>
																					<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.hitPerfect">
																						<SuppressFailure>
																							<InstantSemaphore SemaphoreCount="1" LockManagerType="Local" SemaphoreName="&apos;barkAboutHit&apos;">
																								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																									<Child canSkip="1">
																										<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_KU_PTAKU_STRELEC_ZASAHL&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="40520221" />
																									</Child>
																									<OnSuccess canSkip="1">
																										<Expression expressions="$tellNextBark = true" />
																									</OnSuccess>
																								</FuseBox>
																							</InstantSemaphore>
																						</SuppressFailure>
																					</IfCondition>
																					<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.sameTarget">
																						<SuppressFailure>
																							<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_KU_PTAKU_STRELEC_ZASAHL_UZ_SESTRELENY_CIL&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="21141046" />
																						</SuppressFailure>
																					</IfCondition>
																					<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.winner">
																						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																							<Child canSkip="1">
																								<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_STRELEC_VYHRAL&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="82940902" />
																							</Child>
																							<OnSuccess canSkip="1">
																								<InstantSynchronize SemaphoreCount="2" LockManagerType="Local" SemaphoreName="&apos;endShootingContest&apos;" RunLogic="KeepRunning">
																									<Success />
																								</InstantSynchronize>
																							</OnSuccess>
																						</FuseBox>
																					</IfCondition>
																					<DefaultBranch>
																						<IfCondition failOnCondition="false" condition="$doMonolog.command == $enum:shootingContest_bark.miss">
																							<IfElseCondition failOnCondition="false" condition="$tellNextBark" saveVersion="2">
																								<Then canSkip="1">
																									<SuppressFailure>
																										<InstantSemaphore SemaphoreCount="1" LockManagerType="Local" SemaphoreName="&apos;barkAboutMiss&apos;">
																											<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																												<Child canSkip="1">
																													<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;STRELNICE_KU_PTAKU_STRELEC_MINUL&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="52695358" />
																												</Child>
																												<OnSuccess canSkip="1">
																													<Expression expressions="$tellNextBark = false" />
																												</OnSuccess>
																											</FuseBox>
																										</InstantSemaphore>
																									</SuppressFailure>
																								</Then>
																								<Else canSkip="1">
																									<Expression expressions="$tellNextBark = true" />
																								</Else>
																							</IfElseCondition>
																						</IfCondition>
																					</DefaultBranch>
																				</Switch>
																			</IfCondition>
																		</ProcessMessage>
																	</Loop>
																	<ContinuousSwitch>
																		<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.none">
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.getReady">
																			<Sequence>
																				<Expression expressions="$arrows = $refereeCommand.numberOfAmmo &#10;$ammoClass = $refereeCommand.ammoClass" />
																				<Wait duration="&apos;0s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
																				<DrawAction WeaponSet="Secondary" fullBody="false" tags="" useSelectedWeaponSet="false" />
																				<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nextMessage&apos;" RunLogic="KeepRunning">
																					<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
																				</Synchronize>
																			</Sequence>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.startShooting">
																			<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;nextMessage&apos;" RunLogic="KeepRunning">
																				<Parallel successMode="Any" failureMode="Any">
																					<Loop count="-1">
																						<Sequence>
																							<IfCondition failOnCondition="false" condition="$this.id ~= $__player">
																								<IfCondition failOnCondition="false" condition="$target == $__null">
																									<Sequence>
																										<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																											<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;birdTargets&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																											<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																												<Child0 canSkip="1">
																													<LinkTagFilter tag="&apos;shotDown&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																												</Child0>
																											</NegationOp>
																											<Nodalyzer Quantifiers="Exists" Parent="" Child="$target" saveVersion="2" />
																										</GraphSearch>
																										<IfCondition failOnCondition="false" condition="$target == $__null">
																											<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
																										</IfCondition>
																										<InstantSetTarget Target="$target" />
																									</Sequence>
																								</IfCondition>
																							</IfCondition>
																							<Parallel successMode="Any" failureMode="Any">
																								<IfGate atomic="false" condition="$target ~= $__null" RunLogic="KeepRunning">
																									<LinkGate from="$__area.id" to="$target" tag="&apos;shotDown&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																										<ReinitVariable variable="$target" />
																									</LinkGate>
																								</IfGate>
																								<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitData" senderInfo="" inbox="&apos;hitData&apos;" condition="" answerVar="">
																									<Sequence>
																										<IfCondition failOnCondition="false" condition="$hitData.projectile ~= $__null">
																											<IfCondition failOnCondition="false" condition="$hitData.ammoClass == $ammoClass">
																												<Sequence>
																													<InstantSendMessageToNPC target="$__area.id" variable="$hitData" />
																													<IfCondition failOnCondition="false" condition="$hitData.target == $target">
																														<ReinitVariable variable="$target" />
																													</IfCondition>
																												</Sequence>
																											</IfCondition>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$arrows == 0">
																											<InstantSynchronize SemaphoreCount="2" LockManagerType="Intellect" SemaphoreName="&apos;stopShooting&apos;" RunLogic="KeepRunning">
																												<Success />
																											</InstantSynchronize>
																										</IfCondition>
																									</Sequence>
																								</ProcessMessage>
																							</Parallel>
																						</Sequence>
																					</Loop>
																					<Loop count="-1">
																						<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$fireData" senderInfo="" inbox="&apos;fireData&apos;" condition="" answerVar="">
																							<Sequence>
																								<GetItemType WUID="$fireData.weapon" OutCategory="" OutType="$itemType" OutSubType="" />
																								<IfCondition failOnCondition="false" condition="$itemType == &apos;crossbow_light&apos; | &#10;$itemType == &apos;crossbow_medium&apos; | &#10;$itemType == &apos;crossbow_heavy&apos;">
																									<Expression expressions="$itemType = &apos;crossbow&apos;" />
																								</IfCondition>
																								<IfCondition failOnCondition="false" condition="$itemType == $itemTypeAtBeginning">
																									<Sequence>
																										<InstantSendMessageToNPC target="$__area.id" variable="$fireData" />
																										<Expression expressions="$arrows -= 1" />
																									</Sequence>
																								</IfCondition>
																							</Sequence>
																						</ProcessMessage>
																					</Loop>
																					<IfElseCondition failOnCondition="false" condition="$this.id ~= $__player" saveVersion="2">
																						<Then canSkip="1">
																							<MeleeOffenseAutomationDecorator active="true">
																								<Sequence>
																									<WaitAction />
																									<EntityContext context="combat_missileAttackerIgnoreTrajectoryCollision" target="$this.id">
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</EntityContext>
																								</Sequence>
																							</MeleeOffenseAutomationDecorator>
																						</Then>
																						<Else canSkip="1">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Else>
																					</IfElseCondition>
																					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;stopShooting&apos;" RunLogic="KeepRunning">
																						<Expression expressions="$refereeCommand.command = $enum:archeryContest_refereeCommand.none" />
																					</Synchronize>
																				</Parallel>
																			</Synchronize>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.endShooting">
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</IfCondition>
																	</ContinuousSwitch>
																</Parallel>
															</Exec>
														</HandContentElement>
													</Sequence>
												</Exec>
											</HandContentElement>
										</Synchronize>
									</Sequence>
								</Child>
								<OnFail canSkip="1">
									<InstantSynchronize SemaphoreCount="2" LockManagerType="Local" SemaphoreName="&apos;somethingWentWrong&apos;" RunLogic="KeepRunning">
										<Success />
									</InstantSynchronize>
								</OnFail>
							</FuseBox>
						</Child>
						<OnSuccess canSkip="1">
							<InstantSetTarget Target="$__null" />
						</OnSuccess>
					</FuseBox>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="archeryContestShooting" EventSet="">
			<Variables>
				<Variable name="ammoClass" comment="" />
				<Variable name="arrows" comment="" />
				<Variable name="doMonolog" comment="" />
				<Variable name="fireData" comment="" />
				<Variable name="hitData" comment="" />
				<Variable name="itemType" comment="" />
				<Variable name="itemTypeAtBeginning" comment="" />
				<Variable name="leftHand" comment="" />
				<Variable name="refereeCommand" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="shootingSpot" comment="" />
				<Variable name="target" comment="" />
				<Variable name="tellNextBark" comment="" />
				<Variable name="numberOfParticipants" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExactMove>
											</IfCondition>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Search>
														<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetWeaponsFromWeaponSet>
													</Search>
													<Exec>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetItemType>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetItemType>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
															<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Search>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Search>
																<Exec>
																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Synchronize>
																			</ProcessMessage>
																		</Loop>
																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Child>
																											<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_speech_schedulerMonolog>
																										</Child>
																										<OnSuccess>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</OnSuccess>
																									</FuseBox>
																								</InstantSemaphore>
																							</SuppressFailure>
																						</IfCondition>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_speech_schedulerMonolog>
																							</SuppressFailure>
																						</IfCondition>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Child>
																									<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_speech_schedulerMonolog>
																								</Child>
																								<OnSuccess>
																									<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Success>
																									</InstantSynchronize>
																								</OnSuccess>
																							</FuseBox>
																						</IfCondition>
																						<DefaultBranch>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Child>
																														<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_speech_schedulerMonolog>
																													</Child>
																													<OnSuccess>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</OnSuccess>
																												</FuseBox>
																											</InstantSemaphore>
																										</SuppressFailure>
																									</Then>
																									<Else>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Else>
																								</IfElseCondition>
																							</IfCondition>
																						</DefaultBranch>
																					</Switch>
																				</IfCondition>
																			</ProcessMessage>
																		</Loop>
																		<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Wait>
																					<DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</DrawAction>
																					<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Synchronize>
																				</Sequence>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</LinkDataFilter>
																												<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Child0>
																														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</LinkTagFilter>
																													</Child0>
																												</NegationOp>
																												<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																												</Nodalyzer>
																											</GraphSearch>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</IfCondition>
																											<InstantSetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</InstantSetTarget>
																										</Sequence>
																									</IfCondition>
																								</IfCondition>
																								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</ReinitVariable>
																										</LinkGate>
																									</IfGate>
																									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</InstantSendMessageToNPC>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</ReinitVariable>
																														</IfCondition>
																													</Sequence>
																												</IfCondition>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</InstantSynchronize>
																											</IfCondition>
																										</Sequence>
																									</ProcessMessage>
																								</Parallel>
																							</Sequence>
																						</Loop>
																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</GetItemType>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</IfCondition>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</InstantSendMessageToNPC>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Sequence>
																									</IfCondition>
																								</Sequence>
																							</ProcessMessage>
																						</Loop>
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</WaitAction>
																										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</EntityContext>
																									</Sequence>
																								</MeleeOffenseAutomationDecorator>
																							</Then>
																							<Else>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Else>
																						</IfElseCondition>
																						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Synchronize>
																					</Parallel>
																				</Synchronize>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</IfCondition>
																		</ContinuousSwitch>
																	</Parallel>
																</Exec>
															</HandContentElement>
														</Sequence>
													</Exec>
												</HandContentElement>
											</Synchronize>
										</Sequence>
									</Child>
									<OnFail>
										<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</InstantSynchronize>
									</OnFail>
								</FuseBox>
							</Child>
							<OnSuccess>
								<InstantSetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantSetTarget>
							</OnSuccess>
						</FuseBox>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables>
			<Variable name="ammoClass" type="enum:ammo_class" values="" isPersistent="0" form="single" />
			<Variable name="archeryPaticipant" type="archeryContest:participant" values="" isPersistent="0" form="single" />
			<Variable name="archeryReferee" type="archeryContest:referee" values="" isPersistent="0" form="single" />
			<Variable name="archerySetupShootingRange" type="archeryContest:setupShootingRange" values="" isPersistent="0" form="single" />
			<Variable name="archeryStart" type="archeryContest:start" values="" isPersistent="0" form="single" />
			<Variable name="birdTargets" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="birdTargetsLenght" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="contestRequestNumberOfTargets" type="archeryContest:requestNumberOfTargets" values="" isPersistent="0" form="single" />
			<Variable name="cutsceneHolder" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="dimensionOfTarget" type="archeryContest:dimensionOfTagret" values="" isPersistent="0" form="single" />
			<Variable name="lockCountParticipants" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="participant" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="participantsIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="participantsLenght" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="randomParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="referee" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="refereeCommand" type="archeryContest:refereeCommand" values="" isPersistent="0" form="single" />
			<Variable name="rulesWereBreak" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="selectedParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="selectedParticipantsIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="shootingSpots" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<While doFail="false" propagateChildFail="false" condition="true">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<Parallel successMode="Any" failureMode="Any">
								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$archerySetupShootingRange" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
									<Sequence>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;shootingContest_referee&apos;" prune="true" negprune="unknown" Parent="" Child="$referee" Data="" />
										</GraphSearch>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;shootingContest_participant&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											<Nodalyzer Quantifiers="ForAll" Parent="" Child="$randomParticipants" saveVersion="2" />
										</GraphSearch>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;shootingSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											<Nodalyzer Quantifiers="ForAll" Parent="" Child="$shootingSpots" saveVersion="2" />
										</GraphSearch>
										<For startIndex="-1" endIndex="-1" step="-1" array="$randomParticipants" iterator="" value="$participant" break="">
											<IsDeadCheck SoulWUID="$participant" FailSubtMissing="false" saveVersion="2">
												<Else canSkip="1">
													<HasGenderCheck Gender="Male" SoulWUID="$participant" FailSubtMissing="false" saveVersion="2">
														<Then canSkip="1">
															<PushToArray array="$participants" value="$participant" direction="Back" />
														</Then>
													</HasGenderCheck>
												</Else>
											</IsDeadCheck>
										</For>
										<For startIndex="-1" endIndex="-1" step="-1" array="$participants" iterator="$participantsIndex" value="" break="">
											<IfCondition failOnCondition="false" condition="$participantsIndex &gt;= $archerySetupShootingRange.requiredNpcParticipants">
												<PopFromArray array="$participants" valueOut="" direction="Back" />
											</IfCondition>
										</For>
										<Expression expressions="$participantsLenght = #participants - 1" />
										<IfCondition failOnCondition="false" condition="$archerySetupShootingRange.playerIsParticipant">
											<PushToArray array="$participants" value="$__player" direction="Front" />
										</IfCondition>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;archeryContestStart&apos;" prune="true" negprune="unknown" Parent="" Child="$cutsceneHolder" Data="" />
										</GraphSearch>
										<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="$participantsIndex" value="" break="">
											<Sequence>
												<IfElseCondition failOnCondition="false" condition="$participants[$participantsIndex] == $__player" saveVersion="2">
													<Then canSkip="1">
														<AddLink From="$shootingSpots[$participantsIndex]" To="$shootingSpots[$participantsIndex]" Tag="&apos;useAsset&apos;" Data="&apos;player&apos;" LinkOpHandleMode="OverWrite" />
													</Then>
													<Else canSkip="1">
														<Sequence>
															<AddLink From="$cutsceneHolder" To="$participants[$participantsIndex]" Tag="&apos;fastForward&apos;" Data="" LinkOpHandleMode="OverWrite" />
															<AddLink From="$this.id" To="$participants[$participantsIndex]" Tag="&apos;asset&apos;" Data="&apos;selectedParticipants&apos;" LinkOpHandleMode="OverWrite" />
														</Sequence>
													</Else>
												</IfElseCondition>
												<AddLink From="$participants[$participantsIndex]" To="$shootingSpots[$participantsIndex]" Tag="&apos;archeryContest_shootingSpot&apos;" Data="" LinkOpHandleMode="OverWrite" />
											</Sequence>
										</For>
										<AddLink From="$cutsceneHolder" To="$referee" Tag="&apos;fastForward&apos;" Data="" LinkOpHandleMode="OverWrite" />
										<SendAIConceptSignal_shootingContest_npcParticipants />
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</ProcessMessage>
								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$contestRequestNumberOfTargets" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
									<Sequence>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;birdTargets&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											<Nodalyzer Quantifiers="ForAll" Parent="" Child="$birdTargets" saveVersion="2" />
										</GraphSearch>
										<Expression expressions="$birdTargetsLenght = #birdTargets" />
										<SendAIConceptSignal_shootingContest_numberOfTargets numberOfTargets="$birdTargetsLenght" />
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</ProcessMessage>
								<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$archeryStart" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
									<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
										<Child canSkip="1">
											<Parallel successMode="Any" failureMode="Any">
												<Sequence>
													<Switch>
														<IfCondition failOnCondition="false" condition="$archeryStart.weaponType == $enum:shootingContest_weapon.Bow">
															<Expression expressions="$ammoClass = $enum:ammo_class.Arrow &#10;$dimensionOfTarget.center = 0.15 &#10;$dimensionOfTarget.edge = 0.3 &#10;$dimensionOfTarget.multiplicator3DTo2D = 2.08" />
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$archeryStart.weaponType == $enum:shootingContest_weapon.Crossbow">
															<Expression expressions="$ammoClass = $enum:ammo_class.Bolt &#10;$dimensionOfTarget.center = 0.11 &#10;$dimensionOfTarget.edge = 0.23 &#10;$dimensionOfTarget.multiplicator3DTo2D = 2.9" />
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$archeryStart.weaponType == $enum:shootingContest_weapon.Rifle">
															<Expression expressions="$ammoClass = $enum:ammo_class.Ball &#10;$dimensionOfTarget.center = 0.15 &#10;$dimensionOfTarget.edge = 0.3 &#10;$dimensionOfTarget.multiplicator3DTo2D = 2.08" />
														</IfCondition>
													</Switch>
													<IfCondition failOnCondition="false" condition="#birdTargets ~= 0">
														<ExecuteLua code="for i=0, #data.birdTargets do &#10; &#10;  XGenAIModule.GetEntityByWUID(data.birdTargets[i]):ResetPosition() &#10; &#10;  if data.archeryStart.weaponType == enum_shootingContest_weapon.Rifle then &#10;    XGenAIModule.GetEntityByWUID(data.birdTargets[i]).Properties.Physics.Mass = -1 &#10;  else &#10;    XGenAIModule.GetEntityByWUID(data.birdTargets[i]).Properties.Physics.Mass = 0.23 &#10;  end &#10; &#10;end" />
													</IfCondition>
													<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;archeryContest_waitForReferee&apos;" RunLogic="KeepRunning">
														<Sequence>
															<InstantSendMessageToNPC target="$referee" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.getReady)" />
															<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
																<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.getReady">
																	<Success />
																</IfCondition>
															</ProcessMessage>
														</Sequence>
													</Synchronize>
													<Expression expressions="$lockCountParticipants = #participants + 1" />
													<Synchronize SemaphoreCount="$lockCountParticipants" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;archeryContest_waitForParticipants&apos;" RunLogic="KeepRunning">
														<InstantMultiSendMessageToNPC targets="$participants" successMode="Any" failureMode="Any" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.getReady), numberOfAmmo($archeryStart.arrows), ammoClass($ammoClass)" />
													</Synchronize>
													<InstantSendMessageToNPC target="$referee" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.startShooting)" />
													<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
														<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.startShooting">
															<Success />
														</IfCondition>
													</ProcessMessage>
													<IfCondition failOnCondition="false" condition="$archeryStart.type == $enum:shootingContest_type.Birds">
														<Function_shootingContestType_bird archerySetupShootingRange="$archerySetupShootingRange" archeryStart="$archeryStart" birdTargets="$birdTargets" participants="$participants" referee="$referee" refereeCommand="$refereeCommand" rulesWereBreak="$rulesWereBreak" nodeLabel="15620965" />
													</IfCondition>
													<IfCondition failOnCondition="false" condition="$archeryStart.type == $enum:shootingContest_type.CircleTarget">
														<Function_shootingContestType_circularTargets archerySetupShootingRange="$archerySetupShootingRange" archeryStart="$archeryStart" dimensionOfTarget="$dimensionOfTarget" participants="$participants" referee="$referee" refereeCommand="$refereeCommand" rulesWereBreak="$rulesWereBreak" nodeLabel="58732699" />
													</IfCondition>
												</Sequence>
												<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="true" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;somethingWentWrong&apos;" RunLogic="KeepRunning">
													<Sequence>
														<Expression expressions="$rulesWereBreak = true" />
														<Fail />
													</Sequence>
												</Synchronize>
											</Parallel>
										</Child>
										<OnFail canSkip="1">
											<SendAIConceptSignal_shootingContest_fail />
										</OnFail>
									</FuseBox>
								</ProcessMessage>
							</Parallel>
						</Child>
						<OnSuccess canSkip="1">
							<Sequence>
								<RemoveLink From="$cutsceneHolder" To="$referee" Tag="&apos;fastForward&apos;" LinkOpHandleMode="OverWrite" />
								<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="$participantsIndex" value="" break="">
									<Sequence>
										<IfElseCondition failOnCondition="false" condition="$participants[$participantsIndex] == $__player" saveVersion="2">
											<Then canSkip="1">
												<RemoveLink From="$shootingSpots[$participantsIndex]" To="$shootingSpots[$participantsIndex]" Tag="&apos;useAsset&apos;" LinkOpHandleMode="OverWrite" />
											</Then>
											<Else canSkip="1">
												<RemoveLink From="$cutsceneHolder" To="$participants[$participantsIndex]" Tag="&apos;fastForward&apos;" LinkOpHandleMode="OverWrite" />
											</Else>
										</IfElseCondition>
										<RemoveLink From="$participants[$participantsIndex]" To="$shootingSpots[$participantsIndex]" Tag="&apos;archeryContest_shootingSpot&apos;" LinkOpHandleMode="OverWrite" />
									</Sequence>
								</For>
								<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkDataFilter tag="&apos;asset&apos;" condition="$__link_asset == &apos;selectedParticipants&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									<Nodalyzer Quantifiers="ForAll" Parent="" Child="$selectedParticipants" saveVersion="2" />
								</GraphSearch>
								<For startIndex="0" endIndex="-1" step="1" array="$selectedParticipants" iterator="$selectedParticipantsIndex" value="" break="">
									<RemoveLink From="$this.id" To="$selectedParticipants[$selectedParticipantsIndex]" Tag="&apos;asset&apos;" LinkOpHandleMode="OverWrite" />
								</For>
								<ReinitVariable variable="$shootingSpots" />
								<ReinitVariable variable="$selectedParticipants" />
								<ReinitVariable variable="$randomParticipants" />
								<ReinitVariable variable="$participants" />
								<ReinitVariable variable="$birdTargets" />
								<ReinitVariable variable="$rulesWereBreak" />
								<ClearInbox inbox="&apos;hitData&apos;" type="&apos;hitData&apos;" condition="" />
								<ClearInbox inbox="&apos;archeryContest&apos;" type="&apos;archeryContest&apos;" condition="" />
								<ClearInbox inbox="&apos;fireData&apos;" type="&apos;fireData&apos;" condition="" />
							</Sequence>
						</OnSuccess>
					</FuseBox>
				</While>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="ammoClass" comment="" />
				<Variable name="archeryPaticipant" comment="" />
				<Variable name="archeryReferee" comment="" />
				<Variable name="archerySetupShootingRange" comment="" />
				<Variable name="archeryStart" comment="" />
				<Variable name="birdTargets" comment="" />
				<Variable name="birdTargetsLenght" comment="" />
				<Variable name="contestRequestNumberOfTargets" comment="" />
				<Variable name="cutsceneHolder" comment="" />
				<Variable name="dimensionOfTarget" comment="" />
				<Variable name="lockCountParticipants" comment="" />
				<Variable name="participant" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="participantsIndex" comment="" />
				<Variable name="participantsLenght" comment="" />
				<Variable name="randomParticipants" comment="" />
				<Variable name="referee" comment="" />
				<Variable name="refereeCommand" comment="" />
				<Variable name="rulesWereBreak" comment="" />
				<Variable name="selectedParticipants" comment="" />
				<Variable name="selectedParticipantsIndex" comment="" />
				<Variable name="shootingSpots" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
												<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
												</Nodalyzer>
											</GraphSearch>
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkDataFilter>
												<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
												</Nodalyzer>
											</GraphSearch>
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Else>
														<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PushToArray>
															</Then>
														</HasGenderCheck>
													</Else>
												</IsDeadCheck>
											</For>
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<PopFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</PopFromArray>
												</IfCondition>
											</For>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</PushToArray>
											</IfCondition>
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkDataFilter>
											</GraphSearch>
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AddLink>
														</Then>
														<Else>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddLink>
																<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddLink>
															</Sequence>
														</Else>
													</IfElseCondition>
													<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddLink>
												</Sequence>
											</For>
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
											<SendAIConceptSignal_shootingContest_npcParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SendAIConceptSignal_shootingContest_npcParticipants>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</ProcessMessage>
									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkDataFilter>
												<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
												</Nodalyzer>
											</GraphSearch>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<SendAIConceptSignal_shootingContest_numberOfTargets hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SendAIConceptSignal_shootingContest_numberOfTargets>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</ProcessMessage>
									<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Child>
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
														</Switch>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ExecuteLua>
														</IfCondition>
														<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantSendMessageToNPC>
																<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</IfCondition>
																</ProcessMessage>
															</Sequence>
														</Synchronize>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</InstantMultiSendMessageToNPC>
														</Synchronize>
														<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantSendMessageToNPC>
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</IfCondition>
														</ProcessMessage>
														<IfCondition hasInputBreakpoint="0" comment="" comment_box=" " comment_box_color="222,222,222,222" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_shootingContestType_bird hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_shootingContestType_bird>
														</IfCondition>
														<IfCondition hasInputBreakpoint="0" comment="" comment_box=" " comment_box_color="222,222,222,222" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_shootingContestType_circularTargets hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_shootingContestType_circularTargets>
														</IfCondition>
													</Sequence>
													<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Fail>
														</Sequence>
													</Synchronize>
												</Parallel>
											</Child>
											<OnFail>
												<SendAIConceptSignal_shootingContest_fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</SendAIConceptSignal_shootingContest_fail>
											</OnFail>
										</FuseBox>
									</ProcessMessage>
								</Parallel>
							</Child>
							<OnSuccess>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</RemoveLink>
									<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</RemoveLink>
												</Then>
												<Else>
													<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</RemoveLink>
												</Else>
											</IfElseCondition>
											<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</RemoveLink>
										</Sequence>
									</For>
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkDataFilter>
										<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
										</Nodalyzer>
									</GraphSearch>
									<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</RemoveLink>
									</For>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ClearInbox>
									<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ClearInbox>
									<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ClearInbox>
								</Sequence>
							</OnSuccess>
						</FuseBox>
					</While>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootingContestType_bird" is_function="1">
		<Variables>
			<Variable name="arrowCleanup" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="arrowCleanupIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="birdTargetsIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="fireData" type="fireData" values="" isPersistent="0" form="single" />
			<Variable name="fireDataSender" type="senderInfo:senderInfoBehavior" values="" isPersistent="0" form="single" />
			<Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" />
			<Variable name="hitDataSender" type="senderInfo:senderInfoBehavior" values="" isPersistent="0" form="single" />
			<Variable name="participant" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="participantsIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="participantsName" type="_string" values="" isPersistent="0" form="array" />
			<Variable name="prepareForEndContest" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="projectileIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="projectilePlayerSpotDotProduct" type="_float" values="1" isPersistent="0" form="single" />
			<Variable name="scoreTable" type="_wuid,archeryContest:scoreTable" values="" isPersistent="0" form="custom_associative" />
			<Variable name="scoreTableBreak" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="scoreTableIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="scoreTableKey" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="scoreTableLua" type="archeryContest:scoreTable" values="" isPersistent="0" form="array" />
			<Variable name="shootingInProgress" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="shootingSpotForPlayer" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shotedDownBirdTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shotedDownBirdTargets" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="targetIdentity" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="updateHud" type="archeryContest:updateHUD" values="" isPersistent="0" form="single" />
			<Variable name="winner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="wuidType" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="archerySetupShootingRange" type="archeryContest:setupShootingRange" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="archeryStart" type="archeryContest:start" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="birdTargets" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="referee" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="refereeCommand" type="archeryContest:refereeCommand" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="rulesWereBreak" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<FuseBox StatusPropagation="CleanUp" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="$participantsIndex" value="$participant" break="">
											<Sequence>
												<Expression expressions="$scoreTable[$participant].arrowsInQuiver = $archeryStart.arrows &#10;$scoreTableLua[$participantsIndex].score = 0" />
												<ExecuteLua code="local name = XGenAIModule.GetEntityByWUID(data.participant).soul:GetNameStringId() &#10;data.participantsName[data.participantsIndex] = name" />
											</Sequence>
										</For>
										<InstantMultiSendMessageToNPC targets="$participants" successMode="Any" failureMode="Any" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.startShooting)" />
										<ExecuteLua code="local names = {&quot;&quot;,&quot;&quot;,&quot;&quot;} &#10;local arrows = {-1, -1, -1} &#10;local len = #data.participantsName &#10;for i=0,len do &#10;        names[i] = data.participantsName[i] &#10;        arrows[i] = data.archeryStart.arrows &#10;end &#10;ShootingContest.ShowShootingContestTable(names[0], names[1], names[2], arrows[0], arrows[1], arrows[2], false)" />
										<Parallel successMode="Any" failureMode="Any">
											<IfGate atomic="false" condition="$shootingInProgress" RunLogic="Halt">
												<Parallel successMode="Any" failureMode="Any">
													<While doFail="false" propagateChildFail="false" condition="true">
														<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitData" senderInfo="$hitDataSender" inbox="&apos;hitData&apos;" condition="" answerVar="">
															<Sequence>
																<IfElseCondition failOnCondition="false" condition="$hitData.target ~= $__null" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<GetType WUID="$hitData.target" OutString="$targetIdentity" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
																			<IfElseCondition failOnCondition="false" condition="$targetIdentity ~= &apos;NPC&apos;" saveVersion="2">
																				<Then canSkip="1">
																					<VarOperation varName="$arrowCleanup" targetVarName="" operation="PushBack" argument="($hitData.projectile)" />
																				</Then>
																				<Else canSkip="1">
																					<GameContextCheck context="shootingRange_playerCanHitSwitchlessNPCOutsideRange" saveVersion="2">
																						<Then canSkip="1">
																							<IfCondition failOnCondition="false" condition="$hitDataSender.id == $__player">
																								<Function_shootingContestUtils_dotProduct entity1="$shootingSpotForPlayer" hitData="$hitData" dotProduct="$projectilePlayerSpotDotProduct" nodeLabel="40481905" />
																							</IfCondition>
																						</Then>
																					</GameContextCheck>
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																	</Then>
																	<Else canSkip="1">
																		<Sequence>
																			<VarOperation varName="$arrowCleanup" targetVarName="" operation="PushBack" argument="($hitData.projectile)" />
																			<IfCondition failOnCondition="false" condition="$hitDataSender.id == $__player">
																				<Function_shootingContestUtils_dotProduct entity1="$shootingSpotForPlayer" hitData="$hitData" dotProduct="$projectilePlayerSpotDotProduct" nodeLabel="36208979" />
																			</IfCondition>
																		</Sequence>
																	</Else>
																</IfElseCondition>
																<Selector>
																	<Sequence>
																		<FindInArray array="$shotedDownBirdTargets" keyOut="$birdTargetsIndex" condition="$__value == $hitData.target" />
																		<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.sameTarget)" />
																	</Sequence>
																	<Sequence>
																		<FindInArray array="$birdTargets" keyOut="$birdTargetsIndex" condition="$__value == $hitData.target" />
																		<PushToArray array="$shotedDownBirdTargets" value="$hitData.target" direction="Back" />
																		<Expression expressions="$scoreTable[$hitDataSender.id].score += 1 &#10;$projectileIndex += 1 &#10;$scoreTable[$hitDataSender.id].projectileIndex = $projectileIndex" />
																		<AddLink From="$this.id" To="$hitData.target" Tag="&apos;shotDown&apos;" Data="" LinkOpHandleMode="Success" />
																		<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.hitPerfect)" />
																	</Sequence>
																	<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.miss)" />
																</Selector>
																<SendMessageToNPC target="$this.id" variable="$updateHud" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="" />
																<IfCondition failOnCondition="false" condition="#shotedDownBirdTargets == #birdTargets">
																	<Sequence>
																		<InstantMultiSendMessageToNPC targets="$participants" successMode="Any" failureMode="Any" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.endShooting)" />
																		<Expression expressions="$prepareForEndContest = true" />
																	</Sequence>
																</IfCondition>
															</Sequence>
														</ProcessMessage>
													</While>
													<Loop count="-1">
														<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$fireData" senderInfo="$fireDataSender" inbox="&apos;fireData&apos;" condition="" answerVar="">
															<Sequence>
																<Expression expressions="$scoreTable[$fireDataSender.id].arrowsInQuiver -= 1" />
																<SendMessageToNPC target="$this.id" variable="$updateHud" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="" />
																<ReinitVariable variable="$scoreTableIndex" />
																<For startIndex="0" endIndex="-1" step="1" array="$scoreTable" iterator="$scoreTableKey" value="" break="$scoreTableBreak">
																	<Sequence>
																		<IfElseCondition failOnCondition="false" condition="$scoreTable[$scoreTableKey].arrowsInQuiver == 0" saveVersion="2">
																			<Then canSkip="1">
																				<IfCondition failOnCondition="false" condition="#scoreTable - 1 == $scoreTableIndex">
																					<Expression expressions="$prepareForEndContest = true" />
																				</IfCondition>
																			</Then>
																			<Else canSkip="1">
																				<Expression expressions="$scoreTableBreak = true" />
																			</Else>
																		</IfElseCondition>
																		<Expression expressions="$scoreTableIndex += 1" />
																	</Sequence>
																</For>
															</Sequence>
														</ProcessMessage>
													</Loop>
													<Loop count="-1">
														<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$updateHud" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
															<Sequence>
																<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="$participantsIndex" value="" break="">
																	<Expression expressions="$scoreTableLua[$participantsIndex].arrowsInQuiver = $scoreTable[$participants[$participantsIndex]].arrowsInQuiver &#10;$scoreTableLua[$participantsIndex].score = $scoreTable[$participants[$participantsIndex]].score" />
																</For>
																<ExecuteLua code="local arrowsInQuiver = {-1, -1, -1} &#10;local score = {-1, -1, -1} &#10;local len = #data.scoreTableLua &#10;for i=0, len do &#10;        arrowsInQuiver[i] = data.scoreTableLua[i].arrowsInQuiver &#10;        score[i] = data.scoreTableLua[i].score &#10;end &#10; &#10;ShootingContest.UpdateShootingContestTable(arrowsInQuiver[0], arrowsInQuiver[1], arrowsInQuiver[2], score[0], score[1], score[2])" />
															</Sequence>
														</ProcessMessage>
													</Loop>
													<IfGate atomic="false" condition="$prepareForEndContest" RunLogic="KeepRunning">
														<Sequence>
															<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
															<Expression expressions="$shootingInProgress = false" />
														</Sequence>
													</IfGate>
												</Parallel>
											</IfGate>
											<Sequence>
												<Wait duration="&apos;2m&apos;" timeType="GameTime" doFail="false" variation="" />
												<InstantSendMessageToNPC target="$referee" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.timeIsRunningOut)" />
												<Wait duration="&apos;1m&apos;" timeType="GameTime" doFail="false" variation="" />
												<InstantSendMessageToNPC target="$referee" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.timeIsUp)" />
												<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
													<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.timeIsUp">
														<InstantMultiSendMessageToNPC targets="$participants" successMode="Any" failureMode="Any" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.endShooting)" />
													</IfCondition>
												</ProcessMessage>
											</Sequence>
											<IfElseCondition failOnCondition="false" condition="$archerySetupShootingRange.playerIsParticipant" saveVersion="2">
												<Then canSkip="1">
													<Parallel successMode="Any" failureMode="Any">
														<Sequence>
															<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;archeryContest_shootingSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$shootingSpotForPlayer" Data="" />
															</GraphSearch>
															<DistanceGate Origin="$__player" ReferencePt="$shootingSpotForPlayer" Low="1.500000" High="1.500000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
																<Sequence>
																	<Function_speech_monolog alias="" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__player" metarole="&apos;STRELNICE_ZADAVATEL_HRAC_ODESEL&apos;" target="$referee" wait="false" nodeLabel="73800048" />
																	<Expression expressions="$winner = $__null &#10;$shootingInProgress = false &#10;$rulesWereBreak = true" />
																</Sequence>
															</DistanceGate>
														</Sequence>
														<IfGate atomic="false" condition="$projectilePlayerSpotDotProduct &lt; 0.45" RunLogic="KeepRunning">
															<Sequence>
																<Function_speech_monolog alias="" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__player" metarole="&apos;STRELNICE_ZADAVATEL_HRAC_STRILI_MIMO&apos;" target="$referee" wait="false" nodeLabel="61243748" />
																<Expression expressions="$winner = $__null &#10;$shootingInProgress = false &#10;$rulesWereBreak = true" />
															</Sequence>
														</IfGate>
													</Parallel>
												</Then>
												<Else canSkip="1">
													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
												</Else>
											</IfElseCondition>
										</Parallel>
									</Sequence>
								</Child>
								<OnSuccess canSkip="1">
									<Sequence>
										<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="" value="$participant" break="">
											<IsDeadCheck SoulWUID="$participant" FailSubtMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$rulesWereBreak = true" />
												</Then>
											</IsDeadCheck>
										</For>
										<IfElseCondition failOnCondition="false" condition="$rulesWereBreak" saveVersion="2">
											<Then canSkip="1">
												<Fail />
											</Then>
											<Else canSkip="1">
												<Sequence>
													<For startIndex="0" endIndex="-1" step="1" array="$arrowCleanup" iterator="$arrowCleanupIndex" value="" break="">
														<RemoveItem Item="$arrowCleanup[$arrowCleanupIndex]" ItemGUID="" Source="" Amount="0" FailOnDoesntExist="false" NotifyUI="false" />
													</For>
													<For startIndex="0" endIndex="-1" step="1" array="$shotedDownBirdTargets" iterator="" value="$shotedDownBirdTarget" break="">
														<RemoveLink From="$this.id" To="$shotedDownBirdTarget" Tag="&apos;shotDown&apos;" LinkOpHandleMode="Success" />
													</For>
													<For startIndex="0" endIndex="-1" step="1" array="$scoreTable" iterator="$scoreTableKey" value="" break="">
														<IfElseCondition failOnCondition="false" condition="$winner == $__null" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$winner = $scoreTableKey" />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<IfCondition failOnCondition="false" condition="$scoreTable[$scoreTableKey].score &gt; $scoreTable[$winner].score">
																		<Expression expressions="$winner = $scoreTableKey" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$scoreTable[$scoreTableKey].score == $scoreTable[$winner].score &amp; &#10;$scoreTable[$scoreTableKey].projectileIndex &lt; $scoreTable[$winner].projectileIndex">
																		<Expression expressions="$winner = $scoreTableKey" />
																	</IfCondition>
																</Sequence>
															</Else>
														</IfElseCondition>
													</For>
													<IfCondition failOnCondition="false" condition="$winner ~= $__null">
														<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
															<Child canSkip="1">
																<IfCondition failOnCondition="false" condition="$winner ~= $__player">
																	<Sequence>
																		<InstantSendMessageToNPC target="$winner" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.winner)" />
																		<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;endShootingContest&apos;" RunLogic="KeepRunning">
																			<Success />
																		</Synchronize>
																	</Sequence>
																</IfCondition>
															</Child>
															<OnSuccess canSkip="1">
																<Sequence>
																	<SendAIConceptSignal_shootingContest_success winner="$winner" />
																	<IfCondition failOnCondition="false" condition="$winner == $__player &amp; $archeryStart.difficulty == $enum:shootingContest_difficulty.Expert">
																		<SendAIConceptSignal_shootingContest_playerWonOnExpertDifficulty />
																	</IfCondition>
																</Sequence>
															</OnSuccess>
														</FuseBox>
													</IfCondition>
												</Sequence>
											</Else>
										</IfElseCondition>
									</Sequence>
								</OnSuccess>
							</FuseBox>
						</Child>
						<OnSuccess canSkip="1">
							<ExecuteLua code="ShootingContest.HideShootingContestTable()" />
						</OnSuccess>
					</FuseBox>
					<Function_shootingContestUtils_autotestResult winner="$winner" rulesWereBreak="$rulesWereBreak" nodeLabel="39422841" />
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="arrowCleanup" comment="" />
				<Variable name="arrowCleanupIndex" comment="" />
				<Variable name="birdTargetsIndex" comment="" />
				<Variable name="fireData" comment="" />
				<Variable name="fireDataSender" comment="" />
				<Variable name="hitData" comment="" />
				<Variable name="hitDataSender" comment="" />
				<Variable name="participant" comment="" />
				<Variable name="participantsIndex" comment="" />
				<Variable name="participantsName" comment="" />
				<Variable name="prepareForEndContest" comment="" />
				<Variable name="projectileIndex" comment="" />
				<Variable name="projectilePlayerSpotDotProduct" comment="" />
				<Variable name="scoreTable" comment="" />
				<Variable name="scoreTableBreak" comment="" />
				<Variable name="scoreTableIndex" comment="" />
				<Variable name="scoreTableKey" comment="" />
				<Variable name="scoreTableLua" comment="" />
				<Variable name="shootingInProgress" comment="" />
				<Variable name="shootingSpotForPlayer" comment="" />
				<Variable name="shotedDownBirdTarget" comment="" />
				<Variable name="shotedDownBirdTargets" comment="" />
				<Variable name="targetIdentity" comment="" />
				<Variable name="updateHud" comment="" />
				<Variable name="winner" comment="" />
				<Variable name="wuidType" comment="" />
				<Variable name="archerySetupShootingRange" comment="" />
				<Variable name="archeryStart" comment="" />
				<Variable name="birdTargets" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="referee" comment="" />
				<Variable name="refereeCommand" comment="" />
				<Variable name="rulesWereBreak" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ExecuteLua>
												</Sequence>
											</For>
											<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantMultiSendMessageToNPC>
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetType>
																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</VarOperation>
																					</Then>
																					<Else>
																						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_shootingContestUtils_dotProduct hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_shootingContestUtils_dotProduct>
																								</IfCondition>
																							</Then>
																						</GameContextCheck>
																					</Else>
																				</IfElseCondition>
																			</Sequence>
																		</Then>
																		<Else>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</VarOperation>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Function_shootingContestUtils_dotProduct hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_shootingContestUtils_dotProduct>
																				</IfCondition>
																			</Sequence>
																		</Else>
																	</IfElseCondition>
																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</FindInArray>
																			<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</InstantSendMessageToNPC>
																		</Sequence>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</FindInArray>
																			<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</PushToArray>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AddLink>
																			<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</InstantSendMessageToNPC>
																		</Sequence>
																		<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</InstantSendMessageToNPC>
																	</Selector>
																	<SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SendMessageToNPC>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</InstantMultiSendMessageToNPC>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Sequence>
																	</IfCondition>
																</Sequence>
															</ProcessMessage>
														</While>
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SendMessageToNPC>
																	<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</ReinitVariable>
																	<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</IfCondition>
																				</Then>
																				<Else>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Else>
																			</IfElseCondition>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Sequence>
																	</For>
																</Sequence>
															</ProcessMessage>
														</Loop>
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</For>
																	<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</ExecuteLua>
																</Sequence>
															</ProcessMessage>
														</Loop>
														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</IfGate>
													</Parallel>
												</IfGate>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantSendMessageToNPC>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantSendMessageToNPC>
													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</InstantMultiSendMessageToNPC>
														</IfCondition>
													</ProcessMessage>
												</Sequence>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																</GraphSearch>
																<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_speech_monolog>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Sequence>
																</DistanceGate>
															</Sequence>
															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_speech_monolog>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</IfGate>
														</Parallel>
													</Then>
													<Else>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Else>
												</IfElseCondition>
											</Parallel>
										</Sequence>
									</Child>
									<OnSuccess>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
												</IsDeadCheck>
											</For>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Fail>
												</Then>
												<Else>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<RemoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RemoveItem>
														</For>
														<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RemoveLink>
														</For>
														<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																	</Sequence>
																</Else>
															</IfElseCondition>
														</For>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Child>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</InstantSendMessageToNPC>
																			<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Synchronize>
																		</Sequence>
																	</IfCondition>
																</Child>
																<OnSuccess>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<SendAIConceptSignal_shootingContest_success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</SendAIConceptSignal_shootingContest_success>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<SendAIConceptSignal_shootingContest_playerWonOnExpertDifficulty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</SendAIConceptSignal_shootingContest_playerWonOnExpertDifficulty>
																		</IfCondition>
																	</Sequence>
																</OnSuccess>
															</FuseBox>
														</IfCondition>
													</Sequence>
												</Else>
											</IfElseCondition>
										</Sequence>
									</OnSuccess>
								</FuseBox>
							</Child>
							<OnSuccess>
								<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExecuteLua>
							</OnSuccess>
						</FuseBox>
						<Function_shootingContestUtils_autotestResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_shootingContestUtils_autotestResult>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootingContestType_circularTargets" is_function="1">
		<Variables>
			<Variable name="arrowCleanup" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="arrowCleanupIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="autotestResult" type="archeryContest:autotestResult" values="" isPersistent="0" form="single" />
			<Variable name="fireData" type="fireData" values="" isPersistent="0" form="single" />
			<Variable name="fireDataSender" type="senderInfo:senderInfoBehavior" values="" isPersistent="0" form="single" />
			<Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" />
			<Variable name="hitDataSender" type="senderInfo:senderInfoBehavior" values="" isPersistent="0" form="single" />
			<Variable name="participant" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="participantEnd" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="participantsIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="participantsName" type="_string" values="" isPersistent="0" form="array" />
			<Variable name="projectileIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="projectilePlayerSpotDotProduct" type="_float" values="1" isPersistent="0" form="single" />
			<Variable name="scoreTable" type="_wuid,archeryContest:scoreTable" values="" isPersistent="0" form="custom_associative" />
			<Variable name="scoreTableKey" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="scoreTableLua" type="archeryContest:scoreTable" values="" isPersistent="0" form="array" />
			<Variable name="shootingInProgress" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="shootingSpotForPlayer" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stabDistance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="targetIdentity" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="updateHud" type="archeryContest:updateHUD" values="" isPersistent="0" form="single" />
			<Variable name="winner" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="archerySetupShootingRange" type="archeryContest:setupShootingRange" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="archeryStart" type="archeryContest:start" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="dimensionOfTarget" type="archeryContest:dimensionOfTagret" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="participants" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="referee" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="refereeCommand" type="archeryContest:refereeCommand" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="rulesWereBreak" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<FuseBox StatusPropagation="CleanUp" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="$participantsIndex" value="$participant" break="">
											<Sequence>
												<GraphSearch Origin="$participant" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;archeryContest_target&apos;" prune="true" negprune="unknown" Parent="" Child="$scoreTable[$participant].target" Data="" />
												</GraphSearch>
												<Expression expressions="$scoreTable[$participant].arrowsInQuiver = $archeryStart.arrows" />
												<ExecuteLua code="local name = XGenAIModule.GetEntityByWUID(data.participant).soul:GetNameStringId() &#10;data.participantsName[data.participantsIndex] = name" />
											</Sequence>
										</For>
										<ExecuteLua code="local names = {&quot;&quot;, &quot;&quot;, &quot;&quot;} &#10;local arrows = {-1, -1, -1} &#10;local len = #data.participantsName &#10;for i=0,len do &#10;        names[i] = data.participantsName[i] &#10;        arrows[i] = data.archeryStart.arrows &#10;end &#10;ShootingContest.ShowShootingContestTable(names[0], names[1], names[2], arrows[0], arrows[1], arrows[2], true)" />
										<InstantMultiSendMessageToNPC targets="$participants" successMode="Any" failureMode="Any" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.startShooting)" />
										<IfGate atomic="false" condition="$shootingInProgress" RunLogic="Halt">
											<Parallel successMode="Any" failureMode="Any">
												<Loop count="-1">
													<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$hitData" senderInfo="$hitDataSender" inbox="&apos;hitData&apos;" condition="" answerVar="">
														<Sequence>
															<IfElseCondition failOnCondition="false" condition="$hitData.target ~= $__null" saveVersion="2">
																<Then canSkip="1">
																	<Sequence>
																		<GetType WUID="$hitData.target" OutString="$targetIdentity" ShowTrueIdentity="true" TreatPlayerAsNPC="true" />
																		<IfElseCondition failOnCondition="false" condition="$targetIdentity ~= &apos;NPC&apos;" saveVersion="2">
																			<Then canSkip="1">
																				<VarOperation varName="$arrowCleanup" targetVarName="" operation="PushBack" argument="($hitData.projectile)" />
																			</Then>
																			<Else canSkip="1">
																				<GameContextCheck context="shootingRange_playerCanHitSwitchlessNPCOutsideRange" saveVersion="2">
																					<Then canSkip="1">
																						<IfCondition failOnCondition="false" condition="$hitDataSender.id == $__player">
																							<Function_shootingContestUtils_dotProduct entity1="$shootingSpotForPlayer" hitData="$hitData" dotProduct="$projectilePlayerSpotDotProduct" nodeLabel="70370199" />
																						</IfCondition>
																					</Then>
																				</GameContextCheck>
																			</Else>
																		</IfElseCondition>
																	</Sequence>
																</Then>
																<Else canSkip="1">
																	<Sequence>
																		<VarOperation varName="$arrowCleanup" targetVarName="" operation="PushBack" argument="($hitData.projectile)" />
																		<IfCondition failOnCondition="false" condition="$hitDataSender.id == $__player">
																			<Function_shootingContestUtils_dotProduct entity1="$shootingSpotForPlayer" hitData="$hitData" dotProduct="$projectilePlayerSpotDotProduct" nodeLabel="12106706" />
																		</IfCondition>
																	</Sequence>
																</Else>
															</IfElseCondition>
															<IfElseCondition failOnCondition="false" condition="$scoreTable[$hitDataSender.id].target == $hitData.target" saveVersion="2">
																<Then canSkip="1">
																	<Sequence>
																		<Expression expressions="$projectileIndex += 1 &#10;$scoreTable[$hitDataSender.id].projectileIndex = $projectileIndex" />
																		<NumericalOperation In1VariableName="hitData.offset" In2VariableName="" In3VariableName="" OutVariableName="$stabDistance" Operation="len" />
																		<Switch>
																			<IfCondition failOnCondition="true" condition="$stabDistance &lt; $dimensionOfTarget.center">
																				<Sequence>
																					<Expression expressions="$scoreTable[$hitDataSender.id].score += 5," />
																					<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.hitPerfect)" />
																				</Sequence>
																			</IfCondition>
																			<IfCondition failOnCondition="true" condition="$stabDistance &gt; $dimensionOfTarget.edge">
																				<Sequence>
																					<Expression expressions="$scoreTable[$hitDataSender.id].score += 1," />
																					<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.hitBad)" />
																				</Sequence>
																			</IfCondition>
																			<DefaultBranch>
																				<Sequence>
																					<Expression expressions="$scoreTable[$hitDataSender.id].score += 2," />
																					<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.hitGood)" />
																				</Sequence>
																			</DefaultBranch>
																		</Switch>
																		<IfCondition failOnCondition="false" condition="$hitDataSender.id == $__player">
																			<ExecuteLua code="ShootingContest.ShowShootingHit(data.hitData.offset.x*data.dimensionOfTarget.multiplicator3DTo2D, data.hitData.offset.z*data.dimensionOfTarget.multiplicator3DTo2D)" />
																		</IfCondition>
																	</Sequence>
																</Then>
																<Else canSkip="1">
																	<InstantSendMessageToNPC target="$hitDataSender.id" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.miss)" />
																</Else>
															</IfElseCondition>
															<SendMessageToNPC target="$this.id" variable="$updateHud" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="" />
														</Sequence>
													</ProcessMessage>
												</Loop>
												<Loop count="-1">
													<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$fireData" senderInfo="$fireDataSender" inbox="&apos;fireData&apos;" condition="" answerVar="">
														<Sequence>
															<Expression expressions="$scoreTable[$fireDataSender.id].arrowsInQuiver -= 1" />
															<SendMessageToNPC target="$this.id" variable="$updateHud" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="" />
															<IfCondition failOnCondition="false" condition="$scoreTable[$fireDataSender.id].arrowsInQuiver == 0">
																<Sequence>
																	<IfCondition failOnCondition="false" condition="$winner == $__null">
																		<Expression expressions="$winner = $fireDataSender.id, &#10;$scoreTable[$fireDataSender.id].score += 3," />
																	</IfCondition>
																	<Expression expressions="$participantEnd += 1" />
																</Sequence>
															</IfCondition>
														</Sequence>
													</ProcessMessage>
												</Loop>
												<Loop count="-1">
													<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$updateHud" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
														<Sequence>
															<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="$participantsIndex" value="" break="">
																<Expression expressions="$scoreTableLua[$participantsIndex].arrowsInQuiver = $scoreTable[$participants[$participantsIndex]].arrowsInQuiver &#10;$scoreTableLua[$participantsIndex].score = $scoreTable[$participants[$participantsIndex]].score" />
															</For>
															<ExecuteLua code="local arrowsInQuiver = {-1, -1, -1} &#10;local score = {-1, -1, -1} &#10;local len = #data.scoreTableLua &#10;for i=0, len do &#10;        arrowsInQuiver[i] = data.scoreTableLua[i].arrowsInQuiver &#10;        score[i] = data.scoreTableLua[i].score &#10;end &#10; &#10;ShootingContest.UpdateShootingContestTable(arrowsInQuiver[0], arrowsInQuiver[1], arrowsInQuiver[2], score[0], score[1], score[2])" />
														</Sequence>
													</ProcessMessage>
												</Loop>
												<IfGate atomic="false" condition="$participantEnd == #participants" RunLogic="KeepRunning">
													<Sequence>
														<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
														<Expression expressions="$shootingInProgress = false" />
													</Sequence>
												</IfGate>
												<Sequence>
													<Wait duration="&apos;2m&apos;" timeType="GameTime" doFail="false" variation="" />
													<InstantSendMessageToNPC target="$referee" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.timeIsRunningOut)" />
													<Wait duration="&apos;1m&apos;" timeType="GameTime" doFail="false" variation="" />
													<InstantSendMessageToNPC target="$referee" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.timeIsUp)" />
													<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$refereeCommand" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
														<IfCondition failOnCondition="false" condition="$refereeCommand.command == $enum:archeryContest_refereeCommand.timeIsUp">
															<Sequence>
																<InstantMultiSendMessageToNPC targets="$participants" successMode="Any" failureMode="Any" type="&apos;archeryContest:refereeCommand&apos;" values="command($enum:archeryContest_refereeCommand.endShooting)" />
																<Expression expressions="$shootingInProgress = false" />
															</Sequence>
														</IfCondition>
													</ProcessMessage>
												</Sequence>
												<IfElseCondition failOnCondition="false" condition="$archerySetupShootingRange.playerIsParticipant" saveVersion="2">
													<Then canSkip="1">
														<Parallel successMode="Any" failureMode="Any">
															<Sequence>
																<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																	<LinkTagFilter tag="&apos;archeryContest_shootingSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$shootingSpotForPlayer" Data="" />
																</GraphSearch>
																<DistanceGate Origin="$__player" ReferencePt="$shootingSpotForPlayer" Low="1.500000" High="1.500000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
																	<IfGate atomic="false" condition="$participantEnd ~= #participants" RunLogic="KeepRunning">
																		<Sequence>
																			<Function_speech_monolog alias="" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__player" metarole="&apos;STRELNICE_ZADAVATEL_HRAC_ODESEL&apos;" target="$referee" wait="false" nodeLabel="95476602" />
																			<Expression expressions="$winner = $__null &#10;$shootingInProgress = false &#10;$rulesWereBreak = true" />
																		</Sequence>
																	</IfGate>
																</DistanceGate>
															</Sequence>
															<IfGate atomic="false" condition="$projectilePlayerSpotDotProduct &lt; 0.45" RunLogic="KeepRunning">
																<Sequence>
																	<Function_speech_monolog alias="" canBeDelayed="false" context="" dramaticBark="false" lookAtId="$__player" metarole="&apos;STRELNICE_ZADAVATEL_HRAC_STRILI_MIMO&apos;" target="$referee" wait="false" nodeLabel="74329632" />
																	<Expression expressions="$winner = $__null &#10;$shootingInProgress = false &#10;$rulesWereBreak = true" />
																</Sequence>
															</IfGate>
														</Parallel>
													</Then>
													<Else canSkip="1">
														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
													</Else>
												</IfElseCondition>
											</Parallel>
										</IfGate>
									</Sequence>
								</Child>
								<OnSuccess canSkip="1">
									<Sequence>
										<For startIndex="0" endIndex="-1" step="1" array="$participants" iterator="" value="$participant" break="">
											<IsDeadCheck SoulWUID="$participant" FailSubtMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$rulesWereBreak = true" />
												</Then>
											</IsDeadCheck>
										</For>
										<IfElseCondition failOnCondition="false" condition="$rulesWereBreak" saveVersion="2">
											<Then canSkip="1">
												<Fail />
											</Then>
											<Else canSkip="1">
												<Sequence>
													<For startIndex="0" endIndex="-1" step="1" array="$scoreTable" iterator="$scoreTableKey" value="" break="">
														<IfElseCondition failOnCondition="false" condition="$winner == $__null" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$winner = $scoreTableKey" />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<IfCondition failOnCondition="false" condition="$scoreTable[$scoreTableKey].score &gt; $scoreTable[$winner].score">
																		<Expression expressions="$winner = $scoreTableKey" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$scoreTable[$scoreTableKey].score == $scoreTable[$winner].score &amp; &#10;$scoreTable[$scoreTableKey].projectileIndex &lt; $scoreTable[$winner].projectileIndex">
																		<Expression expressions="$winner = $scoreTableKey" />
																	</IfCondition>
																</Sequence>
															</Else>
														</IfElseCondition>
													</For>
													<For startIndex="0" endIndex="-1" step="1" array="$arrowCleanup" iterator="$arrowCleanupIndex" value="" break="">
														<RemoveItem Item="$arrowCleanup[$arrowCleanupIndex]" ItemGUID="" Source="" Amount="0" FailOnDoesntExist="false" NotifyUI="false" />
													</For>
													<IfCondition failOnCondition="false" condition="$winner ~= $__null">
														<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
															<Child canSkip="1">
																<IfCondition failOnCondition="false" condition="$winner ~= $__player">
																	<Sequence>
																		<InstantSendMessageToNPC target="$winner" type="&apos;archeryContest:doMonolog&apos;" values="command($enum:shootingContest_bark.winner)" />
																		<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;endShootingContest&apos;" RunLogic="KeepRunning">
																			<Success />
																		</Synchronize>
																	</Sequence>
																</IfCondition>
															</Child>
															<OnSuccess canSkip="1">
																<SendAIConceptSignal_shootingContest_success winner="$winner" />
															</OnSuccess>
														</FuseBox>
													</IfCondition>
												</Sequence>
											</Else>
										</IfElseCondition>
									</Sequence>
								</OnSuccess>
							</FuseBox>
						</Child>
						<OnSuccess canSkip="1">
							<ExecuteLua code="ShootingContest.HideShootingContestTable()" />
						</OnSuccess>
					</FuseBox>
					<Function_shootingContestUtils_autotestResult winner="$winner" rulesWereBreak="$rulesWereBreak" nodeLabel="24161134" />
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="arrowCleanup" comment="" />
				<Variable name="arrowCleanupIndex" comment="" />
				<Variable name="autotestResult" comment="" />
				<Variable name="fireData" comment="" />
				<Variable name="fireDataSender" comment="" />
				<Variable name="hitData" comment="" />
				<Variable name="hitDataSender" comment="" />
				<Variable name="participant" comment="" />
				<Variable name="participantEnd" comment="" />
				<Variable name="participantsIndex" comment="" />
				<Variable name="participantsName" comment="" />
				<Variable name="projectileIndex" comment="" />
				<Variable name="projectilePlayerSpotDotProduct" comment="" />
				<Variable name="scoreTable" comment="" />
				<Variable name="scoreTableKey" comment="" />
				<Variable name="scoreTableLua" comment="" />
				<Variable name="shootingInProgress" comment="" />
				<Variable name="shootingSpotForPlayer" comment="" />
				<Variable name="stabDistance" comment="" />
				<Variable name="targetIdentity" comment="" />
				<Variable name="updateHud" comment="" />
				<Variable name="winner" comment="" />
				<Variable name="archerySetupShootingRange" comment="" />
				<Variable name="archeryStart" comment="" />
				<Variable name="dimensionOfTarget" comment="" />
				<Variable name="participants" comment="" />
				<Variable name="referee" comment="" />
				<Variable name="refereeCommand" comment="" />
				<Variable name="rulesWereBreak" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ExecuteLua>
												</Sequence>
											</For>
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
											<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantMultiSendMessageToNPC>
											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</GetType>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</VarOperation>
																				</Then>
																				<Else>
																					<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_shootingContestUtils_dotProduct hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_shootingContestUtils_dotProduct>
																							</IfCondition>
																						</Then>
																					</GameContextCheck>
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																	</Then>
																	<Else>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</VarOperation>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_shootingContestUtils_dotProduct hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_shootingContestUtils_dotProduct>
																			</IfCondition>
																		</Sequence>
																	</Else>
																</IfElseCondition>
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</NumericalOperation>
																			<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</InstantSendMessageToNPC>
																					</Sequence>
																				</IfCondition>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</InstantSendMessageToNPC>
																					</Sequence>
																				</IfCondition>
																				<DefaultBranch>
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</InstantSendMessageToNPC>
																					</Sequence>
																				</DefaultBranch>
																			</Switch>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</ExecuteLua>
																			</IfCondition>
																		</Sequence>
																	</Then>
																	<Else>
																		<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</InstantSendMessageToNPC>
																	</Else>
																</IfElseCondition>
																<SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</SendMessageToNPC>
															</Sequence>
														</ProcessMessage>
													</Loop>
													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</SendMessageToNPC>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Sequence>
																</IfCondition>
															</Sequence>
														</ProcessMessage>
													</Loop>
													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</For>
																<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</ExecuteLua>
															</Sequence>
														</ProcessMessage>
													</Loop>
													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
													</IfGate>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
														<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantSendMessageToNPC>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
														<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantSendMessageToNPC>
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</InstantMultiSendMessageToNPC>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</IfCondition>
														</ProcessMessage>
													</Sequence>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LinkTagFilter>
																	</GraphSearch>
																	<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_speech_monolog>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Sequence>
																		</IfGate>
																	</DistanceGate>
																</Sequence>
																<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_speech_monolog>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Sequence>
																</IfGate>
															</Parallel>
														</Then>
														<Else>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Else>
													</IfElseCondition>
												</Parallel>
											</IfGate>
										</Sequence>
									</Child>
									<OnSuccess>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
												</IsDeadCheck>
											</For>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Fail>
												</Then>
												<Else>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																	</Sequence>
																</Else>
															</IfElseCondition>
														</For>
														<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<RemoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RemoveItem>
														</For>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Child>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</InstantSendMessageToNPC>
																			<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Synchronize>
																		</Sequence>
																	</IfCondition>
																</Child>
																<OnSuccess>
																	<SendAIConceptSignal_shootingContest_success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SendAIConceptSignal_shootingContest_success>
																</OnSuccess>
															</FuseBox>
														</IfCondition>
													</Sequence>
												</Else>
											</IfElseCondition>
										</Sequence>
									</OnSuccess>
								</FuseBox>
							</Child>
							<OnSuccess>
								<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ExecuteLua>
							</OnSuccess>
						</FuseBox>
						<Function_shootingContestUtils_autotestResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_shootingContestUtils_autotestResult>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootingContestUtils_dotProduct" is_function="1">
		<Variables>
			<Variable name="entity1Position" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="entity2Orientation" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="vector1" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="vector2" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="dotProduct" type="_float" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="entity1" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetSpatialInfo In="$entity1" Out="$vector1" What="Orientation" />
					<GetSpatialInfo In="$entity1" Out="$entity1Position" What="Position" />
					<Expression expressions="$entity2Orientation.x = $hitData.offset.x - $entity1Position.x &#10;$entity2Orientation.y = $hitData.offset.y - $entity1Position.y &#10;$entity2Orientation.z = $hitData.offset.z - $entity1Position.z" />
					<NumericalOperation In1VariableName="entity2Orientation" In2VariableName="" In3VariableName="" OutVariableName="$vector2" Operation="normalize" />
					<CalculateDotProduct vector1="$vector1" vector2="$vector2" result="$dotProduct" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="entity1Position" comment="" />
				<Variable name="entity2Orientation" comment="" />
				<Variable name="vector1" comment="" />
				<Variable name="vector2" comment="" />
				<Variable name="dotProduct" comment="" />
				<Variable name="entity1" comment="" />
				<Variable name="hitData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetSpatialInfo>
						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetSpatialInfo>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</NumericalOperation>
						<CalculateDotProduct hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CalculateDotProduct>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootingContestUtils_autotestResult" is_function="1">
		<Variables>
			<Variable name="autotestResult" type="archeryContest:autotestResult" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="rulesWereBreak" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="winner" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SendAIConceptSignal_shootingContest_autotestActivated />
					<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$autotestResult" senderInfo="" inbox="&apos;archeryContest&apos;" condition="" answerVar="">
						<IfElseCondition failOnCondition="false" condition="$autotestResult.playerWon" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<Expression expressions="$winner = $__player" />
									<SendAIConceptSignal_shootingContest_success winner="$winner" />
								</Sequence>
							</Then>
							<Else canSkip="1">
								<Sequence>
									<Expression expressions="$rulesWereBreak = true" />
									<Fail />
								</Sequence>
							</Else>
						</IfElseCondition>
					</ProcessMessage>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="autotestResult" comment="" />
				<Variable name="rulesWereBreak" comment="" />
				<Variable name="winner" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SendAIConceptSignal_shootingContest_autotestActivated hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SendAIConceptSignal_shootingContest_autotestActivated>
						<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<SendAIConceptSignal_shootingContest_success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SendAIConceptSignal_shootingContest_success>
									</Sequence>
								</Then>
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Fail>
									</Sequence>
								</Else>
							</IfElseCondition>
						</ProcessMessage>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="shootingContest_archer_doMonologAboutHit" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="semaphorLockName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="tellNextBark" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<SuppressFailure>
					<InstantSemaphore SemaphoreCount="1" LockManagerType="Local" SemaphoreName="&apos;$semaphorLockName&apos;">
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="$metarole" subtitlesDown="false" nodeLabel="32248969" />
							</Child>
							<OnSuccess canSkip="1">
								<Expression expressions="$tellNextBark = false" />
							</OnSuccess>
						</FuseBox>
					</InstantSemaphore>
				</SuppressFailure>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="metarole" comment="" />
				<Variable name="semaphorLockName" comment="" />
				<Variable name="tellNextBark" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_speech_schedulerMonolog>
								</Child>
								<OnSuccess>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnSuccess>
							</FuseBox>
						</InstantSemaphore>
					</SuppressFailure>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>