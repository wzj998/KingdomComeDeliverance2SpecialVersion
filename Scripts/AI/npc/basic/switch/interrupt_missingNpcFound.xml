<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="interrupt_missingNpcFound" is_function="1">
    <Variables>
      <Variable name="lockName" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="moveParams" type="additionalMoveParams" values="destChangedThreshold(&apos;250ms&apos;)" isPersistent="0" form="single" />
      <Variable name="shapeDir" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="shapePos" type="vec3" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="missingNpcFoundData" type="switch:interruptData:missingNpcFound" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <EntityContextElement context="crime_interrupt" enabled="true">
          <EntityContext context="crime_interruptMissingNpcFound" target="">
            <EntityContext context="soliloquy_disable" target="">
              <AnyDecorator preset="crime_keepStateAndItems" enabled="true">
                <AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
                  <LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:missingNpcFound&apos;">
                    <LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$missingNpcFoundData.stimulusKind&apos;">
                      <Sequence>
                        <Expression expressions="$lockName = &apos;missingNpcFoundDialog_$missingNpcFoundData.searchingNPC_$missingNpcFoundData.missingNPC&apos;" />
                        <SetExternalLock LockManagerType="Global" Locked="true" LockName="&apos;$lockName&apos;" />
                        <Sequence>
                          <ShapePosition shapeName="" requestType="Path" ShapeTypeChoice="Regular polygon" diameter="1.500000" edgeCount="2" positionIndex="-1" positionVariable="$shapePos" directionVariable="$shapeDir" synchronizationId="$missingNpcFoundData.missingNPC" />
                          <ExactMove directionType="FromVariable" directionSpecification="$shapeDir" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$shapePos" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$moveParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
                        </Sequence>
                        <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;10s&apos;" LockManagerType="Global" SemaphoreName="&apos;$lockName&apos;" RunLogic="KeepRunning">
                          <IfElseCondition failOnCondition="false" condition="$missingNpcFoundData.missingNPC == $this.id" saveVersion="2">
                            <Then canSkip="1">
                              <ForceLook LookTarget="$missingNpcFoundData.searchingNPC" DisableVariations="true">
                                <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;20s&apos;" LockManagerType="Global" SemaphoreName="&apos;$lockName&apos;" RunLogic="KeepRunning">
                                  <Success />
                                </ExternalLock>
                              </ForceLook>
                            </Then>
                            <Else canSkip="1">
                              <ForceLook LookTarget="$missingNpcFoundData.missingNPC" DisableVariations="true">
                                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                                  <Child canSkip="1">
                                    <Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.ingameDialogPoseAndAnimations" context="$__null" customParameters="$__null" metarole="&apos;NPC_NASLO_ZMIZELE_NPC_V_PORADKU&apos;" preset="$enum:dialogPreset.ingame" recipient="$missingNpcFoundData.missingNPC" recipientMetaroles="" nodeLabel="72521307" />
                                  </Child>
                                  <OnFail canSkip="1">
                                    <SetExternalLock LockManagerType="Global" Locked="false" LockName="&apos;$lockName&apos;" />
                                  </OnFail>
                                </FuseBox>
                              </ForceLook>
                            </Else>
                          </IfElseCondition>
                        </Synchronize>
                        <Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.missingNpcFound" nodeLabel="53793612" />
                      </Sequence>
                    </LogToLabel>
                  </LogToLabel>
                </AddPerceivableState>
              </AnyDecorator>
            </EntityContext>
          </EntityContext>
        </EntityContextElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="lockName" comment="" />
        <Variable name="moveParams" comment="" />
        <Variable name="shapeDir" comment="" />
        <Variable name="shapePos" comment="" />
        <Variable name="missingNpcFoundData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="TODO: is this ok? does the lock ever get recycled?" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </SetExternalLock>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <ShapePosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ShapePosition>
                            <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ExactMove>
                          </Sequence>
                          <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Success>
                                  </ExternalLock>
                                </ForceLook>
                              </Then>
                              <Else>
                                <ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Child>
                                      <Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Function_speech_dialogInitiator>
                                    </Child>
                                    <OnFail>
                                      <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </SetExternalLock>
                                    </OnFail>
                                  </FuseBox>
                                </ForceLook>
                              </Else>
                            </IfElseCondition>
                          </Synchronize>
                          <Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Function_callFollowUpBehavior>
                        </Sequence>
                      </LogToLabel>
                    </LogToLabel>
                  </AddPerceivableState>
                </AnyDecorator>
              </EntityContext>
            </EntityContext>
          </EntityContextElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>