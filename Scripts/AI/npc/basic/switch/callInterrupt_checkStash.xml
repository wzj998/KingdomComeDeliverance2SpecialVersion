<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_checkStash" is_function="1">
		<Variables>
			<Variable name="checkStashData" type="switch:interruptData:checkStash" values="" isPersistent="0" form="single" />
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="22" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="ignorePriority" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stash" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
					<Else canSkip="1">
						<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
							<Else canSkip="1">
								<Sequence>
									<AddLink From="$this.id" To="$stash" Tag="&apos;crime_followUpBehavior_checkStash&apos;" Data="" LinkOpHandleMode="OverWrite" />
									<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="83032530" />
									<IfCondition failOnCondition="false" condition="$shallPass | $ignorePriority">
										<Sequence>
											<EntityContextCheck context="crime_spawnMissingNpcVolume_behavior" target="$this.id" saveVersion="2">
												<Then canSkip="1">
													<Function_crime_spawnMissingNpcVolume destinationWuid="$this.id" nodeLabel="90421589" />
												</Then>
											</EntityContextCheck>
											<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="65749012" />
											<IfCondition failOnCondition="false" condition="$initiator == $enum:switch_interruptInitiator.switch | &#10;$previousReaction == $enum:crime_reactionKind.unknown">
												<GetReactionKindByContext Target="$this.id" ReactionKind="$previousReaction" />
											</IfCondition>
											<Expression expressions="$checkStashData.stimulusKind = $stimulusKind &#10;$checkStashData.previousReaction = $previousReaction &#10;$checkStashData.initiatedBy = $initiator &#10;$checkStashData.stash = $stash" />
											<AddInterrupt_checkStash checkStashData="$checkStashData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_checkStash&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
										</Sequence>
									</IfCondition>
								</Sequence>
							</Else>
						</EntityContextCheck>
					</Else>
				</GameContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="checkStashData" comment="" />
				<Variable name="mrkev" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="stash" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-190" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Else>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AddLink>
										<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_checkReactionPriority>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_crime_spawnMissingNpcVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_spawnMissingNpcVolume>
													</Then>
												</EntityContextCheck>
												<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_getMrkev>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetReactionKindByContext>
												</IfCondition>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<AddInterrupt_checkStash hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AddInterrupt_checkStash>
											</Sequence>
										</IfCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>