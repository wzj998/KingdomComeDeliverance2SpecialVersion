<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_checkHomeStashes" is_function="1">
		<Variables>
			<Variable name="allStashesChecked" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="canCheckItem" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="checkItem" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="checkItemPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="checkedStashes" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="checkedStashes_value" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="distanceToItem" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="endBehavior" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="feelingsToken" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="movementSpeed" type="enum:movementSpeed" values="$enum:movementSpeed.alertedWalk" isPersistent="0" form="single" />
			<Variable name="myPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="playerInLongTermMemory" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reportDestination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reportDestinationType" type="enum:crime_reportDestinationType" values="" isPersistent="0" form="single" />
			<Variable name="robbedValue" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="stash_owner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stashes" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="tempInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="theftVolumeSeenNotification" type="crime:theftVolumeSeenDuringCheckHomeStashesNotification" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="checkHomeStashesData" type="switch:interruptData:checkHomeStashes" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<AnyDecorator preset="crime_keepState" enabled="true">
								<EntityContext context="crime_interrupt" target="">
									<EntityContext context="crime_interruptCheckHomeStashes" target="">
										<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
											<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:checkHomeStashes&apos;">
												<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$checkHomeStashesData.stimulusKind&apos;">
													<Sequence>
														<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.checkHomeStashes" nodeLabel="23892374" />
														<CheckInformationKnowledge Information="$checkHomeStashesData.information" Holder="$this.id" />
														<IfCondition failOnCondition="false" condition="$checkHomeStashesData.stolenItemsFound">
															<Expression expressions="$movementSpeed = $enum:movementSpeed.run" />
														</IfCondition>
														<Function_crime_checkLongTermMemoryTrespass home="$checkHomeStashesData.home" knowAboutPlayer="$playerInLongTermMemory" nodeLabel="52197925" />
														<Parallel successMode="Any" failureMode="Any">
															<IfElseCondition failOnCondition="false" condition="$checkHomeStashesData.playerRelated" saveVersion="2">
																<Then canSkip="1">
																	<EntityContext context="crime_autoAttributeTheftToPlayer" target="">
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</EntityContext>
																</Then>
																<Else canSkip="1">
																	<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																</Else>
															</IfElseCondition>
															<Sequence>
																<IfElseCondition failOnCondition="false" condition="$checkHomeStashesData.stimulusKind == $enum:crime_stimulusKind.theft" saveVersion="2">
																	<Then canSkip="1">
																		<IfCondition failOnCondition="false" condition="$checkHomeStashesData.previousReaction ~= $enum:crime_reactionKind.scan | &#10;$checkHomeStashesData.initiatedBy ~= $enum:switch_interruptInitiator.scheduler">
																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_VIDI_UKRADENOU_VEC&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="67296349" />
																		</IfCondition>
																	</Then>
																	<Else canSkip="1">
																		<IfElseCondition failOnCondition="false" condition="~$checkHomeStashesData.playerRelated" saveVersion="2">
																			<Then canSkip="1">
																				<Sequence>
																					<IsLoadedGate saveVersion="2">
																						<Else canSkip="1">
																							<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_KONTROLUJE_TRUHLY_PO_PODEZRELE_AKTIVITE&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="20537000" />
																						</Else>
																					</IsLoadedGate>
																					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																				</Sequence>
																			</Then>
																		</IfElseCondition>
																	</Else>
																</IfElseCondition>
																<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
															<While doFail="false" propagateChildFail="false" condition="true">
																<Sequence>
																	<ClearInbox inbox="&apos;crime_theftVolumeSeenDuringCheckHomeStashes&apos;" type="" condition="" />
																	<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$theftVolumeSeenNotification" senderInfo="" inbox="&apos;crime_theftVolumeSeenDuringCheckHomeStashes&apos;" condition="" answerVar="">
																		<Sequence>
																			<IfCondition failOnCondition="false" condition="~$checkHomeStashesData.stolenItemsFound">
																				<IfElseCondition failOnCondition="false" condition="$theftVolumeSeenNotification.attributed" saveVersion="2">
																					<Then canSkip="1">
																						<Sequence>
																							<Expression expressions="$movementSpeed = $enum:movementSpeed.run &#10; &#10;$checkHomeStashesData.stolenItemsFound = true &#10;$checkHomeStashesData.playerRelated = true &#10;$checkHomeStashesData.information = $theftVolumeSeenNotification.information" />
																							<LinkDataExpression From="$this.id" To="$checkHomeStashesData.home" Expresssion="$__link_crime_followUpBehavior_checkHomeStashes.stolenItemsFound = true &#10;$__link_crime_followUpBehavior_checkHomeStashes.playerRelated = true &#10; &#10;$__link_crime_followUpBehavior_checkHomeStashes.information = $theftVolumeSeenNotification.information" />
																							<Function_crime_attributeCrimes handleStimulus="false" stimulusKindToAttribute="$enum:crime_stimulusKind.theft" nodeLabel="61887745" />
																						</Sequence>
																					</Then>
																					<Else canSkip="1">
																						<Sequence>
																							<Expression expressions="$movementSpeed = $enum:movementSpeed.run &#10; &#10;$checkHomeStashesData.stolenItemsFound = true &#10;$checkHomeStashesData.information = $theftVolumeSeenNotification.information" />
																							<LinkDataExpression From="$this.id" To="$checkHomeStashesData.home" Expresssion="$__link_crime_followUpBehavior_checkHomeStashes.stolenItemsFound = true &#10; &#10;$__link_crime_followUpBehavior_checkHomeStashes.information = $theftVolumeSeenNotification.information" />
																						</Sequence>
																					</Else>
																				</IfElseCondition>
																			</IfCondition>
																			<IfCondition failOnCondition="false" condition="$canCheckItem &amp; ~$checkItem">
																				<Expression expressions="$checkItem = true &#10;$checkItemPos = $theftVolumeSeenNotification.pos" />
																			</IfCondition>
																		</Sequence>
																	</ProcessMessage>
																</Sequence>
															</While>
															<IfGate atomic="false" condition="$checkHomeStashesData.stolenItemsFound &amp; $checkHomeStashesData.playerRelated" RunLogic="KeepRunning">
																<EntityContext context="crime_escalationLevel_investigating" target="">
																	<EntityContextElement context="crime_escalationLevel_investigating" enabled="true">
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</EntityContextElement>
																</EntityContext>
															</IfGate>
															<IfGate atomic="false" condition="~$endBehavior" RunLogic="Halt">
																<ContinuousSwitch>
																	<IfCondition failOnCondition="false" condition="$checkItem">
																		<LogToLabel Name="&apos;checkHomeStashesTarget&apos;" Wuid="" Message="&apos;missingItem&apos;">
																			<ForceLook LookTarget="$checkItemPos" DisableVariations="false">
																				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																					<Child canSkip="1">
																						<Parallel successMode="All" failureMode="Any">
																							<Sequence>
																								<UrgencyDecorator Urgency="Fast">
																									<WaitAction />
																								</UrgencyDecorator>
																								<StopMovement waitUntilStopped="false" />
																								<Turn target="$checkItemPos" align="false" />
																							</Sequence>
																							<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_VIDI_UKRADENOU_VEC&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="34692743" />
																						</Parallel>
																					</Child>
																					<OnFail canSkip="1">
																						<Expression expressions="$checkItem = false" />
																					</OnFail>
																				</FuseBox>
																			</ForceLook>
																		</LogToLabel>
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="true">
																		<Sequence>
																			<While doFail="false" propagateChildFail="false" condition="~$allStashesChecked &amp;  &#10;#checkedStashes &lt;= $data:script_param[&apos;crime_checkHomeStashes_maxStashesToCheck&apos;].value">
																				<LogToLabel Name="&apos;checkHomeStashesTarget&apos;" Wuid="" Message="&apos;stash&apos;">
																					<Sequence>
																						<VarOperation varName="$checkedStashes" targetVarName="" operation="Reinit" argument="" />
																						<VarOperation varName="$stashes" targetVarName="" operation="Reinit" argument="" />
																						<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																							<LinkTagFilter tag="&apos;crime_checkHomeStashes_checkedStash&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																							<Nodalyzer Quantifiers="ForAll" Parent="" Child="$checkedStashes" saveVersion="2" />
																						</GraphSearch>
																						<GraphSearch Origin="$checkHomeStashesData.home" Borders="" depth="3" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;home_area,area_union_member,home_equipment&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																							<EntityClassFilter Class="Stash" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																							<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																								<Child0 canSkip="1">
																									<WUIDFilter WUID="$checkedStashes" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																								</Child0>
																							</NegationOp>
																							<LinkTagFilter tag="&apos;home_equipment&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																							<Nodalyzer Quantifiers="ForAll" Parent="" Child="$stashes" saveVersion="2">
																								<Child0 canSkip="1">
																									<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
																								</Child0>
																							</Nodalyzer>
																							<CategoryFilter categories="&apos;Chest&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																							<RangeFilter min="0.000000" max="$data:script_param[&apos;crime_checkHomeStashes_maxDistanceToStash&apos;].value" point="$checkHomeStashesData.home" excludeRef="true" Source="Child" prune="false" negprune="unknown" Parent="" Child="" />
																						</GraphSearch>
																						<IfElseCondition failOnCondition="false" condition="#stashes &gt; 0" saveVersion="2">
																							<Then canSkip="1">
																								<Parallel successMode="Any" failureMode="Any">
																									<Sequence>
																										<MoveParamsDecorator speed="$movementSpeed" pathFindingParams="" doorClosingPolicy="Automatic">
																											<Function_checkChest chest="$stashes[0]" nodeLabel="83569521" />
																										</MoveParamsDecorator>
																										<Expression expressions="$canCheckItem = false" />
																										<GetStashRobbedValue StashWUID="$stashes[0]" Value="$robbedValue" />
																										<IfElseCondition failOnCondition="false" condition="$robbedValue &gt; 0" saveVersion="2">
																											<Then canSkip="1">
																												<Sequence>
																													<IfElseCondition failOnCondition="false" condition="$checkHomeStashesData.playerRelated | &#10;$playerInLongTermMemory" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<AtomicDecorator>
																																	<Sequence>
																																		<GetOwner Object="$stashes[0]" Owner="$stash_owner" />
																																		<Expression expressions="$tempInformation = $checkHomeStashesData.information" />
																																		<Function_crime_createTheftInformation count="0" immediate="false" isNonAttributedCrime="false" kettleType="$enum:kettleType.kettle" method="$enum:crime_theftMethod.loot" owner="$stash_owner" pivot="$stashes[0]" seenEquippedItems="" information="$tempInformation" nodeLabel="31581599" />
																																		<Expression expressions="$checkHomeStashesData.information = $tempInformation" />
																																		<ShowTutorial Name="crime_CheckHomeStashesTheft" />
																																	</Sequence>
																																</AtomicDecorator>
																																<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_CILENA_PROHLIDKA_TRUHEL_ZJISTI_KRADEZ&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="42551122" />
																															</Sequence>
																														</Then>
																														<Else canSkip="1">
																															<Sequence>
																																<AtomicDecorator>
																																	<Sequence>
																																		<CreateInformationWrapper Label="&apos;nonAttributedCrime&apos;" PerceivedWuid="$stashes[0]" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$checkHomeStashesData.information" />
																																		<LockDynamicInformationValues Information="$checkHomeStashesData.information">
																																			<Sequence>
																																				<SetDynamicInformationValue Information="$checkHomeStashesData.information" Tag="&apos;stimulusKind&apos;" Variable="" Type="&apos;enum:crime_stimulusKind&apos;" Value="$enum:crime_stimulusKind.theft" />
																																				<GetOwner Object="$stashes[0]" Owner="$stash_owner" />
																																				<SetDynamicInformationValue Information="$checkHomeStashesData.information" Tag="&apos;victim&apos;" Variable="$stash_owner" Type="" Value="" />
																																			</Sequence>
																																		</LockDynamicInformationValues>
																																		<Switch>
																																			<IfCondition failOnCondition="false" condition="$robbedValue &lt; $data:script_param[&apos;crime_checkHomeStashes_robbedValue_threshold_small&apos;].value">
																																				<Expression expressions="$feelingsToken = &apos;witness_theft_small_unattributed&apos;" />
																																			</IfCondition>
																																			<IfCondition failOnCondition="false" condition="$robbedValue &lt; $data:script_param[&apos;crime_checkHomeStashes_robbedValue_threshold_medium&apos;].value">
																																				<Expression expressions="$feelingsToken = &apos;witness_theft_medium_unattributed&apos;" />
																																			</IfCondition>
																																			<DefaultBranch>
																																				<Expression expressions="$feelingsToken = &apos;witness_theft_large_unattributed&apos;" />
																																			</DefaultBranch>
																																		</Switch>
																																		<AffectFeelings Npc="$this.id" Token="$feelingsToken" AffectNervousness="true" AffectReputation="false" />
																																	</Sequence>
																																</AtomicDecorator>
																																<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_NAHODNA_PROHLIDKA_TRUHEL_ZJISTI_KRADEZ&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="30793871" />
																															</Sequence>
																														</Else>
																													</IfElseCondition>
																													<IfCondition failOnCondition="false" condition="~$checkHomeStashesData.stolenItemsFound">
																														<Sequence>
																															<Expression expressions="$movementSpeed = $enum:movementSpeed.run &#10; &#10;$checkHomeStashesData.stolenItemsFound = true" />
																															<LinkDataExpression From="$this.id" To="$checkHomeStashesData.home" Expresssion="$__link_crime_followUpBehavior_checkHomeStashes.stolenItemsFound = true &#10;$__link_crime_followUpBehavior_checkHomeStashes.information = $checkHomeStashesData.information" />
																														</Sequence>
																													</IfCondition>
																												</Sequence>
																											</Then>
																											<Else canSkip="1">
																												<IfCondition failOnCondition="false" condition="$checkHomeStashesData.playerRelated">
																													<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_CILENA_PROHLIDKA_TRUHEL_ZJISTI_KE_KRADEZI_NEDOSLO&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="97777084" />
																												</IfCondition>
																											</Else>
																										</IfElseCondition>
																										<ExecuteLua code="local stashEntity = XGenAIModule.GetEntityByWUID(data.stashes[0]); &#10;if (stashEntity.Properties.Lock.bLocked) then &#10;  stashEntity:Lock() &#10;end" />
																										<AddLink From="$this.id" To="$stashes[0]" Tag="&apos;crime_checkHomeStashes_checkedStash&apos;" Data="" LinkOpHandleMode="Error" />
																									</Sequence>
																									<Sequence>
																										<Expression expressions="$canCheckItem = false" />
																										<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																											<Child canSkip="1">
																												<DistanceGate Origin="$this.id" ReferencePt="$stashes[0]" Low="2.000000" High="2.000000" Negation="true" OpenInMiddle="false" RunLogic="Halt">
																													<Sequence>
																														<Expression expressions="$canCheckItem = true" />
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																												</DistanceGate>
																											</Child>
																											<OnSuccess canSkip="1">
																												<Expression expressions="$canCheckItem = false" />
																											</OnSuccess>
																										</FuseBox>
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</Sequence>
																								</Parallel>
																							</Then>
																							<Else canSkip="1">
																								<Expression expressions="$allStashesChecked = true" />
																							</Else>
																						</IfElseCondition>
																					</Sequence>
																				</LogToLabel>
																			</While>
																			<AtomicDecorator>
																				<Sequence>
																					<ForEach startIndex="0" step="1" array="$checkedStashes" iterator="" value="$checkedStashes_value" break="">
																						<RemoveLink From="$this.id" To="$checkedStashes_value" Tag="&apos;crime_checkHomeStashes_checkedStash&apos;" LinkOpHandleMode="Error" />
																					</ForEach>
																					<RemoveLink From="$this.id" To="$checkHomeStashesData.home" Tag="&apos;crime_followUpBehavior_checkHomeStashes&apos;" LinkOpHandleMode="Error" />
																					<IfCondition failOnCondition="false" condition="$checkHomeStashesData.stolenItemsFound &amp; &#10;$checkHomeStashesData.information ~= &apos;&apos;">
																						<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forcePebbleReaction="false" ignorePriority="true" information_look="$checkHomeStashesData.information" initiator="$enum:switch_interruptInitiator.scheduler" missingNpc="$__null" position="" previousReaction="$enum:crime_reactionKind.checkHomeStashes" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$enum:sound.movement" source="$checkHomeStashesData.source" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.theft" nodeLabel="29646809" />
																							</Then>
																							<Else canSkip="1">
																								<Sequence>
																									<ChooseReportDestination Information="$checkHomeStashesData.information" IsImportant="false" Destination="$reportDestination" DestinationType="$reportDestinationType" />
																									<IfCondition failOnCondition="false" condition="$reportDestinationType &gt; $enum:crime_reportDestinationType.none">
																										<Function_callInterrupt_report assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" disableDetectedIcon="true" disableEmitting="false" freshlyAttributedCrime="false" ignorePriority="true" information="$checkHomeStashesData.information" initiator="$enum:switch_interruptInitiator.scheduler" movementSpeed="$enum:movementSpeed.run" previousReaction="$enum:crime_reactionKind.checkHomeStashes" reportDestination="$reportDestination" reportDestinationType="$reportDestinationType" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.theft" nodeLabel="89603616" />
																									</IfCondition>
																								</Sequence>
																							</Else>
																						</EntityContextCheck>
																					</IfCondition>
																				</Sequence>
																			</AtomicDecorator>
																			<Expression expressions="$endBehavior = true" />
																		</Sequence>
																	</IfCondition>
																</ContinuousSwitch>
															</IfGate>
														</Parallel>
														<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.checkHomeStashes" nodeLabel="50834405" />
													</Sequence>
												</LogToLabel>
											</LogToLabel>
										</AddPerceivableState>
									</EntityContext>
								</EntityContext>
							</AnyDecorator>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<AtomicDecorator>
							<Function_crime_limits_removeReactionLink information="$checkHomeStashesData.information" reactionKind="$enum:crime_reactionKind.checkHomeStashes" nodeLabel="17761627" />
						</AtomicDecorator>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer>
			<While doFail="false" propagateChildFail="false" condition="~$movementFinished">
				<Sequence>
					<Expression expressions="$resetMovement = false" />
					<IfGate atomic="false" condition="~$resetMovement" RunLogic="Halt">
						<Sequence>
							<Move stopWithinDistance="3.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$stashes[0]" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$additionalParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
							<Expression expressions="$movementFinished = true" />
						</Sequence>
					</IfGate>
				</Sequence>
			</While>
			<Expression expressions="$movementFinished = false" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="allStashesChecked" comment="" />
				<Variable name="canCheckItem" comment="" />
				<Variable name="checkItem" comment="" />
				<Variable name="checkItemPos" comment="" />
				<Variable name="checkedStashes" comment="" />
				<Variable name="checkedStashes_value" comment="" />
				<Variable name="distanceToItem" comment="" />
				<Variable name="endBehavior" comment="" />
				<Variable name="feelingsToken" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="myPos" comment="" />
				<Variable name="playerInLongTermMemory" comment="" />
				<Variable name="reportDestination" comment="" />
				<Variable name="reportDestinationType" comment="" />
				<Variable name="robbedValue" comment="" />
				<Variable name="stash_owner" comment="" />
				<Variable name="stashes" comment="" />
				<Variable name="tempInformation" comment="" />
				<Variable name="theftVolumeSeenNotification" comment="" />
				<Variable name="checkHomeStashesData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-440" editorPosY="-20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_limits_confirmReactionLink>
															<CheckInformationKnowledge hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</CheckInformationKnowledge>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
															<Function_crime_checkLongTermMemoryTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_checkLongTermMemoryTrespass>
															<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</EntityContext>
																	</Then>
																	<Else>
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																	</Else>
																</IfElseCondition>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_crimeBark>
																			</IfCondition>
																		</Then>
																		<Else>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Else>
																								<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_crimeBark>
																							</Else>
																						</IsLoadedGate>
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</Sequence>
																				</Then>
																			</IfElseCondition>
																		</Else>
																	</IfElseCondition>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
																<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ClearInbox>
																		<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																								<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</LinkDataExpression>
																								<Function_crime_attributeCrimes hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_attributeCrimes>
																							</Sequence>
																						</Then>
																						<Else>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																								<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</LinkDataExpression>
																							</Sequence>
																						</Else>
																					</IfElseCondition>
																				</IfCondition>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</IfCondition>
																			</Sequence>
																		</ProcessMessage>
																	</Sequence>
																</While>
																<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</EntityContextElement>
																	</EntityContext>
																</IfGate>
																<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Child>
																							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</WaitAction>
																									</UrgencyDecorator>
																									<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</StopMovement>
																									<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Turn>
																								</Sequence>
																								<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_crimeBark>
																							</Parallel>
																						</Child>
																						<OnFail>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</OnFail>
																					</FuseBox>
																				</ForceLook>
																			</LogToLabel>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</VarOperation>
																							<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</VarOperation>
																							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</LinkTagFilter>
																								<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																								</Nodalyzer>
																							</GraphSearch>
																							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</EntityClassFilter>
																								<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Child0>
																										<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</WUIDFilter>
																									</Child0>
																								</NegationOp>
																								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</LinkTagFilter>
																								<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Child0>
																										<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</RangeSorter>
																									</Child0>
																								</Nodalyzer>
																								<CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</CategoryFilter>
																								<RangeFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</RangeFilter>
																							</GraphSearch>
																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_checkChest hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_checkChest>
																											</MoveParamsDecorator>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																											<GetStashRobbedValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetStashRobbedValue>
																											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</GetOwner>
																																			<Expression hasInputBreakpoint="0" comment="cannot pass nested var into reference variable below" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																			<Function_crime_createTheftInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_createTheftInformation>
																																			<Expression hasInputBreakpoint="0" comment="pass it back" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																			<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</ShowTutorial>
																																		</Sequence>
																																	</AtomicDecorator>
																																	<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_crimeBark>
																																</Sequence>
																															</Then>
																															<Else>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</CreateInformationWrapper>
																																			<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</SetDynamicInformationValue>
																																					<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetOwner>
																																					<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</SetDynamicInformationValue>
																																				</Sequence>
																																			</LockDynamicInformationValues>
																																			<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</IfCondition>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</IfCondition>
																																				<DefaultBranch>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</DefaultBranch>
																																			</Switch>
																																			<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</AffectFeelings>
																																		</Sequence>
																																	</AtomicDecorator>
																																	<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_crimeBark>
																																</Sequence>
																															</Else>
																														</IfElseCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</LinkDataExpression>
																															</Sequence>
																														</IfCondition>
																													</Sequence>
																												</Then>
																												<Else>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_crimeBark>
																													</IfCondition>
																												</Else>
																											</IfElseCondition>
																											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</ExecuteLua>
																											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</AddLink>
																										</Sequence>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																											<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Child>
																													<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																													</DistanceGate>
																												</Child>
																												<OnSuccess>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</OnSuccess>
																											</FuseBox>
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</Sequence>
																									</Parallel>
																								</Then>
																								<Else>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Else>
																							</IfElseCondition>
																						</Sequence>
																					</LogToLabel>
																				</While>
																				<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</RemoveLink>
																						</ForEach>
																						<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</RemoveLink>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_callInterrupt_lookAround>
																								</Then>
																								<Else>
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</ChooseReportDestination>
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Function_callInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_callInterrupt_report>
																										</IfCondition>
																									</Sequence>
																								</Else>
																							</EntityContextCheck>
																						</IfCondition>
																					</Sequence>
																				</AtomicDecorator>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Sequence>
																		</IfCondition>
																	</ContinuousSwitch>
																</IfGate>
															</Parallel>
															<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callFollowUpBehavior>
														</Sequence>
													</LogToLabel>
												</LogToLabel>
											</AddPerceivableState>
										</EntityContext>
									</EntityContext>
								</AnyDecorator>
							</EntityContext>
						</Child>
						<OnFail>
							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_limits_removeReactionLink>
							</AtomicDecorator>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest>
				<While editorPosX="5460" editorPosY="-300" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfGate>
					</Sequence>
				</While>
				<Expression editorPosX="5460" editorPosY="-380" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Expression>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>