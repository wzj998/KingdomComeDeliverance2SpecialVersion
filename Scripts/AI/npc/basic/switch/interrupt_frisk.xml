<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_frisk" is_function="0">
		<Variables>
			<Variable name="anyDecoratorPreset" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="assaultData" type="crime:assaultData" values="" isPersistent="0" form="single" />
			<Variable name="canInterruptLootLockpickAndReading" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="canUrge" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="chatStartPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="const_true" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="contextDialog" type="_float" values="" isPersistent="1" form="associative" />
			<Variable name="cooperationNotification" type="enum:crime_cooperationNotification" values="" isPersistent="0" form="single" />
			<Variable name="currentPlayerPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="directionStartPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="distanceStartToPlayer" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="escalateReaction" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="escalationContext" type="_float" values="" isPersistent="1" form="associative" />
			<Variable name="feedbackReceived" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="friskChatFeedback" type="crime:friskChatFeedback" values="" isPersistent="0" form="single" />
			<Variable name="friskDialogFeedback" type="crime:friskDialogFeedback" values="" isPersistent="0" form="single" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="knownInformations" type="information" values="" isPersistent="0" form="array" />
			<Variable name="lockOnFromSharedPerception" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="managedToGetCloseToPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="nextFriskData" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="useGeneratedNSO(true)" isPersistent="0" form="single" />
			<Variable name="perkChance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="playerFrisked" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="playersCooldowns" type="crime:globalCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="searchDirection_useless" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="skipToDialog" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="startBarkFinished" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stolenItems" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="stolenItemsChest" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="urgingPriority" type="enum:crime_playerUrgingPriority" values="$enum:crime_playerUrgingPriority.frisk_far" isPersistent="1" form="single" />
		</Variables>
		<Parameters>
			<Variable name="friskData" type="switch:interruptData:frisk" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<Sequence>
								<Function_crime_getAnyDecoratorPreset tryToKeepItems="false" tryToKeepSecondaryWeapon="true" presetString="$anyDecoratorPreset" nodeLabel="26768709" />
								<AnyDecorator preset="$anyDecoratorPreset" enabled="true">
									<EntityContext context="speech_greyOutE" target="$this.id">
										<EntityContextElement context="speech_greyOutE" enabled="true">
											<EntityContextElement context="crime_interrupt" enabled="true">
												<EntityContext context="crime_interruptFrisk" target="$this.id">
													<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
														<GameContext context="crime_escalationLevel_script_global_confrontingGeneral">
															<EntityContext context="crime_escalationLevel_confrontingGeneral" target="">
																<EntityContextElement context="crime_escalationLevel_confrontingGeneral" enabled="true">
																	<EntityContext context="crime_escalationLevel_script_confrontingGeneral" target="">
																		<EntityContextElement context="crime_escalationLevel_script_confrontingGeneral" enabled="true">
																			<EntityContext context="crime_escalationLevel_setFromBehavior_frisk" target="">
																				<GameContext context="crime_music_lowest">
																					<GameContext context="disableHangoverTeleport">
																						<EntityContext context="crime_nrbLevel_confronting" target="">
																							<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:frisk&apos;">
																								<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$friskData.stimulusKind&apos;">
																									<Sequence>
																										<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.frisk" nodeLabel="36480799" />
																										<Function_crime_checkInterruptInformation information="$friskData.information" nodeLabel="53781138" />
																										<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																										<IfCondition failOnCondition="false" condition="~$playerFrisked">
																											<UrgencyDecorator Urgency="Fast">
																												<Parallel successMode="Any" failureMode="Any">
																													<IfGate atomic="false" condition="$playerFrisked" RunLogic="KeepRunning">
																														<Success />
																													</IfGate>
																													<Loop count="-1">
																														<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cooperationNotification" senderInfo="" inbox="&apos;crime_cooperationNotification&apos;" condition="" answerVar="">
																															<Switch>
																																<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.crimeResolved">
																																	<Expression expressions="$playerFrisked = true" />
																																</IfCondition>
																																<DefaultBranch>
																																	<Success />
																																</DefaultBranch>
																															</Switch>
																														</ProcessMessage>
																													</Loop>
																													<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																														<Sequence>
																															<LuaGate code="return player.human:IsInDialog()" saveVersion="2">
																																<Then canSkip="1">
																																	<Sequence>
																																		<UrgencyDecorator Urgency="Fast">
																																			<WaitAction />
																																		</UrgencyDecorator>
																																		<StopMovement waitUntilStopped="false" />
																																	</Sequence>
																																</Then>
																																<Else canSkip="1">
																																	<Success />
																																</Else>
																															</LuaGate>
																															<Loop count="-1">
																																<IfElseCondition failOnCondition="false" condition="$canUrge" saveVersion="2">
																																	<Then canSkip="1">
																																		<Parallel successMode="Any" failureMode="Any">
																																			<IfGate atomic="false" condition="~$canUrge" RunLogic="KeepRunning">
																																				<Success />
																																			</IfGate>
																																			<CrimeFollower Target="$__player" Mode="DontBackOff" Role="Main" RelativeSpeedLimit="Dash" DisableGhosting="true" />
																																		</Parallel>
																																	</Then>
																																	<Else canSkip="1">
																																		<Parallel successMode="Any" failureMode="Any">
																																			<IfGate atomic="false" condition="$canUrge" RunLogic="KeepRunning">
																																				<Success />
																																			</IfGate>
																																			<CrimeFollower Target="$__player" Mode="DontBackOff" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="true" />
																																		</Parallel>
																																	</Else>
																																</IfElseCondition>
																															</Loop>
																														</Sequence>
																													</MoveParamsDecorator>
																													<Function_crime_estimatePlayersPosition estimatePlayersPosition="$const_true" estimationStartPos="$directionStartPos" positionShared="$lockOnFromSharedPerception" nodeLabel="68012233" />
																													<CallDecorator_crime_sharePlayersPosition>
																														<Subtree canSkip="1">
																															<Function_crime_sharePlayersLastSeenPosition allowedAssistance="$enum:crime_allowedSharePlayerPosAssistance.none" requestVisualAssistanceFromOthers="false" direction="" position="" nodeLabel="44518191" />
																														</Subtree>
																														<PositionUpdatedFromOtherNpc canSkip="1">
																															<CallbackEventCatch_empty>
																																<Success />
																															</CallbackEventCatch_empty>
																														</PositionUpdatedFromOtherNpc>
																														<PlayerFound canSkip="1">
																															<CallbackEventCatch_empty>
																																<Expression expressions="$lockOnFromSharedPerception = true" />
																															</CallbackEventCatch_empty>
																														</PlayerFound>
																														<PointingStart canSkip="1">
																															<CallbackEventCatch_empty>
																																<Success />
																															</CallbackEventCatch_empty>
																														</PointingStart>
																														<PointingEnd canSkip="1">
																															<CallbackEventCatch_empty>
																																<Success />
																															</CallbackEventCatch_empty>
																														</PointingEnd>
																													</CallDecorator_crime_sharePlayersPosition>
																													<Function_crime_playerInstantRecognitionHandler nodeLabel="74147069" />
																													<Sequence>
																														<FuseBox StatusPropagation="Success" OneCleanup="true" saveVersion="2">
																															<Child canSkip="1">
																																<Parallel successMode="Any" failureMode="Any">
																																	<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																		<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;STRAZ_VYZYVA_K_FRISKU_PRVNI_VYZVA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="20664555" />
																																	</IfGate>
																																	<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;crime_playerUrging_waiting&apos;" RunLogic="KeepRunning">
																																		<Success />
																																	</ExternalLock>
																																</Parallel>
																															</Child>
																															<OnFail canSkip="1">
																																<Expression expressions="$startBarkFinished = true &#10;$canInterruptLootLockpickAndReading = true" />
																															</OnFail>
																														</FuseBox>
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																													<ContinuousSwitch>
																														<IfCondition failOnCondition="false" condition="$escalateReaction &amp;  &#10;$friskChatFeedback.action == $enum:crime_friskChatResult.evade">
																															<AtomicDecorator>
																																<Sequence>
																																	<CreateInformationWrapper Label="&apos;friskRefusal&apos;" PerceivedWuid="$__player" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
																																	<Function_callInterrupt_attack assaultData="$assaultData" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" escalatedFromFailedSurrender="false" freshlyAttributedCrime="false" ignorePriority="true" information="$information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.frisk" priority="160" questBehavior="false" relationOverride="true" stimulusKind="$enum:crime_stimulusKind.friskRefusal" target="$__player" nodeLabel="32190203" />
																																</Sequence>
																															</AtomicDecorator>
																														</IfCondition>
																														<IfCondition failOnCondition="false" condition="true">
																															<Parallel successMode="Any" failureMode="Any">
																																<Function_crime_managePlayerUrging canUrge="$canUrge" priority="$urgingPriority" nodeLabel="64246696" />
																																<ContinuousSwitch>
																																	<IfCondition failOnCondition="false" condition="$managedToGetCloseToPlayer">
																																		<Parallel successMode="Any" failureMode="Any">
																																			<IfCondition failOnCondition="false" condition="$managedToGetCloseToPlayer">
																																				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																																					<Child canSkip="1">
																																						<ForceLook LookTarget="$__player" DisableVariations="true">
																																							<Sequence>
																																								<StanceCheck soul="$__player" stance="lying" smartObject="" negate="false" failOnCondition="false" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$skipToDialog = true" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Success />
																																									</Else>
																																								</StanceCheck>
																																								<IsTimeSkipping saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$skipToDialog = true" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Success />
																																									</Else>
																																								</IsTimeSkipping>
																																								<IfElseCondition failOnCondition="false" condition="$skipToDialog" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.frisk" />
																																									</Else>
																																								</IfElseCondition>
																																								<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																									<Parallel successMode="Any" failureMode="Any">
																																										<Sequence>
																																											<SuppressFailure>
																																												<TenseCircumstanceBarrier RunLogic="Halt">
																																													<LogToLabel Name="&apos;tense&apos;" Wuid="" Message="&apos;under TenseCircumstanceBarrier&apos;">
																																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																													</LogToLabel>
																																												</TenseCircumstanceBarrier>
																																											</SuppressFailure>
																																											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																										</Sequence>
																																										<ContinuousSwitch>
																																											<IfCondition failOnCondition="false" condition="$escalateReaction">
																																												<Sequence>
																																													<Function_crime_patch_animalUIName nodeLabel="67087826" />
																																													<GetKnownInformations OutArray="$knownInformations" Holder="$this.id" />
																																													<ResolveCrimeDecorator Information="$knownInformations">
																																														<FaderBarrier Fader="&apos;crimeDialog&apos;" MuteSounds="false">
																																															<Sequence>
																																																<Function_crime_findStolenItems filterByInventory="" stolenItems="$stolenItems" nodeLabel="69496238" />
																																																<Sequence>
																																																	<ExecuteLua code="data.perkChance = player.soul:GetDerivedStat(&apos;fac&apos;)" />
																																																	<IfElseCondition failOnCondition="false" condition="#stolenItems &gt; 0" saveVersion="2">
																																																		<Then canSkip="1">
																																																			<RandomGate opensWithChance="$perkChance" saveVersion="2">
																																																				<Then canSkip="1">
																																																					<Expression expressions="$contextDialog[&apos;stolen_items_found&apos;] = 0 &#10;$contextDialog[&apos;use_perk_hidden_pockets&apos;] = 1" />
																																																				</Then>
																																																				<Else canSkip="1">
																																																					<Expression expressions="$contextDialog[&apos;stolen_items_found&apos;] = 1 &#10;$contextDialog[&apos;use_perk_hidden_pockets&apos;] = 0" />
																																																				</Else>
																																																			</RandomGate>
																																																		</Then>
																																																		<Else canSkip="1">
																																																			<Expression expressions="$contextDialog[&apos;stolen_items_found&apos;] = 0 &#10;$contextDialog[&apos;use_perk_hidden_pockets&apos;] = 0" />
																																																		</Else>
																																																	</IfElseCondition>
																																																</Sequence>
																																																<Expression expressions="$contextDialog[&apos;frisk_long&apos;] = $friskChatFeedback.action == $enum:crime_friskChatResult.discuss" />
																																																<IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
																																																	<Then canSkip="1">
																																																		<AddBuff SoulWUID="$__player" BuffGUID="&apos;bd22f98a-e61f-4d83-b39c-79d1d85b6b91&apos;" />
																																																	</Then>
																																																</IsUnconsciousCheck>
																																																<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.tryDialogAnimations" context="$contextDialog" customParameters="" metarole="&apos;STRAZ_FRISK&apos;" preset="$enum:dialogPreset.fader" recipient="$__player" recipientMetaroles="" nodeLabel="52842728" />
																																																<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$friskDialogFeedback" senderInfo="" inbox="&apos;crime_friskDialogFeedback&apos;" condition="" answerVar="">
																																																	<Sequence>
																																																		<Switch>
																																																			<IfCondition failOnCondition="false" condition="$friskDialogFeedback.action == $enum:crime_friskDialogResult.frisk">
																																																				<Sequence>
																																																					<Function_crime_getStolenItemsStorageChest inventory="" storage="$stolenItemsChest" nodeLabel="18575786" />
																																																					<Function_crime_destroyTheftVolumesForConfiscatedItems confiscationMethod="$enum:confiscateItems.all" nodeLabel="39319898" />
																																																					<Confiscate ConfiscateItems="All" ConfiscateFine="false" TargetStash="$stolenItemsChest" />
																																																					<Function_callInterrupt_mindPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.frisk" soundType="$enum:sound.invalid" stimulusKind="$friskData.stimulusKind" nodeLabel="32423317" />
																																																				</Sequence>
																																																			</IfCondition>
																																																			<IfCondition failOnCondition="false" condition="$friskDialogFeedback.action == $enum:crime_friskDialogResult.fight">
																																																				<Sequence>
																																																					<CreateInformationWrapper Label="&apos;friskRefusal&apos;" PerceivedWuid="$__player" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
																																																					<Function_callInterrupt_attack assaultData="$assaultData" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" escalatedFromFailedSurrender="false" freshlyAttributedCrime="false" ignorePriority="true" information="$information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.frisk" priority="160" questBehavior="false" relationOverride="true" stimulusKind="$enum:crime_stimulusKind.friskRefusal" target="$__player" nodeLabel="13181444" />
																																																				</Sequence>
																																																			</IfCondition>
																																																			<DefaultBranch>
																																																				<Success />
																																																			</DefaultBranch>
																																																		</Switch>
																																																		<Expression expressions="$playerFrisked = true" />
																																																	</Sequence>
																																																</ProcessMessage>
																																																<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																															</Sequence>
																																														</FaderBarrier>
																																													</ResolveCrimeDecorator>
																																												</Sequence>
																																											</IfCondition>
																																											<IfCondition failOnCondition="false" condition="true">
																																												<Sequence>
																																													<GetSpatialInfo In="$this.id" Out="$chatStartPos" What="Position" />
																																													<Parallel successMode="Any" failureMode="Any">
																																														<Sequence>
																																															<LuaGate code="return entity.soul:GetState(&apos;health&apos;) &gt; RPG.LowHealthThreshold" saveVersion="2">
																																																<Then canSkip="1">
																																																	<PlayAdditiveAnimation Fragment="&apos;GuardStop&apos;" Tags="" />
																																																</Then>
																																																<Else canSkip="1">
																																																	<Success />
																																																</Else>
																																															</LuaGate>
																																															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																														</Sequence>
																																														<IfGate atomic="false" condition="$startBarkFinished" RunLogic="KeepRunning">
																																															<Sequence>
																																																<IsLoadedGate saveVersion="2">
																																																	<Then canSkip="1">
																																																		<VariableExistsGate VarToTest="$escalationContext[&apos;surrenderAttempts&apos;]" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
																																																			<Then canSkip="1">
																																																				<Success />
																																																			</Then>
																																																			<Else canSkip="1">
																																																				<Expression expressions="$escalationContext[&apos;surrenderAttempts&apos;] = 0" />
																																																			</Else>
																																																		</VariableExistsGate>
																																																	</Then>
																																																	<Else canSkip="1">
																																																		<Expression expressions="$escalationContext[&apos;surrenderAttempts&apos;] = 0" />
																																																	</Else>
																																																</IsLoadedGate>
																																																<Parallel successMode="All" failureMode="Any">
																																																	<Loop count="-1">
																																																		<Sequence>
																																																			<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																																			<SuppressFailure>
																																																				<AtomicDecorator>
																																																					<Sequence>
																																																						<InstantReadMessage variable="$friskChatFeedback" senderInfo="" inbox="&apos;crime_friskChatFeedback&apos;" condition="" />
																																																						<Expression expressions="$feedbackReceived = true" />
																																																					</Sequence>
																																																				</AtomicDecorator>
																																																			</SuppressFailure>
																																																			<IfCondition failOnCondition="false" condition="~$feedbackReceived">
																																																				<Sequence>
																																																					<Expression expressions="$escalationContext[&apos;surrenderAttempts&apos;] += 1" />
																																																					<IfElseCondition failOnCondition="false" condition="$escalationContext[&apos;surrenderAttempts&apos;] &gt;= 4" saveVersion="2">
																																																						<Then canSkip="1">
																																																							<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.evade" />
																																																						</Then>
																																																						<Else canSkip="1">
																																																							<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$escalationContext" dramaticBark="false" lookAt="$__player" metarole="&apos;STRAZ_VYZYVA_K_FRISKU_OPAKOVANA_VYZVA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="17859701" />
																																																						</Else>
																																																					</IfElseCondition>
																																																				</Sequence>
																																																			</IfCondition>
																																																		</Sequence>
																																																	</Loop>
																																																	<Sequence>
																																																		<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="&apos;STRAZ_VYZYVA_K_FRISKU&apos;" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="61726435" />
																																																		<IfGate atomic="false" condition="$feedbackReceived" RunLogic="KeepRunning">
																																																			<Switch>
																																																				<IfCondition failOnCondition="false" condition="$friskChatFeedback == $enum:crime_friskChatResult.frisk | &#10;$friskChatFeedback == $enum:crime_friskChatResult.discuss">
																																																					<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.resolve &#10;$escalateReaction = true" />
																																																				</IfCondition>
																																																				<DefaultBranch>
																																																					<Expression expressions="$escalateReaction = true" />
																																																				</DefaultBranch>
																																																			</Switch>
																																																		</IfGate>
																																																	</Sequence>
																																																	<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$friskChatFeedback" senderInfo="" inbox="&apos;crime_friskChatFeedback&apos;" condition="" answerVar="">
																																																		<Expression expressions="$feedbackReceived = true" />
																																																	</ProcessMessage>
																																																</Parallel>
																																															</Sequence>
																																														</IfGate>
																																														<Sequence>
																																															<Function_crime_waitForWeaponChange npc="$__player" succeedOnArmed="true" nodeLabel="95976474" />
																																															<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="true" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;STRAZ_REAGUJE_NA_VYTAZENI_ZBRANE_PRI_FRISKU&apos;" priority="$enum:crime_barkPriority.addressingPlayer_important" nodeLabel="29400596" />
																																															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																														</Sequence>
																																														<IfGate atomic="false" condition="$canInterruptLootLockpickAndReading" RunLogic="KeepRunning">
																																															<Sequence>
																																																<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																<Parallel successMode="Any" failureMode="Any">
																																																	<LinkGate from="$__player" to="" tag="&apos;lockpick&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																																																		<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.resolve &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$escalateReaction = true" />
																																																	</LinkGate>
																																																	<LinkGate from="$__player" to="" tag="&apos;loot&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																																																		<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.resolve &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$escalateReaction = true" />
																																																	</LinkGate>
																																																	<ActorStateBarrier Who="$__player" ToState="reading" NegateTo="false" RunLogic="KeepRunning">
																																																		<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.resolve &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$escalateReaction = true" />
																																																	</ActorStateBarrier>
																																																	<ActorStateBarrier Who="$__player" ToState="readingFromInventory" NegateTo="false" RunLogic="KeepRunning">
																																																		<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.resolve &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$escalateReaction = true" />
																																																	</ActorStateBarrier>
																																																</Parallel>
																																															</Sequence>
																																														</IfGate>
																																														<Loop count="-1">
																																															<Sequence>
																																																<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																<GetSpatialInfo In="$__player" Out="$currentPlayerPos" What="Position" />
																																																<MeasureDistance position1="$chatStartPos" position2="$currentPlayerPos" mode="ThreeDimensions" result="$distanceStartToPlayer" />
																																																<IfCondition failOnCondition="false" condition="$distanceStartToPlayer &gt; $data:script_param[&apos;crime_arrest_maxDistanceFromChatStart&apos;].value">
																																																	<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.evade" />
																																																</IfCondition>
																																															</Sequence>
																																														</Loop>
																																														<While doFail="false" propagateChildFail="false" condition="~$escalateReaction">
																																															<IsTimeSkipping saveVersion="2">
																																																<Then canSkip="1">
																																																	<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																</Then>
																																																<Else canSkip="1">
																																																	<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																</Else>
																																															</IsTimeSkipping>
																																														</While>
																																														<DeadUnconsciousGate Who="$__player" State="Unconscious" Negation="false" RunLogic="KeepRunning">
																																															<Sequence>
																																																<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.discuss &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve &#10;$contextDialog[&apos;unconscious&apos;] = 1" />
																																																<Function_crime_getGlobalCrimeLinkData linkData="$playersCooldowns" nodeLabel="40252109" />
																																																<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
																																																<IfCondition failOnCondition="false" condition="$now &lt; $playersCooldowns.robWhileUnconsciousTimestamp + $data:script_param[&apos;crime_robUnconsciousPlayerCooldown&apos;].value">
																																																	<Expression expressions="$contextDialog[&apos;unconsciousAndRobbed&apos;] = 1" />
																																																</IfCondition>
																																															</Sequence>
																																														</DeadUnconsciousGate>
																																														<StanceBarrier soul="$__player" stance="horse" smartObject="" negate="true" failOnCondition="false" RunLogic="KeepRunning">
																																															<StanceBarrier soul="$__player" stance="horse" smartObject="" negate="false" failOnCondition="false" RunLogic="KeepRunning">
																																																<Sequence>
																																																	<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.evade" />
																																																	<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																																</Sequence>
																																															</StanceBarrier>
																																														</StanceBarrier>
																																													</Parallel>
																																												</Sequence>
																																											</IfCondition>
																																										</ContinuousSwitch>
																																									</Parallel>
																																								</IfGate>
																																							</Sequence>
																																						</ForceLook>
																																					</Child>
																																					<OnFail canSkip="1">
																																						<Sequence>
																																							<GetTime TimeType="GameTime" OutVar="$nextFriskData" Delta="&apos;45m&apos;" />
																																							<AddLink From="$__player" To="$__player" Tag="&apos;crime_nextFrisk&apos;" Data="$nextFriskData" LinkOpHandleMode="OverWrite" />
																																						</Sequence>
																																					</OnFail>
																																				</FuseBox>
																																			</IfCondition>
																																		</Parallel>
																																	</IfCondition>
																																	<IfCondition failOnCondition="false" condition="true">
																																		<Parallel successMode="Any" failureMode="Any">
																																			<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="7.000000" High="7.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																																				<Expression expressions="$managedToGetCloseToPlayer = true" />
																																			</DistanceGate>
																																			<Loop count="-1">
																																				<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																					<Sequence>
																																						<Wait duration="&apos;1m&apos;" timeType="GameTime" doFail="false" variation="" />
																																						<Expression expressions="$escalateReaction = true &#10;$friskChatFeedback.action = $enum:crime_friskChatResult.evade" />
																																					</Sequence>
																																				</IfGate>
																																			</Loop>
																																		</Parallel>
																																	</IfCondition>
																																</ContinuousSwitch>
																															</Parallel>
																														</IfCondition>
																													</ContinuousSwitch>
																												</Parallel>
																											</UrgencyDecorator>
																										</IfCondition>
																										<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.frisk" nodeLabel="87465678" />
																									</Sequence>
																								</LogToLabel>
																							</LogToLabel>
																						</EntityContext>
																					</GameContext>
																				</GameContext>
																			</EntityContext>
																		</EntityContextElement>
																	</EntityContext>
																</EntityContextElement>
															</EntityContext>
														</GameContext>
													</AddPerceivableState>
												</EntityContext>
											</EntityContextElement>
										</EntityContextElement>
									</EntityContext>
								</AnyDecorator>
							</Sequence>
						</EntityContext>
					</Child>
					<OnSuccess canSkip="1">
						<Sequence>
							<Function_crime_addLeavingInterruptCooldown nodeLabel="24455979" />
							<AtomicDecorator>
								<Function_crime_limits_removeReactionLink information="$friskData.information" reactionKind="$enum:crime_reactionKind.frisk" nodeLabel="78655258" />
							</AtomicDecorator>
						</Sequence>
					</OnSuccess>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="frisk" EventSet="">
			<Variables>
				<Variable name="anyDecoratorPreset" comment="" />
				<Variable name="assaultData" comment="" />
				<Variable name="canInterruptLootLockpickAndReading" comment="" />
				<Variable name="canUrge" comment="" />
				<Variable name="chatStartPos" comment="" />
				<Variable name="const_true" comment="" />
				<Variable name="contextDialog" comment="" />
				<Variable name="cooperationNotification" comment="" />
				<Variable name="currentPlayerPos" comment="" />
				<Variable name="directionStartPos" comment="" />
				<Variable name="distanceStartToPlayer" comment="" />
				<Variable name="escalateReaction" comment="" />
				<Variable name="escalationContext" comment="" />
				<Variable name="feedbackReceived" comment="" />
				<Variable name="friskChatFeedback" comment="" />
				<Variable name="friskDialogFeedback" comment="" />
				<Variable name="information" comment="" />
				<Variable name="knownInformations" comment="" />
				<Variable name="lockOnFromSharedPerception" comment="" />
				<Variable name="managedToGetCloseToPlayer" comment="" />
				<Variable name="nextFriskData" comment="" />
				<Variable name="now" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="perkChance" comment="" />
				<Variable name="playerFrisked" comment="" />
				<Variable name="playersCooldowns" comment="" />
				<Variable name="searchDirection_useless" comment="" />
				<Variable name="skipToDialog" comment="" />
				<Variable name="startBarkFinished" comment="" />
				<Variable name="stolenItems" comment="" />
				<Variable name="stolenItemsChest" comment="" />
				<Variable name="urgingPriority" comment="" />
				<Variable name="friskData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-700" editorPosY="-540" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_getAnyDecoratorPreset>
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_limits_confirmReactionLink>
																											<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_checkInterruptInformation>
																											<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																												<OutputBreakpoints />
																											</RemoveBuffs>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</IfGate>
																														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</IfCondition>
																																	<DefaultBranch>
																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Success>
																																	</DefaultBranch>
																																</Switch>
																															</ProcessMessage>
																														</Loop>
																														<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</WaitAction>
																																			</UrgencyDecorator>
																																			<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</StopMovement>
																																		</Sequence>
																																	</Then>
																																	<Else>
																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Success>
																																	</Else>
																																</LuaGate>
																																<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfElseCondition hasInputBreakpoint="0" comment="continuousSwitch with FF" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Success>
																																				</IfGate>
																																				<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</CrimeFollower>
																																			</Parallel>
																																		</Then>
																																		<Else>
																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Success>
																																				</IfGate>
																																				<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</CrimeFollower>
																																			</Parallel>
																																		</Else>
																																	</IfElseCondition>
																																</Loop>
																															</Sequence>
																														</MoveParamsDecorator>
																														<Function_crime_estimatePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_estimatePlayersPosition>
																														<CallDecorator_crime_sharePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Subtree>
																																<Function_crime_sharePlayersLastSeenPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_sharePlayersLastSeenPosition>
																															</Subtree>
																															<PositionUpdatedFromOtherNpc>
																																<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Success>
																																</CallbackEventCatch_empty>
																															</PositionUpdatedFromOtherNpc>
																															<PlayerFound>
																																<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="when someone directs me straight to player, reset escape timer" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</CallbackEventCatch_empty>
																															</PlayerFound>
																															<PointingStart>
																																<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Success>
																																</CallbackEventCatch_empty>
																															</PointingStart>
																															<PointingEnd>
																																<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Success>
																																</CallbackEventCatch_empty>
																															</PointingEnd>
																														</CallDecorator_crime_sharePlayersPosition>
																														<Function_crime_playerInstantRecognitionHandler hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_playerInstantRecognitionHandler>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Child>
																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_crimeBark>
																																		</IfGate>
																																		<ExternalLock hasInputBreakpoint="0" comment="if you didnt get to say startBark initially, dont try later" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Success>
																																		</ExternalLock>
																																	</Parallel>
																																</Child>
																																<OnFail>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</OnFail>
																															</FuseBox>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																														<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</CreateInformationWrapper>
																																		<Function_callInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_callInterrupt_attack>
																																	</Sequence>
																																</AtomicDecorator>
																															</IfCondition>
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_crime_managePlayerUrging hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_managePlayerUrging>
																																	<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Child>
																																							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<StanceCheck hasInputBreakpoint="0" comment="check before entering tenseCircumBarrier, but just remember it, go into resolve from under tenseCircumBarrier" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																										<Else>
																																											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Success>
																																										</Else>
																																									</StanceCheck>
																																									<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																										<Else>
																																											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Success>
																																										</Else>
																																									</IsTimeSkipping>
																																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																										<Else>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Else>
																																									</IfElseCondition>
																																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<TenseCircumstanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</Wait>
																																														</LogToLabel>
																																													</TenseCircumstanceBarrier>
																																												</SuppressFailure>
																																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Wait>
																																											</Sequence>
																																											<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Function_crime_patch_animalUIName hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Function_crime_patch_animalUIName>
																																														<GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</GetKnownInformations>
																																														<ResolveCrimeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<FaderBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Function_crime_findStolenItems hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Function_crime_findStolenItems>
																																																	<Sequence hasInputBreakpoint="0" comment="Perk #KCD2-105670" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</ExecuteLua>
																																																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																			<OutputBreakpoints />
																																																			<Then>
																																																				<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																					<OutputBreakpoints />
																																																					<Then>
																																																						<Expression hasInputBreakpoint="0" comment="SKALD handles notification" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</Then>
																																																					<Else>
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</Else>
																																																				</RandomGate>
																																																			</Then>
																																																			<Else>
																																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Expression>
																																																			</Else>
																																																		</IfElseCondition>
																																																	</Sequence>
																																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																	<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																		<OutputBreakpoints />
																																																		<Then>
																																																			<AddBuff hasInputBreakpoint="0" comment="remove unconsciousness" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</AddBuff>
																																																		</Then>
																																																	</IsUnconsciousCheck>
																																																	<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Function_speech_dialogInitiator>
																																																	<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Function_crime_getStolenItemsStorageChest hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Function_crime_getStolenItemsStorageChest>
																																																						<Function_crime_destroyTheftVolumesForConfiscatedItems hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Function_crime_destroyTheftVolumesForConfiscatedItems>
																																																						<Confiscate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Confiscate>
																																																						<Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Function_callInterrupt_mindPlayer>
																																																					</Sequence>
																																																				</IfCondition>
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</CreateInformationWrapper>
																																																						<Function_callInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Function_callInterrupt_attack>
																																																					</Sequence>
																																																				</IfCondition>
																																																				<DefaultBranch>
																																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Success>
																																																				</DefaultBranch>
																																																			</Switch>
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</Sequence>
																																																	</ProcessMessage>
																																																	<Wait hasInputBreakpoint="0" comment="KCD2-313009, should halt from above" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Wait>
																																																</Sequence>
																																															</FaderBarrier>
																																														</ResolveCrimeDecorator>
																																													</Sequence>
																																												</IfCondition>
																																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</GetSpatialInfo>
																																														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																	<OutputBreakpoints />
																																																	<Then>
																																																		<PlayAdditiveAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</PlayAdditiveAnimation>
																																																	</Then>
																																																	<Else>
																																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Success>
																																																	</Else>
																																																</LuaGate>
																																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Wait>
																																															</Sequence>
																																															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																		<OutputBreakpoints />
																																																		<Then>
																																																			<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																				<OutputBreakpoints />
																																																				<Then>
																																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Success>
																																																				</Then>
																																																				<Else>
																																																					<Expression hasInputBreakpoint="0" comment="gotta init" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</Else>
																																																			</VariableExistsGate>
																																																		</Then>
																																																		<Else>
																																																			<Expression hasInputBreakpoint="0" comment="gotta init" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</Else>
																																																	</IsLoadedGate>
																																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Wait>
																																																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																							<InstantReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																							</InstantReadMessage>
																																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																							</Expression>
																																																						</Sequence>
																																																					</AtomicDecorator>
																																																				</SuppressFailure>
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																							<OutputBreakpoints />
																																																							<Then>
																																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																								</Expression>
																																																							</Then>
																																																							<Else>
																																																								<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																								</Function_crime_crimeBark>
																																																							</Else>
																																																						</IfElseCondition>
																																																					</Sequence>
																																																				</IfCondition>
																																																			</Sequence>
																																																		</Loop>
																																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Function_speech_dialogInitiator>
																																																			<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</IfCondition>
																																																					<DefaultBranch>
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</DefaultBranch>
																																																				</Switch>
																																																			</IfGate>
																																																		</Sequence>
																																																		<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</ProcessMessage>
																																																	</Parallel>
																																																</Sequence>
																																															</IfGate>
																																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Function_crime_waitForWeaponChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Function_crime_waitForWeaponChange>
																																																<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Function_crime_crimeBark>
																																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Wait>
																																															</Sequence>
																																															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Wait>
																																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<LinkGate hasInputBreakpoint="0" comment="TODO: most likely redundant, player cant start action under tenseCircumstances" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</LinkGate>
																																																		<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</LinkGate>
																																																		<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</ActorStateBarrier>
																																																		<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																		</ActorStateBarrier>
																																																	</Parallel>
																																																</Sequence>
																																															</IfGate>
																																															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Wait>
																																																	<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</GetSpatialInfo>
																																																	<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</MeasureDistance>
																																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																	</IfCondition>
																																																</Sequence>
																																															</Loop>
																																															<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																	<OutputBreakpoints />
																																																	<Then>
																																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																	</Then>
																																																	<Else>
																																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Wait>
																																																	</Else>
																																																</IsTimeSkipping>
																																															</While>
																																															<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																	<Function_crime_getGlobalCrimeLinkData hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Function_crime_getGlobalCrimeLinkData>
																																																	<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</GetTime>
																																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																	</IfCondition>
																																																</Sequence>
																																															</DeadUnconsciousGate>
																																															<StanceBarrier hasInputBreakpoint="0" comment="KCD2-89853" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Wait>
																																																	</Sequence>
																																																</StanceBarrier>
																																															</StanceBarrier>
																																														</Parallel>
																																													</Sequence>
																																												</IfCondition>
																																											</ContinuousSwitch>
																																										</Parallel>
																																									</IfGate>
																																								</Sequence>
																																							</ForceLook>
																																						</Child>
																																						<OnFail>
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</GetTime>
																																								<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</AddLink>
																																							</Sequence>
																																						</OnFail>
																																					</FuseBox>
																																				</IfCondition>
																																			</Parallel>
																																		</IfCondition>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</DistanceGate>
																																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Wait>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Sequence>
																																					</IfGate>
																																				</Loop>
																																			</Parallel>
																																		</IfCondition>
																																	</ContinuousSwitch>
																																</Parallel>
																															</IfCondition>
																														</ContinuousSwitch>
																													</Parallel>
																												</UrgencyDecorator>
																											</IfCondition>
																											<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_callFollowUpBehavior>
																										</Sequence>
																									</LogToLabel>
																								</LogToLabel>
																							</EntityContext>
																						</GameContext>
																					</GameContext>
																				</EntityContext>
																			</EntityContextElement>
																		</EntityContext>
																	</EntityContextElement>
																</EntityContext>
															</GameContext>
														</AddPerceivableState>
													</EntityContext>
												</EntityContextElement>
											</EntityContextElement>
										</EntityContext>
									</AnyDecorator>
								</Sequence>
							</EntityContext>
						</Child>
						<OnSuccess>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_limits_removeReactionLink>
								</AtomicDecorator>
							</Sequence>
						</OnSuccess>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>