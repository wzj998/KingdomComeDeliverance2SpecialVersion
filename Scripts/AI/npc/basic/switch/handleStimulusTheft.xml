<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleStimulusTheft" is_function="1">
		<Variables>
			<Variable name="assaultData" type="crime:assaultData" values="" isPersistent="0" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="informationPrice" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="itemGuid" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="overrideFilename" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="overrideQSO" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="overrideTreename" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="ownerIsMeOrMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pivotType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="shouldOverride" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.direct" isPersistent="0" form="single" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.theft" isPersistent="0" form="single" />
			<Variable name="thisSoul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:stimulus:theft" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_switch_stimulusOverrideParse overrideLinkName="&apos;crime_overrideStimulus_theft&apos;" stimulusAnimalAbuse="" stimulusCombat="" stimulusEnemy="" stimulusEscalatedTrespass="" stimulusHit="" stimulusTheft="$stimulus" overrideFilename="$overrideFilename" overrideQSO="$overrideQSO" overrideTreename="$overrideTreename" shouldOverride="$shouldOverride" nodeLabel="75618524" />
					<IfElseCondition failOnCondition="false" condition="$shouldOverride" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<IncludeTree File="$overrideFilename" Name="$overrideTreename" nodeLabel="15258227" />
								<Expression expressions="$thisSoul.value = $this.id" />
								<SendAIConceptSignal_OverrideStimulusSuccess_theft npc="$thisSoul" qso="$overrideQSO" />
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<IfCondition failOnCondition="false" condition="$stimulus.method == $enum:crime_theftMethod.kettleEating">
									<SuppressFailure>
										<Sequence>
											<RetrieveInformation PerceivedWuid="$stimulus.pivot" label="&apos;theft&apos;" OutVariable="$stimulus.information" />
											<LockDynamicInformationValues Information="$stimulus.information">
												<Sequence>
													<GetDynamicInformationValue Information="$stimulus.information" Tag="&apos;value&apos;" Out="$informationPrice" />
													<Expression expressions="$informationPrice += $data:script_param[&apos;crime_kettle_eatFine&apos;].value" />
													<SetDynamicInformationValue Information="$stimulus.information" Tag="&apos;value&apos;" Variable="$informationPrice" Type="" Value="" />
												</Sequence>
											</LockDynamicInformationValues>
										</Sequence>
									</SuppressFailure>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.treatAsPersonalSource">
									<Expression expressions="$source = $enum:crime_source.personal" />
								</IfCondition>
								<Switch>
									<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
									</EntityContextCheck>
									<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
									</EntityContextCheck>
									<DefaultBranch>
										<Sequence>
											<IfElseCondition failOnCondition="false" condition="$stimulus.information.label == &apos;&apos;" saveVersion="2">
												<Then canSkip="1">
													<Function_crime_createTheftInformation count="$stimulus.count" immediate="$stimulus.immediate" isNonAttributedCrime="false" kettleType="$stimulus.kettleType" method="$stimulus.method" owner="$stimulus.owner" pivot="$stimulus.pivot" seenEquippedItems="" information="$information" nodeLabel="26226918" />
												</Then>
												<Else canSkip="1">
													<Expression expressions="$information = $stimulus.information" />
												</Else>
											</IfElseCondition>
											<GetType WUID="$information.perceivedWuid" OutString="$pivotType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
											<IfElseCondition failOnCondition="false" condition="$pivotType == &apos;ITM&apos;" saveVersion="2">
												<Then canSkip="1">
													<LockDynamicInformationValues Information="$information">
														<Sequence>
															<GetItemProperty itemId="$information.perceivedWuid" property="Guid" result="$itemGuid" />
															<SetDynamicInformationValue Information="$information" Tag="&apos;guid&apos;" Variable="$itemGuid" Type="" Value="" />
														</Sequence>
													</LockDynamicInformationValues>
												</Then>
												<Else canSkip="1">
													<Success />
												</Else>
											</IfElseCondition>
										</Sequence>
									</DefaultBranch>
								</Switch>
								<IfCondition failOnCondition="false" condition="$stimulus.owner ~= $__null">
									<IfElseCondition failOnCondition="false" condition="$stimulus.owner == $this.id" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$ownerIsMeOrMate = true" />
										</Then>
										<Else canSkip="1">
											<GetAreMates Npc1="$this.id" Npc2="$stimulus.owner" AreMates="$ownerIsMeOrMate" />
										</Else>
									</IfElseCondition>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$ownerIsMeOrMate">
									<SuppressFailure>
										<Sequence>
											<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
											</GraphSearch>
											<Function_crime_addFollowUp_checkHomeStashes home="$home" information="$information" playerRelated="true" resetStolenItemsFound="false" stolenItemsFound="true" added="" nodeLabel="59427709" />
										</Sequence>
									</SuppressFailure>
								</IfCondition>
								<CallDecorator_crime_chooseReaction>
									<Subtree canSkip="1">
										<ChooseReaction Information="$information" ReactionNpc="$__player" SkirmishDecisionReason="Perception" Source="$source" StimulusKind="$stimulusKind" />
									</Subtree>
									<Attack canSkip="1">
										<CallbackEventCatch_empty>
											<Function_callInterrupt_attack assaultData="$assaultData" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" escalatedFromFailedSurrender="false" freshlyAttributedCrime="$stimulus.freshlyAttributedCrime" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" priority="160" questBehavior="false" relationOverride="true" stimulusKind="$stimulusKind" target="$__player" nodeLabel="43684712" />
										</CallbackEventCatch_empty>
									</Attack>
									<Arrest canSkip="1">
										<CallbackEventCatch_empty>
											<Function_callInterrupt_arrest assaultData="$assaultData" crimeSeen="true" criminalFreshness="$enum:crime_criminalFreshness.unknown" freshlyAttributedCrime="$stimulus.freshlyAttributedCrime" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$source" stimulusKind="$stimulusKind" trespassingRepeatedly="false" nodeLabel="27469829" />
										</CallbackEventCatch_empty>
									</Arrest>
									<LookAround canSkip="1">
										<CallbackEventCatch_empty>
											<ErrorNode Message="&apos;Unhandled behavior \&apos;LookAround\&apos; for stimulus: $stimulusKind!&apos;" />
										</CallbackEventCatch_empty>
									</LookAround>
									<Flee canSkip="1">
										<CallbackEventCatch_fleeData>
											<Function_callInterrupt_flee assaultData="$assaultData" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" freshlyAttributedCrime="$stimulus.freshlyAttributedCrime" ignorePriority="$ignoreScheduledPriority" information="$information" initiator="$enum:switch_interruptInitiator.switch" isIndifferent="false" leaveLevel="false" mercyDialogueResult="$enum:crime_mercyDialogueResult.unknown" previousReaction="$enum:crime_reactionKind.unknown" priority="135" source="$source" stimulusKind="$stimulusKind" target="$__player" nodeLabel="72681111" />
										</CallbackEventCatch_fleeData>
									</Flee>
									<ReactionToRecognitionState_I canSkip="1">
										<CallbackEventCatch_empty>
											<Function_stealth_recognitionState_I_reaction target="$__player" nodeLabel="25259234" />
										</CallbackEventCatch_empty>
									</ReactionToRecognitionState_I>
									<ReactionToRecognitionState_II canSkip="1">
										<CallbackEventCatch_empty>
											<Function_stealth_recognitionState_II_reaction stimulusKind="$enum:crime_stimulusKind.theft" target="$__player" nodeLabel="16522501" />
										</CallbackEventCatch_empty>
									</ReactionToRecognitionState_II>
									<Report canSkip="1">
										<CallbackEventCatch_reportData>
											<Function_callInterrupt_report assaultData="$assaultData" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" disableDetectedIcon="false" disableEmitting="false" freshlyAttributedCrime="$stimulus.freshlyAttributedCrime" ignorePriority="$ignoreScheduledPriority" information="$information" initiator="$enum:switch_interruptInitiator.switch" movementSpeed="$enum:movementSpeed.sprint" previousReaction="$enum:crime_reactionKind.unknown" reportDestination="$destination" reportDestinationType="$destinationType" source="$source" stimulusKind="$stimulusKind" nodeLabel="16852170" />
										</CallbackEventCatch_reportData>
									</Report>
									<Scan canSkip="1">
										<CallbackEventCatch_empty>
											<ErrorNode Message="&apos;[$this.name;] Unhandled behavior \&apos;Scan\&apos; for stimulus: $stimulusKind!&apos;" />
										</CallbackEventCatch_empty>
									</Scan>
									<Selfhelp canSkip="1">
										<CallbackEventCatch_empty>
											<Function_callInterrupt_selfhelp assaultData="" criminalFreshness="$enum:crime_criminalFreshness.unknown" freshlyAttributedCrime="$stimulus.freshlyAttributedCrime" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$source" stimulusKind="$stimulusKind" nodeLabel="54849492" />
										</CallbackEventCatch_empty>
									</Selfhelp>
									<Watch canSkip="1">
										<CallbackEventCatch_empty>
											<Function_callInterrupt_watch assaultData="$assaultData" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" freshlyAttributedCrime="$stimulus.freshlyAttributedCrime" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$source" stimulusKind="$stimulusKind" target="$__player" nodeLabel="69166028" />
										</CallbackEventCatch_empty>
									</Watch>
								</CallDecorator_crime_chooseReaction>
							</Sequence>
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="assaultData" comment="" />
				<Variable name="home" comment="" />
				<Variable name="information" comment="" />
				<Variable name="informationPrice" comment="" />
				<Variable name="itemGuid" comment="" />
				<Variable name="overrideFilename" comment="" />
				<Variable name="overrideQSO" comment="" />
				<Variable name="overrideTreename" comment="" />
				<Variable name="ownerIsMeOrMate" comment="" />
				<Variable name="pivotType" comment="" />
				<Variable name="shouldOverride" comment="" />
				<Variable name="source" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="thisSoul" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-170" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_switch_stimulusOverrideParse hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_switch_stimulusOverrideParse>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</IncludeTree>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<SendAIConceptSignal_OverrideStimulusSuccess_theft hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SendAIConceptSignal_OverrideStimulusSuccess_theft>
								</Sequence>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="Try to modify value" breakpointFlags="0">
												<OutputBreakpoints />
												<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</RetrieveInformation>
												<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetDynamicInformationValue>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SetDynamicInformationValue>
													</Sequence>
												</LockDynamicInformationValues>
											</Sequence>
										</SuppressFailure>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
										</EntityContextCheck>
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
										</EntityContextCheck>
										<DefaultBranch>
											<Sequence hasInputBreakpoint="0" comment="For quest/skald items store GUID" breakpointFlags="0">
												<OutputBreakpoints />
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_crime_createTheftInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_createTheftInformation>
													</Then>
													<Else>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Else>
												</IfElseCondition>
												<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetType>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetItemProperty>
																<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</SetDynamicInformationValue>
															</Sequence>
														</LockDynamicInformationValues>
													</Then>
													<Else>
														<Success hasInputBreakpoint="0" comment="Don&apos;t care" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Else>
												</IfElseCondition>
											</Sequence>
										</DefaultBranch>
									</Switch>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetAreMates>
											</Else>
										</IfElseCondition>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<Function_crime_addFollowUp_checkHomeStashes hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_addFollowUp_checkHomeStashes>
											</Sequence>
										</SuppressFailure>
									</IfCondition>
									<CallDecorator_crime_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Subtree>
											<ChooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ChooseReaction>
										</Subtree>
										<Attack>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_callInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_attack>
											</CallbackEventCatch_empty>
										</Attack>
										<Arrest>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_callInterrupt_arrest hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_arrest>
											</CallbackEventCatch_empty>
										</Arrest>
										<LookAround>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ErrorNode>
											</CallbackEventCatch_empty>
										</LookAround>
										<Flee>
											<CallbackEventCatch_fleeData hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_callInterrupt_flee hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_flee>
											</CallbackEventCatch_fleeData>
										</Flee>
										<ReactionToRecognitionState_I>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_stealth_recognitionState_I_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_stealth_recognitionState_I_reaction>
											</CallbackEventCatch_empty>
										</ReactionToRecognitionState_I>
										<ReactionToRecognitionState_II>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_stealth_recognitionState_II_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_stealth_recognitionState_II_reaction>
											</CallbackEventCatch_empty>
										</ReactionToRecognitionState_II>
										<Report>
											<CallbackEventCatch_reportData hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_callInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_report>
											</CallbackEventCatch_reportData>
										</Report>
										<Scan>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ErrorNode>
											</CallbackEventCatch_empty>
										</Scan>
										<Selfhelp>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_callInterrupt_selfhelp hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_selfhelp>
											</CallbackEventCatch_empty>
										</Selfhelp>
										<Watch>
											<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_callInterrupt_watch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_watch>
											</CallbackEventCatch_empty>
										</Watch>
									</CallDecorator_crime_chooseReaction>
								</Sequence>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>