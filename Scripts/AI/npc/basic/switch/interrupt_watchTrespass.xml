<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_watchTrespass" is_function="0">
		<Variables>
			<Variable name="_dummyWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="atTheEdge" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="barkAnimFragment" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="canCheckStashes" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="canTalk" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="checkStashesBark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="counter" type="_int" values="" isPersistent="1" form="single" />
			<Variable name="counterPauseUsed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="counterPaused" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="distanceXY" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distanceZ" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="endWatching" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="escalationPaused" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="firstEvaluation" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="initialCounter" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="interiorArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isInsidePublicService" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isMyHome" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="makeSurePlayerLeft" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="moveToTheEdge" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="myPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="myTrespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="overrideBarksWithChat" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="overrideChatAlias" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="useGeneratedNSO(true)" isPersistent="0" form="single" />
			<Variable name="perceptionFocus" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="playAnim" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="playerLeft" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="playerLeftReactedTo" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="playerLostCounter" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="playerPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="playerWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="position" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="positionShared" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="resetPlayersEscape" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="searchDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="startBarkFinished" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="step" type="_int" values="1" isPersistent="0" form="single" />
			<Variable name="stimulusEscalatedTrespass" type="switch:stimulus:escalatedTrespass" values="" isPersistent="0" form="single" />
			<Variable name="supressMindPlayerArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="1" form="single" />
			<Variable name="trespassSeverenessInt" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="trespassSeverenessReal" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
			<Variable name="urgingPriority" type="enum:crime_playerUrgingPriority" values="$enum:crime_playerUrgingPriority.watchTrespass" isPersistent="0" form="single" />
			<Variable name="uselessArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="uselessBool" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="wokeUpFromSleep" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="watchTrespassData" type="switch:interruptData:watchTrespass" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<AnyDecorator preset="crime_keepStateAndItems" enabled="true">
								<EntityContextElement context="crime_interrupt" enabled="true">
									<EntityContext context="crime_interruptWatchTrespass" target="">
										<GameContext context="disableHangoverTeleport">
											<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
												<EntityContext context="crime_nrbLevel_confronting" target="">
													<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:watchTrespass&apos;">
														<LogToLabel Name="&apos;crime_trespassAngriness&apos;" Wuid="$this.id" Message="&apos;trespassAngriness:$counter&apos;">
															<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$watchTrespassData.stimulusKind&apos;">
																<Parallel successMode="Any" failureMode="Any">
																	<EntityContextCheck context="crime_bypassAlertDuringWatchTrespass" target="" saveVersion="2">
																		<Then canSkip="1">
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</Then>
																		<Else canSkip="1">
																			<GameContext context="crime_escalationLevel_script_global_confrontingTrespass">
																				<EntityContext context="crime_escalationLevel_confrontingTrespass" target="">
																					<EntityContextElement context="crime_escalationLevel_confrontingTrespass" enabled="true">
																						<EntityContext context="crime_escalationLevel_setFromBehavior_watchTrespass" target="">
																							<ContinuousSwitch>
																								<IfCondition failOnCondition="false" condition="$trespassSevereness &gt;= $enum:trespassLevel.personal">
																									<GameContext context="crime_music_low">
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</GameContext>
																								</IfCondition>
																								<IfCondition failOnCondition="false" condition="true">
																									<GameContext context="crime_music_negligible">
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</GameContext>
																								</IfCondition>
																							</ContinuousSwitch>
																						</EntityContext>
																					</EntityContextElement>
																				</EntityContext>
																			</GameContext>
																		</Else>
																	</EntityContextCheck>
																	<Function_crime_playerInstantRecognitionHandler nodeLabel="79884320" />
																	<Sequence>
																		<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.watchTrespass" nodeLabel="15153984" />
																		<Function_crime_checkInterruptInformation information="$watchTrespassData.information" nodeLabel="81760371" />
																		<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																		<SuppressFailure>
																			<Sequence>
																				<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																					<LinkTagFilter tag="&apos;crime_trespass_overrideBarksWithChat&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																					<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																					<Datalyzer Tag="&apos;crime_trespass_overrideBarksWithChat&apos;" Quantifiers="Exists" Parent="" Child="" Data="$overrideChatAlias" saveVersion="2" />
																				</GraphSearch>
																				<Expression expressions="$overrideBarksWithChat = true" />
																			</Sequence>
																		</SuppressFailure>
																		<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																		<IfCondition failOnCondition="false" condition="$trespassArea ~= $__null">
																			<SuppressFailure>
																				<Sequence>
																					<Function_crime_getHomeFromArea area="$trespassArea" home="$home" nodeLabel="94791888" />
																					<IfCondition failOnCondition="false" condition="$home ~= $__null">
																						<Sequence>
																							<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																								<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																								<WUIDFilter WUID="$home" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																								<EvaLLyzer Expresion="$isMyHome = true" Quantifiers="Exists" saveVersion="2" />
																							</GraphSearch>
																							<GetHomeTrespassEscalation Home="$home" Counter="$initialCounter" IsPaused="$escalationPaused" />
																						</Sequence>
																					</IfCondition>
																				</Sequence>
																			</SuppressFailure>
																		</IfCondition>
																		<EntityContextCheck context="crime_sleeping" target="" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$wokeUpFromSleep = true" />
																			</Then>
																		</EntityContextCheck>
																		<IfCondition failOnCondition="false" condition="~$reactionSuppressed">
																			<IfGate atomic="false" condition="~$reactionSuppressed" RunLogic="Halt">
																				<SubtreeDecorator saveVersion="2">
																					<Init canSkip="1">
																						<AddBuff SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" />
																					</Init>
																					<Subtree canSkip="1">
																						<ForceLook LookTarget="$__player" DisableVariations="true">
																							<Sequence>
																								<Parallel successMode="Any" failureMode="Any">
																									<Sequence>
																										<Parallel successMode="Any" failureMode="Any">
																											<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_playerUrging_urging&apos;" RunLogic="KeepRunning">
																												<Success />
																											</ExternalLock>
																											<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_playerUrging_waiting&apos;" RunLogic="KeepRunning">
																												<Success />
																											</ExternalLock>
																										</Parallel>
																										<Parallel successMode="Any" failureMode="Any">
																											<IfElseCondition failOnCondition="false" condition="$overrideBarksWithChat" saveVersion="2">
																												<Then canSkip="1">
																													<Sequence>
																														<Expression expressions="$startBarkFinished = true" />
																														<Loop count="-1">
																															<IfGate atomic="false" condition="$canTalk &amp; ~$playerLeft" RunLogic="KeepRunning">
																																<Function_speech_dialogInitiator alias="$overrideChatAlias" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="12507268" />
																															</IfGate>
																														</Loop>
																													</Sequence>
																												</Then>
																												<Else canSkip="1">
																													<Sequence>
																														<IfCondition failOnCondition="false" condition="$canTalk">
																															<IsLoadedGate saveVersion="2">
																																<Else canSkip="1">
																																	<IfElseCondition failOnCondition="false" condition="~$watchTrespassData.onlyWaitingForDeparture" saveVersion="2">
																																		<Then canSkip="1">
																																			<Sequence>
																																				<IfCondition failOnCondition="false" condition="$wokeUpFromSleep">
																																					<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;HRAC_PROBUDIL_NPC_V_TRESPASSU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="52013758" />
																																				</IfCondition>
																																				<Function_crime_trespass_playerEnteredBark counter="$initialCounter" isPaused="$escalationPaused" previousReaction="$watchTrespassData.previousReaction" trespassSevereness="$trespassSevereness" nodeLabel="48587838" />
																																			</Sequence>
																																		</Then>
																																		<Else canSkip="1">
																																			<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																																				<Then canSkip="1">
																																					<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;STRAZ_VYPROVAZI_HRACE_Z_TRESPASSU_(UVOD)&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="71193566" />
																																				</Then>
																																				<Else canSkip="1">
																																					<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_VYPROVAZI_HRACE_Z_TRESPASSU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="36194769" />
																																				</Else>
																																			</EntityContextCheck>
																																		</Else>
																																	</IfElseCondition>
																																</Else>
																															</IsLoadedGate>
																														</IfCondition>
																														<Expression expressions="$startBarkFinished = true" />
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																												</Else>
																											</IfElseCondition>
																											<Sequence>
																												<IsTimeSkipping saveVersion="2">
																													<Then canSkip="1">
																														<Sequence>
																															<UrgencyDecorator Urgency="Instant">
																																<WaitAction />
																															</UrgencyDecorator>
																															<StopMovement waitUntilStopped="false" />
																															<IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
																																<Else canSkip="1">
																																	<InterruptSkipTime />
																																</Else>
																															</IsUnconsciousCheck>
																														</Sequence>
																													</Then>
																													<Else canSkip="1">
																														<Success />
																													</Else>
																												</IsTimeSkipping>
																												<UrgencyDecorator Urgency="Fast">
																													<ContinuousSwitch>
																														<IfCondition failOnCondition="false" condition="~$playerLeft">
																															<ContinuousSwitch>
																																<IfCondition failOnCondition="false" condition="$canTalk &amp; $trespassSevereness &gt;= $enum:trespassLevel.personal">
																																	<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																																		<CrimeFollower Target="$__player" Mode="Default" Role="Main" RelativeSpeedLimit="Walk" DisableGhosting="false" />
																																	</MoveParamsDecorator>
																																</IfCondition>
																																<IfCondition failOnCondition="false" condition="true">
																																	<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																																		<CrimeFollower Target="$__player" Mode="Default" Role="Assist" RelativeSpeedLimit="Walk" DisableGhosting="false" />
																																	</MoveParamsDecorator>
																																</IfCondition>
																															</ContinuousSwitch>
																														</IfCondition>
																														<IfCondition failOnCondition="false" condition="$moveToTheEdge">
																															<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																																<Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__player" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
																															</MoveParamsDecorator>
																														</IfCondition>
																														<IfCondition failOnCondition="false" condition="true">
																															<Sequence>
																																<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
																																	<Then canSkip="1">
																																		<CrimeFollower Target="$__player" Mode="NoMoveOnlyTurn" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="false" />
																																	</Then>
																																	<Else canSkip="1">
																																		<Sequence>
																																			<WaitAction />
																																			<StopMovement waitUntilStopped="false" />
																																		</Sequence>
																																	</Else>
																																</HasSeenPlayer>
																																<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																															</Sequence>
																														</IfCondition>
																													</ContinuousSwitch>
																												</UrgencyDecorator>
																											</Sequence>
																										</Parallel>
																									</Sequence>
																									<Sequence>
																										<Switch>
																											<IfCondition failOnCondition="false" condition="$watchTrespassData.onlyWaitingForDeparture">
																												<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.postResolveWatchTrespass" />
																											</IfCondition>
																											<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.watchTrespass_authority" />
																												</Then>
																											</EntityContextCheck>
																											<DefaultBranch>
																												<Success />
																											</DefaultBranch>
																										</Switch>
																										<Function_crime_managePlayerUrging canUrge="$canTalk" priority="$urgingPriority" nodeLabel="20330571" />
																									</Sequence>
																									<Sequence>
																										<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;watchTrespassCounterActive&apos;" />
																										<Parallel successMode="Any" failureMode="Any">
																											<Loop count="-1">
																												<EntityContextBarrier context="speech_playerWasRecentlyInNormalDialog" target="$__player" Negation="true" RunLogic="Halt">
																													<GameContextBarrier context="cutsceneIsRunning" Negation="true" RunLogic="Halt">
																														<SubtreeDecorator saveVersion="2">
																															<Init canSkip="1">
																																<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;watchTrespassCounterActive&apos;" />
																															</Init>
																															<Subtree canSkip="1">
																																<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																															</Subtree>
																															<Cleanup canSkip="1">
																																<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;watchTrespassCounterActive&apos;" />
																															</Cleanup>
																														</SubtreeDecorator>
																													</GameContextBarrier>
																												</EntityContextBarrier>
																											</Loop>
																											<Loop count="-1">
																												<GameContextBarrier context="cutsceneIsRunning" Negation="false" RunLogic="Halt">
																													<GameContextBarrier context="cutsceneIsRunning" Negation="true" RunLogic="Halt">
																														<Sequence>
																															<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																															<Expression expressions="$playerLeft = ~$reaction &#10;$endWatching = ~$reaction" />
																														</Sequence>
																													</GameContextBarrier>
																												</GameContextBarrier>
																											</Loop>
																											<Loop count="-1">
																												<Sequence>
																													<Loop count="2">
																														<IfGate atomic="false" condition="~$playerLeft &amp; $canTalk" RunLogic="Halt">
																															<Sequence>
																																<SuppressFailure>
																																	<InstantExternalLock LockManagerType="Intellect" SemaphoreName="&apos;watchTrespassCounterActive&apos;" RunLogic="Halt">
																																		<AtomicDecorator>
																																			<Sequence>
																																				<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																																				<Function_crime_trespassSeverenessToInt trespassSevereness="$trespassSevereness" trespassSeverenessInt="$trespassSeverenessInt" nodeLabel="47289444" />
																																				<ReinitVariable variable="$counterPaused" />
																																				<IfCondition failOnCondition="false" condition="~$counterPauseUsed">
																																					<Sequence>
																																						<GetSpatialInfo In="$__player" Out="$position" What="Position" />
																																						<GetTrespass Position="$position" TrespassLevelOut="$trespassSeverenessReal" />
																																						<IfCondition failOnCondition="false" condition="$trespassSevereness &gt; $trespassSeverenessReal">
																																							<Expression expressions="$counterPaused = true &#10;$counterPauseUsed = true" />
																																						</IfCondition>
																																					</Sequence>
																																				</IfCondition>
																																				<IfCondition failOnCondition="false" condition="$home ~= $__null">
																																					<GetHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="$escalationPaused" />
																																				</IfCondition>
																																				<IfElseCondition failOnCondition="false" condition="$firstEvaluation" saveVersion="2">
																																					<Then canSkip="1">
																																						<Sequence>
																																							<Switch>
																																								<CheckNervousnessInterval Soul="" Flag="highToInf" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$counter = $counter &lt; 3 ? 3 : $counter" />
																																									</Then>
																																								</CheckNervousnessInterval>
																																								<CheckNervousnessInterval Soul="" Flag="midToInf" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$counter = $counter &lt; 2 ? 2 : $counter" />
																																									</Then>
																																								</CheckNervousnessInterval>
																																								<DefaultBranch>
																																									<Expression expressions="$counter = $counter &lt; 1 ? 1 : $counter" />
																																								</DefaultBranch>
																																							</Switch>
																																							<Expression expressions="$counter = $counter &gt;= $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value ? $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value - 1 : $counter" />
																																						</Sequence>
																																					</Then>
																																					<Else canSkip="1">
																																						<IfCondition failOnCondition="false" condition="~$escalationPaused &amp; ~$counterPaused">
																																							<Switch>
																																								<IfCondition failOnCondition="false" condition="$counter == $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value">
																																									<Expression expressions="$counter += 1" />
																																								</IfCondition>
																																								<DefaultBranch>
																																									<Sequence>
																																										<Expression expressions="$counter += ($trespassSeverenessInt * $step)" />
																																										<IsNightTimeOfDay saveVersion="2">
																																											<Then canSkip="1">
																																												<Expression expressions="$counter += 1" />
																																											</Then>
																																											<Else canSkip="1">
																																												<Success />
																																											</Else>
																																										</IsNightTimeOfDay>
																																										<Function_crime_hasWeaponDrawn checkingMethod="$enum:crime_weaponCheckingMethod.perceivableState" npc="$__player" result="$playerWeaponDrawn" nodeLabel="16703979" />
																																										<IsInsideAreaWithLabel Position="$__player" Label="&apos;fasterTrespassEscalation&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
																																											<Then canSkip="1">
																																												<Expression expressions="$counter += 2" />
																																											</Then>
																																										</IsInsideAreaWithLabel>
																																										<IfCondition failOnCondition="false" condition="$playerWeaponDrawn">
																																											<Expression expressions="$counter += 1" />
																																										</IfCondition>
																																										<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="atLeast_5_great" saveVersion="2">
																																											<Else canSkip="1">
																																												<Sequence>
																																													<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="atMost_1_horrible" saveVersion="2">
																																														<Then canSkip="1">
																																															<Expression expressions="$counter += 1" />
																																														</Then>
																																													</CheckRelationshipInterval_SoulToSoul>
																																													<CheckAngrinessInterval_Soul type="Material" Soul="$this.id" Flag="highToInf" saveVersion="2">
																																														<Then canSkip="1">
																																															<Expression expressions="$counter += 1" />
																																														</Then>
																																													</CheckAngrinessInterval_Soul>
																																												</Sequence>
																																											</Else>
																																										</CheckRelationshipInterval_SoulToSoul>
																																										<IfCondition failOnCondition="false" condition="$trespassSeverenessInt &lt;= 1 &#10;&amp; $counter &gt; $data:script_param[&apos;crime_semiTrespassMaxEscalationThreshold&apos;].value">
																																											<Expression expressions="$counter = $data:script_param[&apos;crime_semiTrespassMaxEscalationThreshold&apos;].value" />
																																										</IfCondition>
																																										<AffectFeelings Npc="$this.id" Token="&apos;interruptWatchTrespass_periodic&apos;" AffectNervousness="true" AffectReputation="false" />
																																										<IfCondition failOnCondition="false" condition="$counter &gt; $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value">
																																											<Expression expressions="$counter = $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value" />
																																										</IfCondition>
																																									</Sequence>
																																								</DefaultBranch>
																																							</Switch>
																																						</IfCondition>
																																					</Else>
																																				</IfElseCondition>
																																				<Expression expressions="$playerLeft = $playerLeft | ~$reaction" />
																																				<IfCondition failOnCondition="false" condition="~$playerLeft &amp; ~$escalationPaused &amp; ~$counterPaused">
																																					<Sequence>
																																						<IfCondition failOnCondition="false" condition="$home ~= $__null &amp; $canTalk">
																																							<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																																						</IfCondition>
																																						<IfCondition failOnCondition="false" condition="$counter &gt; $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value">
																																							<Sequence>
																																								<Expression expressions="$stimulusEscalatedTrespass.stimulusKind = $watchTrespassData.stimulusKind &#10;$stimulusEscalatedTrespass.trespassArea = $trespassArea &#10;$stimulusEscalatedTrespass.wuidType = $enum:crime_trespassInformationWuid.homeArea &#10;$stimulusEscalatedTrespass.trespassingRepeatedly = $watchTrespassData.onlyWaitingForDeparture" />
																																								<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																									<Function_switch_handleStimulusEscalatedTrespass stimulus="$stimulusEscalatedTrespass" nodeLabel="73733487" />
																																								</EntityContext>
																																							</Sequence>
																																						</IfCondition>
																																					</Sequence>
																																				</IfCondition>
																																			</Sequence>
																																		</AtomicDecorator>
																																	</InstantExternalLock>
																																</SuppressFailure>
																																<IfElseCondition failOnCondition="false" condition="$firstEvaluation" saveVersion="2">
																																	<Then canSkip="1">
																																		<Expression expressions="$firstEvaluation = false" />
																																	</Then>
																																	<Else canSkip="1">
																																		<IfCondition failOnCondition="false" condition="~$overrideBarksWithChat">
																																			<Sequence>
																																				<SuppressFailure>
																																					<LoopUntil until="Success" attemptCount="3">
																																						<HasSeenPlayer NPC="" FullyAwareOnly="false" saveVersion="2">
																																							<Then canSkip="1">
																																								<Success />
																																							</Then>
																																							<Else canSkip="1">
																																								<Sequence>
																																									<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																									<Fail />
																																								</Sequence>
																																							</Else>
																																						</HasSeenPlayer>
																																					</LoopUntil>
																																				</SuppressFailure>
																																				<Parallel successMode="All" failureMode="Any">
																																					<IfElseCondition failOnCondition="false" condition="~$watchTrespassData.onlyWaitingForDeparture" saveVersion="2">
																																						<Then canSkip="1">
																																							<IfCondition failOnCondition="false" condition="$counter &lt; $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value | ~$counterPaused">
																																								<Function_crime_trespass_playerStayingBark counter="$counter" trespassSevereness="$trespassSevereness" nodeLabel="55338716" />
																																							</IfCondition>
																																						</Then>
																																						<Else canSkip="1">
																																							<Switch>
																																								<EntityContextCheck context="crime_isCuman" target="" saveVersion="2">
																																									<Then canSkip="1">
																																										<Function_crime_trespass_playerStayingBark counter="0" trespassSevereness="$trespassSevereness" nodeLabel="42230448" />
																																									</Then>
																																								</EntityContextCheck>
																																								<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																																									<Then canSkip="1">
																																										<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;STRAZ_VYPROVAZI_HRACE_Z_TRESPASSU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="86698539" />
																																									</Then>
																																								</EntityContextCheck>
																																								<DefaultBranch>
																																									<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_VYPROVAZI_HRACE_Z_TRESPASSU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="17713833" />
																																								</DefaultBranch>
																																							</Switch>
																																						</Else>
																																					</IfElseCondition>
																																					<IfCondition failOnCondition="false" condition="$playAnim">
																																						<LuaGate code="return entity.soul:GetState(&apos;health&apos;) &gt; RPG.LowHealthThreshold" saveVersion="2">
																																							<Then canSkip="1">
																																								<Sequence>
																																									<Expression expressions="$barkAnimFragment = &apos;CrimeGoAway&apos;" />
																																									<Switch>
																																										<IfCondition failOnCondition="false" condition="$trespassSevereness &gt;= $enum:trespassLevel.personal">
																																											<Expression expressions="$barkAnimFragment += &apos;Hard&apos;" />
																																										</IfCondition>
																																										<DefaultBranch>
																																											<Expression expressions="$barkAnimFragment += &apos;Easy&apos;" />
																																										</DefaultBranch>
																																									</Switch>
																																									<PlayAdditiveAnimation Fragment="$barkAnimFragment" Tags="" />
																																									<Expression expressions="$playAnim = false" />
																																								</Sequence>
																																							</Then>
																																							<Else canSkip="1">
																																								<Success />
																																							</Else>
																																						</LuaGate>
																																					</IfCondition>
																																				</Parallel>
																																			</Sequence>
																																		</IfCondition>
																																	</Else>
																																</IfElseCondition>
																																<Switch>
																																	<IfCondition failOnCondition="false" condition="$counterPaused">
																																		<LogToLabel Name="&apos;watchTrespassAdditionalLoop&apos;" Wuid="" Message="&apos;ExtraLoop_MovedToLessSevereTrespass&apos;">
																																			<Wait duration="&apos;9s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																		</LogToLabel>
																																	</IfCondition>
																																	<IfCondition failOnCondition="false" condition="$counter == $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value">
																																		<Wait duration="&apos;9s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																	</IfCondition>
																																	<DefaultBranch>
																																		<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																	</DefaultBranch>
																																</Switch>
																															</Sequence>
																														</IfGate>
																													</Loop>
																													<Expression expressions="$playAnim = true" />
																												</Sequence>
																											</Loop>
																										</Parallel>
																									</Sequence>
																									<StanceBarrier soul="$__player" stance="lying" smartObject="" negate="false" failOnCondition="false" RunLogic="KeepRunning">
																										<Sequence>
																											<IfCondition failOnCondition="false" condition="$home ~= $__null &amp; $canTalk">
																												<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																											</IfCondition>
																											<Expression expressions="$stimulusEscalatedTrespass.stimulusKind = $watchTrespassData.stimulusKind &#10;$stimulusEscalatedTrespass.trespassArea = $trespassArea &#10;$stimulusEscalatedTrespass.wuidType = $enum:crime_trespassInformationWuid.homeArea &#10;$stimulusEscalatedTrespass.trespassingRepeatedly = $watchTrespassData.onlyWaitingForDeparture" />
																											<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																												<Function_switch_handleStimulusEscalatedTrespass stimulus="$stimulusEscalatedTrespass" nodeLabel="34956485" />
																											</EntityContext>
																										</Sequence>
																									</StanceBarrier>
																									<While doFail="false" propagateChildFail="false" condition="~$endWatching">
																										<Sequence>
																											<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																											<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																											<IsTimeSkipping saveVersion="2">
																												<Then canSkip="1">
																													<IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
																														<Else canSkip="1">
																															<InterruptSkipTime />
																														</Else>
																													</IsUnconsciousCheck>
																												</Then>
																												<Else canSkip="1">
																													<Success />
																												</Else>
																											</IsTimeSkipping>
																											<IfElseCondition failOnCondition="false" condition="$reaction" saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$playerLeft = false &#10;$playerLeftReactedTo = false" />
																												</Then>
																												<Else canSkip="1">
																													<Sequence>
																														<IsInsideAreaWithLabel Position="$__player" Label="&apos;publicServiceTrespassOverride&apos;" Area="$_dummyWuid" FailSubtMissing="false" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$isInsidePublicService = true" />
																															</Then>
																															<Else canSkip="1">
																																<Expression expressions="$isInsidePublicService = false" />
																															</Else>
																														</IsInsideAreaWithLabel>
																														<Expression expressions="$playerLeft = true" />
																														<EntityContextCheck context="crime_disableAllPostTrespassReactions" target="" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$makeSurePlayerLeft = false" />
																															</Then>
																															<Else canSkip="1">
																																<Expression expressions="$makeSurePlayerLeft = $trespassSevereness &gt;= $enum:trespassLevel.personal &amp; (~$reactionSuppressed | $isInsidePublicService)" />
																															</Else>
																														</EntityContextCheck>
																													</Sequence>
																												</Else>
																											</IfElseCondition>
																										</Sequence>
																									</While>
																									<While doFail="false" propagateChildFail="false" condition="true">
																										<IfGate atomic="false" condition="$playerLeft &amp; ~$endWatching" RunLogic="Halt">
																											<Sequence>
																												<IfElseCondition failOnCondition="false" condition="~$playerLeftReactedTo &amp; $canTalk" saveVersion="2">
																													<Then canSkip="1">
																														<Sequence>
																															<IfCondition failOnCondition="false" condition="$makeSurePlayerLeft">
																																<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$myTrespassArea" FailSubtMissing="false" saveVersion="2">
																																	<Then canSkip="1">
																																		<Sequence>
																																			<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																																				<Child canSkip="1">
																																					<Sequence>
																																						<Expression expressions="$moveToTheEdge = true &#10;$atTheEdge = false" />
																																						<While doFail="false" propagateChildFail="false" condition="~$atTheEdge">
																																							<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;prohibited&apos;" Negation="true" RunLogic="Halt">
																																								<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;personal&apos;" Negation="true" RunLogic="Halt">
																																									<Selector>
																																										<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="8.000000" High="8.000000" Negation="true" ValueOnMiddle="false" failOnCondition="true">
																																											<Expression expressions="$atTheEdge = true" />
																																										</DistanceCondition>
																																										<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;semipersonal&apos;" Negation="true" RunLogic="Halt">
																																											<Expression expressions="$atTheEdge = true" />
																																										</IsInsideAreaWithLabelBarrier>
																																									</Selector>
																																								</IsInsideAreaWithLabelBarrier>
																																							</IsInsideAreaWithLabelBarrier>
																																						</While>
																																					</Sequence>
																																				</Child>
																																				<OnFail canSkip="1">
																																					<Expression expressions="$moveToTheEdge = false" />
																																				</OnFail>
																																			</FuseBox>
																																			<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
																																		</Sequence>
																																	</Then>
																																	<Else canSkip="1">
																																		<Success />
																																	</Else>
																																</IsInsideAreaWithLabel>
																															</IfCondition>
																															<IfElseCondition failOnCondition="false" condition="$trespassSevereness &gt;= $enum:trespassLevel.personal" saveVersion="2">
																																<Then canSkip="1">
																																	<Sequence>
																																		<IfCondition failOnCondition="false" condition="$isMyHome &amp; &#10; &#10;//KCD2-361079 &#10;( &#10; $counter == $data:script_param[&apos;crime_trespassEscalationThreshold&apos;].value | &#10;$counter - $initialCounter &gt;= $data:script_param[&apos;crime_checkHomeStashesAfterWatchTrespassMinimalCounterIncrement&apos;].value &#10;)">
																																			<Sequence>
																																				<CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.checkHomeStashes" Information="" Position="" StimulusKind="$enum:crime_stimulusKind.trespass" ShouldReact="$canCheckStashes" ShouldWatch="$uselessBool" />
																																				<IfCondition failOnCondition="false" condition="$canCheckStashes">
																																					<Function_crime_addFollowUp_checkHomeStashes home="$home" information="" playerRelated="true" resetStolenItemsFound="false" stolenItemsFound="false" added="$checkStashesBark" nodeLabel="67353830" />
																																				</IfCondition>
																																			</Sequence>
																																		</IfCondition>
																																		<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																																			<Then canSkip="1">
																																				<Expression expressions="$checkStashesBark = true" />
																																			</Then>
																																		</EntityContextCheck>
																																		<SuppressFailure>
																																			<LuaGate code="return entity.soul:GetState(&apos;health&apos;) &gt; RPG.LowHealthThreshold" saveVersion="2">
																																				<Then canSkip="1">
																																					<PlayAdditiveAnimation Fragment="&apos;CrimeDontComeBack&apos;" Tags="" />
																																				</Then>
																																				<Else canSkip="1">
																																					<Success />
																																				</Else>
																																			</LuaGate>
																																		</SuppressFailure>
																																		<IfElseCondition failOnCondition="false" condition="$checkStashesBark" saveVersion="2">
																																			<Then canSkip="1">
																																				<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REAGUJE_NA_HRACE_OPOUSTEJICIHO_TRESPASS&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="79011584" />
																																			</Then>
																																			<Else canSkip="1">
																																				<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REAGUJE_NA_HRACE_OPOUSTEJICIHO_TRESPASS_A_NEBUDE_PROHLEDAVAT&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="74672772" />
																																			</Else>
																																		</IfElseCondition>
																																	</Sequence>
																																</Then>
																																<Else canSkip="1">
																																	<Wait duration="&apos;0s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																</Else>
																															</IfElseCondition>
																															<Expression expressions="$playerLeftReactedTo = true" />
																														</Sequence>
																													</Then>
																													<Else canSkip="1">
																														<Wait duration="&apos;0s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																													</Else>
																												</IfElseCondition>
																												<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																												<Expression expressions="$endWatching = ~$reaction" />
																											</Sequence>
																										</IfGate>
																									</While>
																									<Sequence>
																										<Function_crime_waitForWeaponChange npc="$__player" succeedOnArmed="true" nodeLabel="38806304" />
																										<IfCondition failOnCondition="false" condition="~$overrideBarksWithChat">
																											<HasSeenPlayer NPC="$this.id" FullyAwareOnly="true" saveVersion="2">
																												<Then canSkip="1">
																													<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="true" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REAGUJE_NA_VYTAZENI_ZBRANE_V_TRESPASSU&apos;" priority="$enum:crime_barkPriority.addressingPlayer_important" nodeLabel="23126882" />
																												</Then>
																											</HasSeenPlayer>
																										</IfCondition>
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</Sequence>
																									<Loop count="-1">
																										<IfGate atomic="false" condition="~$playerLeft" RunLogic="Halt">
																											<Sequence>
																												<Expression expressions="$resetPlayersEscape = false" />
																												<IfGate atomic="false" condition="~$resetPlayersEscape" RunLogic="Halt">
																													<LogToLabel Name="&apos;playersEscape&apos;" Wuid="$this.id" Message="&apos;playerLostCounter: $playerLostCounter&apos;">
																														<Loop count="-1">
																															<Sequence>
																																<While doFail="false" propagateChildFail="false" condition="$playerLostCounter &lt; 7">
																																	<Sequence>
																																		<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																																		<HasSeenPlayer NPC="$this.id" FullyAwareOnly="true" saveVersion="2">
																																			<Then canSkip="1">
																																				<Expression expressions="$playerLostCounter = 0" />
																																			</Then>
																																			<Else canSkip="1">
																																				<Sequence>
																																					<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="$__player" WasIgnoredAtLeastFor="&apos;0s&apos;" />
																																					<GetCurrentPerceptionFocus PerceptionNfo="$perceptionFocus" />
																																					<GetSpatialInfo In="$__player" Out="$playerPos" What="Position" />
																																					<GetSpatialInfo In="$this.id" Out="$myPos" What="Position" />
																																					<IfElseCondition failOnCondition="false" condition="$perceptionFocus.perceptible==$__player" saveVersion="2">
																																						<Then canSkip="1">
																																							<Expression expressions="$playerLostCounter = 0" />
																																						</Then>
																																						<Else canSkip="1">
																																							<IsInsideAreaWithLabel Position="$playerPos" Label="&apos;interior&apos;" Area="$interiorArea" FailSubtMissing="false" saveVersion="2">
																																								<Then canSkip="1">
																																									<Sequence>
																																										<MeasureDistance position1="$playerPos" position2="$myPos" mode="TwoDimensions" result="$distanceXY" />
																																										<IfElseCondition failOnCondition="false" condition="$distanceXY &gt; 5" saveVersion="2">
																																											<Then canSkip="1">
																																												<Expression expressions="$playerLostCounter += 2" />
																																											</Then>
																																											<Else canSkip="1">
																																												<Expression expressions="$playerLostCounter += 1" />
																																											</Else>
																																										</IfElseCondition>
																																										<Expression expressions="$distanceZ = $myPos.z &gt; $playerPos.z ? $myPos.z - $playerPos.z : $playerPos.z - $myPos.z" />
																																										<IfElseCondition failOnCondition="false" condition="$distanceZ &gt; 1.5" saveVersion="2">
																																											<Then canSkip="1">
																																												<Expression expressions="$playerLostCounter += 1" />
																																											</Then>
																																										</IfElseCondition>
																																									</Sequence>
																																								</Then>
																																								<Else canSkip="1">
																																									<Sequence>
																																										<MeasureDistance position1="$playerPos" position2="$myPos" mode="ThreeDimensions" result="$distanceXY" />
																																										<IfElseCondition failOnCondition="false" condition="$distanceXY &gt; 5" saveVersion="2">
																																											<Then canSkip="1">
																																												<Expression expressions="$playerLostCounter += 2" />
																																											</Then>
																																											<Else canSkip="1">
																																												<Expression expressions="$playerLostCounter += 1" />
																																											</Else>
																																										</IfElseCondition>
																																									</Sequence>
																																								</Else>
																																							</IsInsideAreaWithLabel>
																																						</Else>
																																					</IfElseCondition>
																																				</Sequence>
																																			</Else>
																																		</HasSeenPlayer>
																																	</Sequence>
																																</While>
																																<GetSpatialInfo In="$__player" Out="$playerPos" What="Position" />
																																<Function_crime_addPlayerLostInTrespassCooldown nodeLabel="23890607" />
																																<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="true" information_look="" initiator="$enum:switch_interruptInitiator.scheduler" missingNpc="$__null" position="$playerPos" previousReaction="$enum:crime_reactionKind.watchTrespass" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="$searchDirection" searchPointsFromDirection="false" shooter="$__player" soundType="$enum:sound.movement" source="$enum:crime_source.direct" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.trespass" nodeLabel="78366462" />
																															</Sequence>
																														</Loop>
																													</LogToLabel>
																												</IfGate>
																											</Sequence>
																										</IfGate>
																									</Loop>
																									<CallDecorator_crime_sharePlayersPosition>
																										<Subtree canSkip="1">
																											<Function_crime_sharePlayersLastSeenPosition allowedAssistance="$enum:crime_allowedSharePlayerPosAssistance.none" requestVisualAssistanceFromOthers="false" direction="" position="" nodeLabel="67395959" />
																										</Subtree>
																										<PositionUpdatedFromOtherNpc canSkip="1">
																											<CallbackEventCatch_empty>
																												<Success />
																											</CallbackEventCatch_empty>
																										</PositionUpdatedFromOtherNpc>
																										<PlayerFound canSkip="1">
																											<CallbackEventCatch_empty>
																												<Expression expressions="$resetPlayersEscape = true &#10;$positionShared = true" />
																											</CallbackEventCatch_empty>
																										</PlayerFound>
																										<PointingStart canSkip="1">
																											<CallbackEventCatch_empty>
																												<Success />
																											</CallbackEventCatch_empty>
																										</PointingStart>
																										<PointingEnd canSkip="1">
																											<CallbackEventCatch_empty>
																												<Success />
																											</CallbackEventCatch_empty>
																										</PointingEnd>
																									</CallDecorator_crime_sharePlayersPosition>
																								</Parallel>
																								<IfCondition failOnCondition="false" condition="$makeSurePlayerLeft">
																									<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																										<IsInsideAreaWithLabel Position="$__player" Label="&apos;crime_suppressMindPlayerAfterTrespass&apos;" Area="$supressMindPlayerArea" FailSubtMissing="false" saveVersion="2">
																											<Then canSkip="1">
																												<Success />
																											</Then>
																											<Else canSkip="1">
																												<Function_callInterrupt_mindPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.watchTrespass" soundType="$enum:sound.invalid" stimulusKind="$enum:crime_stimulusKind.trespass" nodeLabel="69471382" />
																											</Else>
																										</IsInsideAreaWithLabel>
																									</DistanceCondition>
																								</IfCondition>
																							</Sequence>
																						</ForceLook>
																					</Subtree>
																					<Cleanup canSkip="1">
																						<RemoveBuffs SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" BuffTagId="-1" />
																					</Cleanup>
																				</SubtreeDecorator>
																			</IfGate>
																		</IfCondition>
																		<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.watchTrespass" nodeLabel="89236202" />
																	</Sequence>
																</Parallel>
															</LogToLabel>
														</LogToLabel>
													</LogToLabel>
												</EntityContext>
											</AddPerceivableState>
										</GameContext>
									</EntityContext>
								</EntityContextElement>
							</AnyDecorator>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Sequence>
							<Function_crime_addLeavingInterruptCooldown nodeLabel="62766144" />
							<AtomicDecorator>
								<Function_crime_limits_removeReactionLink information="$watchTrespassData.information" reactionKind="$enum:crime_reactionKind.watchTrespass" nodeLabel="98147911" />
							</AtomicDecorator>
						</Sequence>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="_dummyWuid" comment="" />
				<Variable name="atTheEdge" comment="" />
				<Variable name="barkAnimFragment" comment="" />
				<Variable name="canCheckStashes" comment="" />
				<Variable name="canTalk" comment="" />
				<Variable name="checkStashesBark" comment="" />
				<Variable name="counter" comment="" />
				<Variable name="counterPauseUsed" comment="" />
				<Variable name="counterPaused" comment="" />
				<Variable name="distanceXY" comment="" />
				<Variable name="distanceZ" comment="" />
				<Variable name="endWatching" comment="" />
				<Variable name="escalationPaused" comment="" />
				<Variable name="firstEvaluation" comment="" />
				<Variable name="home" comment="" />
				<Variable name="initialCounter" comment="" />
				<Variable name="interiorArea" comment="" />
				<Variable name="isInsidePublicService" comment="" />
				<Variable name="isMyHome" comment="" />
				<Variable name="makeSurePlayerLeft" comment="" />
				<Variable name="moveToTheEdge" comment="" />
				<Variable name="myPos" comment="" />
				<Variable name="myTrespassArea" comment="" />
				<Variable name="overrideBarksWithChat" comment="" />
				<Variable name="overrideChatAlias" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="perceptionFocus" comment="" />
				<Variable name="playAnim" comment="" />
				<Variable name="playerLeft" comment="" />
				<Variable name="playerLeftReactedTo" comment="" />
				<Variable name="playerLostCounter" comment="" />
				<Variable name="playerPos" comment="" />
				<Variable name="playerWeaponDrawn" comment="" />
				<Variable name="position" comment="" />
				<Variable name="positionShared" comment="" />
				<Variable name="reaction" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="resetPlayersEscape" comment="" />
				<Variable name="searchDirection" comment="" />
				<Variable name="startBarkFinished" comment="" />
				<Variable name="step" comment="" />
				<Variable name="stimulusEscalatedTrespass" comment="" />
				<Variable name="supressMindPlayerArea" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassSevereness" comment="" />
				<Variable name="trespassSeverenessInt" comment="" />
				<Variable name="trespassSeverenessReal" comment="" />
				<Variable name="urgingPriority" comment="" />
				<Variable name="uselessArea" comment="" />
				<Variable name="uselessBool" comment="" />
				<Variable name="wokeUpFromSleep" comment="" />
				<Variable name="watchTrespassData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-1330" editorPosY="-720" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</Then>
																			<Else>
																				<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</GameContext>
																									</IfCondition>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</GameContext>
																									</IfCondition>
																								</ContinuousSwitch>
																							</EntityContext>
																						</EntityContextElement>
																					</EntityContext>
																				</GameContext>
																			</Else>
																		</EntityContextCheck>
																		<Function_crime_playerInstantRecognitionHandler hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_playerInstantRecognitionHandler>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_limits_confirmReactionLink>
																			<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_checkInterruptInformation>
																			<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																				<OutputBreakpoints />
																			</RemoveBuffs>
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkTagFilter>
																						<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</WUIDFilter>
																						<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																						</Datalyzer>
																					</GraphSearch>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Sequence>
																			</SuppressFailure>
																			<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</DetermineTrespassReaction>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Function_crime_getHomeFromArea hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_crime_getHomeFromArea>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</LinkTagFilter>
																									<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</WUIDFilter>
																									<EvaLLyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																									</EvaLLyzer>
																								</GraphSearch>
																								<GetHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</GetHomeTrespassEscalation>
																							</Sequence>
																						</IfCondition>
																					</Sequence>
																				</SuppressFailure>
																			</IfCondition>
																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																			</EntityContextCheck>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Init>
																							<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</AddBuff>
																						</Init>
																						<Subtree>
																							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Parallel hasInputBreakpoint="0" comment="wait til urging approach is determined" breakpointFlags="0">
																												<OutputBreakpoints />
																												<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</ExternalLock>
																												<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</ExternalLock>
																											</Parallel>
																											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="wont be said, so set is as finished at the start" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_speech_dialogInitiator>
																																</IfGate>
																															</Loop>
																														</Sequence>
																													</Then>
																													<Else>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Else>
																																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_crimeBark>
																																					</IfCondition>
																																					<Function_crime_trespass_playerEnteredBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_trespass_playerEnteredBark>
																																				</Sequence>
																																			</Then>
																																			<Else>
																																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_crimeBark>
																																					</Then>
																																					<Else>
																																						<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_crimeBark>
																																					</Else>
																																				</EntityContextCheck>
																																			</Else>
																																		</IfElseCondition>
																																	</Else>
																																</IsLoadedGate>
																															</IfCondition>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																													</Else>
																												</IfElseCondition>
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</WaitAction>
																																</UrgencyDecorator>
																																<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</StopMovement>
																																<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Else>
																																		<InterruptSkipTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</InterruptSkipTime>
																																	</Else>
																																</IsUnconsciousCheck>
																															</Sequence>
																														</Then>
																														<Else>
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</Else>
																													</IsTimeSkipping>
																													<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</CrimeFollower>
																																		</MoveParamsDecorator>
																																	</IfCondition>
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</CrimeFollower>
																																		</MoveParamsDecorator>
																																	</IfCondition>
																																</ContinuousSwitch>
																															</IfCondition>
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Move>
																																</MoveParamsDecorator>
																															</IfCondition>
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</CrimeFollower>
																																		</Then>
																																		<Else>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</WaitAction>
																																				<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</StopMovement>
																																			</Sequence>
																																		</Else>
																																	</HasSeenPlayer>
																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Wait>
																																</Sequence>
																															</IfCondition>
																														</ContinuousSwitch>
																													</UrgencyDecorator>
																												</Sequence>
																											</Parallel>
																										</Sequence>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="KCD2-70037" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</IfCondition>
																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="KCD2-350664" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																												</EntityContextCheck>
																												<DefaultBranch>
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</DefaultBranch>
																											</Switch>
																											<Function_crime_managePlayerUrging hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_managePlayerUrging>
																										</Sequence>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</SetExternalLock>
																											<Parallel hasInputBreakpoint="0" comment="counter" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Init>
																																	<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</SetExternalLock>
																																</Init>
																																<Subtree>
																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Wait>
																																</Subtree>
																																<Cleanup>
																																	<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</SetExternalLock>
																																</Cleanup>
																															</SubtreeDecorator>
																														</GameContextBarrier>
																													</EntityContextBarrier>
																												</Loop>
																												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<DetermineTrespassReaction hasInputBreakpoint="0" comment="Check if player still in trespass after cutscene" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</DetermineTrespassReaction>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Sequence>
																														</GameContextBarrier>
																													</GameContextBarrier>
																												</Loop>
																												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<InstantExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</DetermineTrespassReaction>
																																					<Function_crime_trespassSeverenessToInt hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_trespassSeverenessToInt>
																																					<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</ReinitVariable>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</GetSpatialInfo>
																																							<GetTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</GetTrespass>
																																							<IfCondition hasInputBreakpoint="0" comment="KCD2-88727 player moved to less severe trespass" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</IfCondition>
																																						</Sequence>
																																					</IfCondition>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<GetHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</GetHomeTrespassEscalation>
																																					</IfCondition>
																																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Then>
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																									</CheckNervousnessInterval>
																																									<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																									</CheckNervousnessInterval>
																																									<DefaultBranch>
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																									</DefaultBranch>
																																								</Switch>
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</Sequence>
																																						</Then>
																																						<Else>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																									</IfCondition>
																																									<DefaultBranch>
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																											<IsNightTimeOfDay hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Then>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Then>
																																												<Else>
																																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Success>
																																												</Else>
																																											</IsNightTimeOfDay>
																																											<Function_crime_hasWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_hasWeaponDrawn>
																																											<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Then>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Then>
																																											</IsInsideAreaWithLabel>
																																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</IfCondition>
																																											<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Else>
																																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																															<OutputBreakpoints />
																																															<Then>
																																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Expression>
																																															</Then>
																																														</CheckRelationshipInterval_SoulToSoul>
																																														<CheckAngrinessInterval_Soul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																															<OutputBreakpoints />
																																															<Then>
																																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Expression>
																																															</Then>
																																														</CheckAngrinessInterval_Soul>
																																													</Sequence>
																																												</Else>
																																											</CheckRelationshipInterval_SoulToSoul>
																																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</IfCondition>
																																											<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</AffectFeelings>
																																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</IfCondition>
																																										</Sequence>
																																									</DefaultBranch>
																																								</Switch>
																																							</IfCondition>
																																						</Else>
																																					</IfElseCondition>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</AddHomeTrespassEscalation>
																																							</IfCondition>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Function_switch_handleStimulusEscalatedTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_switch_handleStimulusEscalatedTrespass>
																																									</EntityContext>
																																								</Sequence>
																																							</IfCondition>
																																						</Sequence>
																																					</IfCondition>
																																				</Sequence>
																																			</AtomicDecorator>
																																		</InstantExternalLock>
																																	</SuppressFailure>
																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Then>
																																		<Else>
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</Then>
																																								<Else>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Wait>
																																										<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Fail>
																																									</Sequence>
																																								</Else>
																																							</HasSeenPlayer>
																																						</LoopUntil>
																																					</SuppressFailure>
																																					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<IfCondition hasInputBreakpoint="0" comment="KCD2-88727 - last warning would be said twice" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Function_crime_trespass_playerStayingBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Function_crime_trespass_playerStayingBark>
																																								</IfCondition>
																																							</Then>
																																							<Else>
																																								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Function_crime_trespass_playerStayingBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_trespass_playerStayingBark>
																																										</Then>
																																									</EntityContextCheck>
																																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_crimeBark>
																																										</Then>
																																									</EntityContextCheck>
																																									<DefaultBranch>
																																										<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_crime_crimeBark>
																																									</DefaultBranch>
																																								</Switch>
																																							</Else>
																																						</IfElseCondition>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</IfCondition>
																																											<DefaultBranch>
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</DefaultBranch>
																																										</Switch>
																																										<PlayAdditiveAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</PlayAdditiveAnimation>
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																									</Sequence>
																																								</Then>
																																								<Else>
																																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</Else>
																																							</LuaGate>
																																						</IfCondition>
																																					</Parallel>
																																				</Sequence>
																																			</IfCondition>
																																		</Else>
																																	</IfElseCondition>
																																	<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</LogToLabel>
																																		</IfCondition>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Wait>
																																		</IfCondition>
																																		<DefaultBranch>
																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Wait>
																																		</DefaultBranch>
																																	</Switch>
																																</Sequence>
																															</IfGate>
																														</Loop>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Sequence>
																												</Loop>
																											</Parallel>
																										</Sequence>
																										<StanceBarrier hasInputBreakpoint="0" comment="escalate immediatly if player goes to sleep" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</AddHomeTrespassEscalation>
																												</IfCondition>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Function_switch_handleStimulusEscalatedTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_switch_handleStimulusEscalatedTrespass>
																												</EntityContext>
																											</Sequence>
																										</StanceBarrier>
																										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																												<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</DetermineTrespassReaction>
																												<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Else>
																																<InterruptSkipTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</InterruptSkipTime>
																															</Else>
																														</IsUnconsciousCheck>
																													</Then>
																													<Else>
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</Else>
																												</IsTimeSkipping>
																												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																													<Else>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																																<Else>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Else>
																															</IsInsideAreaWithLabel>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																																<Else>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Else>
																															</EntityContextCheck>
																														</Sequence>
																													</Else>
																												</IfElseCondition>
																											</Sequence>
																										</While>
																										<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Child>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</DistanceCondition>
																																											<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</IsInsideAreaWithLabelBarrier>
																																										</Selector>
																																									</IsInsideAreaWithLabelBarrier>
																																								</IsInsideAreaWithLabelBarrier>
																																							</While>
																																						</Sequence>
																																					</Child>
																																					<OnFail>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</OnFail>
																																				</FuseBox>
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</Sequence>
																																		</Then>
																																		<Else>
																																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Success>
																																		</Else>
																																	</IsInsideAreaWithLabel>
																																</IfCondition>
																																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</CheckReactionLimit>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_addFollowUp_checkHomeStashes hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_addFollowUp_checkHomeStashes>
																																					</IfCondition>
																																				</Sequence>
																																			</IfCondition>
																																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Then>
																																			</EntityContextCheck>
																																			<SuppressFailure hasInputBreakpoint="0" comment="anim can fail if NPC is holding something other than weapon" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<PlayAdditiveAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</PlayAdditiveAnimation>
																																					</Then>
																																					<Else>
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</Else>
																																				</LuaGate>
																																			</SuppressFailure>
																																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_crimeBark>
																																				</Then>
																																				<Else>
																																					<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_crimeBark>
																																				</Else>
																																			</IfElseCondition>
																																		</Sequence>
																																	</Then>
																																	<Else>
																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Wait>
																																	</Else>
																																</IfElseCondition>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Sequence>
																														</Then>
																														<Else>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Else>
																													</IfElseCondition>
																													<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</DetermineTrespassReaction>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Sequence>
																											</IfGate>
																										</While>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Function_crime_waitForWeaponChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_waitForWeaponChange>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_crimeBark>
																													</Then>
																												</HasSeenPlayer>
																											</IfCondition>
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</Sequence>
																										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Wait>
																																			<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Then>
																																				<Else>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</CancelPerceptionIgnore>
																																						<GetCurrentPerceptionFocus hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</GetCurrentPerceptionFocus>
																																						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</GetSpatialInfo>
																																						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</GetSpatialInfo>
																																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</Then>
																																							<Else>
																																								<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																									<OutputBreakpoints />
																																									<Then>
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</MeasureDistance>
																																											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Then>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Then>
																																												<Else>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Else>
																																											</IfElseCondition>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Then>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Then>
																																											</IfElseCondition>
																																										</Sequence>
																																									</Then>
																																									<Else>
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</MeasureDistance>
																																											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Then>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Then>
																																												<Else>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Else>
																																											</IfElseCondition>
																																										</Sequence>
																																									</Else>
																																								</IsInsideAreaWithLabel>
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</Else>
																																			</HasSeenPlayer>
																																		</Sequence>
																																	</While>
																																	<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</GetSpatialInfo>
																																	<Function_crime_addPlayerLostInTrespassCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_addPlayerLostInTrespassCooldown>
																																	<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_callInterrupt_lookAround>
																																</Sequence>
																															</Loop>
																														</LogToLabel>
																													</IfGate>
																												</Sequence>
																											</IfGate>
																										</Loop>
																										<CallDecorator_crime_sharePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Subtree>
																												<Function_crime_sharePlayersLastSeenPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_sharePlayersLastSeenPosition>
																											</Subtree>
																											<PositionUpdatedFromOtherNpc>
																												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</CallbackEventCatch_empty>
																											</PositionUpdatedFromOtherNpc>
																											<PlayerFound>
																												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="when someone directs me straight to player, reset escape timer" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</CallbackEventCatch_empty>
																											</PlayerFound>
																											<PointingStart>
																												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</CallbackEventCatch_empty>
																											</PointingStart>
																											<PointingEnd>
																												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</CallbackEventCatch_empty>
																											</PointingEnd>
																										</CallDecorator_crime_sharePlayersPosition>
																									</Parallel>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</Then>
																												<Else>
																													<Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_callInterrupt_mindPlayer>
																												</Else>
																											</IsInsideAreaWithLabel>
																										</DistanceCondition>
																									</IfCondition>
																								</Sequence>
																							</ForceLook>
																						</Subtree>
																						<Cleanup>
																							<RemoveBuffs hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</RemoveBuffs>
																						</Cleanup>
																					</SubtreeDecorator>
																				</IfGate>
																			</IfCondition>
																			<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_callFollowUpBehavior>
																		</Sequence>
																	</Parallel>
																</LogToLabel>
															</LogToLabel>
														</LogToLabel>
													</EntityContext>
												</AddPerceivableState>
											</GameContext>
										</EntityContext>
									</EntityContextElement>
								</AnyDecorator>
							</EntityContext>
						</Child>
						<OnFail>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_limits_removeReactionLink>
								</AtomicDecorator>
							</Sequence>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>