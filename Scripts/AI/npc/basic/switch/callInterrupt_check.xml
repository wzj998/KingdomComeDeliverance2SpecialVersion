<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_check" is_function="1">
		<Variables>
			<Variable name="checkData" type="switch:interruptData:check" values="" isPersistent="0" form="single" />
			<Variable name="ffCrimeIcon" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="npcInQuestSchedulerPriority" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="84" isPersistent="0" form="single" />
			<Variable name="scheduledPriority" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="ignorePriority" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.direct" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
						<Else canSkip="1">
							<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
								<Else canSkip="1">
									<Sequence>
										<Switch>
											<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.playerCompanion">
												<Expression expressions="$priority = 15 // less than banishcompanion (16)" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.theft &amp; &#10;$target ~= $__player">
												<Expression expressions="$priority = 20 //less than checkHomeStashes (21)" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.sound">
												<CheckRelationshipInterval_SoulToSoul TargetSoul="$target" Soul="$this.id" Flag="enemy" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$priority = 81" />
													</Then>
													<Else canSkip="1">
														<EntityContextCheck context="crime_boostSoundLookAroundPriority" target="" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$priority = 81" />
															</Then>
															<Else canSkip="1">
																<Expression expressions="$priority = 28" />
															</Else>
														</EntityContextCheck>
													</Else>
												</CheckRelationshipInterval_SoulToSoul>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$target == $__player">
												<Expression expressions="$priority = 100 //higher than lookArounds and scan" />
											</IfCondition>
											<DefaultBranch>
												<Success />
											</DefaultBranch>
										</Switch>
										<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="26403296" />
										<IfCondition failOnCondition="false" condition="$ignorePriority | $shallPass">
											<Sequence>
												<GetScheduledPriority Priority="$scheduledPriority" />
												<Expression expressions="$npcInQuestSchedulerPriority = $scheduledPriority &gt;= 30 &amp; $scheduledPriority &lt;= 69" />
												<IfElseCondition failOnCondition="false" condition="$ignorePriority |  &#10;~$npcInQuestSchedulerPriority | &#10;$target == $__player" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="91174602" />
															<EntityContextCheck context="crime_spawnMissingNpcVolume_behavior" target="$this.id" saveVersion="2">
																<Then canSkip="1">
																	<Function_crime_spawnMissingNpcVolume destinationWuid="$target" nodeLabel="86609406" />
																</Then>
															</EntityContextCheck>
															<IfCondition failOnCondition="false" condition="$initiator == $enum:switch_interruptInitiator.switch | &#10;$previousReaction == $enum:crime_reactionKind.unknown">
																<GetReactionKindByContext Target="$this.id" ReactionKind="$previousReaction" />
															</IfCondition>
															<CreateInformationWrapper Label="&apos;motivation&apos;" PerceivedWuid="$this.id" PositionType="positionWuid" PositionVec3="" PositionWuid="$target" Information="$information" />
															<LockDynamicInformationValues Information="$information">
																<SetDynamicInformationValue Information="$information" Tag="&apos;stimulusKind&apos;" Variable="$stimulusKind" Type="" Value="" />
															</LockDynamicInformationValues>
															<Expression expressions="$checkData.stimulusKind = $stimulusKind &#10;$checkData.previousReaction = $previousReaction &#10;$checkData.initiatedBy = $initiator &#10;$checkData.information = $information &#10;$checkData.target = $target &#10;$checkData.source = $source &#10; &#10;$ffCrimeIcon = $target == $__player" />
															<Function_crime_limits_reserveReactionLink ffCrimeIcon="$ffCrimeIcon" information="$information" priority="$priority" reactionKind="$enum:crime_reactionKind.check" nodeLabel="55774208" />
															<AddInterrupt_check checkData="$checkData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_check&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
														</Sequence>
													</Then>
													<Else canSkip="1">
														<Success />
													</Else>
												</IfElseCondition>
											</Sequence>
										</IfCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="checkData" comment="" />
				<Variable name="ffCrimeIcon" comment="" />
				<Variable name="information" comment="" />
				<Variable name="mrkev" comment="" />
				<Variable name="npcInQuestSchedulerPriority" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="scheduledPriority" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="source" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Else>
															</EntityContextCheck>
														</Else>
													</CheckRelationshipInterval_SoulToSoul>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<DefaultBranch>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DefaultBranch>
											</Switch>
											<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_checkReactionPriority>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetScheduledPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetScheduledPriority>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_crime_getMrkev>
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Function_crime_spawnMissingNpcVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_spawnMissingNpcVolume>
																	</Then>
																</EntityContextCheck>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetReactionKindByContext>
																</IfCondition>
																<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</CreateInformationWrapper>
																<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SetDynamicInformationValue>
																</LockDynamicInformationValues>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<Function_crime_limits_reserveReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_crime_limits_reserveReactionLink>
																<AddInterrupt_check hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddInterrupt_check>
															</Sequence>
														</Then>
														<Else>
															<Success hasInputBreakpoint="0" comment="TODO: bark, viz: KCD2-74220" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Else>
													</IfElseCondition>
												</Sequence>
											</IfCondition>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</Else>
						</GameContextCheck>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>