<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_selfhelp" is_function="1">
		<Variables>
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="150" isPersistent="0" form="single" />
			<Variable name="selfhelpData" type="switch:interruptData:selfhelp" values="" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="assaultData" type="crime:assaultData" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="criminalFreshness" type="enum:crime_criminalFreshness" values="$enum:crime_criminalFreshness.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="freshlyAttributedCrime" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="ignorePriority" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.direct" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
					<Else canSkip="1">
						<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
							<Else canSkip="1">
								<Sequence>
									<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="48342346" />
									<IfCondition failOnCondition="false" condition="$ignorePriority | $shallPass">
										<Sequence>
											<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="48536609" />
											<EntityContextCheck context="crime_spawnMissingNpcVolume_behavior" target="$this.id" saveVersion="2">
												<Then canSkip="1">
													<Function_crime_spawnMissingNpcVolume destinationWuid="$__player" nodeLabel="90475445" />
												</Then>
											</EntityContextCheck>
											<IfCondition failOnCondition="false" condition="$initiator == $enum:switch_interruptInitiator.switch | &#10;$previousReaction == $enum:crime_reactionKind.unknown">
												<GetReactionKindByContext Target="$this.id" ReactionKind="$previousReaction" />
											</IfCondition>
											<Expression expressions="$selfhelpData.stimulusKind = $stimulusKind &#10;$selfhelpData.previousReaction = $previousReaction &#10;$selfhelpData.initiatedBy = $initiator &#10;$selfhelpData.information = $information &#10;$selfhelpData.assaultData = $assaultData &#10;$selfhelpData.source = $source &#10;$selfhelpData.freshlyAttributedCrime = $freshlyAttributedCrime &#10;$selfhelpData.criminalFreshness = $criminalFreshness" />
											<Function_crime_limits_reserveReactionLink ffCrimeIcon="false" information="$information" priority="$priority" reactionKind="$enum:crime_reactionKind.selfhelp" nodeLabel="54557581" />
											<IsFastTraveling saveVersion="2">
												<Then canSkip="1">
													<AddInterrupt_interrupt_intermediateEventBehaviour aa_chosenBehavior="$enum:crime_reactionKind.selfhelp" arrestData="" attackData="" friskData="" selfHelpData="$selfhelpData" priority="$priority" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_intermediateEventBehaviour&apos;" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Default" Aliveness="Alive" Privileged="false" FastForward="false" />
												</Then>
												<Else canSkip="1">
													<AddInterrupt_selfhelp selfhelpData="$selfhelpData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_selfhelp&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
												</Else>
											</IsFastTraveling>
										</Sequence>
									</IfCondition>
								</Sequence>
							</Else>
						</EntityContextCheck>
					</Else>
				</GameContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="mrkev" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="selfhelpData" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="assaultData" comment="" />
				<Variable name="criminalFreshness" comment="" />
				<Variable name="freshlyAttributedCrime" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="information" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="source" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Else>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_checkReactionPriority>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_getMrkev>
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_crime_spawnMissingNpcVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_spawnMissingNpcVolume>
													</Then>
												</EntityContextCheck>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetReactionKindByContext>
												</IfCondition>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<Function_crime_limits_reserveReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_limits_reserveReactionLink>
												<IsFastTraveling hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<AddInterrupt_interrupt_intermediateEventBehaviour hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AddInterrupt_interrupt_intermediateEventBehaviour>
													</Then>
													<Else>
														<AddInterrupt_selfhelp hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AddInterrupt_selfhelp>
													</Else>
												</IsFastTraveling>
											</Sequence>
										</IfCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>