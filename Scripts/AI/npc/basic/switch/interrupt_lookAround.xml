<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_lookAround" is_function="0">
		<Variables>
			<Variable name="amICamperOrLoner" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="anchor" type="crime:anchor" values="" isPersistent="0" form="single" />
			<Variable name="anchorTooFar" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="animalAbuseInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="animalAbuse_species" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="anyDecoratorPreset" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="approachType" type="enum:crime_lookAround_approachType" values="" isPersistent="0" form="single" />
			<Variable name="approachTypeSet" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="awareness" type="switch:awareness" values="" isPersistent="0" form="single" />
			<Variable name="barkAlarm" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="breakCheckNotifications" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="const_false" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cooperationInitiator" type="senderInfo" values="" isPersistent="0" form="single" />
			<Variable name="cooperationInitiatorIsMyMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cooperationNotification" type="enum:crime_cooperationNotification" values="" isPersistent="0" form="single" />
			<Variable name="corpseReactionData" type="crime:corpseReactor" values="" isPersistent="0" form="single" />
			<Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
			<Variable name="dialogContext_looking" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="dialogContext_reactingToReportFrom" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="dialogContext_reactingToReportFrom_appendix" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distanceMeToCorpse" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="emitAlarmInformation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="emittingInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="escalateSoundReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="firstIteration" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="firstIterationSoundSkip" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="firstOnCrimeScene" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="forceSearchPointUpdate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="forceStopLookingInTrespass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasVisor" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hotEntityTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="initialMoveToDestination" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="intenseSoundReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isBandit" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isPublicEnemy" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="iterations" type="_int" values="" isPersistent="1" form="single" />
			<Variable name="iterationsParamToken" type="_string" values="&apos;_crime&apos;" isPersistent="1" form="single" />
			<Variable name="iterationsSet" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="keepItems" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="lightSource" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="lookAroundReason" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" />
			<Variable name="lookingForABarkingDog" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="maxDistanceToAnchor" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="maxIterations" type="_float" values="4" isPersistent="1" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="moveDestination" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="moveToOrigin_initial" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="move_additionalMoveParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;),continueWhenHalting(true)" isPersistent="0" form="single" />
			<Variable name="move_pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="move_speed" type="enum:movementSpeed" values="$enum:movementSpeed.walk" isPersistent="0" form="single" />
			<Variable name="movementType" type="enum:crime_lookAround_movementType" values="" isPersistent="1" form="single" />
			<Variable name="myDistanceToAnchor" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="myPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="myPosOnNavmesh" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="nextMostImportantInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="nonAttirbutedInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="noninvestigable" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="onHotEntitySeenEvent" type="switch:onHotEntitySeenEvent" values="" isPersistent="0" form="single" />
			<Variable name="originPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="percept" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="perceptionInfo_lookAround" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="playAnim" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="playerPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="pointSearchMode" type="enum:crime_crimeSceneSearchMode" values="$enum:crime_crimeSceneSearchMode.widespread" isPersistent="0" form="single" />
			<Variable name="positionUpdateDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="positionUpdated" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="positionUpdatedFromSound" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reactedToReport" type="_bool" values="4" isPersistent="1" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="recognizingPlayerPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="reevaluateCombatSoundLookingIcon" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reportDestination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reportDestinationType" type="enum:crime_reportDestinationType" values="" isPersistent="0" form="single" />
			<Variable name="requestVisualHelp" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="resetMoveToOrigin" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="scanPositionUpdateMsg" type="crime:lookAroundUpdateScanPosition" values="" isPersistent="0" form="single" />
			<Variable name="searchMode" type="enum:crime_lookAround_searchMode" values="$enum:crime_lookAround_searchMode.points" isPersistent="1" form="single" />
			<Variable name="searchPoint" type="crime:searchPoint" values="" isPersistent="1" form="single" />
			<Variable name="shouldHaveWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shouldHaveWeaponDrawn_persistent" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="soundInTrespass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="soundPosUpdateCount" type="_int" values="" isPersistent="1" form="single" />
			<Variable name="soundPositionUpdateMsg" type="crime:lookAroundUpdateSoundPosition" values="" isPersistent="0" form="single" />
			<Variable name="soundType" type="enum:sound" values="$enum:sound.invalid" isPersistent="1" form="single" />
			<Variable name="startbarkFinished" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stimulus_missingNpc" type="switch:stimulus:missingNpc" values="" isPersistent="0" form="single" />
			<Variable name="stimulus_nonAttributed" type="switch:stimulus:nonAttributedCrime" values="" isPersistent="0" form="single" />
			<Variable name="stopDistanceVariation_origin" type="_float" values="2" isPersistent="0" form="single" />
			<Variable name="stopLooking" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stopWithinDistance_origin" type="_float" values="3" isPersistent="0" form="single" />
			<Variable name="suppressCrimeSceneSearchPointUsage" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="suppressHotEntityEvent" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="targetFound" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="theftMethod" type="enum:crime_theftMethod" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
			<Variable name="tryToKeepSecondaryWeapon" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="updateSoundBarkChance" type="_float" values="0.75" isPersistent="0" form="single" />
			<Variable name="useless" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="uselessArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="wuidToFollow" type="_wuid" values="" isPersistent="1" form="single" />
		</Variables>
		<Parameters>
			<Variable name="lookAroundData" type="switch:interruptData:lookAround" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<Sequence>
								<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$isPublicEnemy = true" />
									</Then>
								</IsPublicEnemy>
								<Expression expressions="$intenseSoundReaction = $lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound &amp; &#10;( &#10; $lookAroundData.soundType == $enum:sound.combat | &#10; $lookAroundData.soundType == $enum:sound.gun_fired | &#10; $lookAroundData.soundType == $enum:sound.bow_fired | &#10; $lookAroundData.soundType == $enum:sound.bullet_hit | &#10; $lookAroundData.soundType == $enum:sound.arrow_hit | &#10; $lookAroundData.soundType == $enum:sound.thrash | &#10; $lookAroundData.soundType == $enum:sound.dog_attack_command | &#10; ( &#10;  $isPublicEnemy &amp; &#10;  ( &#10;   $lookAroundData.soundType == $enum:sound.movement | &#10;   $lookAroundData.soundType == $enum:sound.door | &#10;   $lookAroundData.soundType == $enum:sound.photo_mode &#10;  ) &#10; ) &#10;) &#10; &#10;$keepItems = $lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound &amp; &#10; ~$intenseSoundReaction" />
								<Function_crime_getAnyDecoratorPreset tryToKeepItems="$keepItems" tryToKeepSecondaryWeapon="false" presetString="$anyDecoratorPreset" nodeLabel="58579413" />
								<AnyDecorator preset="$anyDecoratorPreset" enabled="true">
									<EntityContextElement context="crime_interrupt" enabled="true">
										<EntityContext context="crime_interruptLookAround" target="">
											<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:lookAround&apos;">
												<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$lookAroundData.stimulusKind&apos;">
													<LogToLabel Name="&apos;lookAround iterations&apos;" Wuid="" Message="&apos;search points left: $iterations&apos;">
														<UrgencyDecorator Urgency="Fast">
															<Sequence>
																<Sequence>
																	<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.lookAround" nodeLabel="69616492" />
																	<Function_crime_checkInterruptInformation information="$lookAroundData.information" nodeLabel="68769603" />
																	<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																	<Expression expressions="$lookAroundReason = $lookAroundData.stimulusKind &#10;$emittingInformation = $lookAroundData.information" />
																	<IfCondition failOnCondition="false" condition="$soundType == $enum:sound.invalid">
																		<Expression expressions="$soundType = $lookAroundData.soundType" />
																	</IfCondition>
																	<GetCrimeLevelByStimulusKind StimulusKind="$lookAroundReason" CrimeLevel="$crimeLevel" />
																	<ClearInbox inbox="&apos;switch_onHotEntitySeen&apos;" type="" condition="" />
																	<Switch>
																		<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.corpse | &#10;$lookAroundReason == $enum:crime_stimulusKind.murder">
																			<Sequence>
																				<GraphSearch Origin="$lookAroundData.information.perceivedWuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_corpseReactor&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																					<LinkTagFilter tag="&apos;crime_corpseReactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																					<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																					<LinkDataFilter tag="&apos;crime_corpseReactor&apos;" condition="$__link_crime_corpseReactor.reactionKind == $enum:crime_reactionKind.lookAround" prune="true" negprune="unknown" Parent="" Child="" Data="$corpseReactionData" />
																				</GraphSearch>
																				<LinkDataExpression From="$lookAroundData.information.perceivedWuid" To="$this.id" Expresssion="$__link_crime_corpseReactor.reservation = false" />
																			</Sequence>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound">
																			<Sequence>
																				<Expression expressions="$pointSearchMode = $enum:crime_crimeSceneSearchMode.concentrated" />
																				<Switch>
																					<IfCondition failOnCondition="false" condition="$soundType == $enum:sound.dog_bark">
																						<Expression expressions="$suppressCrimeSceneSearchPointUsage = true &#10;$lookingForABarkingDog = true" />
																					</IfCondition>
																					<DefaultBranch>
																						<Success />
																					</DefaultBranch>
																				</Switch>
																				<Function_crime_getAnchor anchor="$anchor" nodeLabel="91974270" />
																			</Sequence>
																		</IfCondition>
																		<DefaultBranch>
																			<Success />
																		</DefaultBranch>
																	</Switch>
																	<GetSpatialInfo In="$this.id" Out="$myPos" What="Position" />
																	<Switch>
																		<IfCondition failOnCondition="false" condition="$lookAroundData.searchPointsFromDirection">
																			<Sequence>
																				<GetLastNavmeshPosition Target="$this.id" OutPos="$myPosOnNavmesh" TrackingMode="MNMPos" />
																				<Function_crime_getCrimeSceneSearchPoint crimePos="$myPosOnNavmesh" desiredSearchPointCount="24" direction="$lookAroundData.direction" forceUpdate="true" searchMode="$pointSearchMode" searchPoint="$searchPoint" nodeLabel="99598707" />
																				<Expression expressions="$originPosition = $searchPoint.position" />
																			</Sequence>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.shooter |  &#10;$lookAroundReason == $enum:crime_stimulusKind.unknownShooter | &#10;$lookAroundReason == $enum:crime_stimulusKind.sound | &#10;$lookAroundReason == $enum:crime_stimulusKind.corpseMissing | &#10;$lookAroundReason == $enum:crime_stimulusKind.missingNpc">
																			<Expression expressions="$originPosition = $lookAroundData.position" />
																		</IfCondition>
																		<DefaultBranch>
																			<Expression expressions="$originPosition = $lookAroundData.information.position" />
																		</DefaultBranch>
																	</Switch>
																	<Function_crime_lookAround_validateOriginPosition originPos="$originPosition" nodeLabel="22246262" />
																	<MeasureDistance position1="$myPos" position2="$originPosition" mode="ThreeDimensions" result="$distance" />
																	<IsLoadedGate saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																		</Then>
																		<Else canSkip="1">
																			<Sequence>
																				<IfCondition failOnCondition="false" condition="$lookAroundData.reactingToReportFrom == $__null">
																					<Function_crime_lookaround_shouldHaveWeaponDrawn crimeLevel="$crimeLevel" information="$lookAroundData.information" intenseSoundReaction="$intenseSoundReaction" shouldHaveWeaponDrawn="$shouldHaveWeaponDrawn_persistent" nodeLabel="36183688" />
																				</IfCondition>
																				<IfElseCondition failOnCondition="false" condition="($lookAroundReason == $enum:crime_stimulusKind.corpse | &#10;$lookAroundReason == $enum:crime_stimulusKind.murder)  &amp; &#10;$lookAroundData.information.perceivedWuid ~= $__null" saveVersion="2">
																					<Then canSkip="1">
																						<CheckWuidValid wuid="$lookAroundData.information.perceivedWuid" FailSubtMissing="false" saveVersion="2">
																							<Then canSkip="1">
																								<Sequence>
																									<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																									<DistanceCondition Origin="$this.id" ReferencePt="$lookAroundData.information.perceivedWuid" Low="20.000000" High="20.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																										<Expression expressions="$shouldHaveWeaponDrawn = false" />
																									</DistanceCondition>
																								</Sequence>
																							</Then>
																							<Else canSkip="1">
																								<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																							</Else>
																						</CheckWuidValid>
																					</Then>
																					<Else canSkip="1">
																						<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																					</Else>
																				</IfElseCondition>
																			</Sequence>
																		</Else>
																	</IsLoadedGate>
																</Sequence>
																<Parallel successMode="Any" failureMode="Any">
																	<While doFail="false" propagateChildFail="false" condition="$breakCheckNotifications == false">
																		<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cooperationNotification" senderInfo="$cooperationInitiator" inbox="&apos;crime_cooperationNotification&apos;" condition="" answerVar="">
																			<Switch>
																				<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.crimeResolved | &#10;$cooperationNotification == $enum:crime_cooperationNotification.informationTransformed">
																					<IfElseCondition failOnCondition="false" condition="$lookAroundData.information.label == &apos;motivation&apos;" saveVersion="2">
																						<Then canSkip="1">
																							<Expression expressions="$breakCheckNotifications = true" />
																						</Then>
																						<Else canSkip="1">
																							<Selector>
																								<CheckInformationKnowledge Information="$lookAroundData.information" Holder="$this.id" />
																								<Sequence>
																									<ReinitVariable variable="$nextMostImportantInformation" />
																									<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																										<Then canSkip="1">
																											<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="false" MostImportantInformation="$nextMostImportantInformation" />
																										</Then>
																										<Else canSkip="1">
																											<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="true" MostImportantInformation="$nextMostImportantInformation" />
																										</Else>
																									</EntityContextCheck>
																									<IfElseCondition failOnCondition="false" condition="$nextMostImportantInformation.label == &apos;&apos;" saveVersion="2">
																										<Then canSkip="1">
																											<Expression expressions="$breakCheckNotifications = true" />
																										</Then>
																										<Else canSkip="1">
																											<Sequence>
																												<Expression expressions="$lookAroundData.information = $nextMostImportantInformation" />
																												<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $nextMostImportantInformation" />
																												<Expression expressions="$emittingInformation = $lookAroundData.information" />
																											</Sequence>
																										</Else>
																									</IfElseCondition>
																								</Sequence>
																							</Selector>
																						</Else>
																					</IfElseCondition>
																				</IfCondition>
																				<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.playerLeftCamp">
																					<Sequence>
																						<EntityContextCheck context="crime_isCamper" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$amICamperOrLoner = true" />
																							</Then>
																							<Else canSkip="1">
																								<EntityContextCheck context="crime_isLoner" target="" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$amICamperOrLoner = true" />
																									</Then>
																								</EntityContextCheck>
																							</Else>
																						</EntityContextCheck>
																						<IfCondition failOnCondition="false" condition="$amICamperOrLoner &amp; &#10;$lookAroundData.information.label == &apos;motivation&apos;">
																							<Sequence>
																								<GetAreMates Npc1="$this.id" Npc2="$cooperationInitiator.id" AreMates="$cooperationInitiatorIsMyMate" />
																								<IfCondition failOnCondition="false" condition="$cooperationInitiatorIsMyMate">
																									<Expression expressions="$breakCheckNotifications = true" />
																								</IfCondition>
																							</Sequence>
																						</IfCondition>
																					</Sequence>
																				</IfCondition>
																				<DefaultBranch>
																					<Success />
																				</DefaultBranch>
																			</Switch>
																		</ProcessMessage>
																	</While>
																	<Function_crime_weaponDecorator suppressWaitAction="true" weaponSet="&apos;Primary&apos;" shouldHaveDrawnWeapon="$shouldHaveWeaponDrawn" waitActionFinished="" nodeLabel="69920696" />
																	<Selector>
																		<Sequence>
																			<GetLightSourceItem Item="$lightSource" />
																			<HandCheck who="$this.id" LeftHand="$leftHand" RightHand="$rightHand" />
																			<IfCondition failOnCondition="true" condition="$leftHand == $lightSource | $rightHand == $lightSource">
																				<EntityContext context="ForceAllowAutoTorch" target="$this.id">
																					<EntityContextElement context="ForceAllowAutoTorch" enabled="true">
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</EntityContextElement>
																				</EntityContext>
																			</IfCondition>
																		</Sequence>
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</Selector>
																	<IfElseCondition failOnCondition="false" condition="$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound" saveVersion="2">
																		<Then canSkip="1">
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</Then>
																		<Else canSkip="1">
																			<EntityContext context="speech_greyOutE" target="$this.id">
																				<EntityContextElement context="speech_greyOutE" enabled="true">
																					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																				</EntityContextElement>
																			</EntityContext>
																		</Else>
																	</IfElseCondition>
																	<Switch>
																		<IfCondition failOnCondition="false" condition="$data:crime[$lookAroundData.information.label].isCrime">
																			<IfGate atomic="false" condition="$lookAroundData.reactingToReportFrom == $__null | &#10;$reactedToReport" RunLogic="KeepRunning">
																				<EntityContext context="crime_escalationLevel_investigating" target="">
																					<EntityContextElement context="crime_escalationLevel_investigating" enabled="true">
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</EntityContextElement>
																				</EntityContext>
																			</IfGate>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound">
																			<EntityContext context="crime_interruptLookAround_sound" target="">
																				<IfElseCondition failOnCondition="false" condition="$lookAroundData.soundType == $enum:sound.combat" saveVersion="2">
																					<Then canSkip="1">
																						<While doFail="false" propagateChildFail="false" condition="true">
																							<Selector>
																								<Sequence>
																									<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
																									<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																										<LinkTagFilter tag="&apos;crime_lastHitByPlayer&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																										<RangeFilter min="0.000000" max="4.000000" point="$originPosition" excludeRef="true" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																										<LinkDataFilter tag="&apos;crime_lastHitByPlayer&apos;" condition="$now &lt; $__link_crime_lastHitByPlayer.time + 5000" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																									</GraphSearch>
																									<EntityContext context="crime_escalationLevel_looking" target="">
																										<EntityContextElement context="crime_escalationLevel_looking" enabled="true">
																											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																										</EntityContextElement>
																									</EntityContext>
																								</Sequence>
																								<Sequence>
																									<Expression expressions="$reevaluateCombatSoundLookingIcon = false" />
																									<IfGate atomic="false" condition="~$reevaluateCombatSoundLookingIcon" RunLogic="Halt">
																										<LinkListener operation="Add" from="$__player" to="" tag="&apos;crime_lastHitByPlayer&apos;" reportInitialState="false">
																											<Expression expressions="$reevaluateCombatSoundLookingIcon = true" />
																										</LinkListener>
																									</IfGate>
																								</Sequence>
																							</Selector>
																						</While>
																					</Then>
																					<Else canSkip="1">
																						<EntityContext context="crime_escalationLevel_looking" target="">
																							<EntityContextElement context="crime_escalationLevel_looking" enabled="true">
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</EntityContextElement>
																						</EntityContext>
																					</Else>
																				</IfElseCondition>
																			</EntityContext>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.suspiciousDoor | &#10;$lookAroundReason == $enum:crime_stimulusKind.shooter | &#10;$lookAroundReason == $enum:crime_stimulusKind.unknownShooter | &#10; &#10;( //lost enemy player in combat &#10; $lookAroundReason == $enum:crime_stimulusKind.enemy &amp; &#10; $lookAroundData.initiatedBy == $enum:switch_interruptInitiator.scheduler &amp; &#10; $lookAroundData.previousReaction == $enum:crime_reactionKind.attack &#10;)">
																			<EntityContext context="crime_escalationLevel_looking" target="">
																				<EntityContextElement context="crime_escalationLevel_looking" enabled="true">
																					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																				</EntityContextElement>
																			</EntityContext>
																		</IfCondition>
																		<DefaultBranch>
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</DefaultBranch>
																	</Switch>
																	<IfElseCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound | &#10;$lookAroundReason == $enum:crime_stimulusKind.suspiciousDoor" saveVersion="2">
																		<Then canSkip="1">
																			<EntityContext context="crime_nrbLevel_looking" target="">
																				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																			</EntityContext>
																		</Then>
																		<Else canSkip="1">
																			<EntityContext context="crime_nrbLevel_searching" target="">
																				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																			</EntityContext>
																		</Else>
																	</IfElseCondition>
																	<IfElseCondition failOnCondition="false" condition="$data:crime[$lookAroundData.information.label].isCrime |  &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.shooter | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.corpse | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.corpseMissing | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.suspiciousDoor | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.animalCorpse | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.lyingBody | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.unknownShooter | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.nonAttributedCrime" saveVersion="2">
																		<Then canSkip="1">
																			<While doFail="false" propagateChildFail="false" condition="true">
																				<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_music_maxDistance&apos;].value" High="$data:script_param[&apos;crime_music_maxDistance&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																					<GameContext context="crime_music_lowest">
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</GameContext>
																				</DistanceGate>
																			</While>
																		</Then>
																		<Else canSkip="1">
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</Else>
																	</IfElseCondition>
																	<Sequence>
																		<IfCondition failOnCondition="false" condition="$data:crime[$lookAroundData.information.label].isCrime | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.shooter | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.suspiciousDoor | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.unknownShooter | &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.nonAttributedCrime">
																			<RelationContext context="PerceptionPriorityBoost" source="$this.id" target="$__player">
																				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																			</RelationContext>
																		</IfCondition>
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</Sequence>
																	<IfElseCondition failOnCondition="false" condition="$lookAroundData.information.label == &apos;motivation&apos; &amp; &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.trespass" saveVersion="2">
																		<Then canSkip="1">
																			<While doFail="false" propagateChildFail="false" condition="~$forceStopLookingInTrespass">
																				<Sequence>
																					<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$useless" ReactionSuppressed="$forceStopLookingInTrespass" />
																					<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																				</Sequence>
																			</While>
																		</Then>
																		<Else canSkip="1">
																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																		</Else>
																	</IfElseCondition>
																	<Sequence>
																		<Switch>
																			<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;$lookAroundData.soundType == $enum:sound.gun_fired &amp; &#10;$distance &lt; $data:script_param[&apos;crime_gunFiredSound_highNervousnessDistance&apos;].value">
																				<ShockNPC Target="$this.id" Source="$__player" Type="Medium" />
																			</IfCondition>
																			<IfCondition failOnCondition="false" condition="$intenseSoundReaction &#10;&amp; &#10;$distance &lt; $data:script_param[&apos;crime_combatSound_highNervousnessDistance&apos;].value">
																				<ShockNPC Target="$this.id" Source="$__player" Type="Low" />
																			</IfCondition>
																			<DefaultBranch>
																				<Success />
																			</DefaultBranch>
																		</Switch>
																		<IfGate atomic="false" condition="~$targetFound" RunLogic="Halt">
																			<IfElseCondition failOnCondition="false" condition="$lookAroundData.source == $enum:crime_source.indirect" saveVersion="2">
																				<Then canSkip="1">
																					<Sequence>
																						<Expression expressions="$barkAlarm = $lookAroundReason ~= $enum:crime_stimulusKind.sound" />
																						<IfCondition failOnCondition="false" condition="$barkAlarm">
																							<Expression expressions="$emitAlarmInformation = true" />
																						</IfCondition>
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</Sequence>
																				</Then>
																				<Else canSkip="1">
																					<Sequence>
																						<IsLoadedGate saveVersion="2">
																							<Else canSkip="1">
																								<Function_crime_lookAround_startBark lookAroundData="$lookAroundData" nodeLabel="30973200" />
																							</Else>
																						</IsLoadedGate>
																						<Expression expressions="$barkAlarm = $lookAroundReason ~= $enum:crime_stimulusKind.sound &amp; &#10;~(($lookAroundData.previousReaction == $enum:crime_reactionKind.attack | &#10;   $lookAroundData.previousReaction == $enum:crime_reactionKind.arrest | &#10;   $lookAroundData.previousReaction == $enum:crime_reactionKind.selfhelp) &amp;  &#10;  $lookAroundData.initiatedBy == $enum:switch_interruptInitiator.scheduler)" />
																						<IfCondition failOnCondition="false" condition="$barkAlarm">
																							<Sequence>
																								<IsLoadedGate saveVersion="2">
																									<Else canSkip="1">
																										<Function_crime_startBark_alarm nodeLabel="19568662" />
																									</Else>
																								</IsLoadedGate>
																								<Expression expressions="$emitAlarmInformation = true" />
																							</Sequence>
																						</IfCondition>
																					</Sequence>
																				</Else>
																			</IfElseCondition>
																		</IfGate>
																		<Expression expressions="$startbarkFinished = true" />
																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																	</Sequence>
																	<Sequence>
																		<Expression expressions="$positionUpdateDirection = $lookAroundData.direction" />
																		<Function_crime_lookAround_getSearchIterations lookAroundReason="$lookAroundReason" iterations="$iterations" iterationsParamToken="$iterationsParamToken" iterationsSet="$iterationsSet" maxIterations="$maxIterations" nodeLabel="29220694" />
																		<IfElseCondition failOnCondition="false" condition="$distance &lt; 2 |  &#10;$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound | &#10;$lookAroundData.alarmReactionType == $enum:crime_alarmReactionType.calm" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$movementType = $enum:crime_lookAround_movementType.slow" />
																			</Then>
																			<Else canSkip="1">
																				<Expression expressions="$movementType = $enum:crime_lookAround_movementType.fast" />
																			</Else>
																		</IfElseCondition>
																		<IfCondition failOnCondition="false" condition="$lookAroundData.stimulusKind == $enum:crime_stimulusKind.animalAbuse">
																			<Sequence>
																				<ExecuteLua code="local entity = XGenAIModule.GetEntityByWUID(data.lookAroundData.stimulusAnimalAbuse.victim) &#10; &#10;if( entity.smartObject ~= nil) then &#10;  data.animalAbuse_species = &apos;Chicken&apos; &#10;else &#10;  data.animalAbuse_species = XGenAIModule.GetEntityByWUID(data.lookAroundData.stimulusAnimalAbuse.victim).soul:GetArchetype().Name &#10;end" />
																				<Function_crime_getAnimalContextFromString animal_archetype="$animalAbuse_species" animal_archetype_float="$dialogContext_reactingToReportFrom[&apos;animalAbuse_species&apos;]" nodeLabel="11254878" />
																				<IfCondition failOnCondition="false" condition="$lookAroundData.stimulusAnimalAbuse.animalAbuseKind == $enum:crime_animalAbuseKind.murder">
																					<Expression expressions="$approachType = $enum:crime_lookAround_approachType.special_animal_corpse" />
																				</IfCondition>
																			</Sequence>
																		</IfCondition>
																		<SuppressFailure>
																			<IfCondition failOnCondition="false" condition="$lookAroundData.information.label ~= &apos;&apos; &amp; &#10;$lookAroundData.information.perceivedWuid ~= $this.id">
																				<LockDynamicInformationValues Information="$lookAroundData.information">
																					<GetDynamicInformationValue Information="$lookAroundData.information" Tag="&apos;noninvestigable&apos;" Out="$noninvestigable" />
																				</LockDynamicInformationValues>
																			</IfCondition>
																		</SuppressFailure>
																		<IfCondition failOnCondition="false" condition="$lookAroundData.reactingToReportFrom ~= $__null">
																			<IfCondition failOnCondition="false" condition="~$reactedToReport">
																				<Sequence>
																					<Function_crime_lookAround_receiveReport lookAroundData="$lookAroundData" nonInvestigable="$noninvestigable" dialogContext_reactingToReportFrom="$dialogContext_reactingToReportFrom" dialogContext_reactingToReportFrom_appendix="$dialogContext_reactingToReportFrom_appendix" nodeLabel="67984623" />
																					<Function_crime_lookaround_shouldHaveWeaponDrawn crimeLevel="$crimeLevel" information="$lookAroundData.information" intenseSoundReaction="$intenseSoundReaction" shouldHaveWeaponDrawn="$shouldHaveWeaponDrawn_persistent" nodeLabel="66198077" />
																					<Expression expressions="$reactedToReport = true" />
																					<IfElseCondition failOnCondition="false" condition="($lookAroundReason == $enum:crime_stimulusKind.corpse | &#10;$lookAroundReason == $enum:crime_stimulusKind.murder)  &amp; &#10;$lookAroundData.information.perceivedWuid ~= $__null" saveVersion="2">
																						<Then canSkip="1">
																							<CheckWuidValid wuid="$lookAroundData.information.perceivedWuid" FailSubtMissing="false" saveVersion="2">
																								<Then canSkip="1">
																									<Sequence>
																										<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																										<DistanceCondition Origin="$this.id" ReferencePt="$lookAroundData.information.perceivedWuid" Low="20.000000" High="20.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																											<Expression expressions="$shouldHaveWeaponDrawn = false" />
																										</DistanceCondition>
																									</Sequence>
																								</Then>
																								<Else canSkip="1">
																									<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																								</Else>
																							</CheckWuidValid>
																						</Then>
																						<Else canSkip="1">
																							<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																						</Else>
																					</IfElseCondition>
																				</Sequence>
																			</IfCondition>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$lookAroundData.source == $enum:crime_source.indirect">
																			<HasSeenPlayer NPC="" FullyAwareOnly="false" saveVersion="2">
																				<Then canSkip="1">
																					<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																						<AtomicDecorator>
																							<Function_switch_handleAwareness_informations nodeLabel="33203084" />
																						</AtomicDecorator>
																					</EntityContext>
																				</Then>
																			</HasSeenPlayer>
																		</IfCondition>
																		<IfElseCondition failOnCondition="false" condition="$intenseSoundReaction" saveVersion="2">
																			<Then canSkip="1">
																				<UrgencyDecorator Urgency="Fast">
																					<MeleeGuardAutomationDecorator GuardMode="forceEnable" active="true">
																						<SubsequentLocationDecorator Location="$originPosition">
																							<WaitAction />
																						</SubsequentLocationDecorator>
																					</MeleeGuardAutomationDecorator>
																				</UrgencyDecorator>
																			</Then>
																			<Else canSkip="1">
																				<WaitAction />
																			</Else>
																		</IfElseCondition>
																		<IfCondition failOnCondition="false" condition="~$noninvestigable">
																			<Parallel successMode="Any" failureMode="Any">
																				<Parallel successMode="Any" failureMode="Any">
																					<Loop count="-1">
																						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$onHotEntitySeenEvent" senderInfo="" inbox="&apos;switch_onHotEntitySeen&apos;" condition="" answerVar="">
																							<IfCondition failOnCondition="false" condition="~$suppressHotEntityEvent">
																								<Sequence>
																									<Switch>
																										<IfCondition failOnCondition="false" condition="$onHotEntitySeenEvent.data.reason == $enum:switch_hotEntityReason.missingNpc &amp; &#10; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.missingNpc">
																											<Sequence>
																												<Expression expressions="$targetFound = true" />
																												<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																											</Sequence>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$onHotEntitySeenEvent.data.reason == $enum:switch_hotEntityReason.shooter &amp; &#10; &#10; &#10;( &#10;  $lookAroundReason == $enum:crime_stimulusKind.shooter | &#10;  $lookAroundReason == $enum:crime_stimulusKind.disturbance | &#10;  ( &#10;   $lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;   ($soundType == $enum:sound.decoy_distract | $soundType == $enum:sound.lure_distract) &#10;  ) &#10;)">
																											<Sequence>
																												<Expression expressions="$targetFound = true" />
																												<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																											</Sequence>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$onHotEntitySeenEvent.data.reason == $enum:switch_hotEntityReason.weaponSound &amp; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;($soundType == $enum:sound.bow_fired | &#10;$soundType == $enum:sound.gun_fired | &#10;$soundType == $enum:sound.arrow_hit | &#10;$soundType == $enum:sound.bullet_hit | &#10;$soundType == $enum:sound.thrash)">
																											<Sequence>
																												<Expression expressions="$targetFound = true" />
																												<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																											</Sequence>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="($onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.poaching | &#10;$onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.murderAnimal) &amp; &#10; &#10; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.animalAbuse">
																											<Sequence>
																												<Expression expressions="$targetFound = true" />
																												<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																											</Sequence>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="($onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.sound | &#10;$onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.dogWhistle)">
																											<IfElseCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound" saveVersion="2">
																												<Then canSkip="1">
																													<Switch>
																														<IfCondition failOnCondition="false" condition="$lookingForABarkingDog">
																															<Sequence>
																																<Expression expressions="$suppressHotEntityEvent = true &#10;$searchMode = $enum:crime_lookAround_searchMode.followWuid &#10;$wuidToFollow = $onHotEntitySeenEvent.target &#10;$positionUpdated = true &#10;$positionUpdatedFromSound = false" />
																																<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																															</Sequence>
																														</IfCondition>
																														<DefaultBranch>
																															<Sequence>
																																<Expression expressions="$targetFound = true" />
																																<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																															</Sequence>
																														</DefaultBranch>
																													</Switch>
																												</Then>
																												<Else canSkip="1">
																													<Sequence>
																														<Expression expressions="$searchMode = $enum:crime_lookAround_searchMode.barkAtUninterestingPlayer" />
																														<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																													</Sequence>
																												</Else>
																											</IfElseCondition>
																										</IfCondition>
																										<DefaultBranch>
																											<Success />
																										</DefaultBranch>
																									</Switch>
																									<Expression expressions="$stopLooking = $targetFound &#10;$hotEntityTarget = $onHotEntitySeenEvent.target" />
																								</Sequence>
																							</IfCondition>
																						</ProcessMessage>
																					</Loop>
																					<Sequence>
																						<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="$__player" WasIgnoredAtLeastFor="&apos;0s&apos;" />
																						<Loop count="-1">
																							<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$perceptionInfo_lookAround" senderInfo="" inbox="&apos;perceptionInfo_lookAround&apos;" condition="" answerVar="">
																								<IfCondition failOnCondition="false" condition="$perceptionInfo_lookAround.perceptible == $__player &amp; $data:crime[$lookAroundData.information.label].isCrime">
																									<Switch>
																										<IfCondition failOnCondition="false" condition="$perceptionInfo_lookAround.threshold == 0.001  &#10;&amp; $perceptionInfo_lookAround.isInsideRecognitionBorder">
																											<Sequence>
																												<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																												<GetSpatialInfo In="$__player" Out="$recognizingPlayerPosition" What="Position" />
																												<Expression expressions="$searchMode = $enum:crime_lookAround_searchMode.stopWhileRecognizingPlayer" />
																											</Sequence>
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$perceptionInfo_lookAround.threshold == 1 | $perceptionInfo_lookAround.threshold == 0">
																											<Sequence>
																												<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																												<Expression expressions="$searchMode = $enum:crime_lookAround_searchMode.points" />
																											</Sequence>
																										</IfCondition>
																										<DefaultBranch>
																											<Success />
																										</DefaultBranch>
																									</Switch>
																								</IfCondition>
																							</ProcessMessage>
																						</Loop>
																					</Sequence>
																					<IfElseCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.missingNpc" saveVersion="2">
																						<Then canSkip="1">
																							<DistanceGate Origin="$this.id" ReferencePt="$lookAroundData.missingNpc" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																								<Expression expressions="$targetFound = true &#10;$stopLooking = true" />
																							</DistanceGate>
																						</Then>
																						<Else canSkip="1">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Else>
																					</IfElseCondition>
																					<Sequence>
																						<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																							<Then canSkip="1">
																								<While doFail="false" propagateChildFail="false" condition="$initialMoveToDestination">
																									<Sequence>
																										<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="&apos;6s&apos;" />
																										<EntityContextCheck context="movingFar" target="" saveVersion="2">
																											<Then canSkip="1">
																												<IfCondition failOnCondition="false" condition="$movementType == $enum:crime_lookAround_movementType.fast">
																													<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;STRAZ_BEZI_NA_MISTO_CINU&apos;" priority="$enum:crime_barkPriority.flavor" nodeLabel="26090819" />
																												</IfCondition>
																											</Then>
																										</EntityContextCheck>
																									</Sequence>
																								</While>
																							</Then>
																						</EntityContextCheck>
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</Sequence>
																					<While doFail="false" propagateChildFail="false" condition="$anchorTooFar == false">
																						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$soundPositionUpdateMsg" senderInfo="" inbox="&apos;lookAround_updateSoundPosition&apos;" condition="" answerVar="">
																							<EntityContextCheck context="switch_disabledHearingReaction" target="$this.id" saveVersion="2">
																								<Then canSkip="1">
																									<Success />
																								</Then>
																								<Else canSkip="1">
																									<IfCondition failOnCondition="false" condition="$searchMode == $enum:crime_lookAround_searchMode.points">
																										<Sequence>
																											<Function_crime_getAnchor anchor="$anchor" nodeLabel="81979054" />
																											<MeasureDistance position1="$this.id" position2="$anchor.position" mode="ThreeDimensions" result="$myDistanceToAnchor" />
																											<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_lookAround_anchor_maxDistance&apos;].value * $data:script_param[&apos;crime_anchor_maxDistance_courageousMultiplier&apos;].value" />
																												</Then>
																												<Else canSkip="1">
																													<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_lookAround_anchor_maxDistance&apos;].value" />
																												</Else>
																											</EntityContextCheck>
																											<IfElseCondition failOnCondition="false" condition="$myDistanceToAnchor &lt; $maxDistanceToAnchor" saveVersion="2">
																												<Then canSkip="1">
																													<Sequence>
																														<MeasureDistance position1="$this.id" position2="$soundPositionUpdateMsg.hearingInfo.position" mode="ThreeDimensions" result="$distance" />
																														<IfCondition failOnCondition="false" condition="$distance &gt; 0.5">
																															<Sequence>
																																<Expression expressions="$originPosition = $soundPositionUpdateMsg.hearingInfo.position &#10;$soundPosUpdateCount += 1" />
																																<CheckNervousnessInterval Soul="$this.id" Flag="alerted" saveVersion="2">
																																	<Then canSkip="1">
																																		<IfElseCondition failOnCondition="false" condition="$soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.decoy_distract | &#10;$soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.lure_distract | &#10;$soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.whistle | &#10;$soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.dog_distract | &#10;$soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.movement | &#10;$soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.lockpick" saveVersion="2">
																																			<Then canSkip="1">
																																				<IfElseCondition failOnCondition="false" condition="$soundPosUpdateCount &gt;= $data:script_param[&apos;crime_fedUpWithSoundPosCount&apos;].value" saveVersion="2">
																																					<Then canSkip="1">
																																						<Expression expressions="$escalateSoundReaction = true" />
																																					</Then>
																																					<Else canSkip="1">
																																						<Expression expressions="$escalateSoundReaction = false" />
																																					</Else>
																																				</IfElseCondition>
																																			</Then>
																																			<Else canSkip="1">
																																				<Expression expressions="$escalateSoundReaction = false" />
																																			</Else>
																																		</IfElseCondition>
																																	</Then>
																																	<Else canSkip="1">
																																		<Expression expressions="$escalateSoundReaction = false" />
																																	</Else>
																																</CheckNervousnessInterval>
																																<IfElseCondition failOnCondition="false" condition="$escalateSoundReaction" saveVersion="2">
																																	<Then canSkip="1">
																																		<Sequence>
																																			<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="$soundPositionUpdateMsg.hearingInfo.position" ForceSemipublicReaction="true" ShouldUseVec3Position="true" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$soundInTrespass" ReactionSuppressed="$reactionSuppressed" />
																																			<IfCondition failOnCondition="false" condition="$soundInTrespass">
																																				<Sequence>
																																					<IsBandit Npc="$this.id" IsBandit="$isBandit" />
																																					<IfCondition failOnCondition="false" condition="~$isBandit">
																																						<AtomicDecorator>
																																							<Sequence>
																																								<CreateInformationWrapper Label="&apos;nonAttributedCrime&apos;" PerceivedWuid="$this.id" PositionType="positionVec3" PositionVec3="$soundPositionUpdateMsg.hearingInfo.position" PositionWuid="" Information="$nonAttirbutedInformation" />
																																								<LockDynamicInformationValues Information="$nonAttirbutedInformation">
																																									<Sequence>
																																										<SetDynamicInformationValue Information="$nonAttirbutedInformation" Tag="&apos;stimulusKind&apos;" Variable="" Type="&apos;enum:crime_stimulusKind&apos;" Value="$enum:crime_stimulusKind.disturbance" />
																																										<SetDynamicInformationValue Information="$nonAttirbutedInformation" Tag="&apos;victim&apos;" Variable="$this.id" Type="" Value="" />
																																									</Sequence>
																																								</LockDynamicInformationValues>
																																								<Expression expressions="$stimulus_nonAttributed.information = $nonAttirbutedInformation" />
																																								<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																									<Function_switch_handleStimulusNonAttributedCrime stimulus="$stimulus_nonAttributed" nodeLabel="19671536" />
																																								</EntityContext>
																																							</Sequence>
																																						</AtomicDecorator>
																																					</IfCondition>
																																				</Sequence>
																																			</IfCondition>
																																			<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_VZDAVA_PATRANI_NA_MISTE_CINU_(ZVUK)&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="55976925" />
																																			<Function_crime_addFedUpWithSoundCooldown addBarkCooldown="true" addReactionCooldown="true" nodeLabel="89484944" />
																																			<Expression expressions="$stopLooking = true &#10;$iterations = 0" />
																																		</Sequence>
																																	</Then>
																																	<Else canSkip="1">
																																		<Sequence>
																																			<RandomGate opensWithChance="$updateSoundBarkChance" saveVersion="2">
																																				<Then canSkip="1">
																																					<Sequence>
																																						<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_REINFORCUJE_REAKCI_NA_ZVUK_(UNIVERZAL)&apos;" priority="$enum:crime_barkPriority.flavor" nodeLabel="55922548" />
																																						<Expression expressions="$updateSoundBarkChance = 0.25" />
																																					</Sequence>
																																				</Then>
																																				<Else canSkip="1">
																																					<Expression expressions="$updateSoundBarkChance = 0.75" />
																																				</Else>
																																			</RandomGate>
																																			<IfElseCondition failOnCondition="false" condition="$soundType == $soundPositionUpdateMsg.hearingInfo.soundId &#10;&amp; ( &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.combat | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.movement | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.lockpick | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.smell | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.perfume | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.bio_hunger | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.bio_exhaustion | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.bio_drunkeness | &#10; $soundPositionUpdateMsg.hearingInfo.soundId == $enum:sound.dog_bark &#10;)" saveVersion="2">
																																				<Then canSkip="1">
																																					<Expression expressions="$firstIterationSoundSkip = true" />
																																				</Then>
																																				<Else canSkip="1">
																																					<Expression expressions="$firstIterationSoundSkip = false" />
																																				</Else>
																																			</IfElseCondition>
																																			<Expression expressions="$soundType = $soundPositionUpdateMsg.hearingInfo.soundId &#10;$originPosition = $soundPositionUpdateMsg.hearingInfo.position" />
																																			<MeasureDistance position1="$moveDestination" position2="$soundPositionUpdateMsg.hearingInfo.position" mode="ThreeDimensions" result="$distance" />
																																			<Expression expressions="$firstIteration = true &#10;$iterations = $data:script_param[&apos;crime_lookAround_maxIterations&apos; + $iterationsParamToken].value &#10;$positionUpdated = true &#10;$positionUpdatedFromSound = true" />
																																			<IfCondition failOnCondition="false" condition="$distance &lt; 2">
																																				<Expression expressions="$firstIterationSoundSkip = true &#10;$iterations -= 1" />
																																			</IfCondition>
																																			<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																																		</Sequence>
																																	</Else>
																																</IfElseCondition>
																															</Sequence>
																														</IfCondition>
																													</Sequence>
																												</Then>
																												<Else canSkip="1">
																													<Expression expressions="$anchorTooFar = true" />
																												</Else>
																											</IfElseCondition>
																										</Sequence>
																									</IfCondition>
																								</Else>
																							</EntityContextCheck>
																						</ProcessMessage>
																					</While>
																					<While doFail="false" propagateChildFail="false" condition="$anchorTooFar == false">
																						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$scanPositionUpdateMsg" senderInfo="" inbox="&apos;lookAround_updateScanPosition&apos;" condition="" answerVar="">
																							<Sequence>
																								<Function_crime_getAnchor anchor="$anchor" nodeLabel="28336989" />
																								<MeasureDistance position1="$this.id" position2="$anchor.position" mode="ThreeDimensions" result="$myDistanceToAnchor" />
																								<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_lookAround_anchor_maxDistance&apos;].value * $data:script_param[&apos;crime_anchor_maxDistance_courageousMultiplier&apos;].value" />
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_lookAround_anchor_maxDistance&apos;].value" />
																									</Else>
																								</EntityContextCheck>
																								<IfElseCondition failOnCondition="false" condition="$myDistanceToAnchor &lt; $maxDistanceToAnchor" saveVersion="2">
																									<Then canSkip="1">
																										<Sequence>
																											<Expression expressions="$originPosition = $scanPositionUpdateMsg.scanDirection &#10;$positionUpdated = true &#10;$positionUpdatedFromSound = false &#10;$firstIteration = true" />
																											<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																										</Sequence>
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$anchorTooFar = true" />
																									</Else>
																								</IfElseCondition>
																							</Sequence>
																						</ProcessMessage>
																					</While>
																					<IfElseCondition failOnCondition="false" condition="$lookAroundData.information.label ~= &apos;&apos;" saveVersion="2">
																						<Then canSkip="1">
																							<Sequence>
																								<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$requestVisualHelp = true" />
																									</Then>
																								</EntityContextCheck>
																								<IfElseCondition failOnCondition="false" condition="$data:crime[$lookAroundData.information.label].isCrime" saveVersion="2">
																									<Then canSkip="1">
																										<CallDecorator_crime_sharePlayersPosition>
																											<Subtree canSkip="1">
																												<Function_crime_sharePlayersLastSeenPosition allowedAssistance="$enum:crime_allowedSharePlayerPosAssistance.none" requestVisualAssistanceFromOthers="$requestVisualHelp" direction="$positionUpdateDirection" position="$originPosition" nodeLabel="40095590" />
																											</Subtree>
																											<PositionUpdatedFromOtherNpc canSkip="1">
																												<CallbackEventCatch_empty>
																													<Sequence>
																														<Expression expressions="$firstIteration = true &#10;$positionUpdated = true &#10;$positionUpdatedFromSound = false" />
																														<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																													</Sequence>
																												</CallbackEventCatch_empty>
																											</PositionUpdatedFromOtherNpc>
																											<PlayerFound canSkip="1">
																												<CallbackEventCatch_empty>
																													<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																														<Sequence>
																															<Expression expressions="$awareness.perceptible = $__player" />
																															<EntityContext context="crime_disabledRecurrentPerceptionIgnore" target="">
																																<EntityContext context="crime_sharedPerceptionReaction" target="">
																																	<Function_switch_handleAwareness awareness="$awareness" nodeLabel="15568702" />
																																</EntityContext>
																															</EntityContext>
																														</Sequence>
																													</EntityContext>
																												</CallbackEventCatch_empty>
																											</PlayerFound>
																											<PointingStart canSkip="1">
																												<CallbackEventCatch_empty>
																													<Success />
																												</CallbackEventCatch_empty>
																											</PointingStart>
																											<PointingEnd canSkip="1">
																												<CallbackEventCatch_empty>
																													<Success />
																												</CallbackEventCatch_empty>
																											</PointingEnd>
																										</CallDecorator_crime_sharePlayersPosition>
																									</Then>
																									<Else canSkip="1">
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</Else>
																								</IfElseCondition>
																							</Sequence>
																						</Then>
																						<Else canSkip="1">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Else>
																					</IfElseCondition>
																					<Loop count="-1">
																						<IfGate atomic="false" condition="~$initialMoveToDestination" RunLogic="Halt">
																							<EntityContext context="crime_interruptLookAround_looking" target="">
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</EntityContext>
																						</IfGate>
																					</Loop>
																				</Parallel>
																				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																					<Child canSkip="1">
																						<While doFail="false" propagateChildFail="false" condition="$iterations &gt; 0">
																							<IfElseCondition failOnCondition="false" condition="$targetFound" saveVersion="2">
																								<Then canSkip="1">
																									<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																										<Child canSkip="1">
																											<Parallel successMode="All" failureMode="Any">
																												<IfGate atomic="false" condition="$startbarkFinished" RunLogic="KeepRunning">
																													<Function_crime_lookAround_endBark hotEntityTarget="$hotEntityTarget" lookAroundData="$lookAroundData" targetFound="true" nodeLabel="25140727" />
																												</IfGate>
																												<Sequence>
																													<WaitAction />
																													<StopMovement waitUntilStopped="false" />
																													<Turn target="$hotEntityTarget" align="false" />
																												</Sequence>
																											</Parallel>
																										</Child>
																										<OnFail canSkip="1">
																											<Expression expressions="$stopLooking = true &#10;$iterations = 0" />
																										</OnFail>
																									</FuseBox>
																								</Then>
																								<Else canSkip="1">
																									<Sequence>
																										<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;interrupt_lookAround_positionUpdated&apos;" />
																										<Parallel successMode="Any" failureMode="Any">
																											<Sequence>
																												<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;interrupt_lookAround_positionUpdated&apos;" RunLogic="Halt">
																													<Success />
																												</ExternalLock>
																												<IfCondition failOnCondition="false" condition="$iterations &lt; $maxIterations">
																													<Expression expressions="$iterations += 1" />
																												</IfCondition>
																											</Sequence>
																											<Switch>
																												<IfCondition failOnCondition="false" condition="$searchMode == $enum:crime_lookAround_searchMode.followWuid">
																													<LogToLabel Name="&apos;searchMode&apos;" Wuid="" Message="&apos;followWuid&apos;">
																														<Sequence>
																															<Switch>
																																<IfCondition failOnCondition="false" condition="$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound">
																																	<IfCondition failOnCondition="false" condition="$soundType == $enum:sound.dog_bark">
																																		<Expression expressions="$approachType = $enum:crime_lookAround_approachType.special_sound_dog_bark_align" />
																																	</IfCondition>
																																</IfCondition>
																																<DefaultBranch>
																																	<Expression expressions="$approachType = $enum:crime_lookAround_approachType.approximate" />
																																</DefaultBranch>
																															</Switch>
																															<Expression expressions="$iterations = 0" />
																															<Expression expressions="$initialMoveToDestination = false" />
																															<Function_crime_lookAround_wuidFollowing approachType="$approachType" target="$wuidToFollow" nodeLabel="74286756" />
																															<Parallel successMode="All" failureMode="Any">
																																<Function_crime_lookAround_endBark hotEntityTarget="$hotEntityTarget" lookAroundData="$lookAroundData" targetFound="false" nodeLabel="20528909" />
																																<AnimationAction fragment="&apos;StealthRecognitionStabilization&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																															</Parallel>
																														</Sequence>
																													</LogToLabel>
																												</IfCondition>
																												<IfCondition failOnCondition="false" condition="$searchMode == $enum:crime_lookAround_searchMode.barkAtUninterestingPlayer">
																													<LogToLabel Name="&apos;searchMode&apos;" Wuid="" Message="&apos;barkAtUninterestingPlayer&apos;">
																														<Sequence>
																															<Parallel successMode="All" failureMode="Any">
																																<Switch>
																																	<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
																																		<Then canSkip="1">
																																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="42664187" />
																																		</Then>
																																	</IsInsideAreaWithLabel>
																																	<IsInsideAreaWithLabel Position="$this.id" Label="&apos;settlement&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
																																		<Then canSkip="1">
																																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="42065865" />
																																		</Then>
																																	</IsInsideAreaWithLabel>
																																	<DefaultBranch>
																																		<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;OSAMOCENE_NPC_NASLO_HRACE_U_ZDROJE_ZVUKU&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="61260909" />
																																	</DefaultBranch>
																																</Switch>
																																<Sequence>
																																	<WaitAction />
																																	<StopMovement waitUntilStopped="false" />
																																	<Turn target="$__player" align="false" />
																																</Sequence>
																															</Parallel>
																															<Expression expressions="$positionUpdateDirection.x = 0 &#10;$positionUpdateDirection.y = 0 &#10;$positionUpdateDirection.z = 0" />
																															<Function_crime_getCrimeSceneSearchPoint crimePos="$originPosition" desiredSearchPointCount="24" direction="$positionUpdateDirection" forceUpdate="false" searchMode="$pointSearchMode" searchPoint="$searchPoint" nodeLabel="55495729" />
																															<Expression expressions="$searchMode = $enum:crime_lookAround_searchMode.points" />
																														</Sequence>
																													</LogToLabel>
																												</IfCondition>
																												<IfCondition failOnCondition="false" condition="$searchMode == $enum:crime_lookAround_searchMode.stopWhileRecognizingPlayer">
																													<LogToLabel Name="&apos;searchMode&apos;" Wuid="" Message="&apos;stopWhileRecognizingPlayer&apos;">
																														<Sequence>
																															<Function_crime_lookAround_getParamsFromMovementType movementType="$movementType" moveParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" speed="$move_speed" nodeLabel="84442846" />
																															<MoveParamsDecorator speed="$move_speed" pathFindingParams="$move_pathFindingParams" doorClosingPolicy="LeaveOpened">
																																<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$recognizingPlayerPosition" destinationSpecification2="" destinationSpecification3="" speed="$move_speed" additionalParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" staminaPolicy="" pathInfo="" />
																															</MoveParamsDecorator>
																															<Turn target="$__player" align="false" />
																															<Wait duration="&apos;1m&apos;" timeType="GameTime" doFail="false" variation="" />
																														</Sequence>
																													</LogToLabel>
																												</IfCondition>
																												<DefaultBranch>
																													<SuppressFailure>
																														<Sequence>
																															<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;moveDestinationSet&apos;" />
																															<Parallel successMode="All" failureMode="Any">
																																<Sequence>
																																	<Expression expressions="$stopLooking = $targetFound" />
																																	<IfElseCondition failOnCondition="false" condition="~$stopLooking" saveVersion="2">
																																		<Then canSkip="1">
																																			<IfGate atomic="false" condition="~$stopLooking" RunLogic="Halt">
																																				<LogToLabel Name="&apos;searchMode&apos;" Wuid="" Message="&apos;looking&apos;">
																																					<Sequence>
																																						<IfElseCondition failOnCondition="false" condition="$firstIteration" saveVersion="2">
																																							<Then canSkip="1">
																																								<Sequence>
																																									<Expression expressions="$approachTypeSet = false &#10;$moveToOrigin_initial = true" />
																																									<Parallel successMode="Any" failureMode="Any">
																																										<Function_crime_lookAround_getApproachType alarmReactionKind="$lookAroundData.alarmReactionType" firstIterationSoundSkip="$firstIterationSoundSkip" information="$lookAroundData.information" isPoaching="$lookAroundData.stimulusAnimalAbuse.isPoaching" originPosition="$originPosition" positionUpdated="$positionUpdated" positionUpdatedFromSound="$positionUpdatedFromSound" soundType="$soundType" stimulusKind="$lookAroundReason" approachType="$approachType" initialEvaluationDone="$approachTypeSet" isFirstOnCrimeScene="$firstOnCrimeScene" resetMove="$resetMoveToOrigin" nodeLabel="67403010" />
																																										<While doFail="false" propagateChildFail="false" condition="$moveToOrigin_initial | $resetMoveToOrigin">
																																											<Sequence>
																																												<Expression expressions="$moveToOrigin_initial = false &#10;$resetMoveToOrigin = false" />
																																												<IfGate atomic="false" condition="$approachTypeSet" RunLogic="KeepRunning">
																																													<Parallel successMode="Any" failureMode="Any">
																																														<IfGate atomic="false" condition="$resetMoveToOrigin" RunLogic="Halt">
																																															<Success />
																																														</IfGate>
																																														<SuppressFailure>
																																															<Sequence>
																																																<Expression expressions="$moveDestination = $originPosition" />
																																																<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;moveDestinationSet&apos;" />
																																																<IfElseCondition failOnCondition="false" condition="$approachType == $enum:crime_lookAround_approachType.special_sound" saveVersion="2">
																																																	<Then canSkip="1">
																																																		<ForceLook LookTarget="$originPosition" DisableVariations="true">
																																																			<Sequence>
																																																				<Expression expressions="$initialMoveToDestination = false" />
																																																				<WaitAction />
																																																				<StopMovement waitUntilStopped="false" />
																																																				<Turn target="$originPosition" align="false" />
																																																				<IfCondition failOnCondition="false" condition="$soundPosUpdateCount &gt; 0">
																																																					<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																				</IfCondition>
																																																			</Sequence>
																																																		</ForceLook>
																																																	</Then>
																																																	<Else canSkip="1">
																																																		<Sequence>
																																																			<Function_crime_lookAround_getStopDistanceData approachType="$approachType" stopDistance="$stopWithinDistance_origin" stopDistanceVariation="$stopDistanceVariation_origin" nodeLabel="65889498" />
																																																			<Function_crime_lookAround_getParamsFromMovementType movementType="$movementType" moveParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" speed="$move_speed" nodeLabel="41710619" />
																																																			<IfCondition failOnCondition="false" condition="$approachType == $enum:crime_lookAround_approachType.special_corpse | &#10;$approachType == $enum:crime_lookAround_approachType.special_animal_corpse">
																																																				<Expression expressions="$shouldHaveWeaponDrawn = false &#10;$tryToKeepSecondaryWeapon = false" />
																																																			</IfCondition>
																																																			<MoveParamsDecorator speed="$move_speed" pathFindingParams="$move_pathFindingParams" doorClosingPolicy="LeaveOpened">
																																																				<Move stopWithinDistance="$stopWithinDistance_origin" stopDistanceVariation="$stopDistanceVariation_origin" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$moveDestination" destinationSpecification2="" destinationSpecification3="" speed="$move_speed" additionalParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" staminaPolicy="" pathInfo="" />
																																																			</MoveParamsDecorator>
																																																			<Expression expressions="$initialMoveToDestination = false" />
																																																			<Sequence>
																																																				<WaitAction />
																																																				<StopMovement waitUntilStopped="false" />
																																																			</Sequence>
																																																			<Switch>
																																																				<IfCondition failOnCondition="false" condition="$approachType == $enum:crime_lookAround_approachType.special_corpse">
																																																					<Sequence>
																																																						<MeasureDistance position1="$this.id" position2="$lookAroundData.information.perceivedWuid" mode="ThreeDimensions" result="$distanceMeToCorpse" />
																																																						<IfElseCondition failOnCondition="false" condition="$distanceMeToCorpse &lt; 5" saveVersion="2">
																																																							<Then canSkip="1">
																																																								<Parallel successMode="All" failureMode="Any">
																																																									<Sequence>
																																																										<FuseBox StatusPropagation="Success" OneCleanup="false" saveVersion="2">
																																																											<Child canSkip="1">
																																																												<Function_crime_getCrimeMetaroleLabel information="$lookAroundData.information" reportedBy="$lookAroundData.reactingToReportFrom" situation="$enum:crime_barkSituation.lookAround" soundType="$soundType" source="$enum:crime_source.direct" stimulusKind="$lookAroundReason" dialogContext="$dialogContext_looking" metaroleLabel="$metarole" nodeLabel="18432120" />
																																																											</Child>
																																																											<OnSuccess canSkip="1">
																																																												<Success />
																																																											</OnSuccess>
																																																											<OnFail canSkip="1">
																																																												<LogToConsole LogLevel="Warning" Message="&apos;INTERRUPT_LOOKAROUND: Unable to get correct metarole for ongoing crime situation. Please, report to your crime scripter of choice.&apos;" />
																																																											</OnFail>
																																																										</FuseBox>
																																																										<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_looking" dramaticBark="false" lookAt="$__null" metarole="$metarole" priority="$enum:crime_barkPriority.low" nodeLabel="29212457" />
																																																									</Sequence>
																																																									<Sequence>
																																																										<Turn target="$originPosition" align="false" />
																																																										<ForceLook LookTarget="$originPosition" DisableVariations="false">
																																																											<IsTimeSkipping saveVersion="2">
																																																												<Then canSkip="1">
																																																													<Success />
																																																												</Then>
																																																												<Else canSkip="1">
																																																													<AnimationAction fragment="&apos;GuardSearchCorpse&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																																												</Else>
																																																											</IsTimeSkipping>
																																																										</ForceLook>
																																																										<Function_crime_addCorpseLink corpse="$lookAroundData.information.perceivedWuid" corpseState="$enum:corpseState.investigated" mateReacting="false" resolve="true" storeTime="false" nodeLabel="33454429" />
																																																									</Sequence>
																																																								</Parallel>
																																																							</Then>
																																																							<Else canSkip="1">
																																																								<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																																									<Sequence>
																																																										<Expression expressions="$stimulus_missingNpc.missingNpc = $lookAroundData.information.perceivedWuid &#10;$stimulus_missingNpc.missingNpcData.destination = $moveDestination &#10;$stimulus_missingNpc.alwaysUseDataDestination = true" />
																																																										<Function_switch_handleStimulusMissingNpc stimulus="$stimulus_missingNpc" nodeLabel="21498926" />
																																																									</Sequence>
																																																								</EntityContext>
																																																							</Else>
																																																						</IfElseCondition>
																																																					</Sequence>
																																																				</IfCondition>
																																																				<IfCondition failOnCondition="false" condition="$approachType == $enum:crime_lookAround_approachType.special_animal_corpse">
																																																					<Sequence>
																																																						<Turn target="$originPosition" align="false" />
																																																						<ForceLook LookTarget="$originPosition" DisableVariations="false">
																																																							<IsTimeSkipping saveVersion="2">
																																																								<Then canSkip="1">
																																																									<Success />
																																																								</Then>
																																																								<Else canSkip="1">
																																																									<AnimationAction fragment="&apos;GuardSearchCorpse&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																																								</Else>
																																																							</IsTimeSkipping>
																																																						</ForceLook>
																																																					</Sequence>
																																																				</IfCondition>
																																																				<DefaultBranch>
																																																					<Success />
																																																				</DefaultBranch>
																																																			</Switch>
																																																			<IfCondition failOnCondition="false" condition="$approachType == $enum:crime_lookAround_approachType.special_corpse | &#10;$approachType == $enum:crime_lookAround_approachType.special_animal_corpse">
																																																				<Expression expressions="$shouldHaveWeaponDrawn = $shouldHaveWeaponDrawn_persistent" />
																																																			</IfCondition>
																																																		</Sequence>
																																																	</Else>
																																																</IfElseCondition>
																																															</Sequence>
																																														</SuppressFailure>
																																													</Parallel>
																																												</IfGate>
																																											</Sequence>
																																										</While>
																																									</Parallel>
																																								</Sequence>
																																							</Then>
																																							<Else canSkip="1">
																																								<SuppressFailure>
																																									<Sequence>
																																										<Expression expressions="$moveDestination = $searchPoint.position" />
																																										<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;moveDestinationSet&apos;" />
																																										<Function_crime_lookAround_getParamsFromMovementType movementType="$movementType" moveParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" speed="$move_speed" nodeLabel="46843147" />
																																										<MoveParamsDecorator speed="$move_speed" pathFindingParams="$move_pathFindingParams" doorClosingPolicy="LeaveOpened">
																																											<Move stopWithinDistance="0.500000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$moveDestination" destinationSpecification2="" destinationSpecification3="" speed="$move_speed" additionalParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" staminaPolicy="" pathInfo="" />
																																										</MoveParamsDecorator>
																																									</Sequence>
																																								</SuppressFailure>
																																							</Else>
																																						</IfElseCondition>
																																						<AffectFeelings Npc="$this.id" Token="&apos;interruptLookAround_periodic&apos;" AffectNervousness="true" AffectReputation="false" />
																																						<IsTimeSkipping saveVersion="2">
																																							<Then canSkip="1">
																																								<Success />
																																							</Then>
																																							<Else canSkip="1">
																																								<Parallel successMode="Any" failureMode="Any">
																																									<Parallel successMode="All" failureMode="Any">
																																										<IfCondition failOnCondition="false" condition="$approachType ~= $enum:crime_lookAround_approachType.special_corpse | &#10;~$firstIteration">
																																											<RandomGate opensWithChance="0.750000" saveVersion="2">
																																												<Then canSkip="1">
																																													<SuppressFailure>
																																														<Sequence>
																																															<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
																																																<Child canSkip="1">
																																																	<Function_crime_getCrimeMetaroleLabel information="$lookAroundData.information" reportedBy="$lookAroundData.reactingToReportFrom" situation="$enum:crime_barkSituation.lookAround" soundType="$soundType" source="$enum:crime_source.direct" stimulusKind="$lookAroundReason" dialogContext="$dialogContext_looking" metaroleLabel="$metarole" nodeLabel="95991843" />
																																																</Child>
																																																<OnSuccess canSkip="1">
																																																	<Success />
																																																</OnSuccess>
																																																<OnFail canSkip="1">
																																																	<LogToConsole LogLevel="Warning" Message="&apos;INTERRUPT_LOOKAROUND: Unable to get correct metarole for ongoing crime situation. Please, report to your crime scripter of choice.&apos;" />
																																																</OnFail>
																																															</FuseBox>
																																															<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_looking" dramaticBark="false" lookAt="$__null" metarole="$metarole" priority="$enum:crime_barkPriority.low" nodeLabel="62585701" />
																																														</Sequence>
																																													</SuppressFailure>
																																												</Then>
																																												<Else canSkip="1">
																																													<Success />
																																												</Else>
																																											</RandomGate>
																																										</IfCondition>
																																										<Switch>
																																											<EntityContextCheck context="crime_interruptLookAround_rapidInvestigation" target="" saveVersion="2">
																																												<Then canSkip="1">
																																													<Success />
																																												</Then>
																																											</EntityContextCheck>
																																											<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;~$firstIteration">
																																												<IfElseCondition failOnCondition="false" condition="$playAnim" saveVersion="2">
																																													<Then canSkip="1">
																																														<Sequence>
																																															<Expression expressions="$playAnim = false" />
																																															<HasGenderCheck Gender="Female" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
																																																<Then canSkip="1">
																																																	<AnimationAction fragment="&apos;SearchStand&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																																</Then>
																																																<Else canSkip="1">
																																																	<Switch>
																																																		<IsWeaponDrawn who="$this.id" WeaponSet="Secondary" saveVersion="2">
																																																			<Then canSkip="1">
																																																				<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																																			</Then>
																																																		</IsWeaponDrawn>
																																																		<IsWeaponDrawn who="$this.id" WeaponSet="Oversized" saveVersion="2">
																																																			<Then canSkip="1">
																																																				<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																																			</Then>
																																																		</IsWeaponDrawn>
																																																		<DefaultBranch>
																																																			<AnimationAction fragment="&apos;InspectionWalkLookingVAR&apos;" tags="&apos;lookingStraight2&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																																		</DefaultBranch>
																																																	</Switch>
																																																</Else>
																																															</HasGenderCheck>
																																														</Sequence>
																																													</Then>
																																													<Else canSkip="1">
																																														<Sequence>
																																															<Expression expressions="$playAnim = true" />
																																															<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																														</Sequence>
																																													</Else>
																																												</IfElseCondition>
																																											</IfCondition>
																																											<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound | &#10;$positionUpdatedFromSound">
																																												<Success />
																																											</IfCondition>
																																											<DefaultBranch>
																																												<SuppressFailure>
																																													<IsWeaponDrawn who="$this.id" WeaponSet="Secondary" saveVersion="2">
																																														<Else canSkip="1">
																																															<AnimationAction fragment="&apos;SearchStand&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																														</Else>
																																													</IsWeaponDrawn>
																																												</SuppressFailure>
																																											</DefaultBranch>
																																										</Switch>
																																									</Parallel>
																																									<Sequence>
																																										<SuppressFailure>
																																											<EntityContext context="crime_disabledRecurrentPerceptionIgnore" target="">
																																												<Sequence>
																																													<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="$__player" WasIgnoredAtLeastFor="&apos;0s&apos;" />
																																													<PerceptionSearch ComponentToBoost="BoostRangedWeapon" saveVersion="2">
																																														<Search canSkip="1">
																																															<While doFail="false" propagateChildFail="false" condition="true">
																																																<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$percept" senderInfo="" inbox="&apos;perceptionInfo_scan&apos;" condition="" answerVar="">
																																																	<CheckWuidValid wuid="$percept.perceptible" FailSubtMissing="false" saveVersion="2">
																																																		<Then canSkip="1">
																																																			<IfCondition failOnCondition="false" condition="$percept.threshold == 1">
																																																				<DismissSearchCandidate PerceptibleObject="$percept.perceptible" />
																																																			</IfCondition>
																																																		</Then>
																																																	</CheckWuidValid>
																																																</ProcessMessage>
																																															</While>
																																														</Search>
																																														<NoCandidate canSkip="1">
																																															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																														</NoCandidate>
																																													</PerceptionSearch>
																																												</Sequence>
																																											</EntityContext>
																																										</SuppressFailure>
																																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																									</Sequence>
																																								</Parallel>
																																							</Else>
																																						</IsTimeSkipping>
																																						<IfCondition failOnCondition="false" condition="~$breakCheckNotifications">
																																							<CheckNervousnessInterval Soul="$this.id" Flag="midToInf" saveVersion="2">
																																								<Then canSkip="1">
																																									<IsWeaponDrawn who="$this.id" WeaponSet="Oversized" saveVersion="2">
																																										<Then canSkip="1">
																																											<Success />
																																										</Then>
																																										<Else canSkip="1">
																																											<Sequence>
																																												<Expression expressions="$shouldHaveWeaponDrawn = true" />
																																												<WaitAction />
																																											</Sequence>
																																										</Else>
																																									</IsWeaponDrawn>
																																								</Then>
																																								<Else canSkip="1">
																																									<Success />
																																								</Else>
																																							</CheckNervousnessInterval>
																																						</IfCondition>
																																						<IfElseCondition failOnCondition="false" condition="($crimeLevel &gt;= $enum:crime_crimeLevel.violent &amp;  &#10; $lookAroundData.information.label ~= &apos;corpse&apos; &amp; &#10; ( &#10;  $lookAroundData.source == $enum:crime_source.direct &#10;  | &#10;  $lookAroundData.source == $enum:crime_source.personal &#10; ) &#10;) | &#10;$lookAroundData.alarmReactionType == $enum:crime_alarmReactionType.urgent" saveVersion="2">
																																							<Then canSkip="1">
																																								<Expression expressions="$movementType = $enum:crime_lookAround_movementType.fast" />
																																							</Then>
																																							<Else canSkip="1">
																																								<Expression expressions="$movementType = $enum:crime_lookAround_movementType.slow" />
																																							</Else>
																																						</IfElseCondition>
																																						<Expression expressions="$iterations -= 1 &#10;$firstIteration = false &#10;$positionUpdated = false &#10;$positionUpdatedFromSound = false" />
																																					</Sequence>
																																				</LogToLabel>
																																			</IfGate>
																																		</Then>
																																		<Else canSkip="1">
																																			<Expression expressions="$iterations = 0" />
																																		</Else>
																																	</IfElseCondition>
																																	<IfCondition failOnCondition="false" condition="$iterations == 0 &amp; ~$targetFound">
																																		<EntityContext context="crime_interruptLookAround_nothingFound" target="">
																																			<Sequence>
																																				<Expression expressions="$shouldHaveWeaponDrawn = false" />
																																				<EntityContextCheck context="crime_interruptLookAround_skipEnding" target="" saveVersion="2">
																																					<Else canSkip="1">
																																						<Sequence>
																																							<IfCondition failOnCondition="false" condition="$escalateSoundReaction">
																																								<Sequence>
																																									<Turn target="$originPosition" align="false" />
																																									<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																								</Sequence>
																																							</IfCondition>
																																							<Parallel successMode="All" failureMode="Any">
																																								<Function_crime_lookAround_endBark hotEntityTarget="$hotEntityTarget" lookAroundData="$lookAroundData" targetFound="false" nodeLabel="40284783" />
																																								<AnimationAction fragment="&apos;StealthRecognitionStabilization&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																							</Parallel>
																																						</Sequence>
																																					</Else>
																																				</EntityContextCheck>
																																				<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																																					<Then canSkip="1">
																																						<Success />
																																					</Then>
																																					<Else canSkip="1">
																																						<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.unknownShooter">
																																							<AtomicDecorator>
																																								<Sequence>
																																									<AffectFeelings Npc="$this.id" Token="&apos;shooterNotFound&apos;" AffectNervousness="true" AffectReputation="false" />
																																									<SuppressFailure>
																																										<Sequence>
																																											<Switch>
																																												<IfCondition failOnCondition="false" condition="$lookAroundData.information.label == &apos;motivation&apos;">
																																													<Sequence>
																																														<CreateInformationWrapper Label="&apos;nonAttributedCrime&apos;" PerceivedWuid="$this.id" PositionType="positionVec3" PositionVec3="$lookAroundData.information.position" PositionWuid="" Information="$animalAbuseInformation" />
																																														<LockDynamicInformationValues Information="$animalAbuseInformation">
																																															<Sequence>
																																																<SetDynamicInformationValue Information="$animalAbuseInformation" Tag="&apos;stimulusKind&apos;" Variable="" Type="&apos;enum:crime_stimulusKind&apos;" Value="$enum:crime_stimulusKind.unknownShooter" />
																																																<IfCondition failOnCondition="false" condition="$lookAroundData.stimulusAnimalAbuse.animalAbuseKind ~= $enum:crime_animalAbuseKind.none">
																																																	<SetDynamicInformationValue Information="$animalAbuseInformation" Tag="&apos;stimulusAnimalAbuse&apos;" Variable="$lookAroundData.stimulusAnimalAbuse" Type="" Value="" />
																																																</IfCondition>
																																															</Sequence>
																																														</LockDynamicInformationValues>
																																													</Sequence>
																																												</IfCondition>
																																												<IfCondition failOnCondition="false" condition="$lookAroundData.information.label == &apos;nonAttributedCrime&apos;">
																																													<RetrieveInformation PerceivedWuid="$lookAroundData.information.perceivedWuid" label="$lookAroundData.information.label" OutVariable="$animalAbuseInformation" />
																																												</IfCondition>
																																											</Switch>
																																											<ChooseReportDestination Information="$animalAbuseInformation" IsImportant="false" Destination="$reportDestination" DestinationType="$reportDestinationType" />
																																											<IfCondition failOnCondition="false" condition="$reportDestinationType == $enum:crime_reportDestinationType.authority | &#10;$reportDestinationType == $enum:crime_reportDestinationType.security">
																																												<Function_callInterrupt_report assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" disableDetectedIcon="false" disableEmitting="false" freshlyAttributedCrime="false" ignorePriority="true" information="$animalAbuseInformation" initiator="$enum:switch_interruptInitiator.switch" movementSpeed="$enum:movementSpeed.run" previousReaction="$enum:crime_reactionKind.unknown" reportDestination="$reportDestination" reportDestinationType="$reportDestinationType" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.unknownShooter" nodeLabel="14455533" />
																																											</IfCondition>
																																										</Sequence>
																																									</SuppressFailure>
																																								</Sequence>
																																							</AtomicDecorator>
																																						</IfCondition>
																																					</Else>
																																				</EntityContextCheck>
																																			</Sequence>
																																		</EntityContext>
																																	</IfCondition>
																																</Sequence>
																																<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;moveDestinationSet&apos;" RunLogic="KeepRunning">
																																	<IfElseCondition failOnCondition="false" condition="$suppressCrimeSceneSearchPointUsage | &#10; &#10;( &#10;  $firstIteration  &#10;  &amp; ($lookAroundReason == $enum:crime_stimulusKind.sound | $positionUpdatedFromSound) &#10;  &amp; ~$firstIterationSoundSkip &#10;)" saveVersion="2">
																																		<Then canSkip="1">
																																			<Expression expressions="$searchPoint.position = $originPosition" />
																																		</Then>
																																		<Else canSkip="1">
																																			<IfElseCondition failOnCondition="false" condition="$iterations &lt;= 2 &amp; &#10; &#10;//only 1 NPC &#10;$firstOnCrimeScene &amp; &#10; &#10;//only if looking for somewhat player related stuff &#10;( &#10;$data:crime[$lookAroundData.information.label].isCrime | &#10;$lookAroundReason == $enum:crime_stimulusKind.shooter | &#10;$lookAroundReason == $enum:crime_stimulusKind.unknownShooter | &#10; &#10;( //lost enemy player in combat &#10; $lookAroundReason == $enum:crime_stimulusKind.enemy &amp; &#10; $lookAroundData.initiatedBy == $enum:switch_interruptInitiator.scheduler &amp; &#10; $lookAroundData.previousReaction == $enum:crime_reactionKind.attack &#10;) &#10;)" saveVersion="2">
																																				<Then canSkip="1">
																																					<Sequence>
																																						<GetSpatialInfo In="$__player" Out="$playerPos" What="Position" />
																																						<MeasureDistance position1="$playerPos" position2="$originPosition" mode="ThreeDimensions" result="$distance" />
																																						<IfElseCondition failOnCondition="false" condition="$distance &lt; $data:script_param[&apos;crime_crimeSceneSeachRadius_radar&apos;].value" saveVersion="2">
																																							<Then canSkip="1">
																																								<Selector>
																																									<GetRandomPos StartPos="$playerPos" PosExtentHor="0.500000" PosExtentVert="1.000000" MaxRange="0.500000" Precise="false" MaxIterantions="1" Target="$searchPoint.position" navAgentType="Automatic" pathFindingParams="" />
																																									<GetLastNavmeshPosition Target="$__player" OutPos="$playerPos" TrackingMode="NPCPos" />
																																								</Selector>
																																							</Then>
																																							<Else canSkip="1">
																																								<Function_crime_getCrimeSceneSearchPoint crimePos="$originPosition" desiredSearchPointCount="24" direction="$positionUpdateDirection" forceUpdate="$forceSearchPointUpdate" searchMode="$pointSearchMode" searchPoint="$searchPoint" nodeLabel="75486344" />
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</Then>
																																				<Else canSkip="1">
																																					<Function_crime_getCrimeSceneSearchPoint crimePos="$originPosition" desiredSearchPointCount="24" direction="$positionUpdateDirection" forceUpdate="$forceSearchPointUpdate" searchMode="$pointSearchMode" searchPoint="$searchPoint" nodeLabel="63610844" />
																																				</Else>
																																			</IfElseCondition>
																																		</Else>
																																	</IfElseCondition>
																																</ExternalLock>
																															</Parallel>
																														</Sequence>
																													</SuppressFailure>
																												</DefaultBranch>
																											</Switch>
																										</Parallel>
																									</Sequence>
																								</Else>
																							</IfElseCondition>
																						</While>
																					</Child>
																					<OnFail canSkip="1">
																						<RemoveLink From="$__player" To="$this.id" Tag="&apos;crime_firstReactorAtPos&apos;" LinkOpHandleMode="Success" />
																					</OnFail>
																				</FuseBox>
																				<Function_crime_emitInformation crimeInformation="$emittingInformation" emitCrimeInformation="true" longDistanceModeEnabled="$const_false" reactionKind="$enum:crime_reactionKind.lookAround" emitAlarmInformation="$emitAlarmInformation" nodeLabel="14784797" />
																			</Parallel>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$shouldHaveWeaponDrawn">
																			<SuppressFailure>
																				<Sequence>
																					<Function_crime_hasVisor npc="$this.id" hasVisor="$hasVisor" nodeLabel="89028884" />
																					<IfCondition failOnCondition="false" condition="$hasVisor">
																						<AnimationAction fragment="&apos;OpenVisor&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																					</IfCondition>
																				</Sequence>
																			</SuppressFailure>
																		</IfCondition>
																		<AtomicDecorator>
																			<Sequence>
																				<IfCondition failOnCondition="false" condition="$lookAroundData.information.label == &apos;theft&apos;">
																					<LockDynamicInformationValues Information="$lookAroundData.information">
																						<GetDynamicInformationValue Information="$lookAroundData.information" Tag="&apos;theftMethod&apos;" Out="$theftMethod" />
																					</LockDynamicInformationValues>
																				</IfCondition>
																				<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.corpse | &#10;$lookAroundReason == $enum:crime_stimulusKind.murder | &#10; &#10;( &#10; $lookAroundReason == $enum:crime_stimulusKind.theft &amp; &#10; $theftMethod == $enum:crime_theftMethod.lootCorpse &#10;)">
																					<Function_crime_addCorpseLink corpse="$lookAroundData.information.perceivedWuid" corpseState="$enum:corpseState.watched" mateReacting="false" resolve="true" storeTime="false" nodeLabel="41709478" />
																				</IfCondition>
																				<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.lookAround" nodeLabel="23692707" />
																			</Sequence>
																		</AtomicDecorator>
																	</Sequence>
																</Parallel>
															</Sequence>
														</UrgencyDecorator>
													</LogToLabel>
												</LogToLabel>
											</LogToLabel>
										</EntityContext>
									</EntityContextElement>
								</AnyDecorator>
							</Sequence>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Sequence>
							<ClearInbox inbox="&apos;perceptionInfo_lookAround&apos;" type="" condition="" />
							<ClearInbox inbox="&apos;lookAround_updateSoundPosition&apos;" type="" condition="" />
							<Function_crime_addLeavingInterruptCooldown nodeLabel="55462703" />
							<Function_crime_limits_removeReactionLink information="$lookAroundData.information" reactionKind="$enum:crime_reactionKind.lookAround" nodeLabel="26851085" />
							<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.corpse | &#10;$lookAroundReason == $enum:crime_stimulusKind.murder">
								<CheckWuidValid wuid="$lookAroundData.information.perceivedWuid" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<GraphSearch Origin="$lookAroundData.information.perceivedWuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_corpseReactor&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;crime_corpseReactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$corpseReactionData" />
												<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
											</GraphSearch>
											<IfCondition failOnCondition="false" condition="$corpseReactionData.reactionKind == $enum:crime_reactionKind.lookAround &amp; &#10;~$corpseReactionData.reservation">
												<RemoveLink From="$lookAroundData.information.perceivedWuid" To="$this.id" Tag="&apos;crime_corpseReactor&apos;" LinkOpHandleMode="Error" />
											</IfCondition>
										</Sequence>
									</Then>
								</CheckWuidValid>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$lookAroundData.stimulusKind == $enum:crime_stimulusKind.sound">
								<Function_crime_updateAnchor nodeLabel="70092294" />
							</IfCondition>
							<RemoveLink From="$this.id" To="$this.id" Tag="&apos;crime_followUpBehavior_lookAround&apos;" LinkOpHandleMode="Success" />
						</Sequence>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="lookAround" EventSet="">
			<Variables>
				<Variable name="amICamperOrLoner" comment="" />
				<Variable name="anchor" comment="" />
				<Variable name="anchorTooFar" comment="" />
				<Variable name="animalAbuseInformation" comment="" />
				<Variable name="animalAbuse_species" comment="" />
				<Variable name="anyDecoratorPreset" comment="" />
				<Variable name="approachType" comment="" />
				<Variable name="approachTypeSet" comment="" />
				<Variable name="awareness" comment="" />
				<Variable name="barkAlarm" comment="" />
				<Variable name="breakCheckNotifications" comment="" />
				<Variable name="const_false" comment="" />
				<Variable name="cooperationInitiator" comment="" />
				<Variable name="cooperationInitiatorIsMyMate" comment="" />
				<Variable name="cooperationNotification" comment="" />
				<Variable name="corpseReactionData" comment="" />
				<Variable name="crimeLevel" comment="" />
				<Variable name="dialogContext_looking" comment="" />
				<Variable name="dialogContext_reactingToReportFrom" comment="" />
				<Variable name="dialogContext_reactingToReportFrom_appendix" comment="" />
				<Variable name="distance" comment="" />
				<Variable name="distanceMeToCorpse" comment="" />
				<Variable name="emitAlarmInformation" comment="" />
				<Variable name="emittingInformation" comment="" />
				<Variable name="escalateSoundReaction" comment="" />
				<Variable name="firstIteration" comment="" />
				<Variable name="firstIterationSoundSkip" comment="" />
				<Variable name="firstOnCrimeScene" comment="" />
				<Variable name="forceSearchPointUpdate" comment="" />
				<Variable name="forceStopLookingInTrespass" comment="" />
				<Variable name="hasVisor" comment="" />
				<Variable name="hotEntityTarget" comment="" />
				<Variable name="initialMoveToDestination" comment="" />
				<Variable name="intenseSoundReaction" comment="" />
				<Variable name="isBandit" comment="" />
				<Variable name="isPublicEnemy" comment="" />
				<Variable name="iterations" comment="" />
				<Variable name="iterationsParamToken" comment="" />
				<Variable name="iterationsSet" comment="" />
				<Variable name="keepItems" comment="" />
				<Variable name="leftHand" comment="" />
				<Variable name="lightSource" comment="" />
				<Variable name="lookAroundReason" comment="" />
				<Variable name="lookingForABarkingDog" comment="" />
				<Variable name="maxDistanceToAnchor" comment="" />
				<Variable name="maxIterations" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="moveDestination" comment="" />
				<Variable name="moveToOrigin_initial" comment="" />
				<Variable name="move_additionalMoveParams" comment="" />
				<Variable name="move_pathFindingParams" comment="" />
				<Variable name="move_speed" comment="" />
				<Variable name="movementType" comment="" />
				<Variable name="myDistanceToAnchor" comment="" />
				<Variable name="myPos" comment="" />
				<Variable name="myPosOnNavmesh" comment="" />
				<Variable name="nextMostImportantInformation" comment="" />
				<Variable name="nonAttirbutedInformation" comment="" />
				<Variable name="noninvestigable" comment="" />
				<Variable name="now" comment="" />
				<Variable name="onHotEntitySeenEvent" comment="" />
				<Variable name="originPosition" comment="" />
				<Variable name="percept" comment="" />
				<Variable name="perceptionInfo_lookAround" comment="" />
				<Variable name="playAnim" comment="" />
				<Variable name="playerPos" comment="" />
				<Variable name="pointSearchMode" comment="" />
				<Variable name="positionUpdateDirection" comment="" />
				<Variable name="positionUpdated" comment="" />
				<Variable name="positionUpdatedFromSound" comment="" />
				<Variable name="reactedToReport" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="recognizingPlayerPosition" comment="" />
				<Variable name="reevaluateCombatSoundLookingIcon" comment="" />
				<Variable name="reportDestination" comment="" />
				<Variable name="reportDestinationType" comment="" />
				<Variable name="requestVisualHelp" comment="" />
				<Variable name="resetMoveToOrigin" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="scanPositionUpdateMsg" comment="" />
				<Variable name="searchMode" comment="" />
				<Variable name="searchPoint" comment="" />
				<Variable name="shouldHaveWeaponDrawn" comment="" />
				<Variable name="shouldHaveWeaponDrawn_persistent" comment="" />
				<Variable name="soundInTrespass" comment="" />
				<Variable name="soundPosUpdateCount" comment="" />
				<Variable name="soundPositionUpdateMsg" comment="" />
				<Variable name="soundType" comment="" />
				<Variable name="startbarkFinished" comment="" />
				<Variable name="stimulus_missingNpc" comment="" />
				<Variable name="stimulus_nonAttributed" comment="" />
				<Variable name="stopDistanceVariation_origin" comment="" />
				<Variable name="stopLooking" comment="" />
				<Variable name="stopWithinDistance_origin" comment="" />
				<Variable name="suppressCrimeSceneSearchPointUsage" comment="" />
				<Variable name="suppressHotEntityEvent" comment="" />
				<Variable name="targetFound" comment="" />
				<Variable name="theftMethod" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassSevereness" comment="" />
				<Variable name="tryToKeepSecondaryWeapon" comment="" />
				<Variable name="updateSoundBarkChance" comment="" />
				<Variable name="useless" comment="" />
				<Variable name="uselessArea" comment="" />
				<Variable name="wuidToFollow" comment="" />
				<Variable name="lookAroundData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-1450" editorPosY="-2470" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</IsPublicEnemy>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_getAnyDecoratorPreset>
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_limits_confirmReactionLink>
																		<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_checkInterruptInformation>
																		<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																			<OutputBreakpoints />
																		</RemoveBuffs>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<IfCondition hasInputBreakpoint="0" comment="Save&amp;load" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<GetCrimeLevelByStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetCrimeLevelByStimulusKind>
																		<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ClearInbox>
																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkTagFilter>
																						<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</WUIDFilter>
																						<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkDataFilter>
																					</GraphSearch>
																					<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</LinkDataExpression>
																				</Sequence>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="We want to control searching based on hotEntity position instead of crime scene" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</IfCondition>
																						<DefaultBranch>
																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</DefaultBranch>
																					</Switch>
																					<Function_crime_getAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_getAnchor>
																				</Sequence>
																			</IfCondition>
																			<DefaultBranch>
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</DefaultBranch>
																		</Switch>
																		<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetSpatialInfo>
																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GetLastNavmeshPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetLastNavmeshPosition>
																					<Function_crime_getCrimeSceneSearchPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_getCrimeSceneSearchPoint>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Sequence>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																			<DefaultBranch>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</DefaultBranch>
																		</Switch>
																		<Function_crime_lookAround_validateOriginPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_lookAround_validateOriginPosition>
																		<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</MeasureDistance>
																		<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																			<Else>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfCondition hasInputBreakpoint="0" comment="if reactingToReport, draw it afterwards" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Function_crime_lookaround_shouldHaveWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_crime_lookaround_shouldHaveWeaponDrawn>
																					</IfCondition>
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</DistanceCondition>
																									</Sequence>
																								</Then>
																								<Else>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Else>
																							</CheckWuidValid>
																						</Then>
																						<Else>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Else>
																					</IfElseCondition>
																				</Sequence>
																			</Else>
																		</IsLoadedGate>
																	</Sequence>
																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfCondition hasInputBreakpoint="0" comment="An information got resolved, check if it&apos;s the one I&apos;m currently reacting to" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Then>
																							<Else>
																								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<CheckInformationKnowledge hasInputBreakpoint="0" comment="This node fails if we don&apos;t known the information anymore" breakpointFlags="0">
																										<OutputBreakpoints />
																									</CheckInformationKnowledge>
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</ReinitVariable>
																										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</GetMostImportantCrimeInformation>
																											</Then>
																											<Else>
																												<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</GetMostImportantCrimeInformation>
																											</Else>
																										</EntityContextCheck>
																										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Then>
																											<Else>
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="Update information to the next most critical one" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</LinkDataExpression>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Sequence>
																											</Else>
																										</IfElseCondition>
																									</Sequence>
																								</Selector>
																							</Else>
																						</IfElseCondition>
																					</IfCondition>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																									</EntityContextCheck>
																								</Else>
																							</EntityContextCheck>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</GetAreMates>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</IfCondition>
																								</Sequence>
																							</IfCondition>
																						</Sequence>
																					</IfCondition>
																					<DefaultBranch>
																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Success>
																					</DefaultBranch>
																				</Switch>
																			</ProcessMessage>
																		</While>
																		<Function_crime_weaponDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_weaponDecorator>
																		<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetLightSourceItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetLightSourceItem>
																				<HandCheck hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</HandCheck>
																				<IfCondition hasInputBreakpoint="0" comment="KCD2-444270" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</EntityContextElement>
																					</EntityContext>
																				</IfCondition>
																			</Sequence>
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</Selector>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</Then>
																			<Else>
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</EntityContextElement>
																				</EntityContext>
																			</Else>
																		</IfElseCondition>
																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</EntityContextElement>
																					</EntityContext>
																				</IfGate>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</GetTime>
																										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</LinkTagFilter>
																											<RangeFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</RangeFilter>
																											<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</LinkDataFilter>
																										</GraphSearch>
																										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																											</EntityContextElement>
																										</EntityContext>
																									</Sequence>
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<LinkListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</LinkListener>
																										</IfGate>
																									</Sequence>
																								</Selector>
																							</While>
																						</Then>
																						<Else>
																							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</EntityContextElement>
																							</EntityContext>
																						</Else>
																					</IfElseCondition>
																				</EntityContext>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</EntityContextElement>
																				</EntityContext>
																			</IfCondition>
																			<DefaultBranch>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</DefaultBranch>
																		</Switch>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Wait>
																				</EntityContext>
																			</Then>
																			<Else>
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Wait>
																				</EntityContext>
																			</Else>
																		</IfElseCondition>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<DistanceGate hasInputBreakpoint="0" comment="TODO: KeepRunning or Halt?" breakpointFlags="0">
																						<OutputBreakpoints />
																						<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</GameContext>
																					</DistanceGate>
																				</While>
																			</Then>
																			<Else>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</Else>
																		</IfElseCondition>
																		<Sequence hasInputBreakpoint="0" comment="KCD2-346178" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<RelationContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Wait>
																				</RelationContext>
																			</IfCondition>
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</Sequence>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</DetermineTrespassReaction>
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</Sequence>
																				</While>
																			</Then>
																			<Else>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</Else>
																		</IfElseCondition>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfCondition hasInputBreakpoint="0" comment="gunshot is shocking" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ShockNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ShockNPC>
																				</IfCondition>
																				<IfCondition hasInputBreakpoint="0" comment="combat is less shocking" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ShockNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ShockNPC>
																				</IfCondition>
																				<DefaultBranch>
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</DefaultBranch>
																			</Switch>
																			<IfGate hasInputBreakpoint="0" comment="stop startBark upon finding target" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</IfCondition>
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</Sequence>
																					</Then>
																					<Else>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Else>
																									<Function_crime_lookAround_startBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_lookAround_startBark>
																								</Else>
																							</IsLoadedGate>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Else>
																											<Function_crime_startBark_alarm hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_startBark_alarm>
																										</Else>
																									</IsLoadedGate>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Sequence>
																							</IfCondition>
																						</Sequence>
																					</Else>
																				</IfElseCondition>
																			</IfGate>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</Sequence>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<Function_crime_lookAround_getSearchIterations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_lookAround_getSearchIterations>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Else>
																			</IfElseCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ExecuteLua>
																					<Function_crime_getAnimalContextFromString hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_getAnimalContextFromString>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</IfCondition>
																				</Sequence>
																			</IfCondition>
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfCondition hasInputBreakpoint="0" comment="if you are the victim investigate anyway" breakpointFlags="0">
																					<OutputBreakpoints />
																					<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</GetDynamicInformationValue>
																					</LockDynamicInformationValues>
																				</IfCondition>
																			</SuppressFailure>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfCondition hasInputBreakpoint="0" comment="if loading after already reacted to report" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Function_crime_lookAround_receiveReport hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_crime_lookAround_receiveReport>
																						<Function_crime_lookaround_shouldHaveWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_crime_lookaround_shouldHaveWeaponDrawn>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																											<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</DistanceCondition>
																										</Sequence>
																									</Then>
																									<Else>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Else>
																								</CheckWuidValid>
																							</Then>
																							<Else>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Else>
																						</IfElseCondition>
																					</Sequence>
																				</IfCondition>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="KCD2-308200" breakpointFlags="0">
																				<OutputBreakpoints />
																				<HasSeenPlayer hasInputBreakpoint="0" comment="#KCD2-38996" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_switch_handleAwareness_informations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_switch_handleAwareness_informations>
																							</AtomicDecorator>
																						</EntityContext>
																					</Then>
																				</HasSeenPlayer>
																			</IfCondition>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<SubsequentLocationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</WaitAction>
																							</SubsequentLocationDecorator>
																						</MeleeGuardAutomationDecorator>
																					</UrgencyDecorator>
																				</Then>
																				<Else>
																					<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</WaitAction>
																				</Else>
																			</IfElseCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Parallel hasInputBreakpoint="0" comment="Parallel checks" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Loop hasInputBreakpoint="0" comment="React to hot entities" breakpointFlags="0">
																							<OutputBreakpoints />
																							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</SetExternalLock>
																												</Sequence>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</SetExternalLock>
																												</Sequence>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</SetExternalLock>
																												</Sequence>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</SetExternalLock>
																												</Sequence>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</SetExternalLock>
																																</Sequence>
																															</IfCondition>
																															<DefaultBranch>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</SetExternalLock>
																																</Sequence>
																															</DefaultBranch>
																														</Switch>
																													</Then>
																													<Else>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</SetExternalLock>
																														</Sequence>
																													</Else>
																												</IfElseCondition>
																											</IfCondition>
																											<DefaultBranch>
																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Success>
																											</DefaultBranch>
																										</Switch>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Sequence>
																								</IfCondition>
																							</ProcessMessage>
																						</Loop>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</CancelPerceptionIgnore>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</SetExternalLock>
																													<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</GetSpatialInfo>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Sequence>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</SetExternalLock>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Sequence>
																											</IfCondition>
																											<DefaultBranch>
																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Success>
																											</DefaultBranch>
																										</Switch>
																									</IfCondition>
																								</ProcessMessage>
																							</Loop>
																						</Sequence>
																						<IfElseCondition hasInputBreakpoint="0" comment="For MissingNPC - check distance to looking entity as well" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</DistanceGate>
																							</Then>
																							<Else>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Else>
																						</IfElseCondition>
																						<Sequence hasInputBreakpoint="0" comment="Authority barks" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_crimeBark>
																													</IfCondition>
																												</Then>
																											</EntityContextCheck>
																										</Sequence>
																									</While>
																								</Then>
																							</EntityContextCheck>
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</Sequence>
																						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Success>
																									</Then>
																									<Else>
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_crime_getAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_getAnchor>
																												<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</MeasureDistance>
																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																													<Else>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Else>
																												</EntityContextCheck>
																												<IfElseCondition hasInputBreakpoint="0" comment="TODO: TWEAK NUMBERS" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</MeasureDistance>
																															<IfCondition hasInputBreakpoint="0" comment="TODO: review" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Then>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Then>
																																						<Else>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Else>
																																					</IfElseCondition>
																																				</Then>
																																				<Else>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Else>
																																			</IfElseCondition>
																																		</Then>
																																		<Else>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Else>
																																	</CheckNervousnessInterval>
																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</DetermineTrespassReaction>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<IsBandit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</IsBandit>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</CreateInformationWrapper>
																																									<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</SetDynamicInformationValue>
																																											<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</SetDynamicInformationValue>
																																										</Sequence>
																																									</LockDynamicInformationValues>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Function_switch_handleStimulusNonAttributedCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_switch_handleStimulusNonAttributedCrime>
																																									</EntityContext>
																																								</Sequence>
																																							</AtomicDecorator>
																																						</IfCondition>
																																					</Sequence>
																																				</IfCondition>
																																				<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_crimeSwitchBark>
																																				<Function_crime_addFedUpWithSoundCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_addFedUpWithSoundCooldown>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Sequence>
																																		</Then>
																																		<Else>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_crimeSwitchBark>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Sequence>
																																					</Then>
																																					<Else>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</Else>
																																				</RandomGate>
																																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</Then>
																																					<Else>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</Else>
																																				</IfElseCondition>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																				<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</MeasureDistance>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																				<IfCondition hasInputBreakpoint="0" comment="skip turn when very close" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</IfCondition>
																																				<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</SetExternalLock>
																																			</Sequence>
																																		</Else>
																																	</IfElseCondition>
																																</Sequence>
																															</IfCondition>
																														</Sequence>
																													</Then>
																													<Else>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Else>
																												</IfElseCondition>
																											</Sequence>
																										</IfCondition>
																									</Else>
																								</EntityContextCheck>
																							</ProcessMessage>
																						</While>
																						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_crime_getAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_getAnchor>
																									<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</MeasureDistance>
																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</EntityContextCheck>
																									<IfElseCondition hasInputBreakpoint="0" comment="TODO: TWEAK NUMBERS" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																												<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</SetExternalLock>
																											</Sequence>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</IfElseCondition>
																								</Sequence>
																							</ProcessMessage>
																						</While>
																						<IfElseCondition hasInputBreakpoint="0" comment="Available to share and receive player&apos;s position" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																									</EntityContextCheck>
																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<CallDecorator_crime_sharePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Subtree>
																													<Function_crime_sharePlayersLastSeenPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_sharePlayersLastSeenPosition>
																												</Subtree>
																												<PositionUpdatedFromOtherNpc>
																													<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</SetExternalLock>
																														</Sequence>
																													</CallbackEventCatch_empty>
																												</PositionUpdatedFromOtherNpc>
																												<PlayerFound>
																													<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_switch_handleAwareness hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_switch_handleAwareness>
																																	</EntityContext>
																																</EntityContext>
																															</Sequence>
																														</EntityContext>
																													</CallbackEventCatch_empty>
																												</PlayerFound>
																												<PointingStart>
																													<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</CallbackEventCatch_empty>
																												</PointingStart>
																												<PointingEnd>
																													<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</CallbackEventCatch_empty>
																												</PointingEnd>
																											</CallDecorator_crime_sharePlayersPosition>
																										</Then>
																										<Else>
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</Else>
																									</IfElseCondition>
																								</Sequence>
																							</Then>
																							<Else>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Else>
																						</IfElseCondition>
																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</EntityContext>
																							</IfGate>
																						</Loop>
																					</Parallel>
																					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Child>
																							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Child>
																												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Function_crime_lookAround_endBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_lookAround_endBark>
																													</IfGate>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</WaitAction>
																														<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</StopMovement>
																														<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Turn>
																													</Sequence>
																												</Parallel>
																											</Child>
																											<OnFail>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</OnFail>
																										</FuseBox>
																									</Then>
																									<Else>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</SetExternalLock>
																											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</ExternalLock>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</IfCondition>
																												</Sequence>
																												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Switch hasInputBreakpoint="0" comment="Set static approach type for this following" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</IfCondition>
																																	</IfCondition>
																																	<DefaultBranch>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</DefaultBranch>
																																</Switch>
																																<Expression hasInputBreakpoint="0" comment="Not using iterations" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<Expression hasInputBreakpoint="0" comment="searching from the start" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<Function_crime_lookAround_wuidFollowing hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_lookAround_wuidFollowing>
																																<Parallel hasInputBreakpoint="0" comment="If wuidFollowing finished, we haven&apos;t found target - always targetFound == false" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_crime_lookAround_endBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_lookAround_endBark>
																																	<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AnimationAction>
																																</Parallel>
																															</Sequence>
																														</LogToLabel>
																													</IfCondition>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_crimeBark>
																																			</Then>
																																		</IsInsideAreaWithLabel>
																																		<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_crimeBark>
																																			</Then>
																																		</IsInsideAreaWithLabel>
																																		<DefaultBranch>
																																			<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_crimeBark>
																																		</DefaultBranch>
																																	</Switch>
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</WaitAction>
																																		<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</StopMovement>
																																		<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Turn>
																																	</Sequence>
																																</Parallel>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<Function_crime_getCrimeSceneSearchPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_getCrimeSceneSearchPoint>
																																<Expression hasInputBreakpoint="0" comment="should be safe, because we get here from hotEntities and when followingWuid, hotEntitties are disabled" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Sequence>
																														</LogToLabel>
																													</IfCondition>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Function_crime_lookAround_getParamsFromMovementType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_lookAround_getParamsFromMovementType>
																																<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Move>
																																</MoveParamsDecorator>
																																<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Turn>
																																<Wait hasInputBreakpoint="0" comment="This should get killed from above" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Wait>
																															</Sequence>
																														</LogToLabel>
																													</IfCondition>
																													<DefaultBranch>
																														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</SetExternalLock>
																																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																		<IfElseCondition hasInputBreakpoint="0" comment="Don&apos;t get stuck inside IfGate" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Function_crime_lookAround_getApproachType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_lookAround_getApproachType>
																																											<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Success>
																																															</IfGate>
																																															<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																	<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</SetExternalLock>
																																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																		<OutputBreakpoints />
																																																		<Then>
																																																			<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																					<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</WaitAction>
																																																					<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</StopMovement>
																																																					<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Turn>
																																																					<IfCondition hasInputBreakpoint="0" comment="if already searching wait a little bit" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Wait>
																																																					</IfCondition>
																																																				</Sequence>
																																																			</ForceLook>
																																																		</Then>
																																																		<Else>
																																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Function_crime_lookAround_getStopDistanceData hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Function_crime_lookAround_getStopDistanceData>
																																																				<Function_crime_lookAround_getParamsFromMovementType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Function_crime_lookAround_getParamsFromMovementType>
																																																				<IfCondition hasInputBreakpoint="0" comment="holster before animation" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</IfCondition>
																																																				<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Move>
																																																				</MoveParamsDecorator>
																																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Expression>
																																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</WaitAction>
																																																					<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</StopMovement>
																																																				</Sequence>
																																																				<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																							<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																							</MeasureDistance>
																																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																								<OutputBreakpoints />
																																																								<Then>
																																																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																											<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																												<OutputBreakpoints />
																																																												<Child>
																																																													<Function_crime_getCrimeMetaroleLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																														<OutputBreakpoints />
																																																													</Function_crime_getCrimeMetaroleLabel>
																																																												</Child>
																																																												<OnSuccess>
																																																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																														<OutputBreakpoints />
																																																													</Success>
																																																												</OnSuccess>
																																																												<OnFail>
																																																													<LogToConsole hasInputBreakpoint="0" comment="DEBUG - can be an error, or just clash priority; but should always be investigated" breakpointFlags="0">
																																																														<OutputBreakpoints />
																																																													</LogToConsole>
																																																												</OnFail>
																																																											</FuseBox>
																																																											<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</Function_crime_crimeBark>
																																																										</Sequence>
																																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																											<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</Turn>
																																																											<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																												<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																													<OutputBreakpoints />
																																																													<Then>
																																																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																															<OutputBreakpoints />
																																																														</Success>
																																																													</Then>
																																																													<Else>
																																																														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																															<OutputBreakpoints />
																																																														</AnimationAction>
																																																													</Else>
																																																												</IsTimeSkipping>
																																																											</ForceLook>
																																																											<Function_crime_addCorpseLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</Function_crime_addCorpseLink>
																																																										</Sequence>
																																																									</Parallel>
																																																								</Then>
																																																								<Else>
																																																									<EntityContext hasInputBreakpoint="0" comment="Corpse has moved, react accordingly" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</Expression>
																																																											<Function_switch_handleStimulusMissingNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</Function_switch_handleStimulusMissingNpc>
																																																										</Sequence>
																																																									</EntityContext>
																																																								</Else>
																																																							</IfElseCondition>
																																																						</Sequence>
																																																					</IfCondition>
																																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																							<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																							</Turn>
																																																							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																								<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																									<OutputBreakpoints />
																																																									<Then>
																																																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																										</Success>
																																																									</Then>
																																																									<Else>
																																																										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																										</AnimationAction>
																																																									</Else>
																																																								</IsTimeSkipping>
																																																							</ForceLook>
																																																						</Sequence>
																																																					</IfCondition>
																																																					<DefaultBranch>
																																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Success>
																																																					</DefaultBranch>
																																																				</Switch>
																																																				<IfCondition hasInputBreakpoint="0" comment="redraw" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</IfCondition>
																																																			</Sequence>
																																																		</Else>
																																																	</IfElseCondition>
																																																</Sequence>
																																															</SuppressFailure>
																																														</Parallel>
																																													</IfGate>
																																												</Sequence>
																																											</While>
																																										</Parallel>
																																									</Sequence>
																																								</Then>
																																								<Else>
																																									<SuppressFailure hasInputBreakpoint="0" comment="todo: remove suppress?" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																											<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</SetExternalLock>
																																											<Function_crime_lookAround_getParamsFromMovementType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_lookAround_getParamsFromMovementType>
																																											<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Move>
																																											</MoveParamsDecorator>
																																										</Sequence>
																																									</SuppressFailure>
																																								</Else>
																																							</IfElseCondition>
																																							<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</AffectFeelings>
																																							<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</Then>
																																								<Else>
																																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<IfCondition hasInputBreakpoint="0" comment="said already during corpseSearch animation" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																													<OutputBreakpoints />
																																													<Then>
																																														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																	<OutputBreakpoints />
																																																	<Child>
																																																		<Function_crime_getCrimeMetaroleLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Function_crime_getCrimeMetaroleLabel>
																																																	</Child>
																																																	<OnSuccess>
																																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Success>
																																																	</OnSuccess>
																																																	<OnFail>
																																																		<LogToConsole hasInputBreakpoint="0" comment="DEBUG - can be an error, or just clash priority; but should always be investigated" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</LogToConsole>
																																																	</OnFail>
																																																</FuseBox>
																																																<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Function_crime_crimeBark>
																																															</Sequence>
																																														</SuppressFailure>
																																													</Then>
																																													<Else>
																																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Success>
																																													</Else>
																																												</RandomGate>
																																											</IfCondition>
																																											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																													<OutputBreakpoints />
																																													<Then>
																																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Success>
																																													</Then>
																																												</EntityContextCheck>
																																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																														<OutputBreakpoints />
																																														<Then>
																																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Expression>
																																																<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																	<OutputBreakpoints />
																																																	<Then>
																																																		<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</AnimationAction>
																																																	</Then>
																																																	<Else>
																																																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																				<OutputBreakpoints />
																																																				<Then>
																																																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Wait>
																																																				</Then>
																																																			</IsWeaponDrawn>
																																																			<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																				<OutputBreakpoints />
																																																				<Then>
																																																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Wait>
																																																				</Then>
																																																			</IsWeaponDrawn>
																																																			<DefaultBranch>
																																																				<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</AnimationAction>
																																																			</DefaultBranch>
																																																		</Switch>
																																																	</Else>
																																																</HasGenderCheck>
																																															</Sequence>
																																														</Then>
																																														<Else>
																																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Expression>
																																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Wait>
																																															</Sequence>
																																														</Else>
																																													</IfElseCondition>
																																												</IfCondition>
																																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Success>
																																												</IfCondition>
																																												<DefaultBranch>
																																													<SuppressFailure hasInputBreakpoint="0" comment="TODO: remove this after this shit works" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<IsWeaponDrawn hasInputBreakpoint="0" comment="animation breaks with crossbow" breakpointFlags="0" saveVersion="2">
																																															<OutputBreakpoints />
																																															<Else>
																																																<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</AnimationAction>
																																															</Else>
																																														</IsWeaponDrawn>
																																													</SuppressFailure>
																																												</DefaultBranch>
																																											</Switch>
																																										</Parallel>
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</CancelPerceptionIgnore>
																																														<PerceptionSearch hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																															<OutputBreakpoints />
																																															<Search>
																																																<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<CheckWuidValid hasInputBreakpoint="0" comment="NPC might read message AFTER the entity gets destroyed" breakpointFlags="0" saveVersion="2">
																																																			<OutputBreakpoints />
																																																			<Then>
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<DismissSearchCandidate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</DismissSearchCandidate>
																																																				</IfCondition>
																																																			</Then>
																																																		</CheckWuidValid>
																																																	</ProcessMessage>
																																																</While>
																																															</Search>
																																															<NoCandidate>
																																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Wait>
																																															</NoCandidate>
																																														</PerceptionSearch>
																																													</Sequence>
																																												</EntityContext>
																																											</SuppressFailure>
																																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Wait>
																																										</Sequence>
																																									</Parallel>
																																								</Else>
																																							</IsTimeSkipping>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																									<OutputBreakpoints />
																																									<Then>
																																										<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																											<OutputBreakpoints />
																																											<Then>
																																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Success>
																																											</Then>
																																											<Else>
																																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																													<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</WaitAction>
																																												</Sequence>
																																											</Else>
																																										</IsWeaponDrawn>
																																									</Then>
																																									<Else>
																																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Success>
																																									</Else>
																																								</CheckNervousnessInterval>
																																							</IfCondition>
																																							<IfElseCondition hasInputBreakpoint="0" comment="change movementType after reaching search point" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</Then>
																																								<Else>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</Else>
																																							</IfElseCondition>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Sequence>
																																					</LogToLabel>
																																				</IfGate>
																																			</Then>
																																			<Else>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Else>
																																		</IfElseCondition>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Else>
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<IfCondition hasInputBreakpoint="0" comment="if ending because fedUp turn towards last pos, looks much better" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Turn>
																																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Wait>
																																									</Sequence>
																																								</IfCondition>
																																								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Function_crime_lookAround_endBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Function_crime_lookAround_endBark>
																																									<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</AnimationAction>
																																								</Parallel>
																																							</Sequence>
																																						</Else>
																																					</EntityContextCheck>
																																					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Then>
																																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Success>
																																						</Then>
																																						<Else>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</AffectFeelings>
																																										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</CreateInformationWrapper>
																																															<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</SetDynamicInformationValue>
																																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</SetDynamicInformationValue>
																																																	</IfCondition>
																																																</Sequence>
																																															</LockDynamicInformationValues>
																																														</Sequence>
																																													</IfCondition>
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<RetrieveInformation hasInputBreakpoint="0" comment="checks to see if nonAttributedCrime is still known and wasnt attributed" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</RetrieveInformation>
																																													</IfCondition>
																																												</Switch>
																																												<ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</ChooseReportDestination>
																																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Function_callInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Function_callInterrupt_report>
																																												</IfCondition>
																																											</Sequence>
																																										</SuppressFailure>
																																									</Sequence>
																																								</AtomicDecorator>
																																							</IfCondition>
																																						</Else>
																																					</EntityContextCheck>
																																				</Sequence>
																																			</EntityContext>
																																		</IfCondition>
																																	</Sequence>
																																	<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Expression hasInputBreakpoint="0" comment="investigating sound in second iteration should send NPC to $originPosition" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Then>
																																			<Else>
																																				<IfElseCondition hasInputBreakpoint="0" comment="search for last iteration is radar" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</GetSpatialInfo>
																																							<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</MeasureDistance>
																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</GetRandomPos>
																																										<GetLastNavmeshPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</GetLastNavmeshPosition>
																																									</Selector>
																																								</Then>
																																								<Else>
																																									<Function_crime_getCrimeSceneSearchPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Function_crime_getCrimeSceneSearchPoint>
																																								</Else>
																																							</IfElseCondition>
																																						</Sequence>
																																					</Then>
																																					<Else>
																																						<Function_crime_getCrimeSceneSearchPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_getCrimeSceneSearchPoint>
																																					</Else>
																																				</IfElseCondition>
																																			</Else>
																																		</IfElseCondition>
																																	</ExternalLock>
																																</Parallel>
																															</Sequence>
																														</SuppressFailure>
																													</DefaultBranch>
																												</Switch>
																											</Parallel>
																										</Sequence>
																									</Else>
																								</IfElseCondition>
																							</While>
																						</Child>
																						<OnFail>
																							<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</RemoveLink>
																						</OnFail>
																					</FuseBox>
																					<Function_crime_emitInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_emitInformation>
																				</Parallel>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Function_crime_hasVisor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_crime_hasVisor>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</AnimationAction>
																						</IfCondition>
																					</Sequence>
																				</SuppressFailure>
																			</IfCondition>
																			<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</GetDynamicInformationValue>
																						</LockDynamicInformationValues>
																					</IfCondition>
																					<IfCondition hasInputBreakpoint="0" comment="murder, corpse or lootCorpse theft" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Function_crime_addCorpseLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_crime_addCorpseLink>
																					</IfCondition>
																					<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_callFollowUpBehavior>
																				</Sequence>
																			</AtomicDecorator>
																		</Sequence>
																	</Parallel>
																</Sequence>
															</UrgencyDecorator>
														</LogToLabel>
													</LogToLabel>
												</LogToLabel>
											</EntityContext>
										</EntityContextElement>
									</AnyDecorator>
								</Sequence>
							</EntityContext>
						</Child>
						<OnFail>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ClearInbox>
								<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ClearInbox>
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_limits_removeReactionLink>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
													<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</WUIDFilter>
												</GraphSearch>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</RemoveLink>
												</IfCondition>
											</Sequence>
										</Then>
									</CheckWuidValid>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_updateAnchor hasInputBreakpoint="0" comment="Update anchor when leaving this behaviour" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_updateAnchor>
								</IfCondition>
								<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</RemoveLink>
							</Sequence>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>