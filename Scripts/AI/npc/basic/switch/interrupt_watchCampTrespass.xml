<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_watchCampTrespass" is_function="0">
		<Variables>
			<Variable name="approachSpeed" type="enum:movementSpeed" values="$enum:movementSpeed.alertedWalk" isPersistent="0" form="single" />
			<Variable name="canTalk" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="chatFeedback" type="crime:campTrespassChatFeedback" values="" isPersistent="1" form="single" />
			<Variable name="chatFinished" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="checkStashesBark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="checkStashesFollowUpData" type="crime:followUpBehavior:checkHomeStashes" values="" isPersistent="0" form="single" />
			<Variable name="const_false" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="const_true" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="counter" type="_int" values="" isPersistent="1" form="single" />
			<Variable name="emitAlarmInformation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="emittingInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="endWatching" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="escalateReaction" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="escalationContext" type="_float" values="" isPersistent="1" form="associative" />
			<Variable name="escalationPaused" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="fasterChatEscalation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="firstEvaluation" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="followPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="forcingChat" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasVisor" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="homeDistanceToCheck" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="initialCounter" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="initialDistanceToHome" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="initialDistanceToNpc" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="isNightTime" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="useGeneratedNSO(true)" isPersistent="0" form="single" />
			<Variable name="playerHasFreeRoam" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="playerLeft" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="postSurrenderBarkUsed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="resolveCooldownNpcs" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="startBarkFinished" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="step" type="_int" values="3" isPersistent="0" form="single" />
			<Variable name="stimulusEscalatedTrespass" type="switch:stimulus:escalatedTrespass" values="" isPersistent="0" form="single" />
			<Variable name="stopTalking" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="1" form="single" />
			<Variable name="trespassSeverenessInt" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="urgingPriority" type="enum:crime_playerUrgingPriority" values="$enum:crime_playerUrgingPriority.watchTrespass" isPersistent="1" form="single" />
		</Variables>
		<Parameters>
			<Variable name="watchCampTrespassData" type="switch:interruptData:watchCampTrespass" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<AnyDecorator preset="crime_keepStateAndItems" enabled="true">
								<EntityContextElement context="crime_interrupt" enabled="true">
									<EntityContext context="crime_interruptWatchCampTrespass" target="">
										<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
											<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:watchCampTrespass&apos;">
												<GameContext context="crime_escalationLevel_script_global_confrontingTrespass">
													<EntityContext context="crime_escalationLevel_confrontingTrespass" target="">
														<EntityContextElement context="crime_escalationLevel_confrontingTrespass" enabled="true">
															<GameContext context="crime_music_low">
																<EntityContext context="crime_nrbLevel_confronting" target="">
																	<EntityContext context="crime_escalationLevel_setFromBehavior_watchCampTrespass" target="">
																		<LogToLabel Name="&apos;crime_trespassAngriness&apos;" Wuid="$this.id" Message="&apos;trespassAngriness:$counter&apos;">
																			<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$watchCampTrespassData.stimulusKind&apos;">
																				<IfGate atomic="false" condition="~$reactionSuppressed" RunLogic="Halt">
																					<ForceLook LookTarget="$__player" DisableVariations="true">
																						<Sequence>
																							<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.watchCampTrespass" nodeLabel="15153984" />
																							<Function_crime_checkInterruptInformation information="$watchCampTrespassData.information" nodeLabel="81760371" />
																							<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																								<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
																							</GraphSearch>
																							<MeasureDistance position1="$__player" position2="$home" mode="ThreeDimensions" result="$initialDistanceToHome" />
																							<GetHomeTrespassEscalation Home="$home" Counter="$initialCounter" IsPaused="$escalationPaused" />
																							<IsNightTimeOfDay saveVersion="2">
																								<Then canSkip="1">
																									<Expression expressions="$fasterChatEscalation = true" />
																								</Then>
																								<Else canSkip="1">
																									<HasPerceivableState PerceivableState="&apos;crouch&apos;" PerceivedWUID="$__player" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
																										<Then canSkip="1">
																											<Expression expressions="$fasterChatEscalation = true" />
																										</Then>
																										<Else canSkip="1">
																											<Success />
																										</Else>
																									</HasPerceivableState>
																								</Else>
																							</IsNightTimeOfDay>
																							<SubtreeDecorator saveVersion="2">
																								<Init canSkip="1">
																									<AddBuff SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" />
																								</Init>
																								<Subtree canSkip="1">
																									<Parallel successMode="Any" failureMode="Any">
																										<Loop count="-1">
																											<Parallel successMode="Any" failureMode="Any">
																												<ContinuousSwitch>
																													<IfCondition failOnCondition="false" condition="$canTalk &amp; ~$stopTalking">
																														<Switch>
																															<IfCondition failOnCondition="false" condition="$watchCampTrespassData.postSurrender &amp; ~$postSurrenderBarkUsed">
																																<Sequence>
																																	<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;CAMPER_VYPROVAZI_HRACE_Z_TRESPASSU_PRVNI_VYZVA&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="95352247" />
																																	<Expression expressions="$postSurrenderBarkUsed = true" />
																																</Sequence>
																															</IfCondition>
																															<IfCondition failOnCondition="false" condition="~$chatFinished &amp; ~$watchCampTrespassData.postSurrender">
																																<SubtreeDecorator saveVersion="2">
																																	<Init canSkip="1">
																																		<Sequence>
																																			<Expression expressions="$forcingChat = true" />
																																			<ClearInbox inbox="&apos;crime_campTrespassChatFeedback&apos;" type="" condition="" />
																																		</Sequence>
																																	</Init>
																																	<Subtree canSkip="1">
																																		<Sequence>
																																			<IsLoadedGate saveVersion="2">
																																				<Then canSkip="1">
																																					<VariableExistsGate VarToTest="$escalationContext[&apos;surrenderAttempts&apos;]" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
																																						<Then canSkip="1">
																																							<Success />
																																						</Then>
																																						<Else canSkip="1">
																																							<Expression expressions="$escalationContext[&apos;surrenderAttempts&apos;] = 0" />
																																						</Else>
																																					</VariableExistsGate>
																																				</Then>
																																				<Else canSkip="1">
																																					<Expression expressions="$escalationContext[&apos;surrenderAttempts&apos;] = 0" />
																																				</Else>
																																			</IsLoadedGate>
																																			<Parallel successMode="All" failureMode="Any">
																																				<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="&apos;CAMP_TRESPASS_CHAT&apos;" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="59240111" />
																																				<Parallel successMode="Any" failureMode="Any">
																																					<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$chatFeedback" senderInfo="" inbox="&apos;crime_campTrespassChatFeedback&apos;" condition="" answerVar="">
																																						<Sequence>
																																							<Expression expressions="$chatFinished = true" />
																																							<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_campTrespassChatResult.freeRoam">
																																								<Expression expressions="$playerHasFreeRoam = true" />
																																							</IfCondition>
																																						</Sequence>
																																					</ProcessMessage>
																																					<Sequence>
																																						<IsLoadedGate saveVersion="2">
																																							<Else canSkip="1">
																																								<Sequence>
																																									<Function_crime_watchCampTrespass_startBark counter="$initialCounter" home="$home" nodeLabel="82527147" />
																																									<Function_crime_startBark_alarm nodeLabel="92286301" />
																																									<Expression expressions="$startBarkFinished = true" />
																																								</Sequence>
																																							</Else>
																																						</IsLoadedGate>
																																						<Loop count="-1">
																																							<Sequence>
																																								<IfElseCondition failOnCondition="false" condition="$fasterChatEscalation" saveVersion="2">
																																									<Then canSkip="1">
																																										<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																									</Else>
																																								</IfElseCondition>
																																								<Expression expressions="$escalationContext[&apos;surrenderAttempts&apos;] += 1" />
																																								<IfElseCondition failOnCondition="false" condition="$escalationContext[&apos;surrenderAttempts&apos;] &gt;= 4" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$escalateReaction = true" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$escalationContext" dramaticBark="true" lookAt="$__player" metarole="&apos;CAMPER_VYHANI_HRACE_OPAKOVANA_VYZVA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="92633138" />
																																									</Else>
																																								</IfElseCondition>
																																							</Sequence>
																																						</Loop>
																																					</Sequence>
																																				</Parallel>
																																			</Parallel>
																																			<Switch>
																																				<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_campTrespassChatResult.freeRoam">
																																					<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="true" lookAt="$__player" metarole="&apos;CAMPER_DAVA_HRACI_FREEROAM&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="69825854" />
																																				</IfCondition>
																																				<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_campTrespassChatResult.leave">
																																					<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="true" lookAt="$__player" metarole="&apos;CAMPER_AKCEPTUJE_ZE_HRAC_ODEJDE&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="84193734" />
																																				</IfCondition>
																																				<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_campTrespassChatResult.fight">
																																					<Sequence>
																																						<PushToArray array="$resolveCooldownNpcs" value="$this.id" direction="Back" />
																																						<Function_crime_addResolveCooldown isSuccess="false" nearbyNpcs="$resolveCooldownNpcs" nodeLabel="88828678" />
																																						<Expression expressions="$escalateReaction = true" />
																																					</Sequence>
																																				</IfCondition>
																																				<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_campTrespassChatResult.evade">
																																					<Expression expressions="$escalateReaction = true" />
																																				</IfCondition>
																																				<DefaultBranch>
																																					<Success />
																																				</DefaultBranch>
																																			</Switch>
																																		</Sequence>
																																	</Subtree>
																																	<Cleanup canSkip="1">
																																		<Expression expressions="$forcingChat = false" />
																																	</Cleanup>
																																</SubtreeDecorator>
																															</IfCondition>
																															<IfCondition failOnCondition="false" condition="$playerHasFreeRoam">
																																<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
																															</IfCondition>
																															<DefaultBranch>
																																<Sequence>
																																	<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																	<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;CAMPER_VYPROVAZI_HRACE_Z_TRESPASSU_OPAKOVANA_VYZVA&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="43443585" />
																																</Sequence>
																															</DefaultBranch>
																														</Switch>
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="~$canTalk &amp; ~$stopTalking">
																														<Loop count="-1">
																															<LinkGate from="$home" to="$__player" tag="&apos;crime_watchCampTrespass_freeRoam&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="Halt">
																																<Sequence>
																																	<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;watchCampTrespass_aditionalBarks&apos;">
																																		<Sequence>
																																			<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;4s&apos;" />
																																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;CAMPER_PRICMRNDAVAC_VYHANI_HRACE_Z_TRESPASSU&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="77198336" />
																																		</Sequence>
																																	</Semaphore>
																																	<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																</Sequence>
																															</LinkGate>
																														</Loop>
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="true">
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</IfCondition>
																												</ContinuousSwitch>
																												<Loop count="-1">
																													<IfGate atomic="false" condition="$playerLeft | $escalateReaction" RunLogic="Halt">
																														<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																															<Child canSkip="1">
																																<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InMonolog" RunLogic="KeepRunning">
																																	<Sequence>
																																		<Expression expressions="$stopTalking = true" />
																																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																	</Sequence>
																																</DialogGate>
																															</Child>
																															<OnFail canSkip="1">
																																<Expression expressions="$stopTalking = false" />
																															</OnFail>
																														</FuseBox>
																													</IfGate>
																												</Loop>
																											</Parallel>
																										</Loop>
																										<Sequence>
																											<IfCondition failOnCondition="false" condition="$watchCampTrespassData.postSurrender">
																												<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.postResolveWatchTrespass" />
																											</IfCondition>
																											<Function_crime_managePlayerUrging canUrge="$canTalk" priority="$urgingPriority" nodeLabel="22865442" />
																										</Sequence>
																										<Sequence>
																											<IsTimeSkipping saveVersion="2">
																												<Then canSkip="1">
																													<Sequence>
																														<UrgencyDecorator Urgency="Instant">
																															<WaitAction />
																														</UrgencyDecorator>
																														<StopMovement waitUntilStopped="false" />
																														<IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
																															<Else canSkip="1">
																																<InterruptSkipTime />
																															</Else>
																														</IsUnconsciousCheck>
																													</Sequence>
																												</Then>
																												<Else canSkip="1">
																													<Sequence>
																														<UrgencyDecorator Urgency="Fast">
																															<WaitAction />
																														</UrgencyDecorator>
																														<StopMovement waitUntilStopped="false" />
																													</Sequence>
																												</Else>
																											</IsTimeSkipping>
																											<UrgencyDecorator Urgency="Fast">
																												<ContinuousSwitch>
																													<IfCondition failOnCondition="false" condition="~$playerLeft &amp; $canTalk &amp; ~$playerHasFreeRoam">
																														<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																															<CrimeFollower Target="$__player" Mode="Default" Role="Assist" RelativeSpeedLimit="Walk" DisableGhosting="false" />
																														</MoveParamsDecorator>
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="~$playerLeft &amp; $followPlayer &amp; ~$playerHasFreeRoam">
																														<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																															<CrimeFollower Target="$__player" Mode="Default" Role="Assist" RelativeSpeedLimit="Walk" DisableGhosting="false" />
																														</MoveParamsDecorator>
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="true">
																														<CrimeFollower Target="$__player" Mode="NoMoveOnlyTurn" Role="Assist" RelativeSpeedLimit="Walk" DisableGhosting="false" />
																													</IfCondition>
																												</ContinuousSwitch>
																											</UrgencyDecorator>
																										</Sequence>
																										<Loop count="-1">
																											<IfGate atomic="false" condition="$canTalk" RunLogic="Halt">
																												<LinkGate from="$home" to="$__player" tag="&apos;crime_watchCampTrespass_freeRoam&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="Halt">
																													<IfElseCondition failOnCondition="false" condition="$initialDistanceToHome &gt; 10" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<Expression expressions="$homeDistanceToCheck = $initialDistanceToHome - 10" />
																																<DistanceGate Origin="$home" ReferencePt="$__player" Low="$homeDistanceToCheck" High="$homeDistanceToCheck" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																																	<Expression expressions="$escalateReaction = true" />
																																</DistanceGate>
																															</Sequence>
																														</Then>
																														<Else canSkip="1">
																															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																														</Else>
																													</IfElseCondition>
																												</LinkGate>
																											</IfGate>
																										</Loop>
																										<Loop count="-1">
																											<IfGate atomic="false" condition="~$followPlayer &amp; ~$canTalk" RunLogic="Halt">
																												<LinkGate from="$home" to="$__player" tag="&apos;crime_watchCampTrespass_freeRoam&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="Halt">
																													<Sequence>
																														<MeasureDistance position1="$__player" position2="$this.id" mode="ThreeDimensions" result="$initialDistanceToNpc" />
																														<IfCondition failOnCondition="false" condition="$initialDistanceToNpc &gt; 4">
																															<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="2.000000" High="2.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																																<Expression expressions="$escalateReaction = true" />
																															</DistanceGate>
																														</IfCondition>
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																												</LinkGate>
																											</IfGate>
																										</Loop>
																										<Sequence>
																											<Parallel successMode="Any" failureMode="Any">
																												<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="10.000000" High="10.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
																													<Expression expressions="$followPlayer = true" />
																												</DistanceGate>
																												<CallDecorator_crime_handlePlayersEscape>
																													<Subtree canSkip="1">
																														<Function_crime_handlePlayersEscape npcPersistency="7" nodeLabel="31955839" />
																													</Subtree>
																													<PlayerLost canSkip="1">
																														<CallbackEventCatch_empty>
																															<Expression expressions="$followPlayer = true" />
																														</CallbackEventCatch_empty>
																													</PlayerLost>
																												</CallDecorator_crime_handlePlayersEscape>
																											</Parallel>
																											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																										</Sequence>
																										<Loop count="-1">
																											<IfGate atomic="false" condition="~$playerLeft &amp;  &#10;~$watchCampTrespassData.postSurrender &amp; &#10;~$playerHasFreeRoam" RunLogic="Halt">
																												<Parallel successMode="Any" failureMode="Any">
																													<Sequence>
																														<Expression expressions="$emittingInformation = $watchCampTrespassData.information" />
																														<Function_crime_emitInformation crimeInformation="$emittingInformation" emitCrimeInformation="true" longDistanceModeEnabled="$const_false" reactionKind="$enum:crime_reactionKind.watchCampTrespass" emitAlarmInformation="$emitAlarmInformation" nodeLabel="50865422" />
																													</Sequence>
																													<IfGate atomic="false" condition="$startBarkFinished" RunLogic="Halt">
																														<EntityContextBarrier context="crime_disabledAlarmDuringWatchCampTrespass" target="" Negation="true" RunLogic="Halt">
																															<SubtreeDecorator saveVersion="2">
																																<Init canSkip="1">
																																	<Expression expressions="$emitAlarmInformation = true" />
																																</Init>
																																<Subtree canSkip="1">
																																	<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																</Subtree>
																																<Cleanup canSkip="1">
																																	<Expression expressions="$emitAlarmInformation = false" />
																																</Cleanup>
																															</SubtreeDecorator>
																														</EntityContextBarrier>
																													</IfGate>
																												</Parallel>
																											</IfGate>
																										</Loop>
																										<Loop count="-1">
																											<IfGate atomic="false" condition="~$playerLeft" RunLogic="Halt">
																												<Sequence>
																													<AtomicDecorator>
																														<Sequence>
																															<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																															<Function_crime_trespassSeverenessToInt trespassSevereness="$trespassSevereness" trespassSeverenessInt="$trespassSeverenessInt" nodeLabel="66797274" />
																															<Expression expressions="$playerLeft = ~$reaction" />
																															<IfCondition failOnCondition="false" condition="$firstEvaluation">
																																<Sequence>
																																	<Function_crime_hasWeaponDrawn checkingMethod="$enum:crime_weaponCheckingMethod.perceivableState" npc="$__player" result="$playerWeaponDrawn" nodeLabel="38828035" />
																																	<Switch>
																																		<CheckNervousnessInterval Soul="" Flag="highToInf" saveVersion="2">
																																			<Then canSkip="1">
																																				<Expression expressions="$counter = $initialCounter &lt; 6 ? 6 : $initialCounter" />
																																			</Then>
																																		</CheckNervousnessInterval>
																																		<CheckNervousnessInterval Soul="" Flag="midToInf" saveVersion="2">
																																			<Then canSkip="1">
																																				<Expression expressions="$counter = $initialCounter &lt; 4 ? 4 : $initialCounter" />
																																			</Then>
																																		</CheckNervousnessInterval>
																																		<DefaultBranch>
																																			<Expression expressions="$counter = $initialCounter &lt; 2 ? 2 : $initialCounter" />
																																		</DefaultBranch>
																																	</Switch>
																																	<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																																</Sequence>
																															</IfCondition>
																														</Sequence>
																													</AtomicDecorator>
																													<IfCondition failOnCondition="false" condition="$canTalk &amp; ~$playerLeft &amp; ~$firstEvaluation">
																														<IfElseCondition failOnCondition="false" condition="~$forcingChat" saveVersion="2">
																															<Then canSkip="1">
																																<Parallel successMode="Any" failureMode="Any">
																																	<Loop count="-1">
																																		<EntityContextBarrier context="speech_playerWasRecentlyInNormalDialog" target="$__player" Negation="true" RunLogic="Halt">
																																			<DialogGate Who="$__player" Negation="true" EndDialogInRoot="false" Condition="InChat" RunLogic="Halt">
																																				<GameContextBarrier context="cutsceneIsRunning" Negation="true" RunLogic="Halt">
																																					<SubtreeDecorator saveVersion="2">
																																						<Init canSkip="1">
																																							<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;watchTrespassCounterActive&apos;" />
																																						</Init>
																																						<Subtree canSkip="1">
																																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																						</Subtree>
																																						<Cleanup canSkip="1">
																																							<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;watchTrespassCounterActive&apos;" />
																																						</Cleanup>
																																					</SubtreeDecorator>
																																				</GameContextBarrier>
																																			</DialogGate>
																																		</EntityContextBarrier>
																																	</Loop>
																																	<Loop count="-1">
																																		<GameContextBarrier context="cutsceneIsRunning" Negation="false" RunLogic="Halt">
																																			<GameContextBarrier context="cutsceneIsRunning" Negation="true" RunLogic="Halt">
																																				<Sequence>
																																					<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																																					<Expression expressions="$playerLeft = ~$reaction &#10;$endWatching = ~$reaction" />
																																				</Sequence>
																																			</GameContextBarrier>
																																		</GameContextBarrier>
																																	</Loop>
																																	<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;watchTrespassCounterActive&apos;" RunLogic="Halt">
																																		<Sequence>
																																			<GetHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="$escalationPaused" />
																																			<IfCondition failOnCondition="false" condition="~$escalationPaused">
																																				<Sequence>
																																					<Expression expressions="$counter += ($trespassSeverenessInt * $step)" />
																																					<IsNightTimeOfDay saveVersion="2">
																																						<Then canSkip="1">
																																							<Expression expressions="$counter += 1 &#10;$isNightTime =  true" />
																																						</Then>
																																						<Else canSkip="1">
																																							<Expression expressions="$isNightTime =  false" />
																																						</Else>
																																					</IsNightTimeOfDay>
																																					<IfCondition failOnCondition="false" condition="$playerWeaponDrawn">
																																						<Expression expressions="$counter += 3" />
																																					</IfCondition>
																																					<Switch>
																																						<IfCondition failOnCondition="false" condition="$counter&gt;9">
																																							<Expression expressions="$approachSpeed = $enum:movementSpeed.fastRun" />
																																						</IfCondition>
																																						<IfCondition failOnCondition="false" condition="$counter&lt;=3">
																																							<Expression expressions="$approachSpeed = $enum:movementSpeed.alertedWalk" />
																																						</IfCondition>
																																						<IfCondition failOnCondition="false" condition="true">
																																							<Expression expressions="$approachSpeed = $enum:movementSpeed.run" />
																																						</IfCondition>
																																					</Switch>
																																					<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																																					<IfCondition failOnCondition="false" condition="$counter &gt;= $data:script_param[&apos;crime_campTrespassEscalationThreshold&apos;].value">
																																						<Expression expressions="$escalateReaction = true" />
																																					</IfCondition>
																																				</Sequence>
																																			</IfCondition>
																																		</Sequence>
																																	</ExternalLock>
																																</Parallel>
																															</Then>
																															<Else canSkip="1">
																																<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																															</Else>
																														</IfElseCondition>
																													</IfCondition>
																													<Expression expressions="$firstEvaluation = false" />
																													<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
																												</Sequence>
																											</IfGate>
																										</Loop>
																										<Function_crime_weaponDecorator suppressWaitAction="true" weaponSet="&apos;Primary&apos;" shouldHaveDrawnWeapon="$const_true" waitActionFinished="" nodeLabel="68223741" />
																										<Function_crime_playerInstantRecognitionHandler nodeLabel="18064242" />
																										<Loop count="-1">
																											<IfGate atomic="false" condition="$playerLeft" RunLogic="Halt">
																												<Sequence>
																													<IfElseCondition failOnCondition="false" condition="$canTalk" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<IfCondition failOnCondition="false" condition="$counter &gt; 10">
																																	<Function_crime_addFollowUp_checkHomeStashes home="$home" information="" playerRelated="true" resetStolenItemsFound="false" stolenItemsFound="false" added="" nodeLabel="63004533" />
																																</IfCondition>
																																<Expression expressions="$playerLeft = true" />
																																<Parallel successMode="All" failureMode="Any">
																																	<SuppressFailure>
																																		<LuaGate code="return entity.soul:GetState(&apos;health&apos;) &gt; RPG.LowHealthThreshold" saveVersion="2">
																																			<Then canSkip="1">
																																				<PlayAdditiveAnimation Fragment="&apos;CrimeDontComeBack&apos;" Tags="" />
																																			</Then>
																																			<Else canSkip="1">
																																				<Success />
																																			</Else>
																																		</LuaGate>
																																	</SuppressFailure>
																																	<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;CAMPER_VYPROVAZI_HRACE_Z_TRESPASSU_PRVNI_VYZVA&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="49567990" />
																																</Parallel>
																																<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																																<Function_crime_broadcastCooperationNotification cooperationNotification="$enum:crime_cooperationNotification.playerLeftCamp" nodeLabel="80585882" />
																																<SuppressFailure>
																																	<Sequence>
																																		<Function_crime_hasVisor npc="$this.id" hasVisor="$hasVisor" nodeLabel="79364316" />
																																		<IfCondition failOnCondition="false" condition="$hasVisor">
																																			<AnimationAction fragment="&apos;OpenVisor&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																		</IfCondition>
																																	</Sequence>
																																</SuppressFailure>
																																<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
																																	<Then canSkip="1">
																																		<Function_callInterrupt_mindPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.watchCampTrespass" soundType="$enum:sound.invalid" stimulusKind="$enum:crime_stimulusKind.nearTrespass" nodeLabel="37153805" />
																																	</Then>
																																</HasSeenPlayer>
																															</Sequence>
																														</Then>
																														<Else canSkip="1">
																															<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;8s&apos;" />
																														</Else>
																													</IfElseCondition>
																													<Expression expressions="$endWatching = true" />
																												</Sequence>
																											</IfGate>
																										</Loop>
																										<Loop count="-1">
																											<IfGate atomic="false" condition="$playerHasFreeRoam | $watchCampTrespassData.postSurrender" RunLogic="Halt">
																												<SubtreeDecorator saveVersion="2">
																													<Init canSkip="1">
																														<AddLink From="$home" To="$__player" Tag="&apos;crime_watchCampTrespass_freeRoam&apos;" Data="" LinkOpHandleMode="Success" />
																													</Init>
																													<Subtree canSkip="1">
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Subtree>
																													<Cleanup canSkip="1">
																														<RemoveLink From="$home" To="$__player" Tag="&apos;crime_watchCampTrespass_freeRoam&apos;" LinkOpHandleMode="Success" />
																													</Cleanup>
																												</SubtreeDecorator>
																											</IfGate>
																										</Loop>
																										<While doFail="false" propagateChildFail="false" condition="~$endWatching">
																											<Sequence>
																												<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																												<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$reaction" ReactionSuppressed="$reactionSuppressed" />
																												<IsTimeSkipping saveVersion="2">
																													<Then canSkip="1">
																														<IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
																															<Else canSkip="1">
																																<InterruptSkipTime />
																															</Else>
																														</IsUnconsciousCheck>
																													</Then>
																													<Else canSkip="1">
																														<Success />
																													</Else>
																												</IsTimeSkipping>
																												<Expression expressions="$playerLeft = ~$reaction" />
																											</Sequence>
																										</While>
																										<Loop count="-1">
																											<Sequence>
																												<Function_crime_waitForWeaponChange npc="$__player" succeedOnArmed="true" nodeLabel="97798924" />
																												<IfCondition failOnCondition="false" condition="$canTalk">
																													<Sequence>
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REAGUJE_NA_VYTAZENI_ZBRANE_V_TRESPASSU&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="90355691" />
																														<Expression expressions="$escalateReaction = true" />
																													</Sequence>
																												</IfCondition>
																											</Sequence>
																										</Loop>
																										<Loop count="-1">
																											<HasActiveThreatsGate Who="$__player" Negation="false" RunLogic="KeepRunning">
																												<Sequence>
																													<Expression expressions="$escalateReaction = true" />
																													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																												</Sequence>
																											</HasActiveThreatsGate>
																										</Loop>
																										<Loop count="-1">
																											<Sequence>
																												<IfGate atomic="false" condition="$escalateReaction" RunLogic="KeepRunning">
																													<AtomicDecorator>
																														<IfCondition failOnCondition="false" condition="~$playerLeft">
																															<Sequence>
																																<IfCondition failOnCondition="false" condition="$trespassArea == $__null">
																																	<IsInsideAreaWithLabel Position="$__player" Label="&apos;private&apos;" Area="$trespassArea" FailSubtMissing="false" saveVersion="2">
																																		<Then canSkip="1">
																																			<Success />
																																		</Then>
																																		<Else canSkip="1">
																																			<Success />
																																		</Else>
																																	</IsInsideAreaWithLabel>
																																</IfCondition>
																																<Expression expressions="$counter = $data:script_param[&apos;crime_campTrespassEscalationThreshold&apos;].value &#10; &#10;$stimulusEscalatedTrespass.stimulusKind = $watchCampTrespassData.stimulusKind &#10;$stimulusEscalatedTrespass.trespassArea = $trespassArea &#10;$stimulusEscalatedTrespass.wuidType = $enum:crime_trespassInformationWuid.homeArea &#10;$stimulusEscalatedTrespass.trespassingRepeatedly = $watchCampTrespassData.postSurrender" />
																																<AddHomeTrespassEscalation Home="$home" Counter="$counter" IsPaused="false" />
																																<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																	<Function_switch_handleStimulusEscalatedTrespass stimulus="$stimulusEscalatedTrespass" nodeLabel="88283181" />
																																</EntityContext>
																															</Sequence>
																														</IfCondition>
																													</AtomicDecorator>
																												</IfGate>
																												<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
																											</Sequence>
																										</Loop>
																									</Parallel>
																								</Subtree>
																								<Cleanup canSkip="1">
																									<RemoveBuffs SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" BuffTagId="-1" />
																								</Cleanup>
																							</SubtreeDecorator>
																							<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.watchTrespass" nodeLabel="89236202" />
																						</Sequence>
																					</ForceLook>
																				</IfGate>
																			</LogToLabel>
																		</LogToLabel>
																	</EntityContext>
																</EntityContext>
															</GameContext>
														</EntityContextElement>
													</EntityContext>
												</GameContext>
											</LogToLabel>
										</AddPerceivableState>
									</EntityContext>
								</EntityContextElement>
							</AnyDecorator>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Sequence>
							<Function_crime_addLeavingInterruptCooldown nodeLabel="68118236" />
							<AtomicDecorator>
								<Function_crime_limits_removeReactionLink information="$watchCampTrespassData.information" reactionKind="$enum:crime_reactionKind.watchCampTrespass" nodeLabel="98147911" />
							</AtomicDecorator>
						</Sequence>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="approachSpeed" comment="" />
				<Variable name="canTalk" comment="" />
				<Variable name="chatFeedback" comment="" />
				<Variable name="chatFinished" comment="" />
				<Variable name="checkStashesBark" comment="" />
				<Variable name="checkStashesFollowUpData" comment="" />
				<Variable name="const_false" comment="" />
				<Variable name="const_true" comment="" />
				<Variable name="counter" comment="" />
				<Variable name="emitAlarmInformation" comment="" />
				<Variable name="emittingInformation" comment="" />
				<Variable name="endWatching" comment="" />
				<Variable name="escalateReaction" comment="" />
				<Variable name="escalationContext" comment="" />
				<Variable name="escalationPaused" comment="" />
				<Variable name="fasterChatEscalation" comment="" />
				<Variable name="firstEvaluation" comment="" />
				<Variable name="followPlayer" comment="" />
				<Variable name="forcingChat" comment="" />
				<Variable name="hasVisor" comment="" />
				<Variable name="home" comment="" />
				<Variable name="homeDistanceToCheck" comment="" />
				<Variable name="initialCounter" comment="" />
				<Variable name="initialDistanceToHome" comment="" />
				<Variable name="initialDistanceToNpc" comment="" />
				<Variable name="isNightTime" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="playerHasFreeRoam" comment="" />
				<Variable name="playerLeft" comment="" />
				<Variable name="playerWeaponDrawn" comment="" />
				<Variable name="postSurrenderBarkUsed" comment="" />
				<Variable name="reaction" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="resolveCooldownNpcs" comment="" />
				<Variable name="startBarkFinished" comment="" />
				<Variable name="step" comment="" />
				<Variable name="stimulusEscalatedTrespass" comment="" />
				<Variable name="stopTalking" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassSevereness" comment="" />
				<Variable name="trespassSeverenessInt" comment="" />
				<Variable name="urgingPriority" comment="" />
				<Variable name="watchCampTrespassData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-1330" editorPosY="-720" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_limits_confirmReactionLink>
																								<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_checkInterruptInformation>
																								<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																									<OutputBreakpoints />
																								</RemoveBuffs>
																								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</LinkTagFilter>
																								</GraphSearch>
																								<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</MeasureDistance>
																								<GetHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</GetHomeTrespassEscalation>
																								<IsNightTimeOfDay hasInputBreakpoint="0" comment="escalate faster if its nighttime" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Then>
																									<Else>
																										<HasPerceivableState hasInputBreakpoint="0" comment="escalate faster if player was found sneaking around" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Then>
																											<Else>
																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Success>
																											</Else>
																										</HasPerceivableState>
																									</Else>
																								</IsNightTimeOfDay>
																								<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Init>
																										<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</AddBuff>
																									</Init>
																									<Subtree>
																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_crimeBark>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Sequence>
																																</IfCondition>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Init>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																				<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</ClearInbox>
																																			</Sequence>
																																		</Init>
																																		<Subtree>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Success>
																																							</Then>
																																							<Else>
																																								<Expression hasInputBreakpoint="0" comment="gotta init" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</Else>
																																						</VariableExistsGate>
																																					</Then>
																																					<Else>
																																						<Expression hasInputBreakpoint="0" comment="gotta init" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</Else>
																																				</IsLoadedGate>
																																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_speech_dialogInitiator>
																																					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</IfCondition>
																																							</Sequence>
																																						</ProcessMessage>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Else>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Function_crime_watchCampTrespass_startBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_crime_watchCampTrespass_startBark>
																																										<Function_crime_startBark_alarm hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_crime_startBark_alarm>
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																									</Sequence>
																																								</Else>
																																							</IsLoadedGate>
																																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Wait>
																																										</Then>
																																										<Else>
																																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Wait>
																																										</Else>
																																									</IfElseCondition>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																										<Else>
																																											<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_crimeBark>
																																										</Else>
																																									</IfElseCondition>
																																								</Sequence>
																																							</Loop>
																																						</Sequence>
																																					</Parallel>
																																				</Parallel>
																																				<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_crimeBark>
																																					</IfCondition>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_crimeBark>
																																					</IfCondition>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</PushToArray>
																																							<Function_crime_addResolveCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_addResolveCooldown>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Sequence>
																																					</IfCondition>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</IfCondition>
																																					<DefaultBranch>
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</DefaultBranch>
																																				</Switch>
																																			</Sequence>
																																		</Subtree>
																																		<Cleanup>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Cleanup>
																																	</SubtreeDecorator>
																																</IfCondition>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Wait>
																																</IfCondition>
																																<DefaultBranch>
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Wait>
																																		<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_crimeBark>
																																	</Sequence>
																																</DefaultBranch>
																															</Switch>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_crimeBark>
																																			</Sequence>
																																		</Semaphore>
																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Wait>
																																	</Sequence>
																																</LinkGate>
																															</Loop>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</IfCondition>
																													</ContinuousSwitch>
																													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfGate hasInputBreakpoint="0" comment="wait for barks to finish when player leaves area or when situation escalates" breakpointFlags="0">
																															<OutputBreakpoints />
																															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Child>
																																	<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Wait>
																																		</Sequence>
																																	</DialogGate>
																																</Child>
																																<OnFail>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</OnFail>
																															</FuseBox>
																														</IfGate>
																													</Loop>
																												</Parallel>
																											</Loop>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="KCD2-70037" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</IfCondition>
																												<Function_crime_managePlayerUrging hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_managePlayerUrging>
																											</Sequence>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</WaitAction>
																															</UrgencyDecorator>
																															<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</StopMovement>
																															<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Else>
																																	<InterruptSkipTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</InterruptSkipTime>
																																</Else>
																															</IsUnconsciousCheck>
																														</Sequence>
																													</Then>
																													<Else>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</WaitAction>
																															</UrgencyDecorator>
																															<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</StopMovement>
																														</Sequence>
																													</Else>
																												</IsTimeSkipping>
																												<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</CrimeFollower>
																															</MoveParamsDecorator>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</CrimeFollower>
																															</MoveParamsDecorator>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</CrimeFollower>
																														</IfCondition>
																													</ContinuousSwitch>
																												</UrgencyDecorator>
																											</Sequence>
																											<Loop hasInputBreakpoint="0" comment="player approaching camp center" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</DistanceGate>
																																</Sequence>
																															</Then>
																															<Else>
																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Wait>
																															</Else>
																														</IfElseCondition>
																													</LinkGate>
																												</IfGate>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="player approaching camper" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</MeasureDistance>
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</DistanceGate>
																															</IfCondition>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																													</LinkGate>
																												</IfGate>
																											</Loop>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</DistanceGate>
																													<CallDecorator_crime_handlePlayersEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Subtree>
																															<Function_crime_handlePlayersEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_handlePlayersEscape>
																														</Subtree>
																														<PlayerLost>
																															<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</CallbackEventCatch_empty>
																														</PlayerLost>
																													</CallDecorator_crime_handlePlayersEscape>
																												</Parallel>
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																											</Sequence>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfGate hasInputBreakpoint="0" comment="do not emit when player left, makes NPCs who exited this behavior early go into lookAround" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<Function_crime_emitInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_emitInformation>
																														</Sequence>
																														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Init>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Init>
																																	<Subtree>
																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Wait>
																																	</Subtree>
																																	<Cleanup>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Cleanup>
																																</SubtreeDecorator>
																															</EntityContextBarrier>
																														</IfGate>
																													</Parallel>
																												</IfGate>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</DetermineTrespassReaction>
																																<Function_crime_trespassSeverenessToInt hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_trespassSeverenessToInt>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<IfCondition hasInputBreakpoint="0" comment="everyone has to do this, not just $canTalker, because everyone needs atleast some escalation" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_crime_hasWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_hasWeaponDrawn>
																																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Then>
																																			</CheckNervousnessInterval>
																																			<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Then>
																																			</CheckNervousnessInterval>
																																			<DefaultBranch>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</DefaultBranch>
																																		</Switch>
																																		<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</AddHomeTrespassEscalation>
																																	</Sequence>
																																</IfCondition>
																															</Sequence>
																														</AtomicDecorator>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Init>
																																								<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</SetExternalLock>
																																							</Init>
																																							<Subtree>
																																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Wait>
																																							</Subtree>
																																							<Cleanup>
																																								<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</SetExternalLock>
																																							</Cleanup>
																																						</SubtreeDecorator>
																																					</GameContextBarrier>
																																				</DialogGate>
																																			</EntityContextBarrier>
																																		</Loop>
																																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<DetermineTrespassReaction hasInputBreakpoint="0" comment="Check if player still in trespass after cutscene" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</DetermineTrespassReaction>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</Sequence>
																																				</GameContextBarrier>
																																			</GameContextBarrier>
																																		</Loop>
																																		<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<GetHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</GetHomeTrespassEscalation>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<IsNightTimeOfDay hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</Then>
																																							<Else>
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</Else>
																																						</IsNightTimeOfDay>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</IfCondition>
																																						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</IfCondition>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</IfCondition>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</IfCondition>
																																						</Switch>
																																						<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</AddHomeTrespassEscalation>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</IfCondition>
																																					</Sequence>
																																				</IfCondition>
																																			</Sequence>
																																		</ExternalLock>
																																	</Parallel>
																																</Then>
																																<Else>
																																	<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AddHomeTrespassEscalation>
																																</Else>
																															</IfElseCondition>
																														</IfCondition>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Sequence>
																												</IfGate>
																											</Loop>
																											<Function_crime_weaponDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_weaponDecorator>
																											<Function_crime_playerInstantRecognitionHandler hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_crime_playerInstantRecognitionHandler>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfGate hasInputBreakpoint="0" comment="postpone+desync exiting interrupt" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_crime_addFollowUp_checkHomeStashes hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_addFollowUp_checkHomeStashes>
																																	</IfCondition>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<SuppressFailure hasInputBreakpoint="0" comment="anim can fail if NPC is holding something other than weapon" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<PlayAdditiveAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</PlayAdditiveAnimation>
																																				</Then>
																																				<Else>
																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Success>
																																				</Else>
																																			</LuaGate>
																																		</SuppressFailure>
																																		<Function_crime_crimeBark hasInputBreakpoint="0" comment="best metarole that i found" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_crimeBark>
																																	</Parallel>
																																	<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="to refresh timestamp" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AddHomeTrespassEscalation>
																																	<Function_crime_broadcastCooperationNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_broadcastCooperationNotification>
																																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Function_crime_hasVisor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_hasVisor>
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</AnimationAction>
																																			</IfCondition>
																																		</Sequence>
																																	</SuppressFailure>
																																	<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_callInterrupt_mindPlayer>
																																		</Then>
																																	</HasSeenPlayer>
																																</Sequence>
																															</Then>
																															<Else>
																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Wait>
																															</Else>
																														</IfElseCondition>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Sequence>
																												</IfGate>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Init>
																															<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</AddLink>
																														</Init>
																														<Subtree>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Subtree>
																														<Cleanup>
																															<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</RemoveLink>
																														</Cleanup>
																													</SubtreeDecorator>
																												</IfGate>
																											</Loop>
																											<While hasInputBreakpoint="0" comment="playerLeft camp checks" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																													<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</DetermineTrespassReaction>
																													<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Else>
																																	<InterruptSkipTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</InterruptSkipTime>
																																</Else>
																															</IsUnconsciousCheck>
																														</Then>
																														<Else>
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</Else>
																													</IsTimeSkipping>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Sequence>
																											</While>
																											<Loop hasInputBreakpoint="0" comment="WeaponChecks" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Function_crime_waitForWeaponChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_waitForWeaponChange>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</Sequence>
																													</IfCondition>
																												</Sequence>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<HasActiveThreatsGate hasInputBreakpoint="0" comment="if player is already fighting, join in" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Sequence>
																												</HasActiveThreatsGate>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="just get the area" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Success>
																																			</Then>
																																			<Else>
																																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Success>
																																			</Else>
																																		</IsInsideAreaWithLabel>
																																	</IfCondition>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<AddHomeTrespassEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AddHomeTrespassEscalation>
																																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_switch_handleStimulusEscalatedTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_switch_handleStimulusEscalatedTrespass>
																																	</EntityContext>
																																</Sequence>
																															</IfCondition>
																														</AtomicDecorator>
																													</IfGate>
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																												</Sequence>
																											</Loop>
																										</Parallel>
																									</Subtree>
																									<Cleanup>
																										<RemoveBuffs hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</RemoveBuffs>
																									</Cleanup>
																								</SubtreeDecorator>
																								<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_callFollowUpBehavior>
																							</Sequence>
																						</ForceLook>
																					</IfGate>
																				</LogToLabel>
																			</LogToLabel>
																		</EntityContext>
																	</EntityContext>
																</GameContext>
															</EntityContextElement>
														</EntityContext>
													</GameContext>
												</LogToLabel>
											</AddPerceivableState>
										</EntityContext>
									</EntityContextElement>
								</AnyDecorator>
							</EntityContext>
						</Child>
						<OnFail>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_limits_removeReactionLink>
								</AtomicDecorator>
							</Sequence>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>