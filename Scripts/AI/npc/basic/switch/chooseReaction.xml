<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_chooseReaction" is_function="1">
    <Variables>
      <Variable name="allowFemaleJoin" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="alwaysJoinSkirmish" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="alwaysWithdrawSkirmish" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="arrestEscalated" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="chosenReaction" type="enum:crime_reactionKind" values="" isPersistent="0" form="single" />
      <Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
      <Variable name="desiredReactionType" type="enum:crime_reactionType" values="" isPersistent="0" form="single" />
      <Variable name="distanceToGuard" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="goodReputation" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="guardArresting" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="hasGoodNaturedPerk" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="informationIsRelated" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="informations" type="information" values="" isPersistent="0" form="single" />
      <Variable name="isImportantReport" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isPlayerOnStolenRelevantHorse" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isPublicEnemy" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isSecurity" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="mates" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="moraleBoost" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="mount" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="playerIsBeingSelfhelpedByNonmates" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="playerIsEnemy" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="reportDestination" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="reportDestinationType" type="enum:crime_reportDestinationType" values="" isPersistent="0" form="single" />
      <Variable name="reportNecessary" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="runFromSelfhelp" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="scheduledPriority" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="shouldReact" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="shouldWatch" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="skirmishReaction" type="enum:combat_skirmishReaction" values="" isPersistent="0" form="single" />
      <Variable name="useState_I" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="useState_II" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="useViolentArrest" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reactionNpc" type="_wuid" values="$__player" isPersistent="0" form="single" requirementType="In" />
      <Variable name="skirmishDecisionReason" type="enum:skirmishDecisionReason" values="$enum:skirmishDecisionReason.perception" isPersistent="0" form="single" requirementType="In" />
      <Variable name="source" type="enum:crime_source" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
      <Sequence>
        <IfCondition failOnCondition="false" condition="$source == $enum:crime_source.indirect">
          <EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
            <Then canSkip="1">
              <Sequence>
                <Expression expressions="$desiredReactionType = $data:crime[$information.label].isCrime ? $enum:crime_reactionType.investigate : $enum:crime_reactionType.reactToCorpse" />
                <CheckReactionLimit DesiredReactionType="$desiredReactionType" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                <Expression expressions="$chosenReaction = $enum:crime_reactionKind.lookAround" />
              </Sequence>
            </Then>
            <Else canSkip="1">
              <Sequence>
                <IfCondition failOnCondition="false" condition="$information.label ~= &apos;murder&apos;">
                  <IsInformationRelatedToNpc Information="$information" Npc="$this.id" IsRelated="$informationIsRelated" />
                </IfCondition>
                <GetScheduledPriority Priority="$scheduledPriority" />
                <IfCondition failOnCondition="false" condition="$scheduledPriority &lt;= 69">
                  <IfElseCondition failOnCondition="false" condition="$informationIsRelated" saveVersion="2">
                    <Then canSkip="1">
                      <Sequence>
                        <Expression expressions="$desiredReactionType = $data:crime[$information.label].isCrime ? $enum:crime_reactionType.investigate : $enum:crime_reactionType.reactToCorpse" />
                        <CheckReactionLimit DesiredReactionType="$desiredReactionType" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                        <Expression expressions="$chosenReaction = $enum:crime_reactionKind.lookAround" />
                      </Sequence>
                    </Then>
                    <Else canSkip="1">
                      <IfElseCondition failOnCondition="false" condition="$data:crime[$information.label].isViolent" saveVersion="2">
                        <Then canSkip="1">
                          <Sequence>
                            <ChooseReportDestination Information="$information" IsImportant="false" Destination="$reportDestination" DestinationType="$reportDestinationType" />
                            <IfCondition failOnCondition="false" condition="$reportDestinationType == $enum:crime_reportDestinationType.authority">
                              <Sequence>
                                <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.report" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                                <Expression expressions="$chosenReaction = $enum:crime_reactionKind.report" />
                              </Sequence>
                            </IfCondition>
                          </Sequence>
                        </Then>
                        <Else canSkip="1">
                          <Success />
                        </Else>
                      </IfElseCondition>
                    </Else>
                  </IfElseCondition>
                </IfCondition>
              </Sequence>
            </Else>
          </EntityContextCheck>
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$source == $enum:crime_source.direct | $source == $enum:crime_source.personal">
          <Switch>
            <EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <IfCondition failOnCondition="false" condition="$source == $enum:crime_source.direct">
                    <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.blindInvestigate" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                  </IfCondition>
                  <Expression expressions="$useState_I = true" />
                </Sequence>
              </Then>
            </EntityContextCheck>
            <EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <IfCondition failOnCondition="false" condition="$source == $enum:crime_source.direct">
                    <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.blindInvestigate" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                  </IfCondition>
                  <Expression expressions="$useState_II = true" />
                </Sequence>
              </Then>
            </EntityContextCheck>
            <DefaultBranch>
              <EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
                <Then canSkip="1">
                  <Sequence>
                    <IfElseCondition failOnCondition="false" condition="$information.label ~= &apos;&apos;" saveVersion="2">
                      <Then canSkip="1">
                        <GetCrimeLevelByLabel Label="$information.label" CrimeLevel="$crimeLevel" />
                      </Then>
                      <Else canSkip="1">
                        <GetCrimeLevelByStimulusKind StimulusKind="$stimulusKind" CrimeLevel="$crimeLevel" />
                      </Else>
                    </IfElseCondition>
                    <IfElseCondition failOnCondition="false" condition="$source == $enum:crime_source.personal &amp; &#10;$crimeLevel &gt;= $enum:crime_crimeLevel.violent" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$shouldReact = true &#10;$chosenReaction = $enum:crime_reactionKind.attack" />
                      </Then>
                      <Else canSkip="1">
                        <Sequence>
                          <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.arrest" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                          <EntityContextCheck context="crime_interruptArrest" target="" saveVersion="2">
                            <Then canSkip="1">
                              <IfElseCondition failOnCondition="false" condition="$crimeLevel &gt;= $enum:crime_crimeLevel.property | &#10;($information.label == &apos;disturbance&apos;)" saveVersion="2">
                                <Then canSkip="1">
                                  <EntityContextCheck context="crime_disableArrestEscalationForRecurrentCrime" target="" saveVersion="2">
                                    <Then canSkip="1">
                                      <GetArrestEscalation IsEscalated="$arrestEscalated" />
                                    </Then>
                                    <Else canSkip="1">
                                      <Sequence>
                                        <AddArrestEscalation Npc="$this.id" Reset="false" />
                                        <Expression expressions="$arrestEscalated = true" />
                                      </Sequence>
                                    </Else>
                                  </EntityContextCheck>
                                </Then>
                                <Else canSkip="1">
                                  <GetArrestEscalation IsEscalated="$arrestEscalated" />
                                </Else>
                              </IfElseCondition>
                            </Then>
                            <Else canSkip="1">
                              <GetArrestEscalation IsEscalated="$arrestEscalated" />
                            </Else>
                          </EntityContextCheck>
                          <Switch>
                            <IfCondition failOnCondition="false" condition="$reactionNpc ~= $__player | &#10;$arrestEscalated | &#10;$information.label == &apos;assault&apos; |  &#10;$information.label == &apos;aggression&apos; |  &#10;$information.label == &apos;murder&apos;">
                              <Expression expressions="$chosenReaction = $enum:crime_reactionKind.attack" />
                            </IfCondition>
                            <IfCondition failOnCondition="false" condition="$information.label == &apos;horseTheft&apos;">
                              <Sequence>
                                <IsPlayerOnStolenRelevantHorse IsOnStolenRelevantHorse="$isPlayerOnStolenRelevantHorse" Mount="$mount" />
                                <IfElseCondition failOnCondition="false" condition="$isPlayerOnStolenRelevantHorse" saveVersion="2">
                                  <Then canSkip="1">
                                    <Expression expressions="$chosenReaction = $enum:crime_reactionKind.attack" />
                                  </Then>
                                  <Else canSkip="1">
                                    <Expression expressions="$chosenReaction = $enum:crime_reactionKind.arrest" />
                                  </Else>
                                </IfElseCondition>
                              </Sequence>
                            </IfCondition>
                            <EntityContextCheck context="crime_useAttackForArrest" target="" saveVersion="2">
                              <Then canSkip="1">
                                <Expression expressions="$chosenReaction = $enum:crime_reactionKind.attack" />
                              </Then>
                            </EntityContextCheck>
                            <DefaultBranch>
                              <Expression expressions="$chosenReaction = $enum:crime_reactionKind.arrest" />
                            </DefaultBranch>
                          </Switch>
                        </Sequence>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </Then>
                <Else canSkip="1">
                  <Sequence>
                    <IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$isPublicEnemy = true" />
                      </Then>
                    </IsPublicEnemy>
                    <CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$playerIsEnemy = true" />
                      </Then>
                      <Else canSkip="1">
                        <CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="atLeast_4_high" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$goodReputation = true" />
                          </Then>
                          <Else canSkip="1">
                            <Success />
                          </Else>
                        </CheckRelationshipInterval_SoulToSoul>
                      </Else>
                    </CheckRelationshipInterval_SoulToSoul>
                    <IfElseCondition failOnCondition="false" condition="$information.label ~= &apos;&apos;" saveVersion="2">
                      <Then canSkip="1">
                        <Sequence>
                          <GetCrimeLevelByLabel Label="$information.label" CrimeLevel="$crimeLevel" />
                          <IsInformationRelatedToNpc Information="$information" Npc="$this.id" IsRelated="$informationIsRelated" />
                        </Sequence>
                      </Then>
                      <Else canSkip="1">
                        <Sequence>
                          <GetCrimeLevelByStimulusKind StimulusKind="$stimulusKind" CrimeLevel="$crimeLevel" />
                          <Expression expressions="$informationIsRelated = true" />
                        </Sequence>
                      </Else>
                    </IfElseCondition>
                    <IsPlayerUnderArrest IsUnderArrest="$guardArresting" />
                    <EntityContextCheck context="crime_interruptSelfhelp" target="" saveVersion="2">
                      <Then canSkip="1">
                        <IfElseCondition failOnCondition="false" condition="$crimeLevel &gt;= $enum:crime_crimeLevel.property" saveVersion="2">
                          <Then canSkip="1">
                            <EntityContextCheck context="crime_disableArrestEscalationForRecurrentCrime" target="" saveVersion="2">
                              <Then canSkip="1">
                                <GetArrestEscalation IsEscalated="$arrestEscalated" />
                              </Then>
                              <Else canSkip="1">
                                <Sequence>
                                  <AddArrestEscalation Npc="$this.id" Reset="false" />
                                  <Expression expressions="$arrestEscalated = true" />
                                </Sequence>
                              </Else>
                            </EntityContextCheck>
                          </Then>
                          <Else canSkip="1">
                            <GetArrestEscalation IsEscalated="$arrestEscalated" />
                          </Else>
                        </IfElseCondition>
                      </Then>
                      <Else canSkip="1">
                        <GetArrestEscalation IsEscalated="$arrestEscalated" />
                      </Else>
                    </EntityContextCheck>
                    <IfCondition failOnCondition="false" condition="~$guardArresting">
                      <EntityContextCheck context="crime_isHelpingNonmates" target="" saveVersion="2">
                        <Else canSkip="1">
                          <SuppressFailure>
                            <Sequence>
                              <GetMates Target="$this.id" Mates="$mates" />
                              <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                                <LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                                <LinkDataFilter tag="&apos;crime_reactor&apos;" condition="$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.selfhelp | &#10;$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.attack" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                                <NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
                                  <Child0 canSkip="1">
                                    <UnionOp Results="true" Advance="true" EndOp="true" ShortCircuit="false" LocalNodalyzers="false">
                                      <WUIDFilter WUID="$mates" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                                      <WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                                    </UnionOp>
                                  </Child0>
                                </NegationOp>
                                <RangeFilter min="0.000000" max="25.000000" point="$__player" excludeRef="true" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                              </GraphSearch>
                              <Expression expressions="$playerIsBeingSelfhelpedByNonmates = true" />
                            </Sequence>
                          </SuppressFailure>
                        </Else>
                      </EntityContextCheck>
                    </IfCondition>
                    <Expression expressions="$isImportantReport = $crimeLevel == $enum:crime_crimeLevel.murder" />
                    <ChooseReportDestination Information="$information" IsImportant="$isImportantReport" Destination="$reportDestination" DestinationType="$reportDestinationType" />
                    <IfCondition failOnCondition="false" condition="$reportDestinationType &gt; $enum:crime_reportDestinationType.none">
                      <Sequence>
                        <IsReportNecessary Information="$information" ReportDestination="$reportDestination" ReportNecessary="$reportNecessary" />
                        <MeasureDistance position1="$this.id" position2="$reportDestination" mode="ThreeDimensions" result="$distanceToGuard" />
                      </Sequence>
                    </IfCondition>
                    <IfElseCondition failOnCondition="false" condition="($crimeLevel &gt;= $enum:crime_crimeLevel.violent) | &#10;$playerIsEnemy | &#10;$arrestEscalated" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$useViolentArrest = true" />
                      </Then>
                      <Else canSkip="1">
                        <EntityContextCheck context="crime_useAttackForArrest" target="" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$useViolentArrest = true" />
                          </Then>
                          <Else canSkip="1">
                            <IfCondition failOnCondition="false" condition="$isPublicEnemy &amp; ($playerIsBeingSelfhelpedByNonmates | $guardArresting | $crimeLevel == $enum:crime_crimeLevel.trespass)">
                              <Expression expressions="$useViolentArrest = true" />
                            </IfCondition>
                          </Else>
                        </EntityContextCheck>
                      </Else>
                    </IfElseCondition>
                    <IfCondition failOnCondition="false" condition="$information.label == &apos;horseTheft&apos;">
                      <IsPlayerOnStolenRelevantHorse IsOnStolenRelevantHorse="$useViolentArrest" Mount="$mount" />
                    </IfCondition>
                    <EntityContextCheck context="combat_alwaysWithdrawSkirmish" target="" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$alwaysWithdrawSkirmish = true" />
                      </Then>
                    </EntityContextCheck>
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$goodReputation &amp;  &#10;$crimeLevel &lt; $enum:crime_crimeLevel.property &amp; &#10;~$useViolentArrest &amp; &#10;~$alwaysWithdrawSkirmish">
                        <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.join" />
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$reportDestinationType == $enum:crime_reportDestinationType.authority &amp; $isImportantReport">
                        <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.withdraw" />
                      </IfCondition>
                      <DefaultBranch>
                        <Sequence>
                          <IfCondition failOnCondition="false" condition="~$useViolentArrest">
                            <Sequence>
                              <Expression expressions="$allowFemaleJoin = true" />
                              <IfElseCondition failOnCondition="false" condition="$reportDestinationType &gt; $enum:crime_reportDestinationType.none" saveVersion="2">
                                <Then canSkip="1">
                                  <Expression expressions="$moraleBoost = $data:script_param[&apos;crime_selfhelpMoraleBoost&apos;].value" />
                                </Then>
                                <Else canSkip="1">
                                  <Expression expressions="$moraleBoost = $data:script_param[&apos;crime_selfhelpMoraleBoost_noReportAvailable&apos;].value" />
                                </Else>
                              </IfElseCondition>
                            </Sequence>
                          </IfCondition>
                          <Sequence>
                            <HasPerk SoulWUID="$__player" Perk="&apos;5315b6ae-74cd-4a37-b147-08df52e3c643&apos;" Value="$hasGoodNaturedPerk" UsePerk="false" />
                            <IfCondition failOnCondition="false" condition="$hasGoodNaturedPerk">
                              <Expression expressions="$moraleBoost += $data:script_param[&apos;crime_goodNatured_moraleBoost&apos;].value" />
                            </IfCondition>
                          </Sequence>
                          <DecideSkirmishReactionCrime AllowFemaleJoin="$allowFemaleJoin" MoraleBoost="$moraleBoost" Reason="$skirmishDecisionReason" ReferenceNpc="$this.id" RelationOverride="Hostile" TargetNpc="$reactionNpc" SkirmishReaction="$skirmishReaction" />
                        </Sequence>
                      </DefaultBranch>
                    </Switch>
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.join">
                        <Sequence>
                          <EntityContextCheck context="combat_alwaysJoinSkirmish" target="" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$alwaysJoinSkirmish = true" />
                            </Then>
                          </EntityContextCheck>
                          <EntityContextCheck context="crime_isSecurity" target="" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$isSecurity = true" />
                            </Then>
                          </EntityContextCheck>
                          <IfElseCondition failOnCondition="false" condition="(~$guardArresting  &#10; &amp; ~$playerIsBeingSelfhelpedByNonmates &#10; &amp; $informationIsRelated  &#10; &amp; ($crimeLevel &lt; $enum:crime_crimeLevel.violent | $useViolentArrest)  &#10; &amp; (~($reportDestinationType == $enum:crime_reportDestinationType.authority  &#10;      &amp; $distanceToGuard &lt; $data:script_param[&apos;crime_alwaysReportMaximumDistance&apos;].value)  &#10;    | $isSecurity))  &#10;| $isPublicEnemy  &#10;| ($alwaysJoinSkirmish &amp; $useViolentArrest)" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$chosenReaction = $enum:crime_reactionKind.arrest" />
                            </Then>
                            <Else canSkip="1">
                              <Expression expressions="$chosenReaction = $enum:crime_reactionKind.report" />
                            </Else>
                          </IfElseCondition>
                        </Sequence>
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.withdraw">
                        <Expression expressions="$chosenReaction = $enum:crime_reactionKind.report" />
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.indifference">
                        <Expression expressions="$shouldWatch = true" />
                      </IfCondition>
                      <DefaultBranch>
                        <Success />
                      </DefaultBranch>
                    </Switch>
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.arrest">
                        <Sequence>
                          <IfElseCondition failOnCondition="false" condition="$source == $enum:crime_source.personal" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$shouldReact = true" />
                            </Then>
                            <Else canSkip="1">
                              <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.arrest" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                            </Else>
                          </IfElseCondition>
                          <IfElseCondition failOnCondition="false" condition="$useViolentArrest" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$chosenReaction = $enum:crime_reactionKind.attack" />
                            </Then>
                            <Else canSkip="1">
                              <Expression expressions="$chosenReaction = $enum:crime_reactionKind.selfhelp" />
                            </Else>
                          </IfElseCondition>
                        </Sequence>
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.report">
                        <Sequence>
                          <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.report" Information="$information" Position="" StimulusKind="$stimulusKind" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
                          <IfElseCondition failOnCondition="false" condition="$reportDestinationType &gt; $enum:crime_reportDestinationType.none &amp; &#10;($reactionNpc == $__player | $reactionNpc == $__playerDog) &amp; &#10;$information.label ~= &apos;&apos; &amp; &#10;$reportNecessary" saveVersion="2">
                            <Then canSkip="1">
                              <Sequence>
                                <IfCondition failOnCondition="false" condition="$source == $enum:crime_source.personal">
                                  <Expression expressions="$shouldReact = true" />
                                </IfCondition>
                                <Expression expressions="$chosenReaction = $enum:crime_reactionKind.report" />
                              </Sequence>
                            </Then>
                            <Else canSkip="1">
                              <IfElseCondition failOnCondition="false" condition="$source == $enum:crime_source.personal | &#10;$crimeLevel &gt;= $enum:crime_crimeLevel.murder | &#10;($crimeLevel &gt;= $enum:crime_crimeLevel.violent &amp; ~($guardArresting | $playerIsBeingSelfhelpedByNonmates)) | &#10;(($reactionNpc == $__player | $reactionNpc == $__playerDog) &amp; $playerIsEnemy)" saveVersion="2">
                                <Then canSkip="1">
                                  <Expression expressions="$shouldReact = true &#10;$chosenReaction = $enum:crime_reactionKind.flee" />
                                </Then>
                                <Else canSkip="1">
                                  <Expression expressions="$shouldReact = false" />
                                </Else>
                              </IfElseCondition>
                            </Else>
                          </IfElseCondition>
                          <IfCondition failOnCondition="false" condition="$shouldReact &amp; $useViolentArrest">
                            <EntityContextCheck context="crime_interruptSelfhelp" target="" saveVersion="2">
                              <Then canSkip="1">
                                <Expression expressions="$runFromSelfhelp = true" />
                              </Then>
                            </EntityContextCheck>
                          </IfCondition>
                        </Sequence>
                      </IfCondition>
                      <DefaultBranch>
                        <Success />
                      </DefaultBranch>
                    </Switch>
                  </Sequence>
                </Else>
              </EntityContextCheck>
            </DefaultBranch>
          </Switch>
        </IfCondition>
        <IfElseCondition failOnCondition="false" condition="$source == $enum:crime_source.personal | $shouldReact" saveVersion="2">
          <Then canSkip="1">
            <Switch>
              <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.arrest">
                <InstantCallback_empty EventName="&apos;Arrest&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.attack">
                <InstantCallback_empty EventName="&apos;Attack&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.flee">
                <InstantCallback_fleeData ignoreScheduledPriority="$runFromSelfhelp" EventName="&apos;Flee&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.lookAround">
                <InstantCallback_empty EventName="&apos;LookAround&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$useState_I">
                <InstantCallback_empty EventName="&apos;ReactionToRecognitionState_I&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$useState_II">
                <InstantCallback_empty EventName="&apos;ReactionToRecognitionState_II&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.report">
                <InstantCallback_reportData ignoreScheduledPriority="$runFromSelfhelp" destination="$reportDestination" destinationType="$reportDestinationType" EventName="&apos;Report&apos;" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$chosenReaction == $enum:crime_reactionKind.selfhelp">
                <InstantCallback_empty EventName="&apos;Selfhelp&apos;" />
              </IfCondition>
              <DefaultBranch>
                <ErrorNode Message="&apos;ERROR: Invalid chosenReaction $chosenReaction!&apos;" />
              </DefaultBranch>
            </Switch>
          </Then>
          <Else canSkip="1">
            <IfCondition failOnCondition="false" condition="$source ~= $enum:crime_source.indirect">
              <EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
                <Then canSkip="1">
                  <Success />
                </Then>
                <Else canSkip="1">
                  <EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
                    <Then canSkip="1">
                      <Success />
                    </Then>
                    <Else canSkip="1">
                      <IfElseCondition failOnCondition="false" condition="$shouldWatch" saveVersion="2">
                        <Then canSkip="1">
                          <InstantCallback_empty EventName="&apos;Watch&apos;" />
                        </Then>
                        <Else canSkip="1">
                          <InstantCallback_fleeData ignoreScheduledPriority="false" EventName="&apos;Flee&apos;" />
                        </Else>
                      </IfElseCondition>
                    </Else>
                  </EntityContextCheck>
                </Else>
              </EntityContextCheck>
            </IfCondition>
          </Else>
        </IfElseCondition>
      </Sequence>
    </ForestContainer>
    <EditorData EventSet="crime_chooseReaction">
      <Variables>
        <Variable name="allowFemaleJoin" comment="" />
        <Variable name="alwaysJoinSkirmish" comment="" />
        <Variable name="alwaysWithdrawSkirmish" comment="" />
        <Variable name="arrestEscalated" comment="" />
        <Variable name="chosenReaction" comment="" />
        <Variable name="crimeLevel" comment="" />
        <Variable name="desiredReactionType" comment="" />
        <Variable name="distanceToGuard" comment="" />
        <Variable name="goodReputation" comment="" />
        <Variable name="guardArresting" comment="" />
        <Variable name="hasGoodNaturedPerk" comment="" />
        <Variable name="informationIsRelated" comment="" />
        <Variable name="informations" comment="" />
        <Variable name="isImportantReport" comment="" />
        <Variable name="isPlayerOnStolenRelevantHorse" comment="" />
        <Variable name="isPublicEnemy" comment="" />
        <Variable name="isSecurity" comment="" />
        <Variable name="mates" comment="" />
        <Variable name="moraleBoost" comment="" />
        <Variable name="mount" comment="" />
        <Variable name="playerIsBeingSelfhelpedByNonmates" comment="" />
        <Variable name="playerIsEnemy" comment="" />
        <Variable name="reportDestination" comment="" />
        <Variable name="reportDestinationType" comment="" />
        <Variable name="reportNecessary" comment="" />
        <Variable name="runFromSelfhelp" comment="" />
        <Variable name="scheduledPriority" comment="" />
        <Variable name="shouldReact" comment="" />
        <Variable name="shouldWatch" comment="" />
        <Variable name="skirmishReaction" comment="" />
        <Variable name="useState_I" comment="" />
        <Variable name="useState_II" comment="" />
        <Variable name="useViolentArrest" comment="" />
        <Variable name="information" comment="" />
        <Variable name="reactionNpc" comment="" />
        <Variable name="skirmishDecisionReason" comment="" />
        <Variable name="source" comment="" />
        <Variable name="stimulusKind" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-160" editorPosY="720" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="410" editorPosY="720" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <IfCondition hasInputBreakpoint="0" comment="only heard about the crime" breakpointFlags="0">
            <OutputBreakpoints />
            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="TODO: expand on corpse " breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CheckReactionLimit>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </Then>
              <Else>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IsInformationRelatedToNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </IsInformationRelatedToNpc>
                  </IfCondition>
                  <GetScheduledPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetScheduledPriority>
                  <IfCondition hasInputBreakpoint="0" comment="nice" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="TODO: expand on corpse " breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </CheckReactionLimit>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </Then>
                      <Else>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </ChooseReportDestination>
                              <IfCondition hasInputBreakpoint="0" comment="TODO: campers do nothing" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </CheckReactionLimit>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Sequence>
                              </IfCondition>
                            </Sequence>
                          </Then>
                          <Else>
                            <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Success>
                          </Else>
                        </IfElseCondition>
                      </Else>
                    </IfElseCondition>
                  </IfCondition>
                </Sequence>
              </Else>
            </EntityContextCheck>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </CheckReactionLimit>
                    </IfCondition>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Sequence>
                </Then>
              </EntityContextCheck>
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </CheckReactionLimit>
                    </IfCondition>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Sequence>
                </Then>
              </EntityContextCheck>
              <DefaultBranch>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetCrimeLevelByLabel>
                        </Then>
                        <Else>
                          <GetCrimeLevelByStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetCrimeLevelByStimulusKind>
                        </Else>
                      </IfElseCondition>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </CheckReactionLimit>
                            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                  <OutputBreakpoints />
                                  <Then>
                                    <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                      <OutputBreakpoints />
                                      <Then>
                                        <GetArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </GetArrestEscalation>
                                      </Then>
                                      <Else>
                                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <AddArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </AddArrestEscalation>
                                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Expression>
                                        </Sequence>
                                      </Else>
                                    </EntityContextCheck>
                                  </Then>
                                  <Else>
                                    <GetArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </GetArrestEscalation>
                                  </Else>
                                </IfElseCondition>
                              </Then>
                              <Else>
                                <GetArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </GetArrestEscalation>
                              </Else>
                            </EntityContextCheck>
                            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <IsPlayerOnStolenRelevantHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </IsPlayerOnStolenRelevantHorse>
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Then>
                                    <Else>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Else>
                                  </IfElseCondition>
                                </Sequence>
                              </IfCondition>
                              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Then>
                              </EntityContextCheck>
                              <DefaultBranch>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </DefaultBranch>
                            </Switch>
                          </Sequence>
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </Then>
                  <Else>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                      </IsPublicEnemy>
                      <CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Success>
                            </Else>
                          </CheckRelationshipInterval_SoulToSoul>
                        </Else>
                      </CheckRelationshipInterval_SoulToSoul>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </GetCrimeLevelByLabel>
                            <IsInformationRelatedToNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </IsInformationRelatedToNpc>
                          </Sequence>
                        </Then>
                        <Else>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <GetCrimeLevelByStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </GetCrimeLevelByStimulusKind>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Sequence>
                        </Else>
                      </IfElseCondition>
                      <IsPlayerUnderArrest hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </IsPlayerUnderArrest>
                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <GetArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </GetArrestEscalation>
                                </Then>
                                <Else>
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <AddArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </AddArrestEscalation>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Sequence>
                                </Else>
                              </EntityContextCheck>
                            </Then>
                            <Else>
                              <GetArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GetArrestEscalation>
                            </Else>
                          </IfElseCondition>
                        </Then>
                        <Else>
                          <GetArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetArrestEscalation>
                        </Else>
                      </EntityContextCheck>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Else>
                            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <GetMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </GetMates>
                                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </LinkTagFilter>
                                  <LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </LinkDataFilter>
                                  <NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Child0>
                                      <UnionOp hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </WUIDFilter>
                                        <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </WUIDFilter>
                                      </UnionOp>
                                    </Child0>
                                  </NegationOp>
                                  <RangeFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </RangeFilter>
                                </GraphSearch>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </SuppressFailure>
                          </Else>
                        </EntityContextCheck>
                      </IfCondition>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </ChooseReportDestination>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IsReportNecessary hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </IsReportNecessary>
                          <MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </MeasureDistance>
                        </Sequence>
                      </IfCondition>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <IfCondition hasInputBreakpoint="0" comment="when player is under arrest by nonmates/guard and NPC is publicEnemy skip to attack, also for trespass" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                            </Else>
                          </EntityContextCheck>
                        </Else>
                      </IfElseCondition>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IsPlayerOnStolenRelevantHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </IsPlayerOnStolenRelevantHorse>
                      </IfCondition>
                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                      </EntityContextCheck>
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <DefaultBranch>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                  <OutputBreakpoints />
                                  <Then>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Then>
                                  <Else>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Else>
                                </IfElseCondition>
                              </Sequence>
                            </IfCondition>
                            <Sequence hasInputBreakpoint="0" comment="@KCD2-125892" breakpointFlags="0">
                              <OutputBreakpoints />
                              <HasPerk hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </HasPerk>
                              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                            </Sequence>
                            <DecideSkirmishReactionCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </DecideSkirmishReactionCrime>
                          </Sequence>
                        </DefaultBranch>
                      </Switch>
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                            </EntityContextCheck>
                            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                            </EntityContextCheck>
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Else>
                            </IfElseCondition>
                          </Sequence>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <DefaultBranch>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </DefaultBranch>
                      </Switch>
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </CheckReactionLimit>
                              </Else>
                            </IfElseCondition>
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Else>
                            </IfElseCondition>
                          </Sequence>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </CheckReactionLimit>
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </IfCondition>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Sequence>
                              </Then>
                              <Else>
                                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                  <OutputBreakpoints />
                                  <Then>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Then>
                                  <Else>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Else>
                                </IfElseCondition>
                              </Else>
                            </IfElseCondition>
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Then>
                              </EntityContextCheck>
                            </IfCondition>
                          </Sequence>
                        </IfCondition>
                        <DefaultBranch>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </DefaultBranch>
                      </Switch>
                    </Sequence>
                  </Else>
                </EntityContextCheck>
              </DefaultBranch>
            </Switch>
          </IfCondition>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_empty>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_empty>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_fleeData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_fleeData>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_empty>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_empty>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_empty>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_reportData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_reportData>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantCallback_empty>
                </IfCondition>
                <DefaultBranch>
                  <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ErrorNode>
                </DefaultBranch>
              </Switch>
            </Then>
            <Else>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </Then>
                  <Else>
                    <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </Then>
                      <Else>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </InstantCallback_empty>
                          </Then>
                          <Else>
                            <InstantCallback_fleeData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </InstantCallback_fleeData>
                          </Else>
                        </IfElseCondition>
                      </Else>
                    </EntityContextCheck>
                  </Else>
                </EntityContextCheck>
              </IfCondition>
            </Else>
          </IfElseCondition>
        </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>