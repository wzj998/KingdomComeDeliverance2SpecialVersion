<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="interrupt_markKettleAsPoisoned" is_function="0">
    <Variables>
      <Variable name="anyDecoratorPreset" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="followUpers" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="followUpers_val" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="followupData" type="crime:followUpBehavior:markKettleAsPoisoned" values="" isPersistent="0" form="single" />
      <Variable name="kettleSignalOnBuffCrimeNotice" type="kettle:signal:onBuffCrimeNotice" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="markKettleAsPoisonedData" type="switch:interruptData:markKettleAsPoisoned" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
          <Child canSkip="1">
            <EntityContext context="crime_preventDespawn" target="">
              <Sequence>
                <Function_crime_getAnyDecoratorPreset tryToKeepItems="false" presetString="$anyDecoratorPreset" nodeLabel="93151307" />
                <AnyDecorator preset="$anyDecoratorPreset" enabled="true">
                  <EntityContextElement context="crime_interrupt" enabled="true">
                    <EntityContext context="crime_interruptMarkKettleAsPoisoned" target="">
                      <AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
                        <LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:markKettleAsPoisoned&apos;">
                          <Sequence>
                            <AtomicDecorator>
                              <Sequence>
                                <Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.markKettleAsPoisoned" nodeLabel="28702654" />
                                <Function_crime_checkInterruptInformation information="$markKettleAsPoisonedData.information" nodeLabel="70959663" />
                              </Sequence>
                            </AtomicDecorator>
                            <WaitAction />
                            <IsLoadedGate saveVersion="2">
                              <Else canSkip="1">
                                <IfCondition failOnCondition="false" condition="$markKettleAsPoisonedData.realizedPoisonAfterEating">
                                  <IfElseCondition failOnCondition="false" condition="$markKettleAsPoisonedData.kettleType == $enum:kettleType.kettle" saveVersion="2">
                                    <Then canSkip="1">
                                      <Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_PREZILO_OTRAVU_A_PUJDE_PREVARIT_KOTLIK&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="53549737" />
                                    </Then>
                                    <Else canSkip="1">
                                      <Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_PREZILO_OTRAVU_A_PUJDE_OZNACIT_SOUDEK&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="97105499" />
                                    </Else>
                                  </IfElseCondition>
                                </IfCondition>
                              </Else>
                            </IsLoadedGate>
                            <Function_markAsCrime kettle="$markKettleAsPoisonedData.kettle" nodeLabel="61644562" />
                            <Parallel successMode="All" failureMode="Any">
                              <ForceLook LookTarget="$markKettleAsPoisonedData.kettle" DisableVariations="true">
                                <IfElseCondition failOnCondition="false" condition="$markKettleAsPoisonedData.kettleType == $enum:kettleType.kettle" saveVersion="2">
                                  <Then canSkip="1">
                                    <Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_OZNACUJE_KOTLIK_JAKO_OTRAVENY&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="96889680" />
                                  </Then>
                                  <Else canSkip="1">
                                    <Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_OZNACUJE_SOUDEK_JAKO_OTRAVENY&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="29603692" />
                                  </Else>
                                </IfElseCondition>
                              </ForceLook>
                              <AtomicDecorator>
                                <Sequence>
                                  <InstantSendMessageToNPC target="$markKettleAsPoisonedData.kettle" variable="$kettleSignalOnBuffCrimeNotice" />
                                  <SuppressFailure>
                                    <Sequence>
                                      <GraphSearch Origin="$markKettleAsPoisonedData.kettle" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                                        <LinkTagFilter tag="&apos;crime_followUpBehavior_markKettleAsPoisoned_reverse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                                        <Nodalyzer Quantifiers="ForAll" Parent="" Child="$followUpers" saveVersion="2" />
                                      </GraphSearch>
                                      <ForEach startIndex="0" step="1" array="$followUpers" iterator="" value="$followUpers_val" break="">
                                        <Sequence>
                                          <Expression expressions="$followupData.active = false &#10;$followupData.kettle = $markKettleAsPoisonedData.kettle" />
                                          <AddLink From="$followUpers_val" To="$markKettleAsPoisonedData.kettle" Tag="&apos;crime_followUpBehavior_markKettleAsPoisoned&apos;" Data="$followupData" LinkOpHandleMode="OverWrite" />
                                        </Sequence>
                                      </ForEach>
                                    </Sequence>
                                  </SuppressFailure>
                                </Sequence>
                              </AtomicDecorator>
                            </Parallel>
                            <Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.markKettleAsPoisoned" nodeLabel="17944045" />
                          </Sequence>
                        </LogToLabel>
                      </AddPerceivableState>
                    </EntityContext>
                  </EntityContextElement>
                </AnyDecorator>
              </Sequence>
            </EntityContext>
          </Child>
          <OnSuccess canSkip="1">
            <Sequence>
              <Function_crime_limits_removeReactionLink information="$markKettleAsPoisonedData.information" reactionKind="$enum:crime_reactionKind.markKettleAsPoisoned" nodeLabel="24094199" />
              <RemoveLink From="$this.id" To="$markKettleAsPoisonedData.kettle" Tag="&apos;crime_markKettleAsPoisonedReserved&apos;" LinkOpHandleMode="Success" />
            </Sequence>
          </OnSuccess>
        </FuseBox>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData Signature="markKettleAsPoisoned" EventSet="">
      <Variables>
        <Variable name="anyDecoratorPreset" comment="" />
        <Variable name="followUpers" comment="" />
        <Variable name="followUpers_val" comment="" />
        <Variable name="followupData" comment="" />
        <Variable name="kettleSignalOnBuffCrimeNotice" comment="" />
        <Variable name="markKettleAsPoisonedData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Child>
              <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Function_crime_getAnyDecoratorPreset>
                  <AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Function_crime_limits_confirmReactionLink>
                                  <Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Function_crime_checkInterruptInformation>
                                </Sequence>
                              </AtomicDecorator>
                              <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </WaitAction>
                              <IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Else>
                                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                      <OutputBreakpoints />
                                      <Then>
                                        <Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Function_crime_crimeBark>
                                      </Then>
                                      <Else>
                                        <Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Function_crime_crimeBark>
                                      </Else>
                                    </IfElseCondition>
                                  </IfCondition>
                                </Else>
                              </IsLoadedGate>
                              <Function_markAsCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Function_markAsCrime>
                              <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Function_crime_crimeBark>
                                    </Then>
                                    <Else>
                                      <Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Function_crime_crimeBark>
                                    </Else>
                                  </IfElseCondition>
                                </ForceLook>
                                <AtomicDecorator hasInputBreakpoint="0" comment="TODO: change from remove to deactivate" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <InstantSendMessageToNPC hasInputBreakpoint="0" comment="Turn off eating from the kettle" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </InstantSendMessageToNPC>
                                    <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </LinkTagFilter>
                                          <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                            <OutputBreakpoints />
                                          </Nodalyzer>
                                        </GraphSearch>
                                        <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </Expression>
                                            <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </AddLink>
                                          </Sequence>
                                        </ForEach>
                                      </Sequence>
                                    </SuppressFailure>
                                  </Sequence>
                                </AtomicDecorator>
                              </Parallel>
                              <Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Function_callFollowUpBehavior>
                            </Sequence>
                          </LogToLabel>
                        </AddPerceivableState>
                      </EntityContext>
                    </EntityContextElement>
                  </AnyDecorator>
                </Sequence>
              </EntityContext>
            </Child>
            <OnSuccess>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_crime_limits_removeReactionLink>
                <RemoveLink hasInputBreakpoint="0" comment="Remove reservation" breakpointFlags="0">
                  <OutputBreakpoints />
                </RemoveLink>
              </Sequence>
            </OnSuccess>
          </FuseBox>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>