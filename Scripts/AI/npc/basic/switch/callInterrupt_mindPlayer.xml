<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_mindPlayer" is_function="1">
		<Variables>
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="mindPlayerData" type="switch:interruptData:mindPlayer" values="" isPersistent="0" form="single" />
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="101" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="ignorePriority" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="soundType" type="enum:sound" values="$enum:sound.invalid" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
						<Else canSkip="1">
							<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
								<Else canSkip="1">
									<EntityContextCheck context="crime_sharedPerceptionReaction" target="" saveVersion="2">
										<Else canSkip="1">
											<Sequence>
												<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.threat">
													<Expression expressions="$priority = 107" />
												</IfCondition>
												<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="26403296" />
												<IfCondition failOnCondition="false" condition="$ignorePriority | $shallPass">
													<Sequence>
														<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="91174602" />
														<EntityContextCheck context="crime_spawnMissingNpcVolume_behavior" target="$this.id" saveVersion="2">
															<Then canSkip="1">
																<Function_crime_spawnMissingNpcVolume destinationWuid="$__player" nodeLabel="86609406" />
															</Then>
														</EntityContextCheck>
														<IfCondition failOnCondition="false" condition="$initiator == $enum:switch_interruptInitiator.switch | &#10;$previousReaction == $enum:crime_reactionKind.unknown">
															<GetReactionKindByContext Target="$this.id" ReactionKind="$previousReaction" />
														</IfCondition>
														<CreateInformationWrapper Label="&apos;motivation&apos;" PerceivedWuid="$this.id" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
														<LockDynamicInformationValues Information="$information">
															<SetDynamicInformationValue Information="$information" Tag="&apos;stimulusKind&apos;" Variable="$stimulusKind" Type="" Value="" />
														</LockDynamicInformationValues>
														<Function_crime_limits_reserveReactionLink ffCrimeIcon="false" information="$information" priority="$priority" reactionKind="$enum:crime_reactionKind.mindPlayer" nodeLabel="71802480" />
														<Expression expressions="$mindPlayerData.stimulusKind = $stimulusKind &#10;$mindPlayerData.previousReaction = $previousReaction &#10;$mindPlayerData.initiatedBy = $initiator &#10;$mindPlayerData.information = $information &#10;$mindPlayerData.soundType = $soundType" />
														<AddInterrupt_mindPlayer mindPlayerData="$mindPlayerData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_mindPlayer&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
													</Sequence>
												</IfCondition>
											</Sequence>
										</Else>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="information" comment="" />
				<Variable name="mindPlayerData" comment="" />
				<Variable name="mrkev" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="soundType" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<EntityContextCheck hasInputBreakpoint="0" comment="dont when perception shared" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Else>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
													<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_checkReactionPriority>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_getMrkev>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Function_crime_spawnMissingNpcVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_spawnMissingNpcVolume>
																</Then>
															</EntityContextCheck>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetReactionKindByContext>
															</IfCondition>
															<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</CreateInformationWrapper>
															<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</SetDynamicInformationValue>
															</LockDynamicInformationValues>
															<Function_crime_limits_reserveReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_limits_reserveReactionLink>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<AddInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AddInterrupt_mindPlayer>
														</Sequence>
													</IfCondition>
												</Sequence>
											</Else>
										</EntityContextCheck>
									</Else>
								</EntityContextCheck>
							</Else>
						</GameContextCheck>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>