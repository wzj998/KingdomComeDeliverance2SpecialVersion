<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleStimulusTrespass" is_function="1">
		<Variables>
			<Variable name="desiredReactionType" type="enum:crime_reactionType" values="$enum:crime_reactionType.watchTrespass" isPersistent="0" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isBandit" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isCampTrespass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="shouldReact" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shouldWatch" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:stimulus:trespass" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetSpatialInfo In="$__player" Out="$pos" What="Position" />
					<IsBandit Npc="$this.id" IsBandit="$isBandit" />
					<GetHomeFromArea Area="$stimulus.area" Home="$home" />
					<IfCondition failOnCondition="false" condition="$home ~= $__null">
						<Function_crime_addLongTermMemoryTrespass home="$home" nodeLabel="35226128" />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="~$isBandit &amp; $stimulus.severeness &lt;= $enum:trespassLevel.semipersonal">
						<Expression expressions="$desiredReactionType = $enum:crime_reactionType.mildWatchTrespass" />
					</IfCondition>
					<CheckReactionLimit DesiredReactionType="$desiredReactionType" Information="" Position="$pos" StimulusKind="$enum:crime_stimulusKind.trespass" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
					<IfCondition failOnCondition="false" condition="$shouldReact | $shouldWatch">
						<Switch>
							<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
								<Then canSkip="1">
									<Function_stealth_recognitionState_I_reaction target="$__player" nodeLabel="19980526" />
								</Then>
							</EntityContextCheck>
							<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
								<Then canSkip="1">
									<IfCondition failOnCondition="false" condition="$shouldReact">
										<Function_stealth_recognitionState_II_reaction stimulusKind="$enum:crime_stimulusKind.trespass" target="$__player" nodeLabel="77371788" />
									</IfCondition>
								</Then>
							</EntityContextCheck>
							<DefaultBranch>
								<IfElseCondition failOnCondition="false" condition="$shouldReact" saveVersion="2">
									<Then canSkip="1">
										<IfElseCondition failOnCondition="false" condition="$stimulus.isCampTrespass" saveVersion="2">
											<Then canSkip="1">
												<Function_callInterrupt_watchCampTrespass ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" postSurrender="false" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="36399718" />
											</Then>
											<Else canSkip="1">
												<Function_callInterrupt_watchTrespass ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" onlyWaitingForDeparture="false" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="38613935" />
											</Else>
										</IfElseCondition>
									</Then>
									<Else canSkip="1">
										<Function_callInterrupt_watch assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" freshlyAttributedCrime="false" ignorePriority="false" information="" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.trespass" target="$__player" nodeLabel="38177067" />
									</Else>
								</IfElseCondition>
							</DefaultBranch>
						</Switch>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="desiredReactionType" comment="" />
				<Variable name="home" comment="" />
				<Variable name="isBandit" comment="" />
				<Variable name="isCampTrespass" comment="" />
				<Variable name="pos" comment="" />
				<Variable name="shouldReact" comment="" />
				<Variable name="shouldWatch" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetSpatialInfo>
						<IsBandit hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</IsBandit>
						<GetHomeFromArea hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetHomeFromArea>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_crime_addLongTermMemoryTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_crime_addLongTermMemoryTrespass>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</CheckReactionLimit>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Function_stealth_recognitionState_I_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_stealth_recognitionState_I_reaction>
									</Then>
								</EntityContextCheck>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_stealth_recognitionState_II_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_stealth_recognitionState_II_reaction>
										</IfCondition>
									</Then>
								</EntityContextCheck>
								<DefaultBranch>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Function_callInterrupt_watchCampTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_watchCampTrespass>
												</Then>
												<Else>
													<Function_callInterrupt_watchTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_watchTrespass>
												</Else>
											</IfElseCondition>
										</Then>
										<Else>
											<Function_callInterrupt_watch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_callInterrupt_watch>
										</Else>
									</IfElseCondition>
								</DefaultBranch>
							</Switch>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>