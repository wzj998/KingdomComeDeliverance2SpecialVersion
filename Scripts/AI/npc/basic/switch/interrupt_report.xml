<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_report" is_function="0">
		<Variables>
			<Variable name="additionalParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
			<Variable name="anyDecoratorPreset" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="breakCheckNotifications" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="const_true" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="cooperationNotification" type="enum:crime_cooperationNotification" values="" isPersistent="0" form="single" />
			<Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
			<Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="destinationInRange" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="dialogContext_reporting" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="dialogContext_running" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="distanceNewToOG" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="emitCrimeInformation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="emittingInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="guardReactionKind" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" />
			<Variable name="informationIsRelated" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="interiorLeft" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isBandit" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="knownInformations" type="information" values="" isPersistent="0" form="array" />
			<Variable name="knownInformations_value" type="information" values="" isPersistent="0" form="single" />
			<Variable name="longDistanceModeActive" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="longRangeArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="metaroleLabel_reporting" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="metaroleLabel_running" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="nextMostImportantInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="noninvestigable" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="useGeneratedNSO(false)" isPersistent="0" form="single" />
			<Variable name="perceptionInfo" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="playersLastSeenDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="playersLastSeenPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="privateLeft" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="redirectCooldown" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="reportSource" type="crime:reportSource" values="" isPersistent="0" form="single" />
			<Variable name="reportSourceRemoved" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shockSource" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="skipRunning" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="startBarkFinished" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="t_dialogParameters" type="dialog:parameters:initiator" values="" isPersistent="0" form="single" />
			<Variable name="t_dialogParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="useDirectBark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useDirectFollowUp" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="usePointAnim" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useless" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="reportData" type="switch:interruptData:report" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<Sequence>
								<Function_crime_getAnyDecoratorPreset tryToKeepItems="false" tryToKeepSecondaryWeapon="true" presetString="$anyDecoratorPreset" nodeLabel="21754209" />
								<AnyDecorator preset="$anyDecoratorPreset" enabled="true">
									<EntityContext context="speech_greyOutE" target="$this.id">
										<EntityContextElement context="speech_greyOutE" enabled="true">
											<EntityContext context="crime_suppressShockReactionFromSwitch" target="$this.id">
												<EntityContextElement context="crime_interrupt" enabled="true">
													<EntityContext context="crime_interruptReport" target="$this.id">
														<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
															<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:report&apos;">
																<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$reportData.stimulusKind&apos;">
																	<Sequence>
																		<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.report" nodeLabel="96401842" />
																		<Function_crime_checkInterruptInformation information="$reportData.information" nodeLabel="27256752" />
																		<IfCondition failOnCondition="false" condition="$reportData.source == $enum:crime_source.direct | $reportData.source == $enum:crime_source.personal">
																			<LockDynamicInformationValues Information="$reportData.information">
																				<ClearDynamicInformationValue Information="$reportData.information" Tag="&apos;alreadyReactedToCrimeNpcs&apos;" />
																			</LockDynamicInformationValues>
																		</IfCondition>
																		<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																		<Expression expressions="$emittingInformation = $reportData.information" />
																		<IsInsideAreaWithLabel Position="$this.id" Label="&apos;interior&apos;" Area="$useless" FailSubtMissing="false" saveVersion="2">
																			<Then canSkip="1">
																				<Success />
																			</Then>
																			<Else canSkip="1">
																				<IsInsideAreaWithLabel Position="$reportData.destination" Label="&apos;interior&apos;" Area="$useless" FailSubtMissing="false" saveVersion="2">
																					<Then canSkip="1">
																						<Success />
																					</Then>
																					<Else canSkip="1">
																						<DistanceCondition Origin="$this.id" ReferencePt="$reportData.destination" Low="$data:script_param[&apos;crime_skipReportRunningDistance&apos;].value" High="$data:script_param[&apos;crime_skipReportRunningDistance&apos;].value" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																							<Sequence>
																								<Expression expressions="$skipRunning = true" />
																								<IfCondition failOnCondition="false" condition="$data:crime[$reportData.information.label].isCrime">
																									<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
																										<Then canSkip="1">
																											<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																												<Expression expressions="$usePointAnim = true" />
																											</DistanceCondition>
																										</Then>
																										<Else canSkip="1">
																											<Success />
																										</Else>
																									</HasSeenPlayer>
																								</IfCondition>
																							</Sequence>
																						</DistanceCondition>
																					</Else>
																				</IsInsideAreaWithLabel>
																			</Else>
																		</IsInsideAreaWithLabel>
																		<IfElseCondition failOnCondition="false" condition="$reportData.information.label == &apos;&apos; | &#10;$reportData.information.label == &apos;nonAttributedCrime&apos; | &#10;$reportData.information.label == &apos;motivation&apos;" saveVersion="2">
																			<Then canSkip="1">
																				<GetCrimeLevelByStimulusKind StimulusKind="$reportData.stimulusKind" CrimeLevel="$crimeLevel" />
																			</Then>
																			<Else canSkip="1">
																				<GetCrimeLevelByLabel Label="$reportData.information.label" CrimeLevel="$crimeLevel" />
																			</Else>
																		</IfElseCondition>
																		<SubtreeDecorator saveVersion="2">
																			<Init canSkip="1">
																				<AddBuff SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" />
																			</Init>
																			<Subtree canSkip="1">
																				<Parallel successMode="Any" failureMode="Any">
																					<IfElseCondition failOnCondition="false" condition="$data:crime[$reportData.information.label].isCrime | &#10;$reportData.information.label == &apos;alarm&apos;" saveVersion="2">
																						<Then canSkip="1">
																							<GameContext context="crime_music_negligible">
																								<IfElseCondition failOnCondition="false" condition="$reportData.disableDetected" saveVersion="2">
																									<Then canSkip="1">
																										<EntityContext context="crime_disableDetectedEscalationLevel" target="">
																											<EntityContext context="crime_escalationLevel_reporting" target="">
																												<EntityContextElement context="crime_escalationLevel_reporting" enabled="true">
																													<EntityContext context="crime_escalationLevel_setFromBehavior_report" target="">
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</EntityContext>
																												</EntityContextElement>
																											</EntityContext>
																										</EntityContext>
																									</Then>
																									<Else canSkip="1">
																										<EntityContext context="crime_escalationLevel_reporting" target="">
																											<EntityContextElement context="crime_escalationLevel_reporting" enabled="true">
																												<EntityContext context="crime_escalationLevel_setFromBehavior_report" target="">
																													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																												</EntityContext>
																											</EntityContextElement>
																										</EntityContext>
																									</Else>
																								</IfElseCondition>
																							</GameContext>
																						</Then>
																						<Else canSkip="1">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Else>
																					</IfElseCondition>
																					<While doFail="false" propagateChildFail="false" condition="$breakCheckNotifications == false">
																						<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cooperationNotification" senderInfo="" inbox="&apos;crime_cooperationNotification&apos;" condition="" answerVar="">
																							<Switch>
																								<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.crimeResolved | &#10;$cooperationNotification == $enum:crime_cooperationNotification.informationTransformed">
																									<Selector>
																										<CheckInformationKnowledge Information="$reportData.information" Holder="$this.id" />
																										<Sequence>
																											<ReinitVariable variable="$nextMostImportantInformation" />
																											<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																												<Then canSkip="1">
																													<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="false" MostImportantInformation="$nextMostImportantInformation" />
																												</Then>
																												<Else canSkip="1">
																													<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="true" MostImportantInformation="$nextMostImportantInformation" />
																												</Else>
																											</EntityContextCheck>
																											<IfElseCondition failOnCondition="false" condition="$nextMostImportantInformation.label == &apos;&apos;" saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$breakCheckNotifications = true" />
																												</Then>
																												<Else canSkip="1">
																													<Sequence>
																														<Expression expressions="$reportData.information = $nextMostImportantInformation" />
																														<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $nextMostImportantInformation" />
																														<Expression expressions="$emittingInformation = $nextMostImportantInformation" />
																													</Sequence>
																												</Else>
																											</IfElseCondition>
																										</Sequence>
																									</Selector>
																								</IfCondition>
																								<DefaultBranch>
																									<Success />
																								</DefaultBranch>
																							</Switch>
																						</ProcessMessage>
																					</While>
																					<Sequence>
																						<IfCondition failOnCondition="false" condition="~$skipRunning">
																							<IsLoadedGate saveVersion="2">
																								<Else canSkip="1">
																									<Function_crime_report_startBark reportData="$reportData" nodeLabel="81996068" />
																								</Else>
																							</IsLoadedGate>
																						</IfCondition>
																						<Expression expressions="$startBarkFinished = true" />
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</Sequence>
																					<Sequence>
																						<AtomicDecorator>
																							<Sequence>
																								<Expression expressions="$reportSource.information = $reportData.information" />
																								<AddLink From="$reportData.destination" To="$this.id" Tag="&apos;crime_reportSource&apos;" Data="$reportSource" LinkOpHandleMode="OverWrite" />
																							</Sequence>
																						</AtomicDecorator>
																						<Sequence>
																							<Switch>
																								<IfCondition failOnCondition="false" condition="$reportData.destinationType == $enum:crime_reportDestinationType.authority">
																									<Function_crime_getCrimeMetaroleLabel information="$reportData.information" reportedBy="$__null" situation="$enum:crime_barkSituation.report_running" soundType="$enum:sound.invalid" source="$reportData.source" stimulusKind="$reportData.stimulusKind" dialogContext="$dialogContext_running" metaroleLabel="$metaroleLabel_running" nodeLabel="23042121" />
																								</IfCondition>
																								<IfCondition failOnCondition="false" condition="$reportData.destinationType == $enum:crime_reportDestinationType.mate | &#10;$reportData.destinationType == $enum:crime_reportDestinationType.security">
																									<Expression expressions="$metaroleLabel_running = &apos;NPC_BEZI_HLASIT_SPOLUBYDLICIMU&apos;" />
																								</IfCondition>
																								<DefaultBranch>
																									<ErrorNode Message="&apos;Report destination type invalid or not set!&apos;" />
																								</DefaultBranch>
																							</Switch>
																							<Expression expressions="$dialogContext_running[&apos;isCrime&apos;] = 0" />
																							<IfCondition failOnCondition="false" condition="$reportData.information.label ~= &apos;&apos;">
																								<IfCondition failOnCondition="false" condition="$data:crime[$reportData.information.label].isCrime">
																									<Expression expressions="$dialogContext_running[&apos;isCrime&apos;] = 1" />
																								</IfCondition>
																							</IfCondition>
																						</Sequence>
																						<Parallel successMode="Any" failureMode="Any">
																							<Sequence>
																								<IfCondition failOnCondition="false" condition="$crimeLevel &gt;= $enum:crime_crimeLevel.violent &amp; &#10;$reportData.movementSpeed &gt; $enum:movementSpeed.walk">
																									<Expression expressions="$pathFindingParams.useGeneratedNSO = true &#10;$pathFindingParams.usePaths = false" />
																								</IfCondition>
																								<IfCondition failOnCondition="false" condition="$crimeLevel &lt; $enum:crime_crimeLevel.violent &amp; &#10;$reportData.movementSpeed &gt; $enum:movementSpeed.walk">
																									<Sequence>
																										<IsInsideAreaWithLabel Position="$this.id" Label="&apos;interior&apos;" Area="$longRangeArea" FailSubtMissing="false" saveVersion="2">
																											<Then canSkip="1">
																												<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;interior&apos;" Negation="true" RunLogic="KeepRunning">
																													<Sequence>
																														<IfCondition failOnCondition="false" condition="false">
																															<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																														</IfCondition>
																														<Expression expressions="$interiorLeft = true" />
																													</Sequence>
																												</IsInsideAreaWithLabelBarrier>
																											</Then>
																											<Else canSkip="1">
																												<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$longRangeArea" FailSubtMissing="false" saveVersion="2">
																													<Then canSkip="1">
																														<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;private&apos;" Negation="true" RunLogic="KeepRunning">
																															<Expression expressions="$privateLeft = true" />
																														</IsInsideAreaWithLabelBarrier>
																													</Then>
																													<Else canSkip="1">
																														<Success />
																													</Else>
																												</IsInsideAreaWithLabel>
																											</Else>
																										</IsInsideAreaWithLabel>
																										<IfCondition failOnCondition="false" condition="$privateLeft | $interiorLeft">
																											<DistanceCondition Origin="$this.id" ReferencePt="$reportData.destination" Low="$data:script_param[&apos;crime_crimeInformationEmitDistance_long&apos;].value" High="$data:script_param[&apos;crime_crimeInformationEmitDistance_long&apos;].value" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																												<InstantSemaphore SemaphoreCount="1" LockManagerType="Global" SemaphoreName="&apos;crime_reportFromDoorstep&apos;">
																													<Sequence>
																														<Expression expressions="$longDistanceModeActive = true" />
																														<SuppressFailure>
																															<LoopUntil until="Success" attemptCount="2">
																																<Sequence>
																																	<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
																																	<DistanceCondition Origin="$this.id" ReferencePt="$reportData.destination" Low="15.000000" High="15.000000" Negation="true" ValueOnMiddle="false" failOnCondition="true">
																																		<Success />
																																	</DistanceCondition>
																																</Sequence>
																															</LoopUntil>
																														</SuppressFailure>
																														<Expression expressions="$longDistanceModeActive = false" />
																													</Sequence>
																												</InstantSemaphore>
																											</DistanceCondition>
																										</IfCondition>
																									</Sequence>
																								</IfCondition>
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																							<While doFail="false" propagateChildFail="false" condition="~$reportSourceRemoved">
																								<IfGate atomic="false" condition="~$longDistanceModeActive" RunLogic="Halt">
																									<LinkGate from="$reportData.destination" to="$this.id" tag="&apos;crime_reportSource&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
																										<Sequence>
																											<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
																											<Expression expressions="$reportSourceRemoved = true" />
																										</Sequence>
																									</LinkGate>
																								</IfGate>
																							</While>
																							<Sequence>
																								<Expression expressions="$emitCrimeInformation = ~$reportData.emittingDisabled" />
																								<IfGate atomic="false" condition="$startBarkFinished" RunLogic="KeepRunning">
																									<Function_crime_emitInformation crimeInformation="$emittingInformation" emitCrimeInformation="$emitCrimeInformation" longDistanceModeEnabled="$longDistanceModeActive" reactionKind="$enum:crime_reactionKind.report" emitAlarmInformation="$const_true" nodeLabel="78790341" />
																								</IfGate>
																							</Sequence>
																							<Sequence>
																								<IfCondition failOnCondition="false" condition="$reportData.source ~= $enum:crime_source.indirect">
																									<IsFastForwarded failOnCondition="false" saveVersion="2">
																										<Else canSkip="1">
																											<IsLoadedGate saveVersion="2">
																												<Else canSkip="1">
																													<Sequence>
																														<Expression expressions="$shockSource = $__player" />
																														<IfCondition failOnCondition="false" condition="$reportData.information.label == &apos;corpse&apos;">
																															<CheckWuidValid wuid="$reportData.information.perceivedWuid" FailSubtMissing="false" saveVersion="2">
																																<Then canSkip="1">
																																	<Expression expressions="$shockSource = $reportData.information.perceivedWuid" />
																																</Then>
																															</CheckWuidValid>
																														</IfCondition>
																														<Function_crime_playStartleAnimation assaultData="$reportData.assaultData" crimeLevel="$crimeLevel" freshlyAttributedCrime="$reportData.freshlyAttributedCrime" information="$reportData.information" initiator="$reportData.initiatedBy" previousReaction="$reportData.previousReaction" reactionKind="$enum:crime_reactionKind.report" shockSource="$shockSource" source="$reportData.source" stimulusKind="$reportData.stimulusKind" nodeLabel="21190291" />
																													</Sequence>
																												</Else>
																											</IsLoadedGate>
																										</Else>
																									</IsFastForwarded>
																								</IfCondition>
																								<IfGate atomic="false" condition="~$destinationInRange" RunLogic="Halt">
																									<Parallel successMode="Any" failureMode="Any">
																										<Loop count="-1">
																											<DeadUnconsciousGate Who="$reportData.destination" State="Any" Negation="false" RunLogic="KeepRunning">
																												<ChooseReportDestination Information="$reportData.information" IsImportant="true" Destination="$reportData.destination" DestinationType="$reportData.destinationType" />
																											</DeadUnconsciousGate>
																										</Loop>
																										<Loop count="-1">
																											<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$perceptionInfo" senderInfo="" inbox="&apos;perceptionInfo&apos;" condition="" answerVar="">
																												<EntityContextCheck context="crime_isAuthority" target="$perceptionInfo.perceptible" saveVersion="2">
																													<Then canSkip="1">
																														<IfCondition failOnCondition="false" condition="$perceptionInfo.perceptible ~= $reportData.destination">
																															<IsDeadCheck SoulWUID="$perceptionInfo.perceptible" FailSubtMissing="false" saveVersion="2">
																																<Else canSkip="1">
																																	<IsUnconsciousCheck SoulWUID="$perceptionInfo.perceptible" FailSubtMissing="false" saveVersion="2">
																																		<Else canSkip="1">
																																			<Sequence>
																																				<SuppressFailure>
																																					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_report_redirectCooldown&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																																						<LinkTagFilter tag="&apos;crime_report_redirectCooldown&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$redirectCooldown" />
																																					</GraphSearch>
																																				</SuppressFailure>
																																				<GetTime TimeType="GameTime" OutVar="$currentTime" Delta="" />
																																				<IfCondition failOnCondition="false" condition="$currentTime &gt; $redirectCooldown">
																																					<Sequence>
																																						<MeasureDistance position1="$perceptionInfo.perceptible" position2="$reportData.destination" mode="ThreeDimensions" result="$distanceNewToOG" />
																																						<IfCondition failOnCondition="false" condition="$distanceNewToOG &gt; 7">
																																							<Sequence>
																																								<RemoveLink From="$reportData.destination" To="$this.id" Tag="&apos;crime_reportSource&apos;" LinkOpHandleMode="Error" />
																																								<Expression expressions="$reportData.destination = $perceptionInfo.perceptible &#10;$reportSource.information = $reportData.information" />
																																								<AddLink From="$reportData.destination" To="$this.id" Tag="&apos;crime_reportSource&apos;" Data="$reportSource" LinkOpHandleMode="Error" />
																																								<Expression expressions="$redirectCooldown = $currentTime + $data:script_param[&apos;crime_report_redirectCooldown&apos;].value" />
																																								<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_report_redirectCooldown&apos;" Data="$redirectCooldown" LinkOpHandleMode="OverWrite" />
																																							</Sequence>
																																						</IfCondition>
																																					</Sequence>
																																				</IfCondition>
																																			</Sequence>
																																		</Else>
																																	</IsUnconsciousCheck>
																																</Else>
																															</IsDeadCheck>
																														</IfCondition>
																													</Then>
																												</EntityContextCheck>
																											</ProcessMessage>
																										</Loop>
																										<Loop count="-1">
																											<ContinuousSwitch>
																												<IfCondition failOnCondition="false" condition="$skipRunning">
																													<Sequence>
																														<WaitAction />
																														<Expression expressions="$destinationInRange = true" />
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																												</IfCondition>
																												<DistanceCondition Origin="$this.id" ReferencePt="$reportData.destination" Low="3.000000" High="3.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																													<Sequence>
																														<Expression expressions="$destinationInRange = true" />
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																												</DistanceCondition>
																												<IfCondition failOnCondition="false" condition="true">
																													<IfGate atomic="false" condition="~$longDistanceModeActive" RunLogic="Halt">
																														<MoveParamsDecorator speed="$reportData.movementSpeed" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																															<Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$reportData.destination" destinationSpecification2="" destinationSpecification3="" speed="$reportData.movementSpeed" additionalParams="$additionalParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
																														</MoveParamsDecorator>
																													</IfGate>
																												</IfCondition>
																											</ContinuousSwitch>
																										</Loop>
																									</Parallel>
																								</IfGate>
																							</Sequence>
																							<IfGate atomic="false" condition="$startBarkFinished" RunLogic="KeepRunning">
																								<Parallel successMode="Any" failureMode="Any">
																									<Loop count="-1">
																										<IfGate atomic="false" condition="$longDistanceModeActive" RunLogic="KeepRunning">
																											<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
																												<Sequence>
																													<DistanceCondition Origin="$this.id" ReferencePt="$reportData.destination" Low="13.000000" High="13.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
																														<Parallel successMode="All" failureMode="Any">
																															<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_running" dramaticBark="true" lookAt="$__null" metarole="$metaroleLabel_running" priority="$enum:crime_barkPriority.low" nodeLabel="41262075" />
																															<IfGate atomic="false" condition="$longDistanceModeActive" RunLogic="Halt">
																																<AnimationAction fragment="&apos;CrimeCome&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																															</IfGate>
																														</Parallel>
																													</DistanceCondition>
																													<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																												</Sequence>
																											</DialogGate>
																										</IfGate>
																									</Loop>
																									<Loop count="-1">
																										<Sequence>
																											<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="&apos;6s&apos;" />
																											<IfGate atomic="false" condition="~$longDistanceModeActive" RunLogic="KeepRunning">
																												<DistanceCondition Origin="$this.id" ReferencePt="$reportData.destination" Low="13.000000" High="13.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
																													<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_running" dramaticBark="true" lookAt="$__null" metarole="$metaroleLabel_running" priority="$enum:crime_barkPriority.low" nodeLabel="47310307" />
																												</DistanceCondition>
																											</IfGate>
																										</Sequence>
																									</Loop>
																								</Parallel>
																							</IfGate>
																						</Parallel>
																						<DeadUnconsciousGate Who="$reportData.destination" State="Any" Negation="true" RunLogic="Halt">
																							<Sequence>
																								<EntityContext context="crime_interruptReport_reporting" target="">
																									<Sequence>
																										<GetKnownInformations OutArray="$knownInformations" Holder="" />
																										<ForEach startIndex="0" step="1" array="$knownInformations" iterator="" value="$knownInformations_value" break="">
																											<IfCondition failOnCondition="false" condition="$knownInformations_value.label ~= &apos;motivation&apos;">
																												<TransferInformation source="" target="$reportData.destination" information="$knownInformations_value" />
																											</IfCondition>
																										</ForEach>
																										<IfCondition failOnCondition="false" condition="$destinationInRange">
																											<Sequence>
																												<GetReactionKindByContext Target="$reportData.destination" ReactionKind="$guardReactionKind" />
																												<IfCondition failOnCondition="false" condition="$data:crime[$reportData.information.label].isCrime &amp; &#10;($guardReactionKind == $enum:crime_reactionKind.arrest | &#10; $guardReactionKind == $enum:crime_reactionKind.attack)">
																													<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
																														<Then canSkip="1">
																															<Expression expressions="$usePointAnim = true &#10;$useDirectBark = true" />
																														</Then>
																														<Else canSkip="1">
																															<Success />
																														</Else>
																													</HasSeenPlayer>
																												</IfCondition>
																												<Parallel successMode="All" failureMode="Any">
																													<Sequence>
																														<IsBandit Npc="" IsBandit="$isBandit" />
																														<Switch>
																															<IfCondition failOnCondition="false" condition="$isBandit">
																																<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_reporting" dramaticBark="false" lookAt="$reportData.destination" metarole="&apos;NPC_HLASI_SPOLUBYDLICIMU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="13141995" />
																															</IfCondition>
																															<EntityContextCheck context="crime_isCuman" target="" saveVersion="2">
																																<Then canSkip="1">
																																	<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_reporting" dramaticBark="false" lookAt="$reportData.destination" metarole="&apos;NPC_HLASI_SPOLUBYDLICIMU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="26111516" />
																																</Then>
																															</EntityContextCheck>
																															<IfCondition failOnCondition="false" condition="$useDirectBark">
																																<DialogGate Who="" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
																																	<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REPORTUJE_STRAZI_(STRAZ_ZATYKA)&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="10120189" />
																																</DialogGate>
																															</IfCondition>
																															<DefaultBranch>
																																<SuppressFailure>
																																	<Sequence>
																																		<IfCondition failOnCondition="false" condition="($reportData.stimulusKind == $enum:crime_stimulusKind.hit | &#10;$reportData.stimulusKind  == $enum:crime_stimulusKind.combat) &amp; &#10;$skipRunning">
																																			<Timeout duration="&apos;3s&apos;" timeType="GameTime" doFail="true" variation="">
																																				<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InIngame" RunLogic="KeepRunning">
																																					<Success />
																																				</DialogGate>
																																			</Timeout>
																																		</IfCondition>
																																		<Switch>
																																			<IfCondition failOnCondition="false" condition="$reportData.destinationType == $enum:crime_reportDestinationType.authority">
																																				<Function_crime_getCrimeMetaroleLabel information="$reportData.information" reportedBy="$__null" situation="$enum:crime_barkSituation.report_reporting" soundType="$enum:sound.invalid" source="$reportData.source" stimulusKind="$reportData.stimulusKind" dialogContext="$dialogContext_reporting" metaroleLabel="$metaroleLabel_reporting" nodeLabel="11975246" />
																																			</IfCondition>
																																			<IfCondition failOnCondition="false" condition="$reportData.destinationType == $enum:crime_reportDestinationType.mate | &#10;$reportData.destinationType == $enum:crime_reportDestinationType.security">
																																				<Expression expressions="$metaroleLabel_reporting = &apos;NPC_HLASI_SPOLUBYDLICIMU&apos;" />
																																			</IfCondition>
																																			<DefaultBranch>
																																				<ErrorNode Message="&apos;Report destination type invalid or not set!&apos;" />
																																			</DefaultBranch>
																																		</Switch>
																																		<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_reporting" dramaticBark="false" lookAt="$reportData.destination" metarole="$metaroleLabel_reporting" priority="$enum:crime_barkPriority.important" nodeLabel="58225000" />
																																	</Sequence>
																																</SuppressFailure>
																															</DefaultBranch>
																														</Switch>
																													</Sequence>
																													<IfElseCondition failOnCondition="false" condition="$usePointAnim" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<Turn target="$__player" align="false" />
																																<AnimationAction fragment="&apos;Pointing&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																															</Sequence>
																														</Then>
																														<Else canSkip="1">
																															<IfCondition failOnCondition="false" condition="$guardReactionKind ~= $enum:crime_reactionKind.arrest &amp; &#10;$guardReactionKind ~= $enum:crime_reactionKind.attack">
																																<Sequence>
																																	<Turn target="$reportData.destination" align="false" />
																																	<AnimationAction fragment="&apos;CrimeCome&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																</Sequence>
																															</IfCondition>
																														</Else>
																													</IfElseCondition>
																												</Parallel>
																											</Sequence>
																										</IfCondition>
																										<TestCheckPoint name="&apos;crimeCheckpoint_crimeReportedToGuard&apos;" />
																									</Sequence>
																								</EntityContext>
																								<EntityContext context="crime_interruptReport_waitingForReceiver" target="">
																									<Parallel successMode="Any" failureMode="Any">
																										<Sequence>
																											<EntityContextCheck context="crime_interruptLookAround_receivingReport" target="$reportData.destination" saveVersion="2">
																												<Then canSkip="1">
																													<EntityContextBarrier context="crime_interruptLookAround_receivingReport" target="$reportData.destination" Negation="true" RunLogic="KeepRunning">
																														<Success />
																													</EntityContextBarrier>
																												</Then>
																											</EntityContextCheck>
																											<AtomicDecorator>
																												<Sequence>
																													<IfCondition failOnCondition="false" condition="$data:crime[$reportData.information.label].isCrime">
																														<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$useDirectFollowUp = true" />
																															</Then>
																														</HasSeenPlayer>
																													</IfCondition>
																													<SuppressFailure>
																														<LockDynamicInformationValues Information="$reportData.information">
																															<GetDynamicInformationValue Information="$reportData.information" Tag="&apos;noninvestigable&apos;" Out="$noninvestigable" />
																														</LockDynamicInformationValues>
																													</SuppressFailure>
																													<IfElseCondition failOnCondition="false" condition="$useDirectFollowUp" saveVersion="2">
																														<Then canSkip="1">
																															<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																<Function_switch_handleAwareness_informations nodeLabel="47703596" />
																															</EntityContext>
																														</Then>
																														<Else canSkip="1">
																															<IfCondition failOnCondition="false" condition="~$noninvestigable">
																																<IfElseCondition failOnCondition="false" condition="$reportData.destinationType == $enum:crime_reportDestinationType.authority | &#10;$reportData.destinationType == $enum:crime_reportDestinationType.security" saveVersion="2">
																																	<Then canSkip="1">
																																		<Sequence>
																																			<IsInformationRelatedToNpc Information="$reportData.information" Npc="$this.id" IsRelated="$informationIsRelated" />
																																			<IfCondition failOnCondition="false" condition="$informationIsRelated">
																																				<Function_callInterrupt_returnWithHelp crimePos="" helpingNpc="$reportData.destination" ignorePriority="true" information="$reportData.information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.report" stimulusKind="$reportData.stimulusKind" nodeLabel="20662222" />
																																			</IfCondition>
																																		</Sequence>
																																	</Then>
																																	<Else canSkip="1">
																																		<HasGenderCheck Gender="Female" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
																																			<Then canSkip="1">
																																				<Function_callInterrupt_returnWithHelp crimePos="" helpingNpc="$reportData.destination" ignorePriority="true" information="$reportData.information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.report" stimulusKind="$reportData.stimulusKind" nodeLabel="48192812" />
																																			</Then>
																																			<Else canSkip="1">
																																				<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.discovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="true" information_look="$reportData.information" initiator="$enum:switch_interruptInitiator.scheduler" missingNpc="$__null" position="" previousReaction="$enum:crime_reactionKind.report" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$enum:sound.movement" source="$reportData.source" stimulusAnimalAbuse="" stimulusKind="$reportData.stimulusKind" nodeLabel="54188082" />
																																			</Else>
																																		</HasGenderCheck>
																																	</Else>
																																</IfElseCondition>
																															</IfCondition>
																														</Else>
																													</IfElseCondition>
																												</Sequence>
																											</AtomicDecorator>
																										</Sequence>
																										<CrimeFollower Target="$reportData.destination" Mode="NoMoveOnlyTurn" Role="Assist" RelativeSpeedLimit="Walk" DisableGhosting="false" />
																									</Parallel>
																								</EntityContext>
																							</Sequence>
																						</DeadUnconsciousGate>
																					</Sequence>
																					<IfElseCondition failOnCondition="false" condition="$reportData.information.label ~= &apos;&apos;" saveVersion="2">
																						<Then canSkip="1">
																							<IfElseCondition failOnCondition="false" condition="$data:crime[$reportData.information.label].isCrime" saveVersion="2">
																								<Then canSkip="1">
																									<Function_crime_sharePlayersLastSeenPosition allowedAssistance="$enum:crime_allowedSharePlayerPosAssistance.onlyBark" requestVisualAssistanceFromOthers="false" direction="$playersLastSeenDirection" position="$playersLastSeenPosition" nodeLabel="98097934" />
																								</Then>
																								<Else canSkip="1">
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Else>
																							</IfElseCondition>
																						</Then>
																						<Else canSkip="1">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Else>
																					</IfElseCondition>
																				</Parallel>
																			</Subtree>
																			<Cleanup canSkip="1">
																				<RemoveBuffs SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" BuffTagId="-1" />
																			</Cleanup>
																		</SubtreeDecorator>
																		<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.report" nodeLabel="37555424" />
																	</Sequence>
																</LogToLabel>
															</LogToLabel>
														</AddPerceivableState>
													</EntityContext>
												</EntityContextElement>
											</EntityContext>
										</EntityContextElement>
									</EntityContext>
								</AnyDecorator>
							</Sequence>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Sequence>
							<Function_crime_addLeavingInterruptCooldown nodeLabel="41378614" />
							<AtomicDecorator>
								<Function_crime_limits_removeReactionLink information="$reportData.information" reactionKind="$enum:crime_reactionKind.report" nodeLabel="54050641" />
							</AtomicDecorator>
							<RemoveLink From="$reportData.destination" To="$this.id" Tag="&apos;crime_reportSource&apos;" LinkOpHandleMode="Success" />
						</Sequence>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="additionalParams" comment="" />
				<Variable name="anyDecoratorPreset" comment="" />
				<Variable name="breakCheckNotifications" comment="" />
				<Variable name="const_true" comment="" />
				<Variable name="cooperationNotification" comment="" />
				<Variable name="crimeLevel" comment="" />
				<Variable name="currentTime" comment="" />
				<Variable name="destinationInRange" comment="" />
				<Variable name="dialogContext_reporting" comment="" />
				<Variable name="dialogContext_running" comment="" />
				<Variable name="distanceNewToOG" comment="" />
				<Variable name="emitCrimeInformation" comment="" />
				<Variable name="emittingInformation" comment="" />
				<Variable name="guardReactionKind" comment="" />
				<Variable name="informationIsRelated" comment="" />
				<Variable name="interiorLeft" comment="" />
				<Variable name="isBandit" comment="" />
				<Variable name="knownInformations" comment="" />
				<Variable name="knownInformations_value" comment="" />
				<Variable name="longDistanceModeActive" comment="" />
				<Variable name="longRangeArea" comment="" />
				<Variable name="metaroleLabel_reporting" comment="" />
				<Variable name="metaroleLabel_running" comment="" />
				<Variable name="nextMostImportantInformation" comment="" />
				<Variable name="noninvestigable" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="perceptionInfo" comment="" />
				<Variable name="playersLastSeenDirection" comment="" />
				<Variable name="playersLastSeenPosition" comment="" />
				<Variable name="privateLeft" comment="" />
				<Variable name="redirectCooldown" comment="" />
				<Variable name="reportSource" comment="" />
				<Variable name="reportSourceRemoved" comment="" />
				<Variable name="shockSource" comment="" />
				<Variable name="skipRunning" comment="" />
				<Variable name="startBarkFinished" comment="" />
				<Variable name="t_dialogParameters" comment="" />
				<Variable name="t_dialogParticipants" comment="" />
				<Variable name="useDirectBark" comment="" />
				<Variable name="useDirectFollowUp" comment="" />
				<Variable name="usePointAnim" comment="" />
				<Variable name="useless" comment="" />
				<Variable name="reportData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-1330" editorPosY="-740" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_getAnyDecoratorPreset>
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_limits_confirmReactionLink>
																			<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_checkInterruptInformation>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ClearDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ClearDynamicInformationValue>
																				</LockDynamicInformationValues>
																			</IfCondition>
																			<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																				<OutputBreakpoints />
																			</RemoveBuffs>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Then>
																				<Else>
																					<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</Then>
																						<Else>
																							<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<DistanceCondition hasInputBreakpoint="0" comment="check player nearby" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</DistanceCondition>
																											</Then>
																											<Else>
																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Success>
																											</Else>
																										</HasSeenPlayer>
																									</IfCondition>
																								</Sequence>
																							</DistanceCondition>
																						</Else>
																					</IsInsideAreaWithLabel>
																				</Else>
																			</IsInsideAreaWithLabel>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<GetCrimeLevelByStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetCrimeLevelByStimulusKind>
																				</Then>
																				<Else>
																					<GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetCrimeLevelByLabel>
																				</Else>
																			</IfElseCondition>
																			<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Init>
																					<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</AddBuff>
																				</Init>
																				<Subtree>
																					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<EntityContext hasInputBreakpoint="0" comment="not element" breakpointFlags="0">
																												<OutputBreakpoints />
																												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</EntityContext>
																													</EntityContextElement>
																												</EntityContext>
																											</EntityContext>
																										</Then>
																										<Else>
																											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</EntityContext>
																												</EntityContextElement>
																											</EntityContext>
																										</Else>
																									</IfElseCondition>
																								</GameContext>
																							</Then>
																							<Else>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Else>
																						</IfElseCondition>
																						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<CheckInformationKnowledge hasInputBreakpoint="0" comment="This node fails if we don&apos;t known the information anymore" breakpointFlags="0">
																												<OutputBreakpoints />
																											</CheckInformationKnowledge>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</ReinitVariable>
																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</GetMostImportantCrimeInformation>
																													</Then>
																													<Else>
																														<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</GetMostImportantCrimeInformation>
																													</Else>
																												</EntityContextCheck>
																												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="Break this behavior" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																													<Else>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="Update information to the next most critical one" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</LinkDataExpression>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</Sequence>
																													</Else>
																												</IfElseCondition>
																											</Sequence>
																										</Selector>
																									</IfCondition>
																									<DefaultBranch>
																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Success>
																									</DefaultBranch>
																								</Switch>
																							</ProcessMessage>
																						</While>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Else>
																										<Function_crime_report_startBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_report_startBark>
																									</Else>
																								</IsLoadedGate>
																							</IfCondition>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</Sequence>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</AddLink>
																								</Sequence>
																							</AtomicDecorator>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Function_crime_getCrimeMetaroleLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_getCrimeMetaroleLabel>
																									</IfCondition>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</IfCondition>
																									<DefaultBranch>
																										<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</ErrorNode>
																									</DefaultBranch>
																								</Switch>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</IfCondition>
																								</IfCondition>
																							</Sequence>
																							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="dont use paths and use ledges" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</IfCondition>
																									<IfCondition hasInputBreakpoint="0" comment="TODO: movement speed condition should be refactored into something like urgency" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfCondition hasInputBreakpoint="0" comment="lets try without" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Wait hasInputBreakpoint="0" comment="let him pass through door" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Wait>
																															</IfCondition>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</Sequence>
																													</IsInsideAreaWithLabelBarrier>
																												</Then>
																												<Else>
																													<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</IsInsideAreaWithLabelBarrier>
																														</Then>
																														<Else>
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</Else>
																													</IsInsideAreaWithLabel>
																												</Else>
																											</IsInsideAreaWithLabel>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<InstantSemaphore hasInputBreakpoint="0" comment="only let 1 npc report from doorstep" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Wait>
																																		<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Success>
																																		</DistanceCondition>
																																	</Sequence>
																																</LoopUntil>
																															</SuppressFailure>
																															<Expression hasInputBreakpoint="0" comment="if noone comes to help for a while NPC gotta run to him " breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</Sequence>
																													</InstantSemaphore>
																												</DistanceCondition>
																											</IfCondition>
																										</Sequence>
																									</IfCondition>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																								<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Sequence>
																										</LinkGate>
																									</IfGate>
																								</While>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Function_crime_emitInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_emitInformation>
																									</IfGate>
																								</Sequence>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Else>
																												<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Else>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<IfCondition hasInputBreakpoint="0" comment="TODO: more labels" breakpointFlags="0">
																																<OutputBreakpoints />
																																<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Then>
																																</CheckWuidValid>
																															</IfCondition>
																															<Function_crime_playStartleAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_playStartleAnimation>
																														</Sequence>
																													</Else>
																												</IsLoadedGate>
																											</Else>
																										</IsFastForwarded>
																									</IfCondition>
																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</ChooseReportDestination>
																												</DeadUnconsciousGate>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<EntityContextCheck hasInputBreakpoint="0" comment="Early exit" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<IfCondition hasInputBreakpoint="0" comment="Early exit" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Else>
																																		<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Else>
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<SuppressFailure hasInputBreakpoint="0" comment="Check cooldown" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</LinkTagFilter>
																																						</GraphSearch>
																																					</SuppressFailure>
																																					<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetTime>
																																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</MeasureDistance>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="Redirect report" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</RemoveLink>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																									<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</AddLink>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																									<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</AddLink>
																																								</Sequence>
																																							</IfCondition>
																																						</Sequence>
																																					</IfCondition>
																																				</Sequence>
																																			</Else>
																																		</IsUnconsciousCheck>
																																	</Else>
																																</IsDeadCheck>
																															</IfCondition>
																														</Then>
																													</EntityContextCheck>
																												</ProcessMessage>
																											</Loop>
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</WaitAction>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																													</IfCondition>
																													<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																													</DistanceCondition>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Move>
																															</MoveParamsDecorator>
																														</IfGate>
																													</IfCondition>
																												</ContinuousSwitch>
																											</Loop>
																										</Parallel>
																									</IfGate>
																								</Sequence>
																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_crimeBark>
																																<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AnimationAction>
																																</IfGate>
																															</Parallel>
																														</DistanceCondition>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Sequence>
																												</DialogGate>
																											</IfGate>
																										</Loop>
																										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_crimeBark>
																													</DistanceCondition>
																												</IfGate>
																											</Sequence>
																										</Loop>
																									</Parallel>
																								</IfGate>
																							</Parallel>
																							<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetKnownInformations>
																											<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<TransferInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</TransferInformation>
																												</IfCondition>
																											</ForEach>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</GetReactionKindByContext>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Then>
																															<Else>
																																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Success>
																															</Else>
																														</HasSeenPlayer>
																													</IfCondition>
																													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IsBandit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</IsBandit>
																															<Switch hasInputBreakpoint="0" comment="not available for these guys" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_crimeBark>
																																</IfCondition>
																																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_crimeBark>
																																	</Then>
																																</EntityContextCheck>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_crimeBark>
																																	</DialogGate>
																																</IfCondition>
																																<DefaultBranch>
																																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<IfCondition hasInputBreakpoint="0" comment="wait for hitReaction scream to finish if startBark was skipped" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Timeout hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</DialogGate>
																																				</Timeout>
																																			</IfCondition>
																																			<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Function_crime_getCrimeMetaroleLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_getCrimeMetaroleLabel>
																																				</IfCondition>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</IfCondition>
																																				<DefaultBranch>
																																					<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</ErrorNode>
																																				</DefaultBranch>
																																			</Switch>
																																			<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_crimeBark>
																																		</Sequence>
																																	</SuppressFailure>
																																</DefaultBranch>
																															</Switch>
																														</Sequence>
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Turn>
																																	<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AnimationAction>
																																</Sequence>
																															</Then>
																															<Else>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Turn>
																																		<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</AnimationAction>
																																	</Sequence>
																																</IfCondition>
																															</Else>
																														</IfElseCondition>
																													</Parallel>
																												</Sequence>
																											</IfCondition>
																											<TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</TestCheckPoint>
																										</Sequence>
																									</EntityContext>
																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</EntityContextBarrier>
																													</Then>
																												</EntityContextCheck>
																												<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																															</HasSeenPlayer>
																														</IfCondition>
																														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</GetDynamicInformationValue>
																															</LockDynamicInformationValues>
																														</SuppressFailure>
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_switch_handleAwareness_informations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_switch_handleAwareness_informations>
																																</EntityContext>
																															</Then>
																															<Else>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IsInformationRelatedToNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</IsInformationRelatedToNpc>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Function_callInterrupt_returnWithHelp hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_callInterrupt_returnWithHelp>
																																				</IfCondition>
																																			</Sequence>
																																		</Then>
																																		<Else>
																																			<HasGenderCheck hasInputBreakpoint="0" comment="women should be more passive" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Function_callInterrupt_returnWithHelp hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_callInterrupt_returnWithHelp>
																																				</Then>
																																				<Else>
																																					<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_callInterrupt_lookAround>
																																				</Else>
																																			</HasGenderCheck>
																																		</Else>
																																	</IfElseCondition>
																																</IfCondition>
																															</Else>
																														</IfElseCondition>
																													</Sequence>
																												</AtomicDecorator>
																											</Sequence>
																											<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</CrimeFollower>
																										</Parallel>
																									</EntityContext>
																								</Sequence>
																							</DeadUnconsciousGate>
																						</Sequence>
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Function_crime_sharePlayersLastSeenPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_sharePlayersLastSeenPosition>
																									</Then>
																									<Else>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Else>
																								</IfElseCondition>
																							</Then>
																							<Else>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Else>
																						</IfElseCondition>
																					</Parallel>
																				</Subtree>
																				<Cleanup>
																					<RemoveBuffs hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</RemoveBuffs>
																				</Cleanup>
																			</SubtreeDecorator>
																			<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_callFollowUpBehavior>
																		</Sequence>
																	</LogToLabel>
																</LogToLabel>
															</AddPerceivableState>
														</EntityContext>
													</EntityContextElement>
												</EntityContext>
											</EntityContextElement>
										</EntityContext>
									</AnyDecorator>
								</Sequence>
							</EntityContext>
						</Child>
						<OnFail>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_limits_removeReactionLink>
								</AtomicDecorator>
								<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</RemoveLink>
							</Sequence>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>