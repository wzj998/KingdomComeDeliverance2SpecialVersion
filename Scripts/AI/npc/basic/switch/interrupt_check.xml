<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_check" is_function="0">
		<Variables>
			<Variable name="amICamperOrLoner" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="anchor" type="crime:anchor" values="" isPersistent="0" form="single" />
			<Variable name="anchorTooFar" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="areaSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
			<Variable name="breakCheckNotifications" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="buddy" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="const_true" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="cooperationInitiator" type="senderInfo" values="" isPersistent="0" form="single" />
			<Variable name="cooperationInitiatorIsMyMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cooperationNotification" type="enum:crime_cooperationNotification" values="" isPersistent="0" form="single" />
			<Variable name="disableCheckHomeStashes" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="distanceFromLastSeenPosition" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="endBark_callDog" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="endBark_noReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="endBark_shooter" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="endBark_sound" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="endCheck" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasVisor" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hotEntity" type="switch:hotEntity" values="" isPersistent="0" form="single" />
			<Variable name="increaseMovementSpeedCounter" type="_int" values="true" isPersistent="0" form="single" />
			<Variable name="insideBlueOrRedTrespass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="invalidPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="isLonelySoundReactor" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="iterations" type="_int" values="1" isPersistent="0" form="single" />
			<Variable name="lastPebbleDot" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="lastPebbleReaction" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="lastSeenPosition" type="vec3" values="" isPersistent="1" form="single" />
			<Variable name="maxDistanceToAnchor" type="_float" values="false" isPersistent="0" form="single" />
			<Variable name="moveParams" type="additionalMoveParams" values="destChangedThreshold(&apos;250ms&apos;),continueWhenHalting(true)" isPersistent="0" form="single" />
			<Variable name="movementFinished" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="movementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
			<Variable name="myDistanceToAnchor" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="nextMostImportantInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="pebbleDistractionNotification" type="crime:checkPebbleDistraction" values="" isPersistent="0" form="single" />
			<Variable name="pebbleDot" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="percept" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="perceptionBoost" type="enum:priorityManipulation" values="$enum:priorityManipulation.boostNothing" isPersistent="0" form="single" />
			<Variable name="perceptionBoostSet" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerTrespassing" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="resetTurnTowardPebble" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="searchDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="searchPoint" type="crime:searchPoint" values="" isPersistent="0" form="single" />
			<Variable name="stoppingDistance" type="_float" values="1" isPersistent="0" form="single" />
			<Variable name="suspiciousPosition" type="vec3" values="" isPersistent="1" form="single" />
			<Variable name="targetEntityType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="targetFound" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="turnTowardPebble" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="updatePosition" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="useBuddyBark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="uselessArea" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="checkData" type="switch:interruptData:check" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;interrupt_check_targetFoundNoReaction&apos;" />
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;crime_shooterFound&apos;" />
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;crime_playerFoundNearTrespass&apos;" />
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;crime_soundSourceFound&apos;" />
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;lookAround_missingNpcFound&apos;" />
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;crime_soundSourceFound_dogWhistle&apos;" />
					<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;crime_weaponSoundFound&apos;" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<AnyDecorator preset="crime_keepStateAndItems" enabled="true">
								<EntityContext context="speech_greyOutE" target="$this.id">
									<EntityContextElement context="speech_greyOutE" enabled="true">
										<EntityContextElement context="crime_interrupt" enabled="true">
											<EntityContext context="crime_interruptCheck" target="">
												<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
													<EntityContext context="crime_nrbLevel_searching" target="">
														<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:check&apos;">
															<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$checkData.stimulusKind&apos;">
																<Sequence>
																	<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.check" nodeLabel="50289241" />
																	<Function_crime_checkInterruptInformation information="$checkData.information" nodeLabel="95020541" />
																	<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																	<Function_crime_getAnchor anchor="$anchor" nodeLabel="71465880" />
																	<ClearInbox inbox="&apos;crime_checkPebbleDistraction&apos;" type="" condition="" />
																	<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="$checkData.target" WasIgnoredAtLeastFor="&apos;0s&apos;" />
																	<IfCondition failOnCondition="false" condition="$checkData.stimulusKind ~= $enum:crime_stimulusKind.corpse &amp; &#10;$checkData.stimulusKind ~= $enum:crime_stimulusKind.lyingBody &amp; &#10;$checkData.stimulusKind ~= $enum:crime_stimulusKind.unconsciousBody &amp; &#10;$checkData.stimulusKind ~= $enum:crime_stimulusKind.suspiciousDoor">
																		<Expression expressions="$pathFindingParams.usePaths = false" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$suspiciousPosition == $invalidPosition">
																		<Sequence>
																			<GetSpatialInfo In="$checkData.target" Out="$suspiciousPosition" What="Position" />
																			<Expression expressions="$lastSeenPosition = $suspiciousPosition" />
																		</Sequence>
																	</IfCondition>
																	<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.check" />
																	<Function_switch_addHotEntity data="$hotEntity" entity="$checkData.target" expiration="2000" nodeLabel="15409827" />
																	<GetType WUID="$checkData.target" OutString="$targetEntityType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
																	<Parallel successMode="Any" failureMode="Any">
																		<While doFail="false" propagateChildFail="false" condition="$breakCheckNotifications == false">
																			<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cooperationNotification" senderInfo="$cooperationInitiator" inbox="&apos;crime_cooperationNotification&apos;" condition="" answerVar="">
																				<Switch>
																					<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.crimeResolved | &#10;$cooperationNotification == $enum:crime_cooperationNotification.informationTransformed">
																						<IfElseCondition failOnCondition="false" condition="$checkData.information.label == &apos;motivation&apos;" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$breakCheckNotifications = true" />
																							</Then>
																							<Else canSkip="1">
																								<Selector>
																									<CheckInformationKnowledge Information="$checkData.information" Holder="$this.id" />
																									<Sequence>
																										<ReinitVariable variable="$nextMostImportantInformation" />
																										<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																											<Then canSkip="1">
																												<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="false" MostImportantInformation="$nextMostImportantInformation" />
																											</Then>
																											<Else canSkip="1">
																												<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="true" MostImportantInformation="$nextMostImportantInformation" />
																											</Else>
																										</EntityContextCheck>
																										<IfElseCondition failOnCondition="false" condition="$nextMostImportantInformation.label == &apos;&apos;" saveVersion="2">
																											<Then canSkip="1">
																												<Expression expressions="$breakCheckNotifications = true" />
																											</Then>
																											<Else canSkip="1">
																												<Sequence>
																													<Expression expressions="$checkData.information = $nextMostImportantInformation" />
																													<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $nextMostImportantInformation" />
																												</Sequence>
																											</Else>
																										</IfElseCondition>
																									</Sequence>
																								</Selector>
																							</Else>
																						</IfElseCondition>
																					</IfCondition>
																					<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.playerLeftCamp">
																						<Sequence>
																							<EntityContextCheck context="crime_isCamper" target="" saveVersion="2">
																								<Then canSkip="1">
																									<Expression expressions="$amICamperOrLoner = true" />
																								</Then>
																								<Else canSkip="1">
																									<EntityContextCheck context="crime_isLoner" target="" saveVersion="2">
																										<Then canSkip="1">
																											<Expression expressions="$amICamperOrLoner = true" />
																										</Then>
																									</EntityContextCheck>
																								</Else>
																							</EntityContextCheck>
																							<IfCondition failOnCondition="false" condition="$amICamperOrLoner &amp; &#10;$checkData.information.label == &apos;motivation&apos;">
																								<Sequence>
																									<GetAreMates Npc1="$this.id" Npc2="$cooperationInitiator.id" AreMates="$cooperationInitiatorIsMyMate" />
																									<IfCondition failOnCondition="false" condition="$cooperationInitiatorIsMyMate">
																										<Expression expressions="$breakCheckNotifications = true" />
																									</IfCondition>
																								</Sequence>
																							</IfCondition>
																						</Sequence>
																					</IfCondition>
																					<DefaultBranch>
																						<Success />
																					</DefaultBranch>
																				</Switch>
																			</ProcessMessage>
																		</While>
																		<Sequence>
																			<IsLoadedGate saveVersion="2">
																				<Else canSkip="1">
																					<Sequence>
																						<Function_crime_getBuddy origin="$this.id" buddy="$buddy" nodeLabel="66604799" />
																						<IfCondition failOnCondition="false" condition="$buddy ~= $__null">
																							<DistanceCondition Origin="$this.id" ReferencePt="$buddy" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																								<Expression expressions="$useBuddyBark = true" />
																							</DistanceCondition>
																						</IfCondition>
																						<IfElseCondition failOnCondition="false" condition="$useBuddyBark" saveVersion="2">
																							<Then canSkip="1">
																								<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_REAGUJE_NA_STAV_II_(INFORMUJE_BUDDYHO)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="43793290" />
																							</Then>
																							<Else canSkip="1">
																								<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_REAGUJE_NA_STAV_II_(UNIVERZAL)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="40166408" />
																							</Else>
																						</IfElseCondition>
																					</Sequence>
																				</Else>
																			</IsLoadedGate>
																			<IfCondition failOnCondition="false" condition="~$targetFound">
																				<Parallel successMode="Any" failureMode="Any">
																					<IfElseCondition failOnCondition="false" condition="$checkData.target == $__player" saveVersion="2">
																						<Then canSkip="1">
																							<GameContext context="crime_music_lowest">
																								<EntityContext context="crime_escalationLevel_checking" target="">
																									<EntityContextElement context="crime_escalationLevel_checking" enabled="true">
																										<EntityContext context="crime_escalationLevel_setFromBehavior_check" target="">
																											<RelationContext context="PerceptionPriorityBoost" source="$this.id" target="$__player">
																												<Sequence>
																													<Expression expressions="$perceptionBoostSet = true" />
																													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																												</Sequence>
																											</RelationContext>
																										</EntityContext>
																									</EntityContextElement>
																								</EntityContext>
																							</GameContext>
																						</Then>
																						<Else canSkip="1">
																							<Sequence>
																								<Expression expressions="$perceptionBoostSet = true" />
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																						</Else>
																					</IfElseCondition>
																					<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
																						<Then canSkip="1">
																							<Function_crime_weaponDecorator suppressWaitAction="true" weaponSet="&apos;Primary&apos;" shouldHaveDrawnWeapon="$const_true" waitActionFinished="" nodeLabel="90939914" />
																						</Then>
																						<Else canSkip="1">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Else>
																					</IsPublicEnemy>
																					<While doFail="false" propagateChildFail="false" condition="~$endCheck">
																						<IfGate atomic="false" condition="~$targetFound" RunLogic="Halt">
																							<Sequence>
																								<MeasureDistance position1="$this.id" position2="$anchor.position" mode="ThreeDimensions" result="$myDistanceToAnchor" />
																								<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_check_anchor_maxDistance&apos;].value * $data:script_param[&apos;crime_anchor_maxDistance_courageousMultiplier&apos;].value" />
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_check_anchor_maxDistance&apos;].value" />
																									</Else>
																								</EntityContextCheck>
																								<Switch>
																									<IfCondition failOnCondition="false" condition="$targetEntityType ~= &apos;NPC&apos; &amp; &#10;$targetEntityType ~= &apos;NHNPC&apos;">
																										<Sequence>
																											<Expression expressions="$movementSpeed = $enum:movementSpeed.run &#10;$stoppingDistance = 2" />
																											<Function_crime_lookAround_validateOriginPosition originPos="$suspiciousPosition" nodeLabel="87509794" />
																										</Sequence>
																									</IfCondition>
																									<HasActiveThreats SoulWUID="$checkData.target" FailSubtMissing="false" saveVersion="2">
																										<Then canSkip="1">
																											<Expression expressions="$movementSpeed = $enum:movementSpeed.run &#10;$stoppingDistance = 2" />
																										</Then>
																									</HasActiveThreats>
																									<IfCondition failOnCondition="false" condition="$checkData.previousReaction == $enum:crime_reactionKind.lookAround |  &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.combat | &#10;($checkData.target ~= $__player &amp; $checkData.stimulusKind == $enum:crime_stimulusKind.lyingBody)">
																										<Expression expressions="$movementSpeed = $enum:movementSpeed.run &#10;$stoppingDistance = 2" />
																									</IfCondition>
																									<DefaultBranch>
																										<Success />
																									</DefaultBranch>
																								</Switch>
																								<IfElseCondition failOnCondition="false" condition="$myDistanceToAnchor &lt; $maxDistanceToAnchor" saveVersion="2">
																									<Then canSkip="1">
																										<Parallel successMode="All" failureMode="Any">
																											<While doFail="false" propagateChildFail="false" condition="$iterations &gt; 0 &amp; ~$anchorTooFar">
																												<Sequence>
																													<MeasureDistance position1="$this.id" position2="$anchor.position" mode="ThreeDimensions" result="$myDistanceToAnchor" />
																													<IfCondition failOnCondition="false" condition="$myDistanceToAnchor &gt; $maxDistanceToAnchor">
																														<Expression expressions="$anchorTooFar = true" />
																													</IfCondition>
																													<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																												</Sequence>
																											</While>
																											<While doFail="false" propagateChildFail="false" condition="$iterations &gt; 0 &amp; ~$anchorTooFar">
																												<Sequence>
																													<Expression expressions="$searchPoint.position = $suspiciousPosition &#10;$movementFinished = false" />
																													<IfGate atomic="false" condition="~$movementFinished" RunLogic="Halt">
																														<ContinuousSwitch>
																															<IfCondition failOnCondition="false" condition="$turnTowardPebble">
																																<Sequence>
																																	<Parallel successMode="All" failureMode="Any">
																																		<Sequence>
																																			<UrgencyDecorator Urgency="Fast">
																																				<WaitAction />
																																			</UrgencyDecorator>
																																			<StopMovement waitUntilStopped="false" />
																																			<Turn target="$pebbleDistractionNotification.pos" align="false" />
																																			<IfCondition failOnCondition="false" condition="$lastPebbleDot &lt; 0">
																																				<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
																																			</IfCondition>
																																		</Sequence>
																																		<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_REAGUJE_NA_ZVUK_UNIVERZAL&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="92163364" />
																																	</Parallel>
																																	<IfElseCondition failOnCondition="false" condition="$resetTurnTowardPebble" saveVersion="2">
																																		<Then canSkip="1">
																																			<Expression expressions="$resetTurnTowardPebble = false" />
																																		</Then>
																																		<Else canSkip="1">
																																			<Expression expressions="$turnTowardPebble = false" />
																																		</Else>
																																	</IfElseCondition>
																																</Sequence>
																															</IfCondition>
																															<IfCondition failOnCondition="false" condition="true">
																																<EntityContext context="actorCondition_forcedCrimeWatching_nonViolent" target="">
																																	<Sequence>
																																		<MoveParamsDecorator speed="$movementSpeed" pathFindingParams="" doorClosingPolicy="LeaveOpened">
																																			<Move stopWithinDistance="$stoppingDistance" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$suspiciousPosition" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$moveParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
																																		</MoveParamsDecorator>
																																		<Expression expressions="$movementFinished = true" />
																																	</Sequence>
																																</EntityContext>
																															</IfCondition>
																														</ContinuousSwitch>
																													</IfGate>
																													<IfCondition failOnCondition="false" condition="~$updatePosition | $anchorTooFar">
																														<Sequence>
																															<Parallel successMode="All" failureMode="Any">
																																<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																<AnimationAction fragment="&apos;SearchStand&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_PROHLEDAVA_VE_STAVU_II_(UNIVERZAL)&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="12981552" />
																																<Sequence>
																																	<Function_crime_getCrimeSceneSearchPoint crimePos="$suspiciousPosition" desiredSearchPointCount="1" direction="$searchDirection" forceUpdate="false" searchMode="$enum:crime_crimeSceneSearchMode.concentrated" searchPoint="$searchPoint" nodeLabel="79369258" />
																																	<IfCondition failOnCondition="false" condition="~$updatePosition">
																																		<Expression expressions="$suspiciousPosition = $searchPoint.position" />
																																	</IfCondition>
																																</Sequence>
																															</Parallel>
																															<Expression expressions="$iterations = $iterations - 1" />
																															<IfCondition failOnCondition="false" condition="$iterations &lt;= 0">
																																<Expression expressions="$endCheck = true" />
																															</IfCondition>
																														</Sequence>
																													</IfCondition>
																												</Sequence>
																											</While>
																										</Parallel>
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$anchorTooFar = true" />
																									</Else>
																								</IfElseCondition>
																								<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																						</IfGate>
																					</While>
																					<Loop count="-1">
																						<Sequence>
																							<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																							<IfElseCondition failOnCondition="false" condition="$targetEntityType == &apos;NPC&apos; |  &#10;$targetEntityType == &apos;NHNPC&apos;" saveVersion="2">
																								<Then canSkip="1">
																									<IsIndifferent NPC="$checkData.target" saveVersion="2">
																										<Else canSkip="1">
																											<AffectFeelings Npc="" Token="&apos;interruptCheck_periodic&apos;" AffectNervousness="true" AffectReputation="false" />
																										</Else>
																									</IsIndifferent>
																								</Then>
																								<Else canSkip="1">
																									<AffectFeelings Npc="" Token="&apos;interruptCheck_periodic&apos;" AffectNervousness="true" AffectReputation="false" />
																								</Else>
																							</IfElseCondition>
																						</Sequence>
																					</Loop>
																					<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;interrupt_check_targetFoundNoReaction&apos;" RunLogic="KeepRunning">
																						<Expression expressions="$targetFound = true &#10;$endBark_noReaction = true" />
																					</ExternalLock>
																					<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_soundSourceFound&apos;" RunLogic="KeepRunning">
																						<Expression expressions="$targetFound = true &#10;$endBark_sound = true" />
																					</ExternalLock>
																					<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_shooterFound&apos;" RunLogic="KeepRunning">
																						<Expression expressions="$targetFound = true &#10;$endBark_shooter = true" />
																					</ExternalLock>
																					<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_playerFoundNearTrespass&apos;" RunLogic="KeepRunning">
																						<AtomicDecorator>
																							<Function_callInterrupt_mindPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.check" soundType="$enum:sound.invalid" stimulusKind="$enum:crime_stimulusKind.nearTrespass" nodeLabel="27778846" />
																						</AtomicDecorator>
																					</ExternalLock>
																					<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_soundSourceFound_dogWhistle&apos;" RunLogic="KeepRunning">
																						<Expression expressions="$targetFound = true &#10;$endBark_callDog = true" />
																					</ExternalLock>
																					<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_weaponSoundFound&apos;" RunLogic="KeepRunning">
																						<Expression expressions="$targetFound = true &#10;$endBark_shooter = true" />
																					</ExternalLock>
																					<While doFail="false" propagateChildFail="false" condition="true">
																						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$pebbleDistractionNotification" senderInfo="" inbox="&apos;crime_checkPebbleDistraction&apos;" condition="" answerVar="">
																							<IfCondition failOnCondition="false" condition="$movementSpeed &lt; $enum:movementSpeed.run">
																								<Sequence>
																									<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
																									<CalculateLookDotProduct npc="$this.id" position="$pebbleDistractionNotification.pos" result="$pebbleDot" />
																									<IfElseCondition failOnCondition="false" condition="$now &gt; $lastPebbleReaction + $data:script_param[&apos;crime_check_pebbleReactionCooldown&apos;].value * 1000" saveVersion="2">
																										<Then canSkip="1">
																											<Expression expressions="$turnTowardPebble = true &#10;$lastPebbleDot = $pebbleDot &#10;$lastPebbleReaction = $now" />
																										</Then>
																										<Else canSkip="1">
																											<IfCondition failOnCondition="false" condition="$lastPebbleDot &gt; 0 &amp; $pebbleDot &lt; 0">
																												<Sequence>
																													<IfCondition failOnCondition="false" condition="$turnTowardPebble">
																														<Expression expressions="$resetTurnTowardPebble = true" />
																													</IfCondition>
																													<Expression expressions="$turnTowardPebble = true &#10;$lastPebbleDot = $pebbleDot &#10;$lastPebbleReaction = $now" />
																												</Sequence>
																											</IfCondition>
																										</Else>
																									</IfElseCondition>
																								</Sequence>
																							</IfCondition>
																						</ProcessMessage>
																					</While>
																					<Switch>
																						<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.missingNpc">
																							<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;lookAround_missingNpcFound&apos;" RunLogic="KeepRunning">
																								<IsDeadCheck SoulWUID="" FailSubtMissing="false" saveVersion="2">
																									<Then canSkip="1">
																										<Success />
																									</Then>
																									<Else canSkip="1">
																										<IsUnconsciousCheck SoulWUID="$checkData.target" FailSubtMissing="false" saveVersion="2">
																											<Then canSkip="1">
																												<Success />
																											</Then>
																											<Else canSkip="1">
																												<Function_callInterrupt_missingNpcFound ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" missingNPC="$checkData.target" previousReaction="$enum:crime_reactionKind.check" searchingNPC="$this.id" stimulusKind="$enum:crime_stimulusKind.missingNpc" nodeLabel="56171397" />
																											</Else>
																										</IsUnconsciousCheck>
																									</Else>
																								</IsDeadCheck>
																							</ExternalLock>
																						</IfCondition>
																						<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.trespass">
																							<While doFail="false" propagateChildFail="false" condition="~$endCheck">
																								<Sequence>
																									<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$areaSevereness" TrespassArea="$trespassArea" Reaction="$playerTrespassing" ReactionSuppressed="$reactionSuppressed" />
																									<IfCondition failOnCondition="false" condition="~$playerTrespassing">
																										<Sequence>
																											<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;HRAC_VYLEZL_Z_TRESPASSU_A_NPC_NA_NEJ_VOLA_I_KDYZ_HO_VIDELO_JEN_Z_DALKY&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="71672723" />
																											<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$trespassArea" FailSubtMissing="false" saveVersion="2">
																												<Then canSkip="1">
																													<Sequence>
																														<IsInsideAreaWithLabel Position="$this.id" Label="&apos;personal&apos;" Area="$trespassArea" FailSubtMissing="false" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$insideBlueOrRedTrespass = true" />
																															</Then>
																															<Else canSkip="1">
																																<IsInsideAreaWithLabel Position="$this.id" Label="&apos;prohibited&apos;" Area="$trespassArea" FailSubtMissing="false" saveVersion="2">
																																	<Then canSkip="1">
																																		<Expression expressions="$insideBlueOrRedTrespass = true" />
																																	</Then>
																																	<Else canSkip="1">
																																		<Expression expressions="$insideBlueOrRedTrespass = false" />
																																	</Else>
																																</IsInsideAreaWithLabel>
																															</Else>
																														</IsInsideAreaWithLabel>
																														<IfElseCondition failOnCondition="false" condition="$insideBlueOrRedTrespass" saveVersion="2">
																															<Then canSkip="1">
																																<While doFail="false" propagateChildFail="false" condition="~$endCheck">
																																	<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;prohibited&apos;" Negation="true" RunLogic="Halt">
																																		<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;personal&apos;" Negation="true" RunLogic="Halt">
																																			<Sequence>
																																				<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$areaSevereness" TrespassArea="$trespassArea" Reaction="$playerTrespassing" ReactionSuppressed="$reactionSuppressed" />
																																				<Expression expressions="$endCheck = ~$playerTrespassing" />
																																			</Sequence>
																																		</IsInsideAreaWithLabelBarrier>
																																	</IsInsideAreaWithLabelBarrier>
																																</While>
																															</Then>
																															<Else canSkip="1">
																																<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;private&apos;" Negation="true" RunLogic="KeepRunning">
																																	<Sequence>
																																		<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$areaSevereness" TrespassArea="$trespassArea" Reaction="$playerTrespassing" ReactionSuppressed="$reactionSuppressed" />
																																		<Expression expressions="$endCheck = ~$playerTrespassing" />
																																	</Sequence>
																																</IsInsideAreaWithLabelBarrier>
																															</Else>
																														</IfElseCondition>
																													</Sequence>
																												</Then>
																												<Else canSkip="1">
																													<Parallel successMode="Any" failureMode="Any">
																														<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;private&apos;" Negation="false" RunLogic="KeepRunning">
																															<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;private&apos;" Negation="true" RunLogic="KeepRunning">
																																<Sequence>
																																	<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$areaSevereness" TrespassArea="$trespassArea" Reaction="$playerTrespassing" ReactionSuppressed="$reactionSuppressed" />
																																	<Expression expressions="$endCheck = ~$playerTrespassing" />
																																</Sequence>
																															</IsInsideAreaWithLabelBarrier>
																														</IsInsideAreaWithLabelBarrier>
																														<Sequence>
																															<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
																															<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$areaSevereness" TrespassArea="$trespassArea" Reaction="$playerTrespassing" ReactionSuppressed="$reactionSuppressed" />
																															<Expression expressions="$endCheck = ~$playerTrespassing" />
																														</Sequence>
																													</Parallel>
																												</Else>
																											</IsInsideAreaWithLabel>
																										</Sequence>
																									</IfCondition>
																									<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Sequence>
																							</While>
																						</IfCondition>
																						<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.corpse">
																							<Sequence>
																								<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_REINFORCUJE_STAV_II_(UNIVERZAL)&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="34062107" />
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																						</IfCondition>
																						<DefaultBranch>
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</DefaultBranch>
																					</Switch>
																					<IfGate atomic="false" condition="$perceptionBoostSet" RunLogic="KeepRunning">
																						<Sequence>
																							<GetCurrentPerceptionFocus PerceptionNfo="$percept" />
																							<Expression expressions="$updatePosition = $percept.threshold == 1 &amp; $percept.perceptible == $checkData.target" />
																							<IfCondition failOnCondition="false" condition="$percept.perceptible == $__player">
																								<Expression expressions="$perceptionBoost = $enum:priorityManipulation.boostPlayer" />
																							</IfCondition>
																							<Loop count="-1">
																								<Sequence>
																									<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="$checkData.target" WasIgnoredAtLeastFor="&apos;0s&apos;" />
																									<PerceptionSearch ComponentToBoost="$perceptionBoost" saveVersion="2">
																										<Search canSkip="1">
																											<Loop count="-1">
																												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$percept" senderInfo="" inbox="&apos;perceptionInfo_check&apos;" condition="" answerVar="">
																													<CheckWuidValid wuid="$percept.perceptible" FailSubtMissing="false" saveVersion="2">
																														<Then canSkip="1">
																															<IfElseCondition failOnCondition="false" condition="$percept.perceptible == $checkData.target" saveVersion="2">
																																<Then canSkip="1">
																																	<IfElseCondition failOnCondition="false" condition="$percept.threshold == 1" saveVersion="2">
																																		<Then canSkip="1">
																																			<Expression expressions="$iterations = 1 &#10;$updatePosition = true" />
																																		</Then>
																																		<Else canSkip="1">
																																			<Expression expressions="$updatePosition = false" />
																																		</Else>
																																	</IfElseCondition>
																																</Then>
																																<Else canSkip="1">
																																	<DismissSearchCandidate PerceptibleObject="$percept.perceptible" />
																																</Else>
																															</IfElseCondition>
																														</Then>
																													</CheckWuidValid>
																												</ProcessMessage>
																											</Loop>
																										</Search>
																										<NoCandidate canSkip="1">
																											<Expression expressions="$updatePosition = false" />
																										</NoCandidate>
																									</PerceptionSearch>
																									<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Sequence>
																							</Loop>
																						</Sequence>
																					</IfGate>
																					<Loop count="-1">
																						<IfGate atomic="false" condition="$updatePosition &amp; ~$anchorTooFar" RunLogic="Halt">
																							<ForceLook LookTarget="$checkData.target" DisableVariations="true">
																								<Loop count="-1">
																									<Sequence>
																										<GetSpatialInfo In="$checkData.target" Out="$suspiciousPosition" What="Position" />
																										<AtomicDecorator>
																											<SuppressFailure>
																												<Sequence>
																													<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_reactor&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																														<LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																														<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																														<LinkDataFilter tag="&apos;crime_reactor&apos;" condition="$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.check" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																													</GraphSearch>
																													<CreateInformationWrapper Label="&apos;motivation&apos;" PerceivedWuid="$this.id" PositionType="positionVec3" PositionVec3="$suspiciousPosition" PositionWuid="" Information="$checkData.information" />
																													<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $checkData.information" />
																												</Sequence>
																											</SuppressFailure>
																										</AtomicDecorator>
																										<MeasureDistance position1="$lastSeenPosition" position2="$suspiciousPosition" mode="ThreeDimensions" result="$distanceFromLastSeenPosition" />
																										<IfCondition failOnCondition="false" condition="$distanceFromLastSeenPosition &gt; 10">
																											<RandomGate opensWithChance="0.150000" saveVersion="2">
																												<Then canSkip="1">
																													<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_REINFORCUJE_STAV_II_(UNIVERZAL)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="17499401" />
																												</Then>
																												<Else canSkip="1">
																													<Success />
																												</Else>
																											</RandomGate>
																										</IfCondition>
																										<Expression expressions="$increaseMovementSpeedCounter += 1" />
																										<IfCondition failOnCondition="false" condition="$increaseMovementSpeedCounter &gt;= $data:script_param[&apos;crime_check_movementSpeedIncreaseTimer&apos;].value &amp; &#10;$movementSpeed &lt;= $enum:movementSpeed.alertedWalk">
																											<DistanceCondition Origin="$this.id" ReferencePt="$checkData.target" Low="10.000000" High="10.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
																												<Expression expressions="$movementSpeed = $enum:movementSpeed.run" />
																											</DistanceCondition>
																										</IfCondition>
																										<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																									</Sequence>
																								</Loop>
																							</ForceLook>
																						</IfGate>
																					</Loop>
																				</Parallel>
																			</IfCondition>
																			<IfElseCondition failOnCondition="false" condition="$targetFound" saveVersion="2">
																				<Then canSkip="1">
																					<Parallel successMode="Any" failureMode="Any">
																						<GameContextCheck context="crime_escalationLevel_script_global_confrontingTrespass" saveVersion="2">
																							<Else canSkip="1">
																								<GameContextCheck context="crime_escalationLevel_script_global_confrontingGeneral" saveVersion="2">
																									<Else canSkip="1">
																										<Switch>
																											<IfCondition failOnCondition="false" condition="$endBark_shooter">
																												<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="28970360" />
																											</IfCondition>
																											<IfCondition failOnCondition="false" condition="$endBark_callDog">
																												<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_REAGUJE_NA_ZVUK_PISKANI_NA_PSA&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="95376250" />
																											</IfCondition>
																											<IfCondition failOnCondition="false" condition="$endBark_noReaction">
																												<Switch>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.corpse | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.lyingBody | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.missingNpc">
																														<Success />
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.hit | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.combat | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.takedown">
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE__AGRESE)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="71367010" />
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.lockpick">
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE__LOCKPICK)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="13497512" />
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.playerCompanion">
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE__PES)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="79284179" />
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.corpseViolation">
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE__HANOBENI_MRTVOLY)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="38709182" />
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.theft | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.pickpocket | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.horseTheft | &#10;$checkData.stimulusKind == $enum:crime_stimulusKind.graveRobbing">
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE__ZLODEJ)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="13151139" />
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="$checkData.stimulusKind == $enum:crime_stimulusKind.trespass">
																														<Sequence>
																															<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_VYPROVAZI_HRACE_KDYZ_HO_VIDELO_V_TRESPASSU_ALE_ON_Z_NEJ_ODESEL_DRIV_NEZ_TO_ZACALO_RESIT&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="85777698" />
																															<DistanceCondition Origin="$this.id" ReferencePt="$checkData.target" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																																<Function_callInterrupt_mindPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.check" soundType="$enum:sound.invalid" stimulusKind="$enum:crime_stimulusKind.trespass" nodeLabel="31343579" />
																															</DistanceCondition>
																														</Sequence>
																													</IfCondition>
																													<DefaultBranch>
																														<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="32660261" />
																													</DefaultBranch>
																												</Switch>
																											</IfCondition>
																											<IfCondition failOnCondition="false" condition="$endBark_sound">
																												<Sequence>
																													<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
																														<Then canSkip="1">
																															<Expression expressions="$isLonelySoundReactor = false" />
																														</Then>
																														<Else canSkip="1">
																															<IsInsideAreaWithLabel Position="$this.id" Label="&apos;settlement&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
																																<Then canSkip="1">
																																	<Expression expressions="$isLonelySoundReactor = false" />
																																</Then>
																																<Else canSkip="1">
																																	<Success />
																																</Else>
																															</IsInsideAreaWithLabel>
																														</Else>
																													</IsInsideAreaWithLabel>
																													<IfElseCondition failOnCondition="false" condition="$isLonelySoundReactor" saveVersion="2">
																														<Then canSkip="1">
																															<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;OSAMOCENE_NPC_NASLO_HRACE_U_ZDROJE_ZVUKU&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="79846058" />
																														</Then>
																														<Else canSkip="1">
																															<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$checkData.target" metarole="&apos;NPC_UKONCUJE_STAV_II_(NASLO_TO_ALE_NEREAGUJE)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="98126845" />
																														</Else>
																													</IfElseCondition>
																												</Sequence>
																											</IfCondition>
																											<DefaultBranch>
																												<Success />
																											</DefaultBranch>
																										</Switch>
																									</Else>
																								</GameContextCheck>
																							</Else>
																						</GameContextCheck>
																						<DistanceGate Origin="$this.id" ReferencePt="$checkData.target" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																							<Sequence>
																								<UrgencyDecorator Urgency="Fast">
																									<WaitAction />
																								</UrgencyDecorator>
																								<StopMovement waitUntilStopped="true" />
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																						</DistanceGate>
																					</Parallel>
																				</Then>
																				<Else canSkip="1">
																					<Parallel successMode="All" failureMode="Any">
																						<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_UKONCUJE_STAV_II_(NIC_NENASLO)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="54006539" />
																						<Sequence>
																							<IfElseCondition failOnCondition="false" condition="$anchorTooFar" saveVersion="2">
																								<Then canSkip="1">
																									<Parallel successMode="Any" failureMode="Any">
																										<Loop count="-1">
																											<Sequence>
																												<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																												<AffectFeelings Npc="" Token="&apos;interruptCheck_periodic&apos;" AffectNervousness="true" AffectReputation="false" />
																											</Sequence>
																										</Loop>
																										<Parallel successMode="All" failureMode="Any">
																											<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
																											<LoopUntil until="Success" attemptCount="3">
																												<Sequence>
																													<GetCurrentPerceptionFocus PerceptionNfo="$percept" />
																													<IfElseCondition failOnCondition="false" condition="$percept.perceptible == $checkData.target" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
																																<Fail />
																															</Sequence>
																														</Then>
																														<Else canSkip="1">
																															<AnimationAction fragment="&apos;StealthRecognitionStabilization&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																														</Else>
																													</IfElseCondition>
																												</Sequence>
																											</LoopUntil>
																										</Parallel>
																									</Parallel>
																								</Then>
																								<Else canSkip="1">
																									<Sequence>
																										<GetCurrentPerceptionFocus PerceptionNfo="$percept" />
																										<IfCondition failOnCondition="false" condition="$percept.perceptible ~= $checkData.target">
																											<AnimationAction fragment="&apos;StealthRecognitionStabilization&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																										</IfCondition>
																									</Sequence>
																								</Else>
																							</IfElseCondition>
																							<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
																								<Then canSkip="1">
																									<SuppressFailure>
																										<Sequence>
																											<Function_crime_hasVisor npc="$this.id" hasVisor="$hasVisor" nodeLabel="33210026" />
																											<IfCondition failOnCondition="false" condition="$hasVisor">
																												<AnimationAction fragment="&apos;OpenVisor&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																											</IfCondition>
																										</Sequence>
																									</SuppressFailure>
																								</Then>
																							</IsPublicEnemy>
																						</Sequence>
																					</Parallel>
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																	</Parallel>
																	<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.check" nodeLabel="87478837" />
																</Sequence>
															</LogToLabel>
														</LogToLabel>
													</EntityContext>
												</AddPerceivableState>
											</EntityContext>
										</EntityContextElement>
									</EntityContextElement>
								</EntityContext>
							</AnyDecorator>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Sequence>
							<ClearInbox inbox="&apos;crime_checkPebbleDistraction&apos;" type="" condition="" />
							<ClearInbox inbox="&apos;perceptionInfo_check&apos;" type="" condition="" />
							<Function_crime_addLeavingInterruptCooldown nodeLabel="82313673" />
							<AtomicDecorator>
								<Sequence>
									<SuppressFailure>
										<Sequence>
											<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;switch_hotEntity&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												<WUIDFilter WUID="$checkData.target" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
												<LinkDataFilter tag="&apos;switch_hotEntity&apos;" condition="$__link_switch_hotEntity.reason == $enum:switch_hotEntityReason.check" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												<Datalyzer Tag="&apos;switch_hotEntity&apos;" Quantifiers="Exists" Parent="" Child="" Data="$hotEntity" saveVersion="2" />
											</GraphSearch>
											<RemoveLink From="$this.id" To="$checkData.target" Tag="&apos;switch_hotEntity&apos;" LinkOpHandleMode="Success" />
										</Sequence>
									</SuppressFailure>
									<Function_crime_limits_removeReactionLink information="$checkData.information" reactionKind="$enum:crime_reactionKind.check" nodeLabel="98495762" />
									<Function_crime_updateAnchor nodeLabel="34819244" />
								</Sequence>
							</AtomicDecorator>
						</Sequence>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="check" EventSet="">
			<Variables>
				<Variable name="amICamperOrLoner" comment="" />
				<Variable name="anchor" comment="" />
				<Variable name="anchorTooFar" comment="" />
				<Variable name="areaSevereness" comment="" />
				<Variable name="breakCheckNotifications" comment="" />
				<Variable name="buddy" comment="" />
				<Variable name="const_true" comment="" />
				<Variable name="cooperationInitiator" comment="" />
				<Variable name="cooperationInitiatorIsMyMate" comment="" />
				<Variable name="cooperationNotification" comment="" />
				<Variable name="disableCheckHomeStashes" comment="" />
				<Variable name="distanceFromLastSeenPosition" comment="" />
				<Variable name="endBark_callDog" comment="" />
				<Variable name="endBark_noReaction" comment="" />
				<Variable name="endBark_shooter" comment="" />
				<Variable name="endBark_sound" comment="" />
				<Variable name="endCheck" comment="" />
				<Variable name="hasVisor" comment="" />
				<Variable name="hotEntity" comment="" />
				<Variable name="increaseMovementSpeedCounter" comment="" />
				<Variable name="insideBlueOrRedTrespass" comment="" />
				<Variable name="invalidPosition" comment="" />
				<Variable name="isLonelySoundReactor" comment="" />
				<Variable name="iterations" comment="" />
				<Variable name="lastPebbleDot" comment="" />
				<Variable name="lastPebbleReaction" comment="" />
				<Variable name="lastSeenPosition" comment="" />
				<Variable name="maxDistanceToAnchor" comment="" />
				<Variable name="moveParams" comment="" />
				<Variable name="movementFinished" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="myDistanceToAnchor" comment="" />
				<Variable name="nextMostImportantInformation" comment="" />
				<Variable name="now" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="pebbleDistractionNotification" comment="" />
				<Variable name="pebbleDot" comment="" />
				<Variable name="percept" comment="" />
				<Variable name="perceptionBoost" comment="" />
				<Variable name="perceptionBoostSet" comment="" />
				<Variable name="playerTrespassing" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="resetTurnTowardPebble" comment="" />
				<Variable name="searchDirection" comment="" />
				<Variable name="searchPoint" comment="" />
				<Variable name="stoppingDistance" comment="" />
				<Variable name="suspiciousPosition" comment="" />
				<Variable name="targetEntityType" comment="" />
				<Variable name="targetFound" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="turnTowardPebble" comment="" />
				<Variable name="updatePosition" comment="" />
				<Variable name="useBuddyBark" comment="" />
				<Variable name="uselessArea" comment="" />
				<Variable name="checkData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-950" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
						<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SetExternalLock>
					</Sequence>
				</OnInit>
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_limits_confirmReactionLink>
																		<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_checkInterruptInformation>
																		<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																			<OutputBreakpoints />
																		</RemoveBuffs>
																		<Function_crime_getAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_getAnchor>
																		<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ClearInbox>
																		<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</CancelPerceptionIgnore>
																		<IfCondition hasInputBreakpoint="0" comment="target unlikely to move, can use paths" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="when sus position was not loaded" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetSpatialInfo>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Sequence>
																		</IfCondition>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_switch_addHotEntity>
																		<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetType>
																		<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfCondition hasInputBreakpoint="0" comment="An information got resolved, check if it&apos;s the one I&apos;m currently reacting to" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<CheckInformationKnowledge hasInputBreakpoint="0" comment="This node fails if we don&apos;t known the information anymore" breakpointFlags="0">
																											<OutputBreakpoints />
																										</CheckInformationKnowledge>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</ReinitVariable>
																											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</GetMostImportantCrimeInformation>
																												</Then>
																												<Else>
																													<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</GetMostImportantCrimeInformation>
																												</Else>
																											</EntityContextCheck>
																											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Then>
																												<Else>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="Update information to the next most critical one" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																														<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</LinkDataExpression>
																													</Sequence>
																												</Else>
																											</IfElseCondition>
																										</Sequence>
																									</Selector>
																								</Else>
																							</IfElseCondition>
																						</IfCondition>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Then>
																									<Else>
																										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Then>
																										</EntityContextCheck>
																									</Else>
																								</EntityContextCheck>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</GetAreMates>
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</IfCondition>
																									</Sequence>
																								</IfCondition>
																							</Sequence>
																						</IfCondition>
																						<DefaultBranch>
																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</DefaultBranch>
																					</Switch>
																				</ProcessMessage>
																			</While>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Else>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Function_crime_getBuddy hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_getBuddy>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="rip selector" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</DistanceCondition>
																							</IfCondition>
																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_crimeBark>
																								</Then>
																								<Else>
																									<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_crimeBark>
																								</Else>
																							</IfElseCondition>
																						</Sequence>
																					</Else>
																				</IsLoadedGate>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<RelationContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Sequence>
																												</RelationContext>
																											</EntityContext>
																										</EntityContextElement>
																									</EntityContext>
																								</GameContext>
																							</Then>
																							<Else>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																							</Else>
																						</IfElseCondition>
																						<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Function_crime_weaponDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_weaponDecorator>
																							</Then>
																							<Else>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Else>
																						</IsPublicEnemy>
																						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</MeasureDistance>
																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</EntityContextCheck>
																									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IfCondition hasInputBreakpoint="0" comment="checking volume" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																												<Function_crime_lookAround_validateOriginPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_lookAround_validateOriginPosition>
																											</Sequence>
																										</IfCondition>
																										<HasActiveThreats hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Then>
																										</HasActiveThreats>
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</IfCondition>
																										<DefaultBranch>
																											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Success>
																										</DefaultBranch>
																									</Switch>
																									<IfElseCondition hasInputBreakpoint="0" comment="TODO: TWEAK NUMBERS, Condition for possible exploit (reentering check with existing anchor that&apos;s already too far away)" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Parallel hasInputBreakpoint="0" comment="Both subtrees have to finish - then exit big parent parallel" breakpointFlags="0">
																												<OutputBreakpoints />
																												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</MeasureDistance>
																														<IfCondition hasInputBreakpoint="0" comment="TODO: TWEAK NUMBERS" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="This boolean stops positionUpdate, move-loop, exit animation and enables exit wait" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</IfCondition>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Sequence>
																												</While>
																												<While hasInputBreakpoint="0" comment="Finish iteration-move and early exit if anchor is too far away" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</WaitAction>
																																				</UrgencyDecorator>
																																				<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</StopMovement>
																																				<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Turn>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Wait>
																																				</IfCondition>
																																			</Sequence>
																																			<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_crimeBark>
																																		</Parallel>
																																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Then>
																																			<Else>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Else>
																																		</IfElseCondition>
																																	</Sequence>
																																</IfCondition>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Move>
																																			</MoveParamsDecorator>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Sequence>
																																	</EntityContext>
																																</IfCondition>
																															</ContinuousSwitch>
																														</IfGate>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Wait hasInputBreakpoint="0" comment="stay a little longer" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Wait>
																																	<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AnimationAction>
																																	<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_crimeBark>
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_crime_getCrimeSceneSearchPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_getCrimeSceneSearchPoint>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</IfCondition>
																																	</Sequence>
																																</Parallel>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</IfCondition>
																															</Sequence>
																														</IfCondition>
																													</Sequence>
																												</While>
																											</Parallel>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="This boolean stops positionUpdate, move-loop, exit animation and enables exit wait" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</IfElseCondition>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																							</IfGate>
																						</While>
																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Else>
																												<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</AffectFeelings>
																											</Else>
																										</IsIndifferent>
																									</Then>
																									<Else>
																										<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</AffectFeelings>
																									</Else>
																								</IfElseCondition>
																							</Sequence>
																						</Loop>
																						<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</ExternalLock>
																						<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</ExternalLock>
																						<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</ExternalLock>
																						<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_callInterrupt_mindPlayer>
																							</AtomicDecorator>
																						</ExternalLock>
																						<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</ExternalLock>
																						<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</ExternalLock>
																						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</GetTime>
																										<CalculateLookDotProduct hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</CalculateLookDotProduct>
																										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Then>
																											<Else>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</IfCondition>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Sequence>
																												</IfCondition>
																											</Else>
																										</IfElseCondition>
																									</Sequence>
																								</IfCondition>
																							</ProcessMessage>
																						</While>
																						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Success>
																										</Then>
																										<Else>
																											<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</Then>
																												<Else>
																													<Function_callInterrupt_missingNpcFound hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_callInterrupt_missingNpcFound>
																												</Else>
																											</IsUnconsciousCheck>
																										</Else>
																									</IsDeadCheck>
																								</ExternalLock>
																							</IfCondition>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</DetermineTrespassReaction>
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_crime_crimeBark hasInputBreakpoint="0" comment="odisiel z trespassu" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_crimeBark>
																												<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																																<Else>
																																	<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Then>
																																		<Else>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Else>
																																	</IsInsideAreaWithLabel>
																																</Else>
																															</IsInsideAreaWithLabel>
																															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</DetermineTrespassReaction>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Sequence>
																																			</IsInsideAreaWithLabelBarrier>
																																		</IsInsideAreaWithLabelBarrier>
																																	</While>
																																</Then>
																																<Else>
																																	<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</DetermineTrespassReaction>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Sequence>
																																	</IsInsideAreaWithLabelBarrier>
																																</Else>
																															</IfElseCondition>
																														</Sequence>
																													</Then>
																													<Else>
																														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</DetermineTrespassReaction>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Sequence>
																																</IsInsideAreaWithLabelBarrier>
																															</IsInsideAreaWithLabelBarrier>
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Wait>
																																<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</DetermineTrespassReaction>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Sequence>
																														</Parallel>
																													</Else>
																												</IsInsideAreaWithLabel>
																											</Sequence>
																										</IfCondition>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Sequence>
																								</While>
																							</IfCondition>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_crimeBark>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																							</IfCondition>
																							<DefaultBranch>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</DefaultBranch>
																						</Switch>
																						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<GetCurrentPerceptionFocus hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</GetCurrentPerceptionFocus>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</IfCondition>
																								<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</CancelPerceptionIgnore>
																										<PerceptionSearch hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Search>
																												<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Then>
																																			<Else>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Else>
																																		</IfElseCondition>
																																	</Then>
																																	<Else>
																																		<DismissSearchCandidate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</DismissSearchCandidate>
																																	</Else>
																																</IfElseCondition>
																															</Then>
																														</CheckWuidValid>
																													</ProcessMessage>
																												</Loop>
																											</Search>
																											<NoCandidate>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</NoCandidate>
																										</PerceptionSearch>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Sequence>
																								</Loop>
																							</Sequence>
																						</IfGate>
																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetSpatialInfo>
																											<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</LinkTagFilter>
																															<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</WUIDFilter>
																															<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</LinkDataFilter>
																														</GraphSearch>
																														<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</CreateInformationWrapper>
																														<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</LinkDataExpression>
																													</Sequence>
																												</SuppressFailure>
																											</AtomicDecorator>
																											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</MeasureDistance>
																											<IfCondition hasInputBreakpoint="0" comment="it has to have moved a bit for the bark to make sense" breakpointFlags="0">
																												<OutputBreakpoints />
																												<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_crime_crimeSwitchBark>
																													</Then>
																													<Else>
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</Else>
																												</RandomGate>
																											</IfCondition>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</DistanceCondition>
																											</IfCondition>
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</Sequence>
																									</Loop>
																								</ForceLook>
																							</IfGate>
																						</Loop>
																					</Parallel>
																				</IfCondition>
																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Else>
																									<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Else>
																											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_crimeBark>
																												</IfCondition>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_crimeBark>
																												</IfCondition>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_crimeBark>
																																<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_callInterrupt_mindPlayer>
																																</DistanceCondition>
																															</Sequence>
																														</IfCondition>
																														<DefaultBranch>
																															<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeBark>
																														</DefaultBranch>
																													</Switch>
																												</IfCondition>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Then>
																															<Else>
																																<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Then>
																																	<Else>
																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Success>
																																	</Else>
																																</IsInsideAreaWithLabel>
																															</Else>
																														</IsInsideAreaWithLabel>
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_crimeBark>
																															</Then>
																															<Else>
																																<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_crimeBark>
																															</Else>
																														</IfElseCondition>
																													</Sequence>
																												</IfCondition>
																												<DefaultBranch>
																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</DefaultBranch>
																											</Switch>
																										</Else>
																									</GameContextCheck>
																								</Else>
																							</GameContextCheck>
																							<DistanceGate hasInputBreakpoint="0" comment="KCD2-275754" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</WaitAction>
																									</UrgencyDecorator>
																									<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</StopMovement>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																							</DistanceGate>
																						</Parallel>
																					</Then>
																					<Else>
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_crimeBark>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfElseCondition hasInputBreakpoint="0" comment="If we stopped checking because of the anchor - stay awhile and listen" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																													<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</AffectFeelings>
																												</Sequence>
																											</Loop>
																											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																												<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<GetCurrentPerceptionFocus hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</GetCurrentPerceptionFocus>
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Wait>
																																	<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Fail>
																																</Sequence>
																															</Then>
																															<Else>
																																<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</AnimationAction>
																															</Else>
																														</IfElseCondition>
																													</Sequence>
																												</LoopUntil>
																											</Parallel>
																										</Parallel>
																									</Then>
																									<Else>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GetCurrentPerceptionFocus hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetCurrentPerceptionFocus>
																											<IfCondition hasInputBreakpoint="0" comment="If anchor stops us, we don&apos;t want to play animation if we can clearly see our target, it looks awkward" breakpointFlags="0">
																												<OutputBreakpoints />
																												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</AnimationAction>
																											</IfCondition>
																										</Sequence>
																									</Else>
																								</IfElseCondition>
																								<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_crime_hasVisor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_hasVisor>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</AnimationAction>
																												</IfCondition>
																											</Sequence>
																										</SuppressFailure>
																									</Then>
																								</IsPublicEnemy>
																							</Sequence>
																						</Parallel>
																					</Else>
																				</IfElseCondition>
																			</Sequence>
																		</Parallel>
																		<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_callFollowUpBehavior>
																	</Sequence>
																</LogToLabel>
															</LogToLabel>
														</EntityContext>
													</AddPerceivableState>
												</EntityContext>
											</EntityContextElement>
										</EntityContextElement>
									</EntityContext>
								</AnyDecorator>
							</EntityContext>
						</Child>
						<OnFail>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ClearInbox>
								<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ClearInbox>
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
													<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</WUIDFilter>
													<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkDataFilter>
													<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
													</Datalyzer>
												</GraphSearch>
												<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</RemoveLink>
											</Sequence>
										</SuppressFailure>
										<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_limits_removeReactionLink>
										<Function_crime_updateAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_updateAnchor>
									</Sequence>
								</AtomicDecorator>
							</Sequence>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>