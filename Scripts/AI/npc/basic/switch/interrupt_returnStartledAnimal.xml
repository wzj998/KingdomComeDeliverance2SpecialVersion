<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_returnStartledAnimal" is_function="0">
		<Variables>
			<Variable name="additionalMoveParams" type="additionalMoveParams" values="destChangedThreshold(&apos;100ms&apos;)" isPersistent="0" form="single" />
			<Variable name="anyDecoratorPreset" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="barkedToCome" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="bringHorse" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="const_vec3_zero" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="customReturnPoint" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="dialogContext" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" />
			<Variable name="followUpers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="followUpers_val" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="followupData" type="crime:followUpBehavior:returnStartledAnimal" values="" isPersistent="0" form="single" />
			<Variable name="formationEndedEarly" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="formationLock" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="horseFormation" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="horseFound" type="_bool" values="false" isPersistent="1" form="single" />
			<Variable name="horseHome" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="isHorseRelevant" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="lastAnimalPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="lockName" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="lockNameBlockWait" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="lockName_onSpot" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="lockName_running" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="percept" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="readyToReturn" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="returnPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="return_request" type="crime:animal_returnFromStartleRequest" values="" isPersistent="0" form="single" />
			<Variable name="rideHorse" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="shouldFollowHorseEntity" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="sweetSpotLock" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="returnStartledAnimalData" type="switch:interruptData:returnStartledAnimal" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<Expression expressions="$pathFindingParams.useGeneratedNSO = false &#10;$pathFindingParams.usePaths = true" />
					<Concatenation OutString="$lockName_running" Pattern="&apos;startleState_running_$returnStartledAnimalData.animal;&apos;" />
					<Concatenation OutString="$lockName_onSpot" Pattern="&apos;startleState_onSpot_$returnStartledAnimalData.animal;&apos;" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContextElement context="crime_interrupt" enabled="true">
							<EntityContext context="crime_interruptReturnStartledAnimal" target="$this.id">
								<Sequence>
									<Function_crime_getAnyDecoratorPreset tryToKeepItems="false" presetString="$anyDecoratorPreset" nodeLabel="86559154" />
									<AnyDecorator preset="$anyDecoratorPreset" enabled="true">
										<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
											<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:returnStartledAnimal&apos;">
												<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$returnStartledAnimalData.stimulusKind&apos;">
													<Sequence>
														<Sequence>
															<Sequence>
																<IsHorseRelevant Horse="$returnStartledAnimalData.animal" Npc="$this.id" IsRelevant="$isHorseRelevant" />
																<SuppressFailure>
																	<IfElseCondition failOnCondition="false" condition="$isHorseRelevant" saveVersion="2">
																		<Then canSkip="1">
																			<Sequence>
																				<Sequence>
																					<GraphSearch Origin="$returnStartledAnimalData.animal" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;home,crime_homeCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																						<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$horseHome" Data="" />
																					</GraphSearch>
																					<Selector>
																						<Sequence>
																							<GraphSearch Origin="$horseHome" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																								<LinkTagFilter tag="&apos;customReturnHorsePoint&apos;" prune="true" negprune="unknown" Parent="" Child="$customReturnPoint" Data="" />
																							</GraphSearch>
																							<GetSpatialInfo In="$customReturnPoint" Out="$returnPosition" What="Position" />
																						</Sequence>
																						<Function_crime_getRandomPointOutsideOfInterior initialMaxRange="5" maxIterations="50" numIncreaseDistanceAfterIterations="10" originWuid="$horseHome" randomPoint="$returnPosition" nodeLabel="61686925" />
																					</Selector>
																				</Sequence>
																			</Sequence>
																		</Then>
																		<Else canSkip="1">
																			<Sequence>
																				<GraphSearch Origin="$returnStartledAnimalData.animal" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																					<LinkTagFilter tag="&apos;crime_animal_startledMissingVolume&apos;" prune="true" negprune="unknown" Parent="" Child="$volume" Data="" />
																				</GraphSearch>
																				<GetSpatialInfo In="$volume" Out="$returnPosition" What="Position" />
																			</Sequence>
																		</Else>
																	</IfElseCondition>
																</SuppressFailure>
															</Sequence>
															<Expression expressions="$dialogContext[&apos;animalAbuse_species&apos;] = 7" />
															<IsLoadedGate saveVersion="2">
																<Else canSkip="1">
																	<Switch>
																		<IfCondition failOnCondition="false" condition="$returnStartledAnimalData.returnReason == $enum:crime_horseReturnReason.sawStartledAnimal">
																			<SuppressFailure>
																				<InstantExternalLock LockManagerType="Global" SemaphoreName="&apos;$lockName_running&apos;" RunLogic="KeepRunning">
																					<Parallel successMode="All" failureMode="Any">
																						<Function_crime_playStartleAnimation assaultData="" crimeLevel="$enum:crime_crimeLevel.property" information="$information" initiator="$returnStartledAnimalData.initiatedBy" previousReaction="$returnStartledAnimalData.previousReaction" reactionKind="$enum:crime_reactionKind.returnStartledAnimal" shockSource="$returnStartledAnimalData.animal" source="$returnStartledAnimalData.source" stimulusKind="$returnStartledAnimalData.stimulusKind" nodeLabel="51197116" />
																						<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$returnStartledAnimalData.animal" metarole="&apos;NPC_VIDI_VYPLASENE_ZVIRE&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="19591428" />
																					</Parallel>
																				</InstantExternalLock>
																			</SuppressFailure>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$returnStartledAnimalData.returnReason == $enum:crime_horseReturnReason.sawMissingVolume">
																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_RESI_CHYBEJICI_ZVIRE&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="36317159" />
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$returnStartledAnimalData.returnReason == $enum:crime_horseReturnReason.fromFollowUp">
																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_JDE_HLEDAT_ZVIRE_PO_REPORTU&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="54977124" />
																		</IfCondition>
																		<DefaultBranch>
																			<Success />
																		</DefaultBranch>
																	</Switch>
																</Else>
															</IsLoadedGate>
															<EntityContextCheck context="crime_animal_interruptHorseWait" target="$returnStartledAnimalData.animal" saveVersion="2">
																<Then canSkip="1">
																	<Sequence>
																		<Concatenation OutString="$lockNameBlockWait" Pattern="&apos;horseWaitLock_$returnStartledAnimalData.animal;&apos;" />
																		<SetExternalLock LockManagerType="Global" Locked="false" LockName="&apos;$lockNameBlockWait&apos;" />
																	</Sequence>
																</Then>
															</EntityContextCheck>
														</Sequence>
														<IfCondition failOnCondition="false" condition="$returnPosition ~= $const_vec3_zero">
															<Sequence>
																<IfCondition failOnCondition="false" condition="~$horseFound">
																	<IfElseCondition failOnCondition="false" condition="$returnStartledAnimalData.returnReason ~= $enum:crime_horseReturnReason.afterArrest" saveVersion="2">
																		<Then canSkip="1">
																			<Parallel successMode="Any" failureMode="Any">
																				<Loop count="-1">
																					<Sequence>
																						<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
																						<RandomGate opensWithChance="0.330000" saveVersion="2">
																							<Then canSkip="1">
																								<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_STOPUJE_ZTRACENE_ZVIRE&apos;" priority="$enum:crime_barkPriority.flavor" nodeLabel="58567801" />
																							</Then>
																							<Else canSkip="1">
																								<Success />
																							</Else>
																						</RandomGate>
																					</Sequence>
																				</Loop>
																				<Sequence>
																					<Expression expressions="$shouldFollowHorseEntity = true" />
																					<Parallel successMode="Any" failureMode="Any">
																						<IfGate atomic="false" condition="$shouldFollowHorseEntity" RunLogic="Halt">
																							<While doFail="false" propagateChildFail="true" condition="~$horseFound">
																								<Sequence>
																									<Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$returnStartledAnimalData.animal" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="$additionalMoveParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
																									<SuppressFailure>
																										<InstantExternalLock LockManagerType="Global" SemaphoreName="&apos;$lockName_onSpot&apos;" RunLogic="KeepRunning">
																											<Expression expressions="$horseFound = true" />
																										</InstantExternalLock>
																									</SuppressFailure>
																								</Sequence>
																							</While>
																						</IfGate>
																						<EntityContextBarrier context="crime_animal_interruptStartle" target="$returnStartledAnimalData.animal" Negation="true" RunLogic="KeepRunning">
																							<Expression expressions="$shouldFollowHorseEntity = false" />
																						</EntityContextBarrier>
																					</Parallel>
																					<SuppressFailure>
																						<Sequence>
																							<GraphSearch Origin="$returnStartledAnimalData.animal" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_animal_startledPosition&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																								<LinkTagFilter tag="&apos;crime_animal_startledPosition&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$lastAnimalPosition" />
																							</GraphSearch>
																							<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$lastAnimalPosition" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
																						</Sequence>
																					</SuppressFailure>
																					<IfCondition failOnCondition="false" condition="~$horseFound">
																						<Sequence>
																							<Turn target="$returnStartledAnimalData.animal" align="false" />
																							<EntityContext context="crime_disabledRecurrentPerceptionIgnore" target="">
																								<Sequence>
																									<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="$returnStartledAnimalData.animal" WasIgnoredAtLeastFor="&apos;0s&apos;" />
																									<PerceptionSearch ComponentToBoost="BoostNothing" saveVersion="2">
																										<Search canSkip="1">
																											<While doFail="false" propagateChildFail="false" condition="~$horseFound">
																												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$percept" senderInfo="" inbox="&apos;perceptionInfo_scan&apos;" condition="" answerVar="">
																													<CheckWuidValid wuid="$perceptionInfo.perceptible" FailSubtMissing="false" saveVersion="2">
																														<Then canSkip="1">
																															<IfCondition failOnCondition="false" condition="$percept.threshold == 1">
																																<Sequence>
																																	<LogToConsole LogLevel="Error" Message="&apos;PerceptionSearch - $percept.perceptible&apos;" />
																																	<IfCondition failOnCondition="false" condition="$percept.perceptible == $returnStartledAnimalData.animal">
																																		<Selector>
																																			<GraphSearch Origin="$returnStartledAnimalData.animal" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																																				<LinkTagFilter tag="&apos;rider&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																																			</GraphSearch>
																																			<Expression expressions="$horseFound = true" />
																																		</Selector>
																																	</IfCondition>
																																	<DismissSearchCandidate PerceptibleObject="$percept.perceptible" />
																																</Sequence>
																															</IfCondition>
																														</Then>
																													</CheckWuidValid>
																												</ProcessMessage>
																											</While>
																										</Search>
																										<NoCandidate canSkip="1">
																											<Success />
																										</NoCandidate>
																									</PerceptionSearch>
																								</Sequence>
																							</EntityContext>
																						</Sequence>
																					</IfCondition>
																				</Sequence>
																			</Parallel>
																		</Then>
																		<Else canSkip="1">
																			<Sequence>
																				<DistanceCondition Origin="$this.id" ReferencePt="$returnStartledAnimalData.animal" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																					<Expression expressions="$horseFound = true" />
																				</DistanceCondition>
																			</Sequence>
																		</Else>
																	</IfElseCondition>
																</IfCondition>
																<IfElseCondition failOnCondition="false" condition="$horseFound" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<Switch>
																				<IsWeaponDrawn who="$this.id" WeaponSet="Oversized" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$bringHorse = true" />
																					</Then>
																				</IsWeaponDrawn>
																				<HasGenderCheck Gender="Female" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$bringHorse = true" />
																					</Then>
																				</HasGenderCheck>
																				<DefaultBranch>
																					<Expression expressions="$rideHorse = true" />
																				</DefaultBranch>
																			</Switch>
																			<Switch>
																				<IfCondition failOnCondition="false" condition="$rideHorse">
																					<HorseUsageElement horse="$returnStartledAnimalData.animal" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
																						<Search canSkip="1">
																							<Success />
																						</Search>
																						<Exec canSkip="1">
																							<StanceElement smartObject="$returnStartledAnimalData.animal" stance="horse" allowAny="false" enabled="true">
																								<Parallel successMode="All" failureMode="Any">
																									<IfCondition failOnCondition="false" condition="~$barkedToCome">
																										<Sequence>
																											<Expression expressions="$barkedToCome = true" />
																											<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$returnStartledAnimalData.animal" metarole="&apos;NPC_NASLO_ZVIRE&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="10617867" />
																										</Sequence>
																									</IfCondition>
																									<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$returnPosition" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
																								</Parallel>
																							</StanceElement>
																						</Exec>
																					</HorseUsageElement>
																				</IfCondition>
																				<IfCondition failOnCondition="false" condition="$bringHorse">
																					<Sequence>
																						<Parallel successMode="All" failureMode="Any">
																							<IsLoadedGate saveVersion="2">
																								<Else canSkip="1">
																									<AnimationAction fragment="&apos;CrimeCome&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																								</Else>
																							</IsLoadedGate>
																							<IfCondition failOnCondition="false" condition="~$barkedToCome">
																								<Sequence>
																									<Expression expressions="$barkedToCome = true" />
																									<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$returnStartledAnimalData.animal" metarole="&apos;NPC_NASLO_ZVIRE&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="34816183" />
																								</Sequence>
																							</IfCondition>
																						</Parallel>
																						<Sequence>
																							<Concatenation OutString="$formationLock" Pattern="&apos;returnHorse_$returnStartledAnimalData.animal&apos;" />
																							<Concatenation OutString="$sweetSpotLock" Pattern="&apos;$formationLock;_sweetSpot&apos;" />
																							<SetExternalLock LockManagerType="Global" Locked="true" LockName="&apos;$formationLock&apos;" />
																							<SetExternalLock LockManagerType="Global" Locked="true" LockName="&apos;$sweetSpotLock&apos;" />
																						</Sequence>
																						<Expression expressions="$return_request.requester = $this.id &#10;$return_request.position = $returnPosition &#10;$return_request.formationLock = $formationLock" />
																						<InstantSendMessageToNPC target="$returnStartledAnimalData.animal" variable="$return_request" />
																						<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;5s&apos;" LockManagerType="Global" SemaphoreName="&apos;$formationLock&apos;" RunLogic="Halt">
																							<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
																								<Child canSkip="1">
																									<Sequence>
																										<GetMemberFormation MemberWUID="$returnStartledAnimalData.animal" FormationHandleOut="$horseFormation" />
																										<Parallel successMode="Any" failureMode="Any">
																											<EntityContextElement context="crime_inHorseReturningFormation" enabled="true">
																												<FormationFollower FormationHandle="$horseFormation" PreferredPositions="&apos;npc&apos;" FormationMode="MoveHistory" AllowRelocation="false" />
																											</EntityContextElement>
																											<EntityContextBarrier context="crime_inHorseReturningFormation" target="" Negation="false" RunLogic="KeepRunning">
																												<IsInSweetSpotRange WaitForFollowStart="false" RunLogic="KeepRunning">
																													<Sequence>
																														<SetExternalLock LockManagerType="Global" Locked="false" LockName="&apos;$sweetSpotLock&apos;" />
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Sequence>
																												</IsInSweetSpotRange>
																											</EntityContextBarrier>
																										</Parallel>
																									</Sequence>
																								</Child>
																								<OnFail canSkip="1">
																									<Expression expressions="$formationEndedEarly = true" />
																								</OnFail>
																							</FuseBox>
																						</ExternalLock>
																					</Sequence>
																				</IfCondition>
																				<DefaultBranch>
																					<Success />
																				</DefaultBranch>
																			</Switch>
																			<IfCondition failOnCondition="false" condition="~$formationEndedEarly">
																				<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$returnStartledAnimalData.animal" metarole="&apos;NPC_VRATILO_ZVIRE_DOMU&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="24268541" />
																			</IfCondition>
																		</Sequence>
																	</Then>
																	<Else canSkip="1">
																		<Sequence>
																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_NENASLO_ZVIRE&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="92933029" />
																			<AnimationAction fragment="&apos;StealthRecognitionStabilization&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																		</Sequence>
																	</Else>
																</IfElseCondition>
																<AtomicDecorator>
																	<SuppressFailure>
																		<Sequence>
																			<GraphSearch Origin="$returnStartledAnimalData.animal" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																				<LinkTagFilter tag="&apos;crime_followUpBehavior_returnStartledAnimal_reverse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																				<Nodalyzer Quantifiers="ForAll" Parent="" Child="$followUpers" saveVersion="2" />
																			</GraphSearch>
																			<ForEach startIndex="0" step="1" array="$followUpers" iterator="" value="$followUpers_val" break="">
																				<Sequence>
																					<Expression expressions="$followupData.active = false" />
																					<AddLink From="$followUpers_val" To="$returnStartledAnimalData.animal" Tag="&apos;crime_followUpBehavior_returnStartledAnimal&apos;" Data="$followupData" LinkOpHandleMode="OverWrite" />
																				</Sequence>
																			</ForEach>
																		</Sequence>
																	</SuppressFailure>
																</AtomicDecorator>
															</Sequence>
														</IfCondition>
														<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.returnStartledAnimal" nodeLabel="59722848" />
													</Sequence>
												</LogToLabel>
											</LogToLabel>
										</AddPerceivableState>
									</AnyDecorator>
								</Sequence>
							</EntityContext>
						</EntityContextElement>
					</Child>
					<OnFail canSkip="1">
						<RemoveLink From="$this.id" To="$returnStartledAnimalData.animal" Tag="&apos;crime_returnStartledAnimalReserved&apos;" LinkOpHandleMode="OverWrite" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer>
			<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;enable_follow_control&apos;" RunLogic="KeepRunning" />
			<SetExternalLock LockManagerType="Local" Locked="false" LockName="&apos;enable_follow_control&apos;" />
		</ForestContainer>
		<EditorData Signature="returnStartledAnimal" EventSet="">
			<Variables>
				<Variable name="additionalMoveParams" comment="" />
				<Variable name="anyDecoratorPreset" comment="" />
				<Variable name="barkedToCome" comment="" />
				<Variable name="bringHorse" comment="" />
				<Variable name="const_vec3_zero" comment="" />
				<Variable name="customReturnPoint" comment="" />
				<Variable name="dialogContext" comment="" />
				<Variable name="followFormationParams" comment="" />
				<Variable name="followUpers" comment="" />
				<Variable name="followUpers_val" comment="" />
				<Variable name="followupData" comment="" />
				<Variable name="formationEndedEarly" comment="" />
				<Variable name="formationLock" comment="" />
				<Variable name="horseFormation" comment="" />
				<Variable name="horseFound" comment="" />
				<Variable name="horseHome" comment="" />
				<Variable name="information" comment="" />
				<Variable name="isHorseRelevant" comment="" />
				<Variable name="lastAnimalPosition" comment="" />
				<Variable name="lockName" comment="" />
				<Variable name="lockNameBlockWait" comment="" />
				<Variable name="lockName_onSpot" comment="" />
				<Variable name="lockName_running" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="percept" comment="" />
				<Variable name="readyToReturn" comment="" />
				<Variable name="returnPosition" comment="" />
				<Variable name="return_request" comment="" />
				<Variable name="rideHorse" comment="" />
				<Variable name="shouldFollowHorseEntity" comment="" />
				<Variable name="sweetSpotLock" comment="" />
				<Variable name="volume" comment="" />
				<Variable name="returnStartledAnimalData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="10" editorPosY="60" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Concatenation>
						<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Concatenation>
					</Sequence>
				</OnInit>
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_getAnyDecoratorPreset>
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IsHorseRelevant hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</IsHorseRelevant>
																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</LinkTagFilter>
																						</GraphSearch>
																						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</LinkTagFilter>
																								</GraphSearch>
																								<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</GetSpatialInfo>
																							</Sequence>
																							<Function_crime_getRandomPointOutsideOfInterior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_getRandomPointOutsideOfInterior>
																						</Selector>
																					</Sequence>
																				</Sequence>
																			</Then>
																			<Else>
																				<Sequence hasInputBreakpoint="0" comment="Get return position from horse volume" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkTagFilter>
																					</GraphSearch>
																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetSpatialInfo>
																				</Sequence>
																			</Else>
																		</IfElseCondition>
																	</SuppressFailure>
																</Sequence>
																<Expression hasInputBreakpoint="0" comment="Disconnected that dangling LUA because only horse is supported atm." breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Else>
																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<InstantExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Function_crime_playStartleAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_playStartleAnimation>
																							<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_crimeBark>
																						</Parallel>
																					</InstantExternalLock>
																				</SuppressFailure>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_crimeBark>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_crimeBark>
																			</IfCondition>
																			<DefaultBranch>
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</DefaultBranch>
																		</Switch>
																	</Else>
																</IsLoadedGate>
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Concatenation>
																			<SetExternalLock hasInputBreakpoint="0" comment="Horse will wait in HorseWait" breakpointFlags="0">
																				<OutputBreakpoints />
																			</SetExternalLock>
																		</Sequence>
																	</Then>
																</EntityContextCheck>
															</Sequence>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfCondition hasInputBreakpoint="0" comment="save&amp;load" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Parallel hasInputBreakpoint="0" comment="Default" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																							<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_crimeBark>
																								</Then>
																								<Else>
																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Success>
																								</Else>
																							</RandomGate>
																						</Sequence>
																					</Loop>
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfGate hasInputBreakpoint="0" comment="Follow Horse" breakpointFlags="0">
																								<OutputBreakpoints />
																								<While hasInputBreakpoint="0" comment="propagate fail if move fails" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Move hasInputBreakpoint="0" comment="+bark" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Move>
																										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<InstantExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</InstantExternalLock>
																										</SuppressFailure>
																									</Sequence>
																								</While>
																							</IfGate>
																							<EntityContextBarrier hasInputBreakpoint="0" comment="Not in _startle anymore" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</EntityContextBarrier>
																						</Parallel>
																						<SuppressFailure hasInputBreakpoint="0" comment="Move to the last horse&apos;s position" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</LinkTagFilter>
																								</GraphSearch>
																								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Move>
																							</Sequence>
																						</SuppressFailure>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Turn>
																								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</CancelPerceptionIgnore>
																										<PerceptionSearch hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Search>
																												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<CheckWuidValid hasInputBreakpoint="0" comment="NPC might read message AFTER the entity gets destroyed" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</LogToConsole>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<GraphSearch hasInputBreakpoint="0" comment="horse theft crime?" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</LinkTagFilter>
																																				</GraphSearch>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Selector>
																																		</IfCondition>
																																		<DismissSearchCandidate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</DismissSearchCandidate>
																																	</Sequence>
																																</IfCondition>
																															</Then>
																														</CheckWuidValid>
																													</ProcessMessage>
																												</While>
																											</Search>
																											<NoCandidate>
																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Success>
																											</NoCandidate>
																										</PerceptionSearch>
																									</Sequence>
																								</EntityContext>
																							</Sequence>
																						</IfCondition>
																					</Sequence>
																				</Parallel>
																			</Then>
																			<Else>
																				<Sequence hasInputBreakpoint="0" comment="AfterArrest" breakpointFlags="0">
																					<OutputBreakpoints />
																					<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</DistanceCondition>
																				</Sequence>
																			</Else>
																		</IfElseCondition>
																	</IfCondition>
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																					</IsWeaponDrawn>
																					<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																					</HasGenderCheck>
																					<DefaultBranch>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</DefaultBranch>
																				</Switch>
																				<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<HorseUsageElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Search>
																								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Success>
																							</Search>
																							<Exec>
																								<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																												<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_crimeBark>
																											</Sequence>
																										</IfCondition>
																										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Move>
																									</Parallel>
																								</StanceElement>
																							</Exec>
																						</HorseUsageElement>
																					</IfCondition>
																					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Else>
																										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</AnimationAction>
																									</Else>
																								</IsLoadedGate>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_crimeBark>
																									</Sequence>
																								</IfCondition>
																							</Parallel>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Concatenation>
																								<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Concatenation>
																								<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</SetExternalLock>
																								<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</SetExternalLock>
																							</Sequence>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																							<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</InstantSendMessageToNPC>
																							<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Child>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GetMemberFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetMemberFormation>
																											<Parallel hasInputBreakpoint="0" comment="Not my proudest moment" breakpointFlags="0">
																												<OutputBreakpoints />
																												<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<FormationFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</FormationFollower>
																												</EntityContextElement>
																												<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IsInSweetSpotRange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</SetExternalLock>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Sequence>
																													</IsInSweetSpotRange>
																												</EntityContextBarrier>
																											</Parallel>
																										</Sequence>
																									</Child>
																									<OnFail>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</OnFail>
																								</FuseBox>
																							</ExternalLock>
																						</Sequence>
																					</IfCondition>
																					<DefaultBranch>
																						<Success hasInputBreakpoint="0" comment="??" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Success>
																					</DefaultBranch>
																				</Switch>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_crimeBark>
																				</IfCondition>
																			</Sequence>
																		</Then>
																		<Else>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_crimeBark>
																				<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</AnimationAction>
																			</Sequence>
																		</Else>
																	</IfElseCondition>
																	<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<SuppressFailure hasInputBreakpoint="0" comment="Deactivate followups aimed at this animal" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</LinkTagFilter>
																					<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																					</Nodalyzer>
																				</GraphSearch>
																				<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</AddLink>
																					</Sequence>
																				</ForEach>
																			</Sequence>
																		</SuppressFailure>
																	</AtomicDecorator>
																</Sequence>
															</IfCondition>
															<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callFollowUpBehavior>
														</Sequence>
													</LogToLabel>
												</LogToLabel>
											</AddPerceivableState>
										</AnyDecorator>
									</Sequence>
								</EntityContext>
							</EntityContextElement>
						</Child>
						<OnFail>
							<RemoveLink hasInputBreakpoint="0" comment="Remove reservation upon leaving this behavior" breakpointFlags="0">
								<OutputBreakpoints />
							</RemoveLink>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest>
				<ExternalLock editorPosX="5260" editorPosY="-630" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</ExternalLock>
				<SetExternalLock editorPosX="5260" editorPosY="-500" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</SetExternalLock>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>