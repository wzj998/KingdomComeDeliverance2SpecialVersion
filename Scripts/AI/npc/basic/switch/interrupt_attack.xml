<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_attack" is_function="0">
		<Variables>
			<Variable name="amICamperOrLoner" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="assaultKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
			<Variable name="attackPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="attackPlayerDog" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="attackState" type="enum:crime_interruptAttackState" values="" isPersistent="1" form="single" />
			<Variable name="attackStateDefault" type="enum:crime_interruptAttackState" values="" isPersistent="0" form="single" />
			<Variable name="automationRunning" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="automation_defense" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="automation_guard" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="automation_movement" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="automation_offense" type="_bool" values="true" isPersistent="1" form="single" />
			<Variable name="automation_weapon" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="canUrge" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="changeAttackState" type="enum:crime_interruptAttackState" values="" isPersistent="0" form="single" />
			<Variable name="const_false" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cooperationInitiator" type="senderInfo" values="" isPersistent="0" form="single" />
			<Variable name="cooperationInitiatorIsMyMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="cooperationNotification" type="enum:crime_cooperationNotification" values="" isPersistent="0" form="single" />
			<Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
			<Variable name="crimesResolved" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="decoratorString" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="defenceModeEnabled" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="directionStartPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="disableVictoryBark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="emitAlarmInformation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="emitingInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="forceArmedCombatAgainstPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="forceUncertainArea" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="foughtAgainstPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="friendlySkirmishParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="guardMode" type="enum:combatAutomationGuardMode" values="" isPersistent="1" form="single" />
			<Variable name="hasVisor" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="inQuestSkirmish" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="initialInterferenceSet" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="interruptAttackParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="knownInformations" type="information" values="" isPersistent="0" form="array" />
			<Variable name="knownInformations_value" type="information" values="" isPersistent="0" form="single" />
			<Variable name="knownPlayersCrime" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="lockOnFromSharedPerception" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="lookAroundPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="meleeWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="myTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="nextMostImportantInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="npcCooldowns" type="crime:npcCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="npcToSolvePlayerAfterUnsconscious" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="npcToSolvePlayerAfterUnsconsciousFound" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="npcsAround" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="npcsAround_value" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="playPostSkirmish" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="playerDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="playerInSkirmishInitialValueSet" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerInSkirmishNow" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="playerInSkirmishNow_local" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerInSkirmish_keyOut" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="playerPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="punishmentChanged" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="questFightStatus" type="combat:questFightStatus" values="" isPersistent="0" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="resolutionDialogIntroKind" type="enum:crime_resolutionDialogIntroKind" values="" isPersistent="0" form="single" />
			<Variable name="resolveData" type="switch:interruptData:resolve" values="" isPersistent="0" form="single" />
			<Variable name="searchDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="selfhelp_resolveData" type="switch:interruptData:selfhelp_resolve" values="" isPersistent="0" form="single" />
			<Variable name="shouldEmitAlarmInformation" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="skirmishParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="skirmishParticipantsToSendMessage" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="stopDefenceMode" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="stopFightData" type="stopFight" values="" isPersistent="0" form="single" />
			<Variable name="surrenderChatResult" type="crime:playerSurrenderChatFeedback" values="" isPersistent="0" form="single" />
			<Variable name="surrenderStatement" type="enum:crime_surrenderStatement" values="" isPersistent="0" form="single" />
			<Variable name="surrenderTimeNow" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="surrenderingRepeatedly" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
			<Variable name="unconsciousPlayerInformationKnown" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="urgingPriority" type="enum:crime_playerUrgingPriority" values="$enum:crime_playerUrgingPriority.resolve" isPersistent="0" form="single" />
			<Variable name="watchCampTrespass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="weaponChange" type="enum:weaponChange" values="" isPersistent="1" form="single" />
		</Variables>
		<Parameters>
			<Variable name="attackData" type="switch:interruptData:attack" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="crime_preventDespawn" target="">
					<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
						<Child canSkip="1">
							<Sequence>
								<Function_crime_getAnyDecoratorPreset tryToKeepItems="false" tryToKeepSecondaryWeapon="true" presetString="$decoratorString" nodeLabel="53819849" />
								<AnyDecorator preset="$decoratorString" enabled="true">
									<EntityContextElement context="crime_interrupt" enabled="true">
										<EntityContext context="crime_interruptAttack" target="$this.id">
											<EntityContext context="speech_greyOutE" target="$this.id">
												<EntityContextElement context="speech_greyOutE" enabled="true">
													<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
														<EntityContext context="crime_nrbLevel_confronting" target="">
															<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:attack&apos;">
																<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$attackData.stimulusKind&apos;">
																	<Sequence>
																		<IfElseCondition failOnCondition="false" condition="$attackData.defenceMode &amp; ~$stopDefenceMode" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$automation_movement = false &#10;$automation_offense = false &#10;$defenceModeEnabled = true &#10;$guardMode = $enum:combatAutomationGuardMode.forceEnable &#10;$shouldEmitAlarmInformation = false" />
																			</Then>
																			<Else canSkip="1">
																				<EntityContextCheck context="combat_guardModeForceEnable" target="" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$guardMode = $enum:combatAutomationGuardMode.forceEnable" />
																					</Then>
																					<Else canSkip="1">
																						<Expression expressions="$guardMode = $enum:combatAutomationGuardMode.automate" />
																					</Else>
																				</EntityContextCheck>
																			</Else>
																		</IfElseCondition>
																		<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.attack" nodeLabel="73894729" />
																		<Function_crime_checkInterruptInformation information="$attackData.information" nodeLabel="94047663" />
																		<IfCondition failOnCondition="false" condition="$attackData.source == $enum:crime_source.direct | $attackData.source == $enum:crime_source.personal">
																			<LockDynamicInformationValues Information="$attackData.information">
																				<ClearDynamicInformationValue Information="$attackData.information" Tag="&apos;alreadyReactedToCrimeNpcs&apos;" />
																			</LockDynamicInformationValues>
																		</IfCondition>
																		<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																		<EntityContextCheck context="combat_fightInQuestSkirmish" target="" saveVersion="2">
																			<Then canSkip="1">
																				<Sequence>
																					<Expression expressions="$inQuestSkirmish = true &#10;$questFightStatus.status = $enum:combat_questFightStatus.started" />
																					<IsIndifferent NPC="$this.id" saveVersion="2">
																						<Then canSkip="1">
																							<Expression expressions="$shouldEmitAlarmInformation = false" />
																						</Then>
																						<Else canSkip="1">
																							<Success />
																						</Else>
																					</IsIndifferent>
																					<AddLink From="$this.id" To="$this.id" Tag="&apos;combat_questFightStatus&apos;" Data="$questFightStatus" LinkOpHandleMode="OverWrite" />
																				</Sequence>
																			</Then>
																		</EntityContextCheck>
																		<Expression expressions="$emitingInformation = $attackData.information &#10; &#10;$surrenderingRepeatedly = $attackData.escalatedFromFailedSurrender" />
																		<IfElseCondition failOnCondition="false" condition="$attackData.information.label == &apos;&apos; | &#10;$attackData.information.label == &apos;nonAttributedCrime&apos; | &#10;$attackData.information.label == &apos;motivation&apos;" saveVersion="2">
																			<Then canSkip="1">
																				<GetCrimeLevelByStimulusKind StimulusKind="$attackData.stimulusKind" CrimeLevel="$crimeLevel" />
																			</Then>
																			<Else canSkip="1">
																				<GetCrimeLevelByLabel Label="$attackData.information.label" CrimeLevel="$crimeLevel" />
																			</Else>
																		</IfElseCondition>
																		<Parallel successMode="Any" failureMode="Any">
																			<Parallel successMode="Any" failureMode="Any">
																				<Loop count="-1">
																					<Sequence>
																						<EntityContextBarrier context="combat_guardModeForceEnable" target="" Negation="false" RunLogic="Halt">
																							<Sequence>
																								<Expression expressions="$guardMode = $enum:combatAutomationGuardMode.forceEnable" />
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																						</EntityContextBarrier>
																						<Expression expressions="$guardMode = $enum:combatAutomationGuardMode.automate" />
																					</Sequence>
																				</Loop>
																				<IfElseCondition failOnCondition="false" condition="$attackData.previousReaction == $enum:crime_reactionKind.mercy" saveVersion="2">
																					<Then canSkip="1">
																						<Sequence>
																							<EntityContext context="combat_neverSurrenderOrFlee" target="">
																								<Wait duration="&apos;30s&apos;" timeType="GameTime" doFail="false" variation="" />
																							</EntityContext>
																							<EntityContext context="combat_neverMercyAlwaysFlee" target="">
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</EntityContext>
																						</Sequence>
																					</Then>
																					<Else canSkip="1">
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</Else>
																				</IfElseCondition>
																				<IfElseCondition failOnCondition="false" condition="$attackData.information.label == &apos;murder&apos; | &#10;$attackData.information.label == &apos;murderByDog&apos;" saveVersion="2">
																					<Then canSkip="1">
																						<EntityContext context="combat_forceArmed" target="">
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</EntityContext>
																					</Then>
																					<Else canSkip="1">
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</Else>
																				</IfElseCondition>
																				<Loop count="-1">
																					<Sequence>
																						<EntityContextCheck context="combat_disableOffenseAutomation" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$automation_offense = false" />
																							</Then>
																							<Else canSkip="1">
																								<IfElseCondition failOnCondition="false" condition="$defenceModeEnabled" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$automation_offense = false" />
																									</Then>
																									<Else canSkip="1">
																										<IsFastForwarded failOnCondition="false" saveVersion="2">
																											<Then canSkip="1">
																												<Expression expressions="$automation_offense = true" />
																											</Then>
																											<Else canSkip="1">
																												<Expression expressions="$automation_offense = false" />
																											</Else>
																										</IsFastForwarded>
																									</Else>
																								</IfElseCondition>
																							</Else>
																						</EntityContextCheck>
																						<EntityContextBarrier context="combat_disableOffenseAutomation" target="" Negation="true" RunLogic="Halt">
																							<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;tenseCircumstanceLock&apos;" RunLogic="KeepRunning">
																								<Sequence>
																									<Expression expressions="$automation_offense = true" />
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Sequence>
																							</ExternalLock>
																						</EntityContextBarrier>
																					</Sequence>
																				</Loop>
																				<Loop count="-1">
																					<Sequence>
																						<EntityContextCheck context="combat_disableCombatMovement" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$automation_movement = false" />
																							</Then>
																							<Else canSkip="1">
																								<IfElseCondition failOnCondition="false" condition="$defenceModeEnabled" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$automation_movement = false" />
																									</Then>
																									<Else canSkip="1">
																										<IsFastForwarded failOnCondition="false" saveVersion="2">
																											<Then canSkip="1">
																												<Expression expressions="$automation_movement = true" />
																											</Then>
																											<Else canSkip="1">
																												<ExecuteLua code="data.automation_movement = not player.soul:IsInTenseCircumstance()" />
																											</Else>
																										</IsFastForwarded>
																									</Else>
																								</IfElseCondition>
																							</Else>
																						</EntityContextCheck>
																						<EntityContextBarrier context="combat_disableCombatMovement" target="" Negation="true" RunLogic="Halt">
																							<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;tenseCircumstanceLock&apos;" RunLogic="KeepRunning">
																								<Sequence>
																									<Expression expressions="$automation_movement = true" />
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Sequence>
																							</ExternalLock>
																						</EntityContextBarrier>
																					</Sequence>
																				</Loop>
																				<Loop count="-1">
																					<Sequence>
																						<EntityContextCheck context="combat_disableGuardAutomation" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$automation_guard = false" />
																							</Then>
																							<Else canSkip="1">
																								<IsFastForwarded failOnCondition="false" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$automation_guard = true" />
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$automation_guard = false" />
																									</Else>
																								</IsFastForwarded>
																							</Else>
																						</EntityContextCheck>
																						<EntityContextBarrier context="combat_disableGuardAutomation" target="" Negation="true" RunLogic="Halt">
																							<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;tenseCircumstanceLock&apos;" RunLogic="KeepRunning">
																								<Sequence>
																									<Expression expressions="$automation_guard = true" />
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Sequence>
																							</ExternalLock>
																						</EntityContextBarrier>
																					</Sequence>
																				</Loop>
																				<Loop count="-1">
																					<Sequence>
																						<EntityContextCheck context="combat_disableMeleeDefenseAutomation" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$automation_defense = false" />
																							</Then>
																							<Else canSkip="1">
																								<IsFastForwarded failOnCondition="false" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$automation_defense = true" />
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$automation_defense = false" />
																									</Else>
																								</IsFastForwarded>
																							</Else>
																						</EntityContextCheck>
																						<EntityContextBarrier context="combat_disableMeleeDefenseAutomation" target="" Negation="true" RunLogic="Halt">
																							<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;tenseCircumstanceLock&apos;" RunLogic="KeepRunning">
																								<Sequence>
																									<Expression expressions="$automation_defense = true" />
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</Sequence>
																							</ExternalLock>
																						</EntityContextBarrier>
																					</Sequence>
																				</Loop>
																				<Loop count="-1">
																					<Sequence>
																						<EntityContextCheck context="combat_forceOversized" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$weaponChange = $enum:weaponChange.oversized" />
																							</Then>
																							<Else canSkip="1">
																								<EntityContextCheck context="combat_forceMelee" target="" saveVersion="2">
																									<Then canSkip="1">
																										<Expression expressions="$weaponChange = $enum:weaponChange.melee" />
																									</Then>
																									<Else canSkip="1">
																										<Expression expressions="$weaponChange = $enum:weaponChange.none" />
																									</Else>
																								</EntityContextCheck>
																							</Else>
																						</EntityContextCheck>
																						<EntityContextBarrier context="combat_forceMelee" target="" Negation="true" RunLogic="Halt">
																							<EntityContextBarrier context="combat_forceOversized" target="" Negation="true" RunLogic="Halt">
																								<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;tenseCircumstanceLock&apos;" RunLogic="KeepRunning">
																									<Sequence>
																										<Expression expressions="$weaponChange = $enum:weaponChange.none" />
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</Sequence>
																								</ExternalLock>
																							</EntityContextBarrier>
																						</EntityContextBarrier>
																					</Sequence>
																				</Loop>
																			</Parallel>
																			<Loop count="-1">
																				<IfElseCondition failOnCondition="false" condition="$initialInterferenceSet | &#10;( &#10; $attackData.defenceMode &amp; &#10; ~$stopDefenceMode &#10;)" saveVersion="2">
																					<Then canSkip="1">
																						<IfGate atomic="false" condition="$attackData.defenceMode &amp; &#10;~$stopDefenceMode" RunLogic="Halt">
																							<EntityContext context="combat_suppressInterference" target="$this.id">
																								<EntityContext context="combat_defenceMode" target="$this.id">
																									<EntityContext context="combat_disableOffenseAutomation" target="">
																										<EntityContext context="combat_disableCombatMovement" target="">
																											<Sequence>
																												<Expression expressions="$initialInterferenceSet = true" />
																												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																											</Sequence>
																										</EntityContext>
																									</EntityContext>
																								</EntityContext>
																							</EntityContext>
																						</IfGate>
																					</Then>
																					<Else canSkip="1">
																						<Expression expressions="$initialInterferenceSet = true" />
																					</Else>
																				</IfElseCondition>
																			</Loop>
																			<Loop count="-1">
																				<IfGate atomic="false" condition="$playerInSkirmishNow |  &#10;$attackPlayer |  &#10;($attackData.target == $__player &amp; $myTarget == $__null) // for icon" RunLogic="Halt">
																					<Parallel successMode="Any" failureMode="Any">
																						<EntityContext context="crime_escalationLevel_script_confrontingGeneral_player" target="$__player">
																							<GameContext context="crime_escalationLevel_script_global_confrontingGeneral">
																								<EntityContext context="crime_escalationLevel_script_confrontingGeneral" target="">
																									<EntityContextElement context="crime_escalationLevel_script_confrontingGeneral" enabled="true">
																										<EntityContext context="combat_forceIconCombatDanger" target="">
																											<EntityContextElement context="combat_forceIconCombatDanger" enabled="true">
																												<EntityContext context="crime_escalationLevel_setFromBehavior_attack" target="">
																													<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																														<Then canSkip="1">
																															<Loop count="-1">
																																<IfGate atomic="false" condition="$initialInterferenceSet &amp; $attackState ~= $enum:crime_interruptAttackState.fightIsDone" RunLogic="Halt">
																																	<EntityContextBarrier context="combat_defenceMode" target="$this.id" Negation="true" RunLogic="Halt">
																																		<EntityContext context="crime_playerUnderArrestByAuthority" target="$this.id">
																																			<Sequence>
																																				<ShowTutorial Name="crime_arrest" />
																																				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																			</Sequence>
																																		</EntityContext>
																																	</EntityContextBarrier>
																																</IfGate>
																															</Loop>
																														</Then>
																														<Else canSkip="1">
																															<Loop count="-1">
																																<IfGate atomic="false" condition="$initialInterferenceSet &amp; $attackState ~= $enum:crime_interruptAttackState.fightIsDone" RunLogic="Halt">
																																	<EntityContextBarrier context="combat_defenceMode" target="$this.id" Negation="true" RunLogic="Halt">
																																		<Sequence>
																																			<ShowTutorial Name="crime_arrest" />
																																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																		</Sequence>
																																	</EntityContextBarrier>
																																</IfGate>
																															</Loop>
																														</Else>
																													</EntityContextCheck>
																												</EntityContext>
																											</EntityContextElement>
																										</EntityContext>
																									</EntityContextElement>
																								</EntityContext>
																							</GameContext>
																						</EntityContext>
																						<EntityContextCheck context="combat_fightInQuestSkirmish" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Then>
																							<Else canSkip="1">
																								<Sequence>
																									<EntityContextCheck context="crime_isAuthority" target="$this.id" saveVersion="2">
																										<Then canSkip="1">
																											<PlayersCrimeInformationKnown Npc="$this.id" OnlyRelated="false" PlayersCrimeInformationKnown="$knownPlayersCrime" />
																										</Then>
																										<Else canSkip="1">
																											<PlayersCrimeInformationKnown Npc="$this.id" OnlyRelated="true" PlayersCrimeInformationKnown="$knownPlayersCrime" />
																										</Else>
																									</EntityContextCheck>
																									<IfElseCondition failOnCondition="false" condition="$knownPlayersCrime" saveVersion="2">
																										<Then canSkip="1">
																											<EntityContextCheck context="combat_leavePlayerUnconsciousAfterFight" target="" saveVersion="2">
																												<Then canSkip="1">
																													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																												</Then>
																												<Else canSkip="1">
																													<GameContextPreset preset="crime_suppressUnconsciousPlayerShenanigans">
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</GameContextPreset>
																												</Else>
																											</EntityContextCheck>
																										</Then>
																										<Else canSkip="1">
																											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																										</Else>
																									</IfElseCondition>
																								</Sequence>
																							</Else>
																						</EntityContextCheck>
																						<Function_crime_playerInstantRecognitionHandler nodeLabel="94695237" />
																					</Parallel>
																				</IfGate>
																			</Loop>
																			<Sequence>
																				<IsFastForwarded failOnCondition="false" saveVersion="2">
																					<Then canSkip="1">
																						<Success />
																					</Then>
																					<Else canSkip="1">
																						<IfGate atomic="false" condition="$initialInterferenceSet" RunLogic="KeepRunning">
																							<Success />
																						</IfGate>
																					</Else>
																				</IsFastForwarded>
																				<Sequence>
																					<IsUnconsciousCheck SoulWUID="$attackData.target" FailSubtMissing="false" saveVersion="2">
																						<Then canSkip="1">
																							<IfCondition failOnCondition="false" condition="$attackData.target ~= $__player &amp;  &#10;$attackData.initiatedBy ~= $enum:switch_interruptInitiator.concept">
																								<AddBuff SoulWUID="$attackData.target" BuffGUID="&apos;bd22f98a-e61f-4d83-b39c-79d1d85b6b91&apos;" />
																							</IfCondition>
																						</Then>
																					</IsUnconsciousCheck>
																					<IfCondition failOnCondition="false" condition="$attackState == $attackStateDefault">
																						<Function_crime_attack_getInitialAttackState attackData="$attackData" attackState="$attackState" nodeLabel="94532747" />
																					</IfCondition>
																					<IsIndifferent NPC="$this.id" saveVersion="2">
																						<Else canSkip="1">
																							<AffectFeelings Npc="$this.id" Token="&apos;combat_started&apos;" AffectNervousness="true" AffectReputation="false" />
																						</Else>
																					</IsIndifferent>
																					<IfCondition failOnCondition="false" condition="$attackData.information.label == &apos;murder&apos; | &#10;$attackData.information.label == &apos;murderByDog&apos; | &#10;$attackData.information.label == &apos;corpseViolation&apos;">
																						<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																							<Then canSkip="1">
																								<Function_crime_addCorpseLink corpse="$attackData.information.perceivedWuid" corpseState="$enum:corpseState.investigated" mateReacting="false" resolve="true" storeTime="false" nodeLabel="37120045" />
																							</Then>
																							<Else canSkip="1">
																								<Function_crime_addCorpseLink corpse="$attackData.information.perceivedWuid" corpseState="$enum:corpseState.discovered" mateReacting="false" resolve="true" storeTime="false" nodeLabel="15764260" />
																							</Else>
																						</EntityContextCheck>
																					</IfCondition>
																					<IsFastForwarded failOnCondition="false" saveVersion="2">
																						<Else canSkip="1">
																							<Function_crime_playStartleAnimation assaultData="$attackData.assaultData" crimeLevel="$crimeLevel" freshlyAttributedCrime="$attackData.freshlyAttributedCrime" information="$attackData.information" initiator="$attackData.initiatedBy" previousReaction="$attackData.previousReaction" reactionKind="$enum:crime_reactionKind.attack" shockSource="$attackData.target" source="$attackData.source" stimulusKind="$attackData.stimulusKind" nodeLabel="19716338" />
																						</Else>
																					</IsFastForwarded>
																					<Parallel successMode="Any" failureMode="Any">
																						<Sequence>
																							<SuppressFailure>
																								<EntityContextCheck context="crime_suppressFightStartBark" target="$this.id" saveVersion="2">
																									<Else canSkip="1">
																										<InstantSemaphore SemaphoreCount="1" LockManagerType="Global" SemaphoreName="&apos;startBarkInterruptAttack&apos;">
																											<Sequence>
																												<IsLoadedGate saveVersion="2">
																													<Else canSkip="1">
																														<Function_crime_attack_startBark attackData="$attackData" nodeLabel="56038360" />
																													</Else>
																												</IsLoadedGate>
																												<IfCondition failOnCondition="false" condition="~$attackData.defenceMode">
																													<IsLoadedGate saveVersion="2">
																														<Else canSkip="1">
																															<Function_crime_startBark_alarm nodeLabel="94494913" />
																														</Else>
																													</IsLoadedGate>
																												</IfCondition>
																												<Expression expressions="$emitAlarmInformation = $shouldEmitAlarmInformation" />
																												<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																											</Sequence>
																										</InstantSemaphore>
																									</Else>
																								</EntityContextCheck>
																							</SuppressFailure>
																							<Expression expressions="$emitAlarmInformation = $shouldEmitAlarmInformation" />
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Sequence>
																						<While doFail="false" propagateChildFail="false" condition="true">
																							<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cooperationNotification" senderInfo="$cooperationInitiator" inbox="&apos;crime_cooperationNotification&apos;" condition="" answerVar="">
																								<Switch>
																									<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.crimeResolved | &#10;$cooperationNotification == $enum:crime_cooperationNotification.informationTransformed">
																										<Selector>
																											<Sequence>
																												<CheckInformationKnowledge Information="$attackData.information" Holder="$this.id" />
																												<EntityContextCheck context="crime_isCamper" target="" saveVersion="2">
																													<Then canSkip="1">
																														<Expression expressions="$amICamperOrLoner = true" />
																													</Then>
																													<Else canSkip="1">
																														<EntityContextCheck context="crime_isLoner" target="" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$amICamperOrLoner = true" />
																															</Then>
																														</EntityContextCheck>
																													</Else>
																												</EntityContextCheck>
																												<IfCondition failOnCondition="false" condition="$amICamperOrLoner &amp; &#10;$attackData.information.label == &apos;motivation&apos;">
																													<Sequence>
																														<GetAreMates Npc1="$this.id" Npc2="$cooperationInitiator.id" AreMates="$cooperationInitiatorIsMyMate" />
																														<IfCondition failOnCondition="false" condition="$cooperationInitiatorIsMyMate">
																															<Fail />
																														</IfCondition>
																													</Sequence>
																												</IfCondition>
																											</Sequence>
																											<Sequence>
																												<ReinitVariable variable="$nextMostImportantInformation" />
																												<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																													<Then canSkip="1">
																														<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="false" MostImportantInformation="$nextMostImportantInformation" />
																													</Then>
																													<Else canSkip="1">
																														<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="true" MostImportantInformation="$nextMostImportantInformation" />
																													</Else>
																												</EntityContextCheck>
																												<IfElseCondition failOnCondition="false" condition="$nextMostImportantInformation.label == &apos;&apos;" saveVersion="2">
																													<Then canSkip="1">
																														<IfElseCondition failOnCondition="false" condition="$attackData.target == $__player" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																															</Then>
																															<Else canSkip="1">
																																<Success />
																															</Else>
																														</IfElseCondition>
																													</Then>
																													<Else canSkip="1">
																														<Sequence>
																															<Expression expressions="$attackData.information = $nextMostImportantInformation" />
																															<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $nextMostImportantInformation" />
																															<Expression expressions="$emitingInformation = $nextMostImportantInformation" />
																														</Sequence>
																													</Else>
																												</IfElseCondition>
																											</Sequence>
																										</Selector>
																									</IfCondition>
																									<DefaultBranch>
																										<Success />
																									</DefaultBranch>
																								</Switch>
																							</ProcessMessage>
																						</While>
																						<Loop count="-1">
																							<Sequence>
																								<Parallel successMode="Any" failureMode="Any">
																									<IfCondition failOnCondition="false" condition="$attackState == $enum:crime_interruptAttackState.attacking">
																										<Parallel successMode="Any" failureMode="Any">
																											<Sequence>
																												<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																													<Child canSkip="1">
																														<Sequence>
																															<Expression expressions="$automationRunning = true" />
																															<MoveParamsDecorator speed="Run" pathFindingParams="" doorClosingPolicy="LeaveOpened">
																																<MeleeOffenseAutomationDecorator active="$automation_offense">
																																	<MeleeDefenseAutomationDecorator active="$automation_defense">
																																		<MeleeGuardAutomationDecorator GuardMode="$guardMode" active="$automation_guard">
																																			<WeaponAutomationDecorator WeaponChange="$weaponChange" active="$automation_weapon">
																																				<CombatFollowerDecorator ProbablisticDrivenSweetSpot="true" RPGSweetSpotArcDriver="true" active="$automation_movement">
																																					<Sequence>
																																						<EntityContextCheck context="combat_fightInQuestSkirmish" target="" saveVersion="2">
																																							<Then canSkip="1">
																																								<Success />
																																							</Then>
																																							<Else canSkip="1">
																																								<IfCondition failOnCondition="false" condition="!$automation_movement">
																																									<StanceCheck soul="$this.id" stance="standing" smartObject="" negate="false" failOnCondition="false" saveVersion="2">
																																										<Then canSkip="1">
																																											<Sequence>
																																												<UrgencyDecorator Urgency="Fast">
																																													<WaitAction />
																																												</UrgencyDecorator>
																																												<StopMovement waitUntilStopped="true" />
																																											</Sequence>
																																										</Then>
																																										<Else canSkip="1">
																																											<Success />
																																										</Else>
																																									</StanceCheck>
																																								</IfCondition>
																																							</Else>
																																						</EntityContextCheck>
																																						<IfElseCondition failOnCondition="false" condition="$attackData.relationOverride" saveVersion="2">
																																							<Then canSkip="1">
																																								<CombatAction TargetNPC="$attackData.target" RelationOverride="Hostile" />
																																							</Then>
																																							<Else canSkip="1">
																																								<CombatAction TargetNPC="$attackData.target" RelationOverride="None" />
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</CombatFollowerDecorator>
																																			</WeaponAutomationDecorator>
																																		</MeleeGuardAutomationDecorator>
																																	</MeleeDefenseAutomationDecorator>
																																</MeleeOffenseAutomationDecorator>
																															</MoveParamsDecorator>
																														</Sequence>
																													</Child>
																													<OnFail canSkip="1">
																														<Expression expressions="$automationRunning = false" />
																													</OnFail>
																												</FuseBox>
																												<AtomicDecorator>
																													<IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
																														<Then canSkip="1">
																															<IfElseCondition failOnCondition="false" condition="$playerInSkirmishNow | $foughtAgainstPlayer" saveVersion="2">
																																<Then canSkip="1">
																																	<EntityContextCheck context="combat_ignorePlayerUnconsciousnessAfterSkirmish" target="" saveVersion="2">
																																		<Then canSkip="1">
																																			<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																																		</Then>
																																		<Else canSkip="1">
																																			<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerInUnconscious" />
																																		</Else>
																																	</EntityContextCheck>
																																</Then>
																																<Else canSkip="1">
																																	<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																																</Else>
																															</IfElseCondition>
																														</Then>
																														<Else canSkip="1">
																															<Sequence>
																																<IfElseCondition failOnCondition="false" condition="$attackPlayer" saveVersion="2">
																																	<Then canSkip="1">
																																		<Sequence>
																																			<Function_crime_getSearchDirectionTowardsPlayer startPos="$directionStartPos" direction="$searchDirection" nodeLabel="78024136" />
																																			<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="true" information_look="$attackData.information" initiator="$enum:switch_interruptInitiator.scheduler" missingNpc="$__null" position="" previousReaction="$enum:crime_reactionKind.attack" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="$searchDirection" searchPointsFromDirection="false" shooter="$__player" soundType="$enum:sound.movement" source="$enum:crime_source.direct" stimulusAnimalAbuse="" stimulusKind="$attackData.stimulusKind" nodeLabel="59606566" />
																																		</Sequence>
																																	</Then>
																																	<Else canSkip="1">
																																		<IfCondition failOnCondition="false" condition="$attackPlayerDog">
																																			<Sequence>
																																				<GetSpatialInfo In="$__player" Out="$lookAroundPos" What="Position" />
																																				<GetSpatialInfo In="$this.id" Out="$directionStartPos" What="Position" />
																																				<Expression expressions="$searchDirection.x = $lookAroundPos.x - $directionStartPos.x &#10;$searchDirection.y = $lookAroundPos.y - $directionStartPos.y &#10;$searchDirection.z = 0" />
																																				<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="true" information_look="$attackData.information" initiator="$enum:switch_interruptInitiator.scheduler" missingNpc="$__null" position="" previousReaction="$enum:crime_reactionKind.attack" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="$searchDirection" searchPointsFromDirection="false" shooter="$__player" soundType="$enum:sound.movement" source="$enum:crime_source.direct" stimulusAnimalAbuse="" stimulusKind="$attackData.stimulusKind" nodeLabel="67752721" />
																																			</Sequence>
																																		</IfCondition>
																																	</Else>
																																</IfElseCondition>
																																<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																															</Sequence>
																														</Else>
																													</IsUnconsciousCheck>
																												</AtomicDecorator>
																											</Sequence>
																											<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.attacking" RunLogic="Halt">
																												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																											</IfGate>
																										</Parallel>
																									</IfCondition>
																									<IfGate atomic="false" condition="$attackState ~= $enum:crime_interruptAttackState.attacking" RunLogic="KeepRunning">
																										<Success />
																									</IfGate>
																								</Parallel>
																								<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.attacking" RunLogic="Halt">
																									<Success />
																								</IfGate>
																							</Sequence>
																						</Loop>
																						<Sequence>
																							<OnTargetChange TargetFrom="None" TargetTo="Defined" WaitForNext="false" Combatants="Me" Who="" RunLogic="KeepRunning">
																								<AtomicDecorator>
																									<Sequence>
																										<GetTarget ReferenceNPC="$this.id" TargetVarOut="$myTarget" />
																										<Expression expressions="$attackPlayer = $myTarget == $__player" />
																										<IfCondition failOnCondition="false" condition="$attackPlayer &amp; ~$foughtAgainstPlayer">
																											<Expression expressions="$foughtAgainstPlayer = true" />
																										</IfCondition>
																									</Sequence>
																								</AtomicDecorator>
																							</OnTargetChange>
																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																						</Sequence>
																						<Loop count="-1">
																							<SuppressFailure>
																								<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.attacking" RunLogic="Halt">
																									<OnTargetChange TargetFrom="Any" TargetTo="Defined" WaitForNext="true" Combatants="Me" Who="" RunLogic="KeepRunning">
																										<AtomicDecorator>
																											<Sequence>
																												<GetTarget ReferenceNPC="$this.id" TargetVarOut="$myTarget" />
																												<Expression expressions="$attackPlayer = $myTarget == $__player" />
																												<Expression expressions="$attackPlayerDog = $myTarget == $__playerDog" />
																												<IfCondition failOnCondition="false" condition="$attackPlayer &amp; ~$foughtAgainstPlayer">
																													<Expression expressions="$foughtAgainstPlayer = true" />
																												</IfCondition>
																											</Sequence>
																										</AtomicDecorator>
																									</OnTargetChange>
																								</IfGate>
																							</SuppressFailure>
																						</Loop>
																						<Loop count="-1">
																							<SuppressFailure>
																								<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.attacking" RunLogic="Halt">
																									<IfGate atomic="false" condition="$myTarget ~= $__null &amp; $playerInSkirmishInitialValueSet" RunLogic="Halt">
																										<Sequence>
																											<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;tenseCircumstanceLock&apos;" />
																											<Parallel successMode="Any" failureMode="Any">
																												<Sequence>
																													<IfCondition failOnCondition="false" condition="~$playerInSkirmishNow &amp; ~$attackPlayer">
																														<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;tenseCircumstanceLock&apos;" />
																													</IfCondition>
																													<IfGate atomic="false" condition="$playerInSkirmishNow | $attackPlayer" RunLogic="Halt">
																														<SuppressFailure>
																															<TenseCircumstanceBarrier RunLogic="Halt">
																																<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																																	<Child canSkip="1">
																																		<Sequence>
																																			<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;tenseCircumstanceLock&apos;" />
																																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																		</Sequence>
																																	</Child>
																																	<OnFail canSkip="1">
																																		<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;tenseCircumstanceLock&apos;" />
																																	</OnFail>
																																</FuseBox>
																															</TenseCircumstanceBarrier>
																														</SuppressFailure>
																													</IfGate>
																												</Sequence>
																												<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;tenseCircumstanceLock&apos;" RunLogic="Halt">
																													<SubtreeDecorator saveVersion="2">
																														<Init canSkip="1">
																															<AddBuff SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" />
																														</Init>
																														<Subtree canSkip="1">
																															<Sequence>
																																<Function_crime_hasMeleeWeaponDrawn npc="$this.id" result="$meleeWeaponDrawn" nodeLabel="11605527" />
																																<IfElseCondition failOnCondition="false" condition="$meleeWeaponDrawn" saveVersion="2">
																																	<Then canSkip="1">
																																		<Expression expressions="$forceArmedCombatAgainstPlayer = true" />
																																	</Then>
																																	<Else canSkip="1">
																																		<EntityContextCheck context="combat_forceUnarmedWhileInUnarmedSkirmish" target="$this.id" saveVersion="2">
																																			<Then canSkip="1">
																																				<Sequence>
																																					<GetKnownInformations OutArray="$knownInformations" Holder="$this.id" />
																																					<ForEach startIndex="0" step="1" array="$knownInformations" iterator="" value="$knownInformations_value" break="">
																																						<Sequence>
																																							<IfCondition failOnCondition="false" condition="$knownInformations_value.label == &apos;assault&apos;">
																																								<Sequence>
																																									<LockDynamicInformationValues Information="$knownInformations_value">
																																										<GetDynamicInformationValue Information="$knownInformations_value" Tag="&apos;kind&apos;" Out="$assaultKind" />
																																									</LockDynamicInformationValues>
																																									<IfCondition failOnCondition="false" condition="$assaultKind == $enum:crime_attackKind.armed | $assaultKind == $enum:crime_attackKind.missile">
																																										<Expression expressions="$forceArmedCombatAgainstPlayer = true" />
																																									</IfCondition>
																																								</Sequence>
																																							</IfCondition>
																																							<IfCondition failOnCondition="false" condition="$knownInformations_value.label == &apos;murder&apos; | &#10;$knownInformations_value.label == &apos;murderByDog&apos;">
																																								<Expression expressions="$forceArmedCombatAgainstPlayer = true" />
																																							</IfCondition>
																																						</Sequence>
																																					</ForEach>
																																				</Sequence>
																																			</Then>
																																		</EntityContextCheck>
																																	</Else>
																																</IfElseCondition>
																																<IfCondition failOnCondition="false" condition="$attackData.defenceMode &amp; ~$stopDefenceMode">
																																	<Sequence>
																																		<Expression expressions="$playPostSkirmish = false" />
																																		<IfGate atomic="false" condition="~$stopDefenceMode" RunLogic="Halt">
																																			<Loop count="-1">
																																				<CallDecorator_combat_defenceMode>
																																					<Subtree canSkip="1">
																																						<Sequence>
																																							<ShowTutorial Name="crime_defenseMode" />
																																							<Function_combat_defenceMode assaultData="$attackData.assaultData" myTarget="$myTarget" nodeLabel="95096533" />
																																						</Sequence>
																																					</Subtree>
																																					<Escalate canSkip="1">
																																						<CallbackEventCatch_empty>
																																							<Sequence>
																																								<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="false" MostImportantInformation="$nextMostImportantInformation" />
																																								<IfCondition failOnCondition="false" condition="$nextMostImportantInformation.label ~= &apos;&apos;">
																																									<Sequence>
																																										<Expression expressions="$attackData.information = $nextMostImportantInformation" />
																																										<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $nextMostImportantInformation" />
																																										<Expression expressions="$emitingInformation = $nextMostImportantInformation" />
																																									</Sequence>
																																								</IfCondition>
																																								<EntityContextCheck context="combat_fightInQuestSkirmish" target="" saveVersion="2">
																																									<Then canSkip="1">
																																										<IsIndifferent NPC="$this.id" saveVersion="2">
																																											<Then canSkip="1">
																																												<Success />
																																											</Then>
																																											<Else canSkip="1">
																																												<Expression expressions="$shouldEmitAlarmInformation = true" />
																																											</Else>
																																										</IsIndifferent>
																																									</Then>
																																									<Else canSkip="1">
																																										<Expression expressions="$shouldEmitAlarmInformation = true" />
																																									</Else>
																																								</EntityContextCheck>
																																								<Expression expressions="$stopDefenceMode = true &#10;$playPostSkirmish = true &#10;$defenceModeEnabled = false &#10;$guardMode = $enum:combatAutomationGuardMode.automate" />
																																							</Sequence>
																																						</CallbackEventCatch_empty>
																																					</Escalate>
																																					<CalmDown canSkip="1">
																																						<CallbackEventCatch_empty>
																																							<Sequence>
																																								<IfCondition failOnCondition="false" condition="$attackData.target == $__player">
																																									<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																										<Function_switch_handleAwareness_informations nodeLabel="75864179" />
																																									</EntityContext>
																																								</IfCondition>
																																								<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_SE_UKLIDNUJE_PO_DEFENCE_MODU&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="81256617" />
																																								<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone &#10;$disableVictoryBark = true" />
																																							</Sequence>
																																						</CallbackEventCatch_empty>
																																					</CalmDown>
																																				</CallDecorator_combat_defenceMode>
																																			</Loop>
																																		</IfGate>
																																	</Sequence>
																																</IfCondition>
																																<Parallel successMode="Any" failureMode="Any">
																																	<ContinuousSwitch>
																																		<IfCondition failOnCondition="false" condition="~$forceArmedCombatAgainstPlayer &amp; $playerInSkirmishNow">
																																			<EntityContextCheck context="combat_forceUnarmedWhileInUnarmedSkirmish" target="$this.id" saveVersion="2">
																																				<Then canSkip="1">
																																					<Sequence>
																																						<Function_crime_waitForWeaponChange npc="$__player" succeedOnArmed="true" nodeLabel="98516933" />
																																						<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_JE_V_COMBATU_UNARMED_A_ROZHODLO_SE_TASIT_(HRAC_TASI)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="17214507" />
																																						<Expression expressions="$forceArmedCombatAgainstPlayer = true" />
																																					</Sequence>
																																				</Then>
																																				<Else canSkip="1">
																																					<Parallel successMode="Any" failureMode="Any">
																																						<EntityContextCheck context="combat_forceUnarmedWhileInUnarmedSkirmishAndHealthy" target="$this.id" saveVersion="2">
																																							<Then canSkip="1">
																																								<NPCStateGate State="Health" Target="" Low="30.000000" High="30.000000" Negation="false" RunLogic="KeepRunning">
																																									<Sequence>
																																										<Function_combat_fleeOnDrawnWeapon attackData="$attackData" nodeLabel="88170536" />
																																										<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_JE_V_COMBATU_UNARMED_A_ROZHODLO_SE_TASIT_(NPC_LOW_HP)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="32427384" />
																																										<Expression expressions="$forceArmedCombatAgainstPlayer = true" />
																																									</Sequence>
																																								</NPCStateGate>
																																							</Then>
																																							<Else canSkip="1">
																																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																							</Else>
																																						</EntityContextCheck>
																																						<Sequence>
																																							<Function_crime_waitForWeaponChange npc="$__player" succeedOnArmed="true" nodeLabel="64356763" />
																																							<Function_combat_fleeOnDrawnWeapon attackData="$attackData" nodeLabel="32592354" />
																																							<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_JE_V_COMBATU_UNARMED_A_ROZHODLO_SE_TASIT_(HRAC_TASI)&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="72811807" />
																																							<Expression expressions="$forceArmedCombatAgainstPlayer = true" />
																																						</Sequence>
																																					</Parallel>
																																				</Else>
																																			</EntityContextCheck>
																																		</IfCondition>
																																		<IfCondition failOnCondition="false" condition="true">
																																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																		</IfCondition>
																																	</ContinuousSwitch>
																																	<EntityContextCheck context="crime_suppressForcedUncertain" target="" saveVersion="2">
																																		<Then canSkip="1">
																																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																		</Then>
																																		<Else canSkip="1">
																																			<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
																																				<Then canSkip="1">
																																					<Parallel successMode="Any" failureMode="Any">
																																						<While doFail="false" propagateChildFail="false" condition="true">
																																							<IsInsideAreaWithLabelBarrier Who="$this.id" Label="&apos;crime_publicEnemiesRepulsionZone&apos;" Negation="false" RunLogic="Halt">
																																								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																																									<Child canSkip="1">
																																										<Sequence>
																																											<Expression expressions="$forceUncertainArea = true" />
																																											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																										</Sequence>
																																									</Child>
																																									<OnSuccess canSkip="1">
																																										<Expression expressions="$forceUncertainArea = false" />
																																									</OnSuccess>
																																								</FuseBox>
																																							</IsInsideAreaWithLabelBarrier>
																																						</While>
																																						<ContinuousSwitch>
																																							<IfCondition failOnCondition="false" condition="$forceUncertainArea">
																																								<MovementAutomation ForceUncertain="true" />
																																							</IfCondition>
																																							<IfCondition failOnCondition="false" condition="true">
																																								<MovementAutomation ForceUncertain="false" />
																																							</IfCondition>
																																						</ContinuousSwitch>
																																					</Parallel>
																																				</Then>
																																				<Else canSkip="1">
																																					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																				</Else>
																																			</IsPublicEnemy>
																																		</Else>
																																	</EntityContextCheck>
																																	<Function_crime_emitInformation crimeInformation="$emitingInformation" emitCrimeInformation="true" longDistanceModeEnabled="$const_false" reactionKind="$enum:crime_reactionKind.attack" emitAlarmInformation="$emitAlarmInformation" nodeLabel="73571957" />
																																	<CallDecorator_crime_sharePlayersPosition>
																																		<Subtree canSkip="1">
																																			<Function_crime_sharePlayersLastSeenPosition allowedAssistance="$enum:crime_allowedSharePlayerPosAssistance.none" requestVisualAssistanceFromOthers="true" direction="$playerDirection" position="$playerPosition" nodeLabel="90301115" />
																																		</Subtree>
																																		<PositionUpdatedFromOtherNpc canSkip="1">
																																			<CallbackEventCatch_empty>
																																				<Success />
																																			</CallbackEventCatch_empty>
																																		</PositionUpdatedFromOtherNpc>
																																		<PlayerFound canSkip="1">
																																			<CallbackEventCatch_empty>
																																				<Expression expressions="$lockOnFromSharedPerception = true" />
																																			</CallbackEventCatch_empty>
																																		</PlayerFound>
																																		<PointingStart canSkip="1">
																																			<CallbackEventCatch_empty>
																																				<Success />
																																			</CallbackEventCatch_empty>
																																		</PointingStart>
																																		<PointingEnd canSkip="1">
																																			<CallbackEventCatch_empty>
																																				<Success />
																																			</CallbackEventCatch_empty>
																																		</PointingEnd>
																																	</CallDecorator_crime_sharePlayersPosition>
																																	<Function_crime_estimatePlayersPosition estimatePlayersPosition="$attackPlayer" estimationStartPos="$directionStartPos" positionShared="$lockOnFromSharedPerception" nodeLabel="88059287" />
																																</Parallel>
																															</Sequence>
																														</Subtree>
																														<Cleanup canSkip="1">
																															<RemoveBuffs SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" BuffTagId="-1" />
																														</Cleanup>
																													</SubtreeDecorator>
																												</ExternalLock>
																											</Parallel>
																											<IsFastTraveling saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																												</Then>
																												<Else canSkip="1">
																													<Success />
																												</Else>
																											</IsFastTraveling>
																										</Sequence>
																									</IfGate>
																								</IfGate>
																							</SuppressFailure>
																						</Loop>
																						<Loop count="-1">
																							<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$changeAttackState" senderInfo="" inbox="&apos;crime_playerIsSurrendering&apos;" condition="" answerVar="">
																								<Expression expressions="$attackState = $changeAttackState &#10;$playPostSkirmish = false" />
																							</ProcessMessage>
																						</Loop>
																						<Loop count="-1">
																							<Sequence>
																								<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="false" RunLogic="Halt">
																									<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="3.000000" High="3.000000" Negation="false" OpenInMiddle="false" RunLogic="Halt">
																										<IfCondition failOnCondition="false" condition="$attackPlayer">
																											<HasPerceivableState PerceivableState="&apos;lockpick&apos;" PerceivedWUID="$__player" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
																												<Then canSkip="1">
																													<StopMinigame type="LockPicking" NPC="$__player" object="" typeOut="" FailStop="false" />
																												</Then>
																												<Else canSkip="1">
																													<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
																												</Else>
																											</HasPerceivableState>
																										</IfCondition>
																									</DistanceGate>
																								</ActorStateBarrier>
																								<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
																							</Sequence>
																						</Loop>
																						<Loop count="-1">
																							<Sequence>
																								<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.attacking" RunLogic="Halt">
																									<Success />
																								</IfGate>
																								<While doFail="false" propagateChildFail="false" condition="$attackState == $enum:crime_interruptAttackState.attacking">
																									<EntityContext context="combat_ableToReceiveSurrenderMessage" target="">
																										<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																											<Child canSkip="1">
																												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$surrenderChatResult" senderInfo="" inbox="&apos;crime_playerSurrenderChatFeedback&apos;" condition="" answerVar="">
																													<LogToLabel Name="&apos;DEBUG&apos;" Wuid="$this.id" Message="&apos;--&gt; PROCESSING SURRENDER MESSAGE &lt;--&apos;">
																														<EntityContext context="crime_processingSurrenderChat" target="">
																															<CallDecorator_surrenderStatement>
																																<Subtree canSkip="1">
																																	<Function_crime_getSurrenderStatement attackData="$attackData" surrenderChatResult="$surrenderChatResult" attackState="$attackState" finalSkirmishParticipants="$friendlySkirmishParticipants" surrenderStatement="$surrenderStatement" nodeLabel="51999415" />
																																</Subtree>
																																<surrenderRejectedContext canSkip="1">
																																	<CallbackEventCatch_empty>
																																		<Sequence>
																																			<ShowTutorial Name="crime_surrenderCooldown" />
																																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_NEAKCEPTUJE_HRACOVO_VZDAVANI_NEVZDAVACI_KONTEXT&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="80426631" />
																																		</Sequence>
																																	</CallbackEventCatch_empty>
																																</surrenderRejectedContext>
																																<solvedByAuthority canSkip="1">
																																	<CallbackEventCatch_passParticipants>
																																		<Parallel successMode="Any" failureMode="Any">
																																			<Function_crime_managePlayerUrging canUrge="$canUrge" priority="$urgingPriority" nodeLabel="37685576" />
																																			<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																				<FaderBarrier Fader="&apos;crimeDialog&apos;" MuteSounds="false">
																																					<Sequence>
																																						<NotifyPlayerSurrender />
																																						<Function_crime_getResolutionDialogIntroKind crimeSeen="false" currentInterrupt="$enum:crime_reactionKind.attack" postResolveSubscribers="$skirmishParticipantsToSendMessage" previousReaction="$attackData.previousReaction" repeatedSurrender="$surrenderingRepeatedly" stimulusKind="$attackData.stimulusKind" resolutionDialogIntroKind="$resolutionDialogIntroKind" nodeLabel="14301523" />
																																						<Expression expressions="$resolveData.stimulusKind = $attackData.stimulusKind &#10;$resolveData.previousReaction = $enum:crime_reactionKind.attack &#10;$resolveData.initiatedBy = $enum:switch_interruptInitiator.scheduler &#10;$resolveData.information = $attackData.information &#10;$resolveData.resolutionDialogIntroKind = $resolutionDialogIntroKind &#10;$attackState = $enum:crime_interruptAttackState.playerIsSurrendering" />
																																						<EraseFromArray array="$skirmishParticipantsToSendMessage" condition="$__value == $this.id" />
																																						<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																							<SuppressFailure>
																																								<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																							</SuppressFailure>
																																						</IfCondition>
																																						<SuppressFailure>
																																							<UrgencyDecorator Urgency="Instant">
																																								<WaitAction />
																																							</UrgencyDecorator>
																																						</SuppressFailure>
																																						<Function_crime_resolveCrimeDialogue postresolveSubscribers="$skirmishParticipantsToSendMessage" resolveData="$resolveData" crimesResolved="$crimesResolved" punishmentChanged="$punishmentChanged" nodeLabel="18775413" />
																																						<IfElseCondition failOnCondition="false" condition="$crimesResolved" saveVersion="2">
																																							<Then canSkip="1">
																																								<Sequence>
																																									<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerSurrendered &#10;$playPostSkirmish = false &#10;$disableVictoryBark = true" />
																																									<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																										<SuppressFailure>
																																											<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																										</SuppressFailure>
																																									</IfCondition>
																																								</Sequence>
																																							</Then>
																																							<Else canSkip="1">
																																								<Sequence>
																																									<Expression expressions="$attackState = $enum:crime_interruptAttackState.attacking &#10; &#10;$surrenderingRepeatedly = true" />
																																									<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																										<SuppressFailure>
																																											<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																										</SuppressFailure>
																																									</IfCondition>
																																								</Sequence>
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</FaderBarrier>
																																			</IfGate>
																																		</Parallel>
																																	</CallbackEventCatch_passParticipants>
																																</solvedByAuthority>
																																<solvedBySelfHelper canSkip="1">
																																	<CallbackEventCatch_passParticipants>
																																		<Parallel successMode="Any" failureMode="Any">
																																			<Function_crime_managePlayerUrging canUrge="$canUrge" priority="$urgingPriority" nodeLabel="95322878" />
																																			<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																				<FaderBarrier Fader="&apos;crimeDialog&apos;" MuteSounds="false">
																																					<Sequence>
																																						<NotifyPlayerSurrender />
																																						<Expression expressions="$selfhelp_resolveData.stimulusKind = $attackData.stimulusKind &#10;$selfhelp_resolveData.previousReaction = $enum:crime_reactionKind.attack &#10;$selfhelp_resolveData.initiatedBy = $enum:switch_interruptInitiator.scheduler &#10;$selfhelp_resolveData.information = $attackData.information &#10;$attackState = $enum:crime_interruptAttackState.playerIsSurrendering" />
																																						<SuppressFailure>
																																							<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																						</SuppressFailure>
																																						<SuppressFailure>
																																							<UrgencyDecorator Urgency="Instant">
																																								<WaitAction />
																																							</UrgencyDecorator>
																																						</SuppressFailure>
																																						<Function_crime_selfhelp_resolveCrimeDialogue postresolveSubscribers="$skirmishParticipantsToSendMessage" selfhelp_resolveData="$selfhelp_resolveData" crimesResolved="$crimesResolved" nodeLabel="37513710" />
																																						<IfElseCondition failOnCondition="false" condition="$crimesResolved" saveVersion="2">
																																							<Then canSkip="1">
																																								<Sequence>
																																									<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerSurrendered &#10;$playPostSkirmish = false &#10;$disableVictoryBark = true" />
																																									<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																										<SuppressFailure>
																																											<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																										</SuppressFailure>
																																									</IfCondition>
																																								</Sequence>
																																							</Then>
																																							<Else canSkip="1">
																																								<Sequence>
																																									<Expression expressions="$attackState = $enum:crime_interruptAttackState.attacking" />
																																									<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																										<SuppressFailure>
																																											<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																										</SuppressFailure>
																																									</IfCondition>
																																								</Sequence>
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</FaderBarrier>
																																			</IfGate>
																																		</Parallel>
																																	</CallbackEventCatch_passParticipants>
																																</solvedBySelfHelper>
																																<surrenderRejected canSkip="1">
																																	<CallbackEventCatch_empty>
																																		<Sequence>
																																			<ShowTutorial Name="crime_surrenderCooldown" />
																																			<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_NEAKCEPTUJE_HRACOVO_VZDAVANI&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="99139108" />
																																		</Sequence>
																																	</CallbackEventCatch_empty>
																																</surrenderRejected>
																																<noInformation canSkip="1">
																																	<CallbackEventCatch_passParticipants>
																																		<Sequence>
																																			<NotifyPlayerSurrender />
																																			<SendAIConceptSignal_skirmish_playerSurrendered fightStopped="false" />
																																			<AtomicDecorator>
																																				<Sequence>
																																					<Function_crime_reconcileAfterResolve reconcileParticipants="$skirmishParticipantsToSendMessage" nodeLabel="56044897" />
																																					<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerIsSurrendering" />
																																					<EraseFromArray array="$skirmishParticipantsToSendMessage" condition="$__value == $this.id" />
																																					<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																						<SuppressFailure>
																																							<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																						</SuppressFailure>
																																					</IfCondition>
																																				</Sequence>
																																			</AtomicDecorator>
																																			<Sequence>
																																				<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																																					<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																																					<LinkTagFilter tag="&apos;crime_npcCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																																					<Datalyzer Tag="&apos;crime_npcCooldowns&apos;" Quantifiers="Exists" Parent="" Child="" Data="$npcCooldowns" saveVersion="2" />
																																				</GraphSearch>
																																				<GetTime TimeType="GameTime" OutVar="$surrenderTimeNow" Delta="" />
																																				<Expression expressions="$npcCooldowns.resolve_sucess.time = $surrenderTimeNow" />
																																				<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_npcCooldowns&apos;" Data="$npcCooldowns" LinkOpHandleMode="OverWrite" />
																																			</Sequence>
																																			<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$trespassReaction" ReactionSuppressed="$reactionSuppressed" />
																																			<IfCondition failOnCondition="false" condition="$trespassReaction">
																																				<Sequence>
																																					<IsBandit Npc="$this.id" IsBandit="$watchCampTrespass" />
																																					<IfElseCondition failOnCondition="false" condition="$watchCampTrespass" saveVersion="2">
																																						<Then canSkip="1">
																																							<Function_callInterrupt_watchCampTrespass ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" postSurrender="true" previousReaction="$enum:crime_reactionKind.attack" nodeLabel="84386081" />
																																						</Then>
																																						<Else canSkip="1">
																																							<Function_callInterrupt_watchTrespass ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" onlyWaitingForDeparture="true" previousReaction="$enum:crime_reactionKind.attack" nodeLabel="40108194" />
																																						</Else>
																																					</IfElseCondition>
																																				</Sequence>
																																			</IfCondition>
																																			<AtomicDecorator>
																																				<Sequence>
																																					<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerSurrendered" />
																																					<SuppressFailure>
																																						<Sequence>
																																							<Function_crime_updatePostResolveSubscribers postResolveSubscribers="$skirmishParticipantsToSendMessage" nodeLabel="99141833" />
																																							<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																								<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																							</IfCondition>
																																						</Sequence>
																																					</SuppressFailure>
																																				</Sequence>
																																			</AtomicDecorator>
																																		</Sequence>
																																	</CallbackEventCatch_passParticipants>
																																</noInformation>
																																<solvedByQuest canSkip="1">
																																	<CallbackEventCatch_passParticipants>
																																		<Sequence>
																																			<NotifyPlayerSurrender />
																																			<SendAIConceptSignal_skirmish_playerSurrendered fightStopped="false" />
																																			<SuppressFailure>
																																				<UrgencyDecorator Urgency="Instant">
																																					<WaitAction />
																																				</UrgencyDecorator>
																																			</SuppressFailure>
																																			<AtomicDecorator>
																																				<Sequence>
																																					<Function_crime_reconcileAfterResolve reconcileParticipants="$skirmishParticipantsToSendMessage" nodeLabel="92169278" />
																																					<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerIsSurrendering" />
																																					<EraseFromArray array="$skirmishParticipantsToSendMessage" condition="$__value == $this.id" />
																																					<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																						<SuppressFailure>
																																							<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																						</SuppressFailure>
																																					</IfCondition>
																																				</Sequence>
																																			</AtomicDecorator>
																																			<AtomicDecorator>
																																				<Sequence>
																																					<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerSurrendered &#10;$disableVictoryBark = true" />
																																					<SuppressFailure>
																																						<Sequence>
																																							<Function_crime_updatePostResolveSubscribers postResolveSubscribers="$skirmishParticipantsToSendMessage" nodeLabel="70560642" />
																																							<IfCondition failOnCondition="false" condition="#skirmishParticipantsToSendMessage &gt; 0">
																																								<InstantMultiSendMessageToNPC targets="$skirmishParticipantsToSendMessage" successMode="Any" failureMode="Any" variable="$attackState" />
																																							</IfCondition>
																																						</Sequence>
																																					</SuppressFailure>
																																				</Sequence>
																																			</AtomicDecorator>
																																		</Sequence>
																																	</CallbackEventCatch_passParticipants>
																																</solvedByQuest>
																																<passToResponsibleNpc canSkip="1">
																																	<CallbackEventCatch_passToResponsibleNpc>
																																		<Sequence>
																																			<Expression expressions="$surrenderChatResult.force = true" />
																																			<InstantSendMessageToNPC target="$responsibleNpc" variable="$surrenderChatResult" />
																																		</Sequence>
																																	</CallbackEventCatch_passToResponsibleNpc>
																																</passToResponsibleNpc>
																																<threeWaySkirmish canSkip="1">
																																	<CallbackEventCatch_empty>
																																		<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_NEAKCEPTUJE_HRACOVO_VZDAVANI_TRETI_STRANA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="67637536" />
																																	</CallbackEventCatch_empty>
																																</threeWaySkirmish>
																																<knownMurderedFriend canSkip="1">
																																	<CallbackEventCatch_empty>
																																		<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="true" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_NEAKCEPTUJE_HRACOVO_VZDAVANI_VRAZDA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="39493048" />
																																	</CallbackEventCatch_empty>
																																</knownMurderedFriend>
																															</CallDecorator_surrenderStatement>
																														</EntityContext>
																													</LogToLabel>
																												</ProcessMessage>
																											</Child>
																											<OnFail canSkip="1">
																												<ClearInbox inbox="&apos;crime_playerSurrenderChatFeedback&apos;" type="" condition="" />
																											</OnFail>
																										</FuseBox>
																									</EntityContext>
																								</While>
																							</Sequence>
																						</Loop>
																						<Loop count="-1">
																							<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_surrenderingMaxDistance&apos;].value" High="$data:script_param[&apos;crime_surrenderingMaxDistance&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="Halt">
																								<EntityContextBarrier context="combat_defenceMode" target="" Negation="true" RunLogic="Halt">
																									<GameContext context="combat_playerSurrenderDistanceCondition">
																										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																									</GameContext>
																								</EntityContextBarrier>
																							</DistanceGate>
																						</Loop>
																						<Loop count="-1">
																							<EntityContextBarrier context="crime_forbidTorchDuringAttack" target="$this.id" Negation="false" RunLogic="Halt">
																								<EntityContext context="ForceForbidAutoTorch" target="">
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</EntityContext>
																							</EntityContextBarrier>
																						</Loop>
																						<Loop count="-1">
																							<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.playerSurrendered" RunLogic="KeepRunning">
																								<Sequence>
																									<SendAIConceptSignal_skirmish_playerSurrendered fightStopped="false" />
																									<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																								</Sequence>
																							</IfGate>
																						</Loop>
																						<Loop count="-1">
																							<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.playerIsSurrendering" RunLogic="Halt">
																								<SubtreeDecorator saveVersion="2">
																									<Init canSkip="1">
																										<AddLink From="$__player" To="$this.id" Tag="&apos;combat_playerSurrenderSubscriber&apos;" Data="" LinkOpHandleMode="Success" />
																									</Init>
																									<Subtree canSkip="1">
																										<Sequence>
																											<EntityContextCheck context="crime_processingSurrenderChat" target="" saveVersion="2">
																												<Else canSkip="1">
																													<UrgencyDecorator Urgency="Instant">
																														<WaitAction />
																													</UrgencyDecorator>
																												</Else>
																											</EntityContextCheck>
																											<Expression expressions="$disableVictoryBark = true" />
																											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																										</Sequence>
																									</Subtree>
																									<Cleanup canSkip="1">
																										<RemoveLink From="$__player" To="$this.id" Tag="&apos;combat_playerSurrenderSubscriber&apos;" LinkOpHandleMode="Error" />
																									</Cleanup>
																								</SubtreeDecorator>
																							</IfGate>
																						</Loop>
																						<Loop count="-1">
																							<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.playerInUnconscious" RunLogic="KeepRunning">
																								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																									<Child canSkip="1">
																										<Sequence>
																											<AtomicDecorator>
																												<Sequence>
																													<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																														<LinkTagFilter tag="&apos;crime_solveAfterUnsconscious&apos;" prune="true" negprune="unknown" Parent="" Child="$npcToSolvePlayerAfterUnsconscious" Data="" />
																													</GraphSearch>
																													<IfElseCondition failOnCondition="false" condition="$npcToSolvePlayerAfterUnsconscious == $__null" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<CircularSpatialQuery Radius="20.000000" Center="$this.id" ToFill="$npcsAround" Precision="Exact" Filter="LivingHumanNPCsPlayerExcluded" />
																																<EraseFromArray array="$npcsAround" condition="$__value == $__player" />
																																<ForEach startIndex="0" step="1" array="$npcsAround" iterator="" value="$npcsAround_value" break="$npcToSolvePlayerAfterUnsconsciousFound">
																																	<EntityContextCheck context="crime_interruptAttack" target="$npcsAround_value" saveVersion="2">
																																		<Then canSkip="1">
																																			<Sequence>
																																				<EntityContextCheck context="combat_neverAcceptSurrender" target="$npcsAround_value" saveVersion="2">
																																					<Then canSkip="1">
																																						<EntityContextCheck context="crime_preventKillingUnconsciousHostilePlayer" target="$npcsAround_value" saveVersion="2">
																																							<Else canSkip="1">
																																								<GameOver Reason="DiedWhileUnconscious" />
																																							</Else>
																																						</EntityContextCheck>
																																					</Then>
																																				</EntityContextCheck>
																																				<EntityContextCheck context="crime_isAuthority" target="$npcsAround_value" saveVersion="2">
																																					<Then canSkip="1">
																																						<Expression expressions="$npcToSolvePlayerAfterUnsconscious = $npcsAround_value &#10;$npcToSolvePlayerAfterUnsconsciousFound = true" />
																																					</Then>
																																				</EntityContextCheck>
																																				<PushToArray array="$interruptAttackParticipants" value="$npcsAround_value" direction="Back" />
																																			</Sequence>
																																		</Then>
																																	</EntityContextCheck>
																																</ForEach>
																																<IfCondition failOnCondition="false" condition="~$npcToSolvePlayerAfterUnsconsciousFound">
																																	<GetHighestStatusNpc Npcs="$interruptAttackParticipants" HighestStatusNpc="$npcToSolvePlayerAfterUnsconscious" />
																																</IfCondition>
																																<ReinitVariable variable="$interruptAttackParticipants" />
																																<AddLink From="$__player" To="$npcToSolvePlayerAfterUnsconscious" Tag="&apos;crime_solveAfterUnsconscious&apos;" Data="" LinkOpHandleMode="Error" />
																															</Sequence>
																														</Then>
																													</IfElseCondition>
																												</Sequence>
																											</AtomicDecorator>
																											<IfElseCondition failOnCondition="false" condition="$npcToSolvePlayerAfterUnsconscious == $this.id" saveVersion="2">
																												<Then canSkip="1">
																													<Sequence>
																														<Function_getNpcsAroundWithContextInterruptAttack reference="$this.id" finalNpcs="$interruptAttackParticipants" nodeLabel="21293302" />
																														<Function_spreadInformationWithinFriends NPCs="$interruptAttackParticipants" nodeLabel="81358214" />
																														<EntityContextCheck context="crime_isAuthority" target="$this.id" saveVersion="2">
																															<Then canSkip="1">
																																<PlayersCrimeInformationKnown Npc="$this.id" OnlyRelated="false" PlayersCrimeInformationKnown="$unconsciousPlayerInformationKnown" />
																															</Then>
																															<Else canSkip="1">
																																<PlayersCrimeInformationKnown Npc="$this.id" OnlyRelated="true" PlayersCrimeInformationKnown="$unconsciousPlayerInformationKnown" />
																															</Else>
																														</EntityContextCheck>
																														<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
																															<Then canSkip="1">
																																<EntityContextCheck context="crime_preventKillingUnconsciousHostilePlayer" target="" saveVersion="2">
																																	<Then canSkip="1">
																																		<IfElseCondition failOnCondition="false" condition="$unconsciousPlayerInformationKnown" saveVersion="2">
																																			<Then canSkip="1">
																																				<Sequence>
																																					<Expression expressions="$selfhelp_resolveData.stimulusKind = $attackData.stimulusKind &#10;$selfhelp_resolveData.previousReaction = $enum:crime_reactionKind.attack &#10;$selfhelp_resolveData.initiatedBy = $enum:switch_interruptInitiator.scheduler &#10;$selfhelp_resolveData.information = $attackData.information" />
																																					<Function_crime_selfhelp_resolveCrimeDialogue postresolveSubscribers="$interruptAttackParticipants" selfhelp_resolveData="$selfhelp_resolveData" crimesResolved="$crimesResolved" nodeLabel="70236565" />
																																				</Sequence>
																																			</Then>
																																			<Else canSkip="1">
																																				<Sequence>
																																					<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$trespassReaction" ReactionSuppressed="$reactionSuppressed" />
																																					<IfElseCondition failOnCondition="false" condition="$trespassReaction" saveVersion="2">
																																						<Then canSkip="1">
																																							<GameContextCheck context="crime_disabledThrowingOutUnconsciousPlayer" saveVersion="2">
																																								<Then canSkip="1">
																																									<Success />
																																								</Then>
																																								<Else canSkip="1">
																																									<Function_callInterrupt_throwOutUnconsciousPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.attack" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.trespass" nodeLabel="55010875" />
																																								</Else>
																																							</GameContextCheck>
																																						</Then>
																																						<Else canSkip="1">
																																							<Success />
																																						</Else>
																																					</IfElseCondition>
																																				</Sequence>
																																			</Else>
																																		</IfElseCondition>
																																	</Then>
																																	<Else canSkip="1">
																																		<GameOver Reason="DiedWhileUnconscious" />
																																	</Else>
																																</EntityContextCheck>
																															</Then>
																															<Else canSkip="1">
																																<IfElseCondition failOnCondition="false" condition="$unconsciousPlayerInformationKnown" saveVersion="2">
																																	<Then canSkip="1">
																																		<EntityContextCheck context="crime_isAuthority" target="$this.id" saveVersion="2">
																																			<Then canSkip="1">
																																				<Sequence>
																																					<Function_crime_getResolutionDialogIntroKind crimeSeen="false" currentInterrupt="$enum:crime_reactionKind.attack" postResolveSubscribers="$interruptAttackParticipants" previousReaction="$attackData.previousReaction" repeatedSurrender="$surrenderingRepeatedly" stimulusKind="$attackData.stimulusKind" resolutionDialogIntroKind="$resolutionDialogIntroKind" nodeLabel="22068637" />
																																					<Expression expressions="$resolveData.stimulusKind = $attackData.stimulusKind &#10;$resolveData.previousReaction = $enum:crime_reactionKind.attack &#10;$resolveData.initiatedBy = $enum:switch_interruptInitiator.scheduler &#10;$resolveData.information = $attackData.information &#10;$resolveData.resolutionDialogIntroKind = $resolutionDialogIntroKind" />
																																					<Function_crime_resolveCrimeDialogue postresolveSubscribers="$interruptAttackParticipants" resolveData="$resolveData" crimesResolved="$crimesResolved" punishmentChanged="$punishmentChanged" nodeLabel="63023772" />
																																				</Sequence>
																																			</Then>
																																			<Else canSkip="1">
																																				<Sequence>
																																					<Expression expressions="$selfhelp_resolveData.stimulusKind = $attackData.stimulusKind &#10;$selfhelp_resolveData.previousReaction = $enum:crime_reactionKind.attack &#10;$selfhelp_resolveData.initiatedBy = $enum:switch_interruptInitiator.scheduler &#10;$selfhelp_resolveData.information = $attackData.information" />
																																					<Function_crime_selfhelp_resolveCrimeDialogue postresolveSubscribers="$interruptAttackParticipants" selfhelp_resolveData="$selfhelp_resolveData" crimesResolved="$crimesResolved" nodeLabel="45912708" />
																																				</Sequence>
																																			</Else>
																																		</EntityContextCheck>
																																	</Then>
																																	<Else canSkip="1">
																																		<Sequence>
																																			<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$trespassReaction" ReactionSuppressed="$reactionSuppressed" />
																																			<IfElseCondition failOnCondition="false" condition="$trespassReaction" saveVersion="2">
																																				<Then canSkip="1">
																																					<GameContextCheck context="crime_disabledThrowingOutUnconsciousPlayer" saveVersion="2">
																																						<Then canSkip="1">
																																							<Success />
																																						</Then>
																																						<Else canSkip="1">
																																							<Function_callInterrupt_throwOutUnconsciousPlayer ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.attack" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.trespass" nodeLabel="10300481" />
																																						</Else>
																																					</GameContextCheck>
																																				</Then>
																																				<Else canSkip="1">
																																					<Success />
																																				</Else>
																																			</IfElseCondition>
																																		</Sequence>
																																	</Else>
																																</IfElseCondition>
																															</Else>
																														</IsPublicEnemy>
																														<IfElseCondition failOnCondition="false" condition="$crimesResolved | !$unconsciousPlayerInformationKnown" saveVersion="2">
																															<Then canSkip="1">
																																<Sequence>
																																	<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerSurrendered" />
																																	<IfCondition failOnCondition="false" condition="#interruptAttackParticipants &gt; 0">
																																		<SuppressFailure>
																																			<InstantMultiSendMessageToNPC targets="$interruptAttackParticipants" successMode="Any" failureMode="Any" variable="$attackState" />
																																		</SuppressFailure>
																																	</IfCondition>
																																</Sequence>
																															</Then>
																															<Else canSkip="1">
																																<Sequence>
																																	<Expression expressions="$attackState = $enum:crime_interruptAttackState.attacking &#10; &#10;$surrenderingRepeatedly = true" />
																																	<IfCondition failOnCondition="false" condition="#interruptAttackParticipants &gt; 0">
																																		<SuppressFailure>
																																			<InstantMultiSendMessageToNPC targets="$interruptAttackParticipants" successMode="Any" failureMode="Any" variable="$attackState" />
																																		</SuppressFailure>
																																	</IfCondition>
																																</Sequence>
																															</Else>
																														</IfElseCondition>
																													</Sequence>
																												</Then>
																												<Else canSkip="1">
																													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																												</Else>
																											</IfElseCondition>
																										</Sequence>
																									</Child>
																									<OnFail canSkip="1">
																										<RemoveLink From="$__player" To="$this.id" Tag="&apos;crime_solveAfterUnsconscious&apos;" LinkOpHandleMode="Success" />
																									</OnFail>
																								</FuseBox>
																							</IfGate>
																						</Loop>
																						<While doFail="false" propagateChildFail="false" condition="true">
																							<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$stopFightData" senderInfo="" inbox="&apos;combat_stopFight&apos;" condition="" answerVar="">
																								<Sequence>
																									<Expression expressions="$attackState = $enum:crime_interruptAttackState.fightIsPaused &#10;$automation_offense = false" />
																									<Parallel successMode="Any" failureMode="Any">
																										<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
																										<Synchronize SemaphoreCount="$stopFightData.soulCount" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$stopFightData.messageId&apos;" RunLogic="KeepRunning">
																											<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																										</Synchronize>
																									</Parallel>
																									<SendAIConceptSignal_skirmish_fightStop sender="$this.id" />
																									<Expression expressions="$disableVictoryBark = true &#10;$attackState = $enum:crime_interruptAttackState.fightIsDone" />
																								</Sequence>
																							</ProcessMessage>
																						</While>
																						<Loop count="-1">
																							<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.attacking" RunLogic="Halt">
																								<Function_crime_surrenderDecision attackData="$attackData" inQuestSkirmish="$inQuestSkirmish" myTarget="$myTarget" questFightStatus="$questFightStatus" nodeLabel="83208699" />
																							</IfGate>
																						</Loop>
																						<IfGate atomic="false" condition="$attackState == $enum:crime_interruptAttackState.fightIsDone" RunLogic="KeepRunning">
																							<Sequence>
																								<Parallel successMode="All" failureMode="Any">
																									<IfCondition failOnCondition="false" condition="!$disableVictoryBark">
																										<SuppressFailure>
																											<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;0s&apos;" LockManagerType="Global" SemaphoreName="&apos;combat_victoryBark&apos;">
																												<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$myTarget" metarole="&apos;NPC_VYHRALO_SKIRMISH&apos;" priority="$enum:crime_barkPriority.important" nodeLabel="88366965" />
																											</Semaphore>
																										</SuppressFailure>
																									</IfCondition>
																									<SuppressFailure>
																										<Sequence>
																											<Function_crime_hasVisor npc="$this.id" hasVisor="$hasVisor" nodeLabel="20444132" />
																											<IfCondition failOnCondition="false" condition="$hasVisor">
																												<IfGate atomic="false" condition="~$automationRunning" RunLogic="KeepRunning">
																													<AnimationAction fragment="&apos;OpenVisor&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																												</IfGate>
																											</IfCondition>
																										</Sequence>
																									</SuppressFailure>
																								</Parallel>
																								<AtomicDecorator>
																									<Sequence>
																										<IsBandit Npc="$this.id" IsBandit="$watchCampTrespass" />
																										<IfElseCondition failOnCondition="false" condition="$watchCampTrespass" saveVersion="2">
																											<Then canSkip="1">
																												<Sequence>
																													<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$trespassReaction" ReactionSuppressed="$reactionSuppressed" />
																													<IfCondition failOnCondition="false" condition="$trespassReaction">
																														<Function_callInterrupt_watchCampTrespass ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" postSurrender="true" previousReaction="$enum:crime_reactionKind.attack" nodeLabel="16857960" />
																													</IfCondition>
																												</Sequence>
																											</Then>
																											<Else canSkip="1">
																												<IfElseCondition failOnCondition="false" condition="$playPostSkirmish" saveVersion="2">
																													<Then canSkip="1">
																														<Function_callInterrupt_postSkirmish ignorePriority="true" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.attack" source="$enum:crime_source.direct" stimulusKind="$attackData.stimulusKind" nodeLabel="90662920" />
																													</Then>
																													<Else canSkip="1">
																														<Success />
																													</Else>
																												</IfElseCondition>
																											</Else>
																										</IfElseCondition>
																									</Sequence>
																								</AtomicDecorator>
																							</Sequence>
																						</IfGate>
																						<Loop count="-1">
																							<Function_crime_handleFoulsInCombat nodeLabel="36076797" />
																						</Loop>
																					</Parallel>
																					<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.attack" nodeLabel="77084414" />
																				</Sequence>
																			</Sequence>
																			<Loop count="-1">
																				<Sequence>
																					<AtomicDecorator>
																						<Sequence>
																							<GetSkirmishParticipants ReferenceNPC="$this.id" Active="true" Passive="false" Targets="false" HumanOnly="false" ParticipantsOutVar="$skirmishParticipants" />
																							<SuppressFailure>
																								<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
																									<Child canSkip="1">
																										<Sequence>
																											<FindInArray array="$skirmishParticipants" keyOut="$playerInSkirmish_keyOut" condition="$__value == $__player" />
																											<Expression expressions="$playerInSkirmishNow_local  = true" />
																										</Sequence>
																									</Child>
																									<OnFail canSkip="1">
																										<Expression expressions="$playerInSkirmishNow_local = false" />
																									</OnFail>
																								</FuseBox>
																							</SuppressFailure>
																							<Expression expressions="$playerInSkirmishNow = $playerInSkirmishNow_local &#10;$playerInSkirmishInitialValueSet = true" />
																						</Sequence>
																					</AtomicDecorator>
																					<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																				</Sequence>
																			</Loop>
																		</Parallel>
																	</Sequence>
																</LogToLabel>
															</LogToLabel>
														</EntityContext>
													</AddPerceivableState>
												</EntityContextElement>
											</EntityContext>
										</EntityContext>
									</EntityContextElement>
								</AnyDecorator>
							</Sequence>
						</Child>
						<OnFail canSkip="1">
							<Sequence>
								<Function_crime_addLeavingInterruptCooldown nodeLabel="38967235" />
								<AtomicDecorator>
									<Sequence>
										<Function_crime_limits_removeReactionLink information="$attackData.information" reactionKind="$enum:crime_reactionKind.attack" nodeLabel="31537492" />
										<IfCondition failOnCondition="false" condition="$questFightStatus.status ~= $enum:combat_questFightStatus.fled">
											<RemoveLink From="$this.id" To="$this.id" Tag="&apos;combat_questFightStatus&apos;" LinkOpHandleMode="Success" />
										</IfCondition>
									</Sequence>
								</AtomicDecorator>
							</Sequence>
						</OnFail>
					</FuseBox>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence />
			<ContinuousSwitch>
				<IfCondition failOnCondition="false" condition="$playerInSkirmishNow |  &#10;$attackPlayer |  &#10;($attackData.target == $__player &amp; $myTarget == $__null) // for icon" />
				<IfCondition failOnCondition="false" condition="true">
					<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
				</IfCondition>
			</ContinuousSwitch>
		</ForestContainer>
		<EditorData Signature="attack" EventSet="">
			<Variables>
				<Variable name="amICamperOrLoner" comment="" />
				<Variable name="assaultKind" comment="" />
				<Variable name="attackPlayer" comment="" />
				<Variable name="attackPlayerDog" comment="" />
				<Variable name="attackState" comment="" />
				<Variable name="attackStateDefault" comment="" />
				<Variable name="automationRunning" comment="" />
				<Variable name="automation_defense" comment="" />
				<Variable name="automation_guard" comment="" />
				<Variable name="automation_movement" comment="" />
				<Variable name="automation_offense" comment="" />
				<Variable name="automation_weapon" comment="" />
				<Variable name="canUrge" comment="" />
				<Variable name="changeAttackState" comment="" />
				<Variable name="const_false" comment="" />
				<Variable name="cooperationInitiator" comment="" />
				<Variable name="cooperationInitiatorIsMyMate" comment="" />
				<Variable name="cooperationNotification" comment="" />
				<Variable name="crimeLevel" comment="" />
				<Variable name="crimesResolved" comment="" />
				<Variable name="decoratorString" comment="" />
				<Variable name="defenceModeEnabled" comment="" />
				<Variable name="directionStartPos" comment="" />
				<Variable name="disableVictoryBark" comment="" />
				<Variable name="emitAlarmInformation" comment="" />
				<Variable name="emitingInformation" comment="" />
				<Variable name="forceArmedCombatAgainstPlayer" comment="" />
				<Variable name="forceUncertainArea" comment="" />
				<Variable name="foughtAgainstPlayer" comment="" />
				<Variable name="friendlySkirmishParticipants" comment="" />
				<Variable name="guardMode" comment="" />
				<Variable name="hasVisor" comment="" />
				<Variable name="inQuestSkirmish" comment="" />
				<Variable name="initialInterferenceSet" comment="" />
				<Variable name="interruptAttackParticipants" comment="" />
				<Variable name="knownInformations" comment="" />
				<Variable name="knownInformations_value" comment="" />
				<Variable name="knownPlayersCrime" comment="" />
				<Variable name="lockOnFromSharedPerception" comment="" />
				<Variable name="lookAroundPos" comment="" />
				<Variable name="meleeWeaponDrawn" comment="" />
				<Variable name="myTarget" comment="" />
				<Variable name="nextMostImportantInformation" comment="" />
				<Variable name="npcCooldowns" comment="" />
				<Variable name="npcToSolvePlayerAfterUnsconscious" comment="" />
				<Variable name="npcToSolvePlayerAfterUnsconsciousFound" comment="" />
				<Variable name="npcsAround" comment="" />
				<Variable name="npcsAround_value" comment="" />
				<Variable name="playPostSkirmish" comment="" />
				<Variable name="playerDirection" comment="" />
				<Variable name="playerInSkirmishInitialValueSet" comment="" />
				<Variable name="playerInSkirmishNow" comment="" />
				<Variable name="playerInSkirmishNow_local" comment="" />
				<Variable name="playerInSkirmish_keyOut" comment="" />
				<Variable name="playerPosition" comment="" />
				<Variable name="punishmentChanged" comment="" />
				<Variable name="questFightStatus" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="resolutionDialogIntroKind" comment="" />
				<Variable name="resolveData" comment="" />
				<Variable name="searchDirection" comment="" />
				<Variable name="selfhelp_resolveData" comment="" />
				<Variable name="shouldEmitAlarmInformation" comment="" />
				<Variable name="skirmishParticipants" comment="" />
				<Variable name="skirmishParticipantsToSendMessage" comment="" />
				<Variable name="stopDefenceMode" comment="" />
				<Variable name="stopFightData" comment="" />
				<Variable name="surrenderChatResult" comment="" />
				<Variable name="surrenderStatement" comment="" />
				<Variable name="surrenderTimeNow" comment="" />
				<Variable name="surrenderingRepeatedly" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassReaction" comment="" />
				<Variable name="trespassSevereness" comment="" />
				<Variable name="unconsciousPlayerInformationKnown" comment="" />
				<Variable name="urgingPriority" comment="" />
				<Variable name="watchCampTrespass" comment="" />
				<Variable name="weaponChange" comment="" />
				<Variable name="attackData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-830" editorPosY="-1590" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Child>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_getAnyDecoratorPreset>
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfElseCondition hasInputBreakpoint="0" comment="Save&amp;load" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="defenceModeEnabled, only from start of the certain fight, when attackData value is true" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																						<Else>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Else>
																					</EntityContextCheck>
																				</Else>
																			</IfElseCondition>
																			<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_limits_confirmReactionLink>
																			<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_crime_checkInterruptInformation>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<ClearDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</ClearDynamicInformationValue>
																				</LockDynamicInformationValues>
																			</IfCondition>
																			<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																				<OutputBreakpoints />
																			</RemoveBuffs>
																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Then>
																							<Else>
																								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Success>
																							</Else>
																						</IsIndifferent>
																						<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</AddLink>
																					</Sequence>
																				</Then>
																			</EntityContextCheck>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<GetCrimeLevelByStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetCrimeLevelByStimulusKind>
																				</Then>
																				<Else>
																					<GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetCrimeLevelByLabel>
																				</Else>
																			</IfElseCondition>
																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextBarrier hasInputBreakpoint="0" comment="KCD2-410532" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																							</EntityContextBarrier>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Sequence>
																					</Loop>
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</EntityContext>
																								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</EntityContext>
																							</Sequence>
																						</Then>
																						<Else>
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</Else>
																					</IfElseCondition>
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</EntityContext>
																						</Then>
																						<Else>
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</Else>
																					</IfElseCondition>
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Then>
																												<Else>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Else>
																											</IsFastForwarded>
																										</Else>
																									</IfElseCondition>
																								</Else>
																							</EntityContextCheck>
																							<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Sequence>
																								</ExternalLock>
																							</EntityContextBarrier>
																						</Sequence>
																					</Loop>
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																												</Then>
																												<Else>
																													<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</ExecuteLua>
																												</Else>
																											</IsFastForwarded>
																										</Else>
																									</IfElseCondition>
																								</Else>
																							</EntityContextCheck>
																							<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Sequence>
																								</ExternalLock>
																							</EntityContextBarrier>
																						</Sequence>
																					</Loop>
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</IsFastForwarded>
																								</Else>
																							</EntityContextCheck>
																							<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Sequence>
																								</ExternalLock>
																							</EntityContextBarrier>
																						</Sequence>
																					</Loop>
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</IsFastForwarded>
																								</Else>
																							</EntityContextCheck>
																							<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</Sequence>
																								</ExternalLock>
																							</EntityContextBarrier>
																						</Sequence>
																					</Loop>
																					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Then>
																										<Else>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Else>
																									</EntityContextCheck>
																								</Else>
																							</EntityContextCheck>
																							<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</Sequence>
																									</ExternalLock>
																								</EntityContextBarrier>
																							</EntityContextBarrier>
																						</Sequence>
																					</Loop>
																				</Parallel>
																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																												</Sequence>
																											</EntityContext>
																										</EntityContext>
																									</EntityContext>
																								</EntityContext>
																							</IfGate>
																						</Then>
																						<Else>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Else>
																					</IfElseCondition>
																				</Loop>
																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContext hasInputBreakpoint="0" comment="KCD2-414173" breakpointFlags="0">
																								<OutputBreakpoints />
																								<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</ShowTutorial>
																																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Wait>
																																				</Sequence>
																																			</EntityContext>
																																		</EntityContextBarrier>
																																	</IfGate>
																																</Loop>
																															</Then>
																															<Else>
																																<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</ShowTutorial>
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</Sequence>
																																		</EntityContextBarrier>
																																	</IfGate>
																																</Loop>
																															</Else>
																														</EntityContextCheck>
																													</EntityContext>
																												</EntityContextElement>
																											</EntityContext>
																										</EntityContextElement>
																									</EntityContext>
																								</GameContext>
																							</EntityContext>
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Then>
																								<Else>
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</PlayersCrimeInformationKnown>
																											</Then>
																											<Else>
																												<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</PlayersCrimeInformationKnown>
																											</Else>
																										</EntityContextCheck>
																										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Then>
																													<Else>
																														<GameContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</GameContextPreset>
																													</Else>
																												</EntityContextCheck>
																											</Then>
																											<Else>
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																											</Else>
																										</IfElseCondition>
																									</Sequence>
																								</Else>
																							</EntityContextCheck>
																							<Function_crime_playerInstantRecognitionHandler hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_playerInstantRecognitionHandler>
																						</Parallel>
																					</IfGate>
																				</Loop>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</Then>
																						<Else>
																							<IfGate hasInputBreakpoint="0" comment="FF hardcore construction, no clock nodes before combatAction is executed" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Success>
																							</IfGate>
																						</Else>
																					</IsFastForwarded>
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</AddBuff>
																								</IfCondition>
																							</Then>
																						</IsUnconsciousCheck>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Function_crime_attack_getInitialAttackState hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_attack_getInitialAttackState>
																						</IfCondition>
																						<IsIndifferent hasInputBreakpoint="0" comment="KCD2-343765" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Else>
																								<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</AffectFeelings>
																							</Else>
																						</IsIndifferent>
																						<IfCondition hasInputBreakpoint="0" comment="resolve corpse (must be after startbark)" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Function_crime_addCorpseLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_addCorpseLink>
																								</Then>
																								<Else>
																									<Function_crime_addCorpseLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_addCorpseLink>
																								</Else>
																							</EntityContextCheck>
																						</IfCondition>
																						<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Else>
																								<Function_crime_playStartleAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_playStartleAnimation>
																							</Else>
																						</IsFastForwarded>
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<SuppressFailure hasInputBreakpoint="0" comment="TODO: remove after resolving conflicts with skirmishBarks" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Else>
																											<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Else>
																															<Function_crime_attack_startBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_attack_startBark>
																														</Else>
																													</IsLoadedGate>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Else>
																																<Function_crime_startBark_alarm hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_startBark_alarm>
																															</Else>
																														</IsLoadedGate>
																													</IfCondition>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																												</Sequence>
																											</InstantSemaphore>
																										</Else>
																									</EntityContextCheck>
																								</SuppressFailure>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Sequence>
																							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<CheckInformationKnowledge hasInputBreakpoint="0" comment="This node fails if we don&apos;t known the information anymore" breakpointFlags="0">
																														<OutputBreakpoints />
																													</CheckInformationKnowledge>
																													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</Then>
																														<Else>
																															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																															</EntityContextCheck>
																														</Else>
																													</EntityContextCheck>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</GetAreMates>
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Fail>
																															</IfCondition>
																														</Sequence>
																													</IfCondition>
																												</Sequence>
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</ReinitVariable>
																													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</GetMostImportantCrimeInformation>
																														</Then>
																														<Else>
																															<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</GetMostImportantCrimeInformation>
																														</Else>
																													</EntityContextCheck>
																													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																																<Else>
																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Success>
																																</Else>
																															</IfElseCondition>
																														</Then>
																														<Else>
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Expression hasInputBreakpoint="0" comment="Update information to the next most critical one" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</LinkDataExpression>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Sequence>
																														</Else>
																													</IfElseCondition>
																												</Sequence>
																											</Selector>
																										</IfCondition>
																										<DefaultBranch>
																											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Success>
																										</DefaultBranch>
																									</Switch>
																								</ProcessMessage>
																							</While>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Child>
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																																<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<MeleeDefenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<CombatFollowerDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Success hasInputBreakpoint="0" comment="ahoj vitku KCD2-382491" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</Then>
																																								<Else>
																																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<StanceCheck hasInputBreakpoint="0" comment="cant move without standing, so no need to stop" breakpointFlags="0" saveVersion="2">
																																											<OutputBreakpoints />
																																											<Then>
																																												<Sequence hasInputBreakpoint="0" comment="KCD2-281076" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</WaitAction>
																																													</UrgencyDecorator>
																																													<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</StopMovement>
																																												</Sequence>
																																											</Then>
																																											<Else>
																																												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Success>
																																											</Else>
																																										</StanceCheck>
																																									</IfCondition>
																																								</Else>
																																							</EntityContextCheck>
																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</CombatAction>
																																								</Then>
																																								<Else>
																																									<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</CombatAction>
																																								</Else>
																																							</IfElseCondition>
																																						</Sequence>
																																					</CombatFollowerDecorator>
																																				</WeaponAutomationDecorator>
																																			</MeleeGuardAutomationDecorator>
																																		</MeleeDefenseAutomationDecorator>
																																	</MeleeOffenseAutomationDecorator>
																																</MoveParamsDecorator>
																															</Sequence>
																														</Child>
																														<OnFail>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</OnFail>
																													</FuseBox>
																													<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Then>
																																			<Else>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Else>
																																		</EntityContextCheck>
																																	</Then>
																																	<Else>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Else>
																																</IfElseCondition>
																															</Then>
																															<Else>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Function_crime_getSearchDirectionTowardsPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_getSearchDirectionTowardsPlayer>
																																				<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_callInterrupt_lookAround>
																																			</Sequence>
																																		</Then>
																																		<Else>
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetSpatialInfo>
																																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetSpatialInfo>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																					<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_callInterrupt_lookAround>
																																				</Sequence>
																																			</IfCondition>
																																		</Else>
																																	</IfElseCondition>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Sequence>
																															</Else>
																														</IsUnconsciousCheck>
																													</AtomicDecorator>
																												</Sequence>
																												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Wait>
																												</IfGate>
																											</Parallel>
																										</IfCondition>
																										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Success>
																										</IfGate>
																									</Parallel>
																									<IfGate hasInputBreakpoint="0" comment="FF hardcore construction,  no clock nodes before combatAction is executed" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Success>
																									</IfGate>
																								</Sequence>
																							</Loop>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<OnTargetChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<GetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetTarget>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</IfCondition>
																										</Sequence>
																									</AtomicDecorator>
																								</OnTargetChange>
																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Wait>
																							</Sequence>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<OnTargetChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<GetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</GetTarget>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</IfCondition>
																												</Sequence>
																											</AtomicDecorator>
																										</OnTargetChange>
																									</IfGate>
																								</SuppressFailure>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</SetExternalLock>
																												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</SetExternalLock>
																														</IfCondition>
																														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<TenseCircumstanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Child>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</SetExternalLock>
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</Sequence>
																																		</Child>
																																		<OnFail>
																																			<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</SetExternalLock>
																																		</OnFail>
																																	</FuseBox>
																																</TenseCircumstanceBarrier>
																															</SuppressFailure>
																														</IfGate>
																													</Sequence>
																													<ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Init>
																																<AddBuff hasInputBreakpoint="0" comment="jsem hluchy" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</AddBuff>
																															</Init>
																															<Subtree>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Function_crime_hasMeleeWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_hasMeleeWeaponDrawn>
																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Then>
																																		<Else>
																																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</GetKnownInformations>
																																						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</GetDynamicInformationValue>
																																										</LockDynamicInformationValues>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</IfCondition>
																																									</Sequence>
																																								</IfCondition>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</IfCondition>
																																							</Sequence>
																																						</ForEach>
																																					</Sequence>
																																				</Then>
																																			</EntityContextCheck>
																																		</Else>
																																	</IfElseCondition>
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																			<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<CallDecorator_combat_defenceMode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Subtree>
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</ShowTutorial>
																																								<Function_combat_defenceMode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_combat_defenceMode>
																																							</Sequence>
																																						</Subtree>
																																						<Escalate>
																																							<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</GetMostImportantCrimeInformation>
																																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Expression hasInputBreakpoint="0" comment="Update information to the next most critical one" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																											<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</LinkDataExpression>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Sequence>
																																									</IfCondition>
																																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																												<OutputBreakpoints />
																																												<Then>
																																													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Success>
																																												</Then>
																																												<Else>
																																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Expression>
																																												</Else>
																																											</IsIndifferent>
																																										</Then>
																																										<Else>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Else>
																																									</EntityContextCheck>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</Sequence>
																																							</CallbackEventCatch_empty>
																																						</Escalate>
																																						<CalmDown>
																																							<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Function_switch_handleAwareness_informations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_switch_handleAwareness_informations>
																																										</EntityContext>
																																									</IfCondition>
																																									<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Function_crime_crimeSwitchBark>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</Sequence>
																																							</CallbackEventCatch_empty>
																																						</CalmDown>
																																					</CallDecorator_combat_defenceMode>
																																				</Loop>
																																			</IfGate>
																																		</Sequence>
																																	</IfCondition>
																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Function_crime_waitForWeaponChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_waitForWeaponChange>
																																							<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_crimeBark>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Sequence>
																																					</Then>
																																					<Else>
																																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<NPCStateGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Function_combat_fleeOnDrawnWeapon hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_combat_fleeOnDrawnWeapon>
																																											<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_crimeBark>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Sequence>
																																									</NPCStateGate>
																																								</Then>
																																								<Else>
																																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Wait>
																																								</Else>
																																							</EntityContextCheck>
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Function_crime_waitForWeaponChange hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_crime_waitForWeaponChange>
																																								<Function_combat_fleeOnDrawnWeapon hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_combat_fleeOnDrawnWeapon>
																																								<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_crime_crimeBark>
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																							</Sequence>
																																						</Parallel>
																																					</Else>
																																				</EntityContextCheck>
																																			</IfCondition>
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</IfCondition>
																																		</ContinuousSwitch>
																																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</Then>
																																			<Else>
																																				<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Child>
																																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Wait>
																																											</Sequence>
																																										</Child>
																																										<OnSuccess>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</OnSuccess>
																																									</FuseBox>
																																								</IsInsideAreaWithLabelBarrier>
																																							</While>
																																							<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<MovementAutomation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</MovementAutomation>
																																								</IfCondition>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<MovementAutomation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</MovementAutomation>
																																								</IfCondition>
																																							</ContinuousSwitch>
																																						</Parallel>
																																					</Then>
																																					<Else>
																																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Wait>
																																					</Else>
																																				</IsPublicEnemy>
																																			</Else>
																																		</EntityContextCheck>
																																		<Function_crime_emitInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_emitInformation>
																																		<CallDecorator_crime_sharePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Subtree>
																																				<Function_crime_sharePlayersLastSeenPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_sharePlayersLastSeenPosition>
																																			</Subtree>
																																			<PositionUpdatedFromOtherNpc>
																																				<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Success>
																																				</CallbackEventCatch_empty>
																																			</PositionUpdatedFromOtherNpc>
																																			<PlayerFound>
																																				<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</CallbackEventCatch_empty>
																																			</PlayerFound>
																																			<PointingStart>
																																				<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Success>
																																				</CallbackEventCatch_empty>
																																			</PointingStart>
																																			<PointingEnd>
																																				<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Success>
																																				</CallbackEventCatch_empty>
																																			</PointingEnd>
																																		</CallDecorator_crime_sharePlayersPosition>
																																		<Function_crime_estimatePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_estimatePlayersPosition>
																																	</Parallel>
																																</Sequence>
																															</Subtree>
																															<Cleanup>
																																<RemoveBuffs hasInputBreakpoint="0" comment="jsem slysici" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</RemoveBuffs>
																															</Cleanup>
																														</SubtreeDecorator>
																													</ExternalLock>
																												</Parallel>
																												<IsFastTraveling hasInputBreakpoint="0" comment="KCD2-87479 - Using (quest) fast travel" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																													<Else>
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</Else>
																												</IsFastTraveling>
																											</Sequence>
																										</IfGate>
																									</IfGate>
																								</SuppressFailure>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</ProcessMessage>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<StopMinigame hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</StopMinigame>
																													</Then>
																													<Else>
																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Else>
																												</HasPerceivableState>
																											</IfCondition>
																										</DistanceGate>
																									</ActorStateBarrier>
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</Sequence>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IfGate hasInputBreakpoint="0" comment="gotta wait for attackingState, but cant halt because it would halt the resolution" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Success>
																									</IfGate>
																									<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Child>
																													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<CallDecorator_surrenderStatement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Subtree>
																																		<Function_crime_getSurrenderStatement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_getSurrenderStatement>
																																	</Subtree>
																																	<surrenderRejectedContext>
																																		<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</ShowTutorial>
																																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="rejectedContext" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_crimeBark>
																																			</Sequence>
																																		</CallbackEventCatch_empty>
																																	</surrenderRejectedContext>
																																	<solvedByAuthority>
																																		<CallbackEventCatch_passParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Function_crime_managePlayerUrging hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_managePlayerUrging>
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<FaderBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="solvedByAuthority" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<NotifyPlayerSurrender hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</NotifyPlayerSurrender>
																																							<Function_crime_getResolutionDialogIntroKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_getResolutionDialogIntroKind>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																							<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</EraseFromArray>
																																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</InstantMultiSendMessageToNPC>
																																								</SuppressFailure>
																																							</IfCondition>
																																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</WaitAction>
																																								</UrgencyDecorator>
																																							</SuppressFailure>
																																							<Function_crime_resolveCrimeDialogue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_resolveCrimeDialogue>
																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</InstantMultiSendMessageToNPC>
																																											</SuppressFailure>
																																										</IfCondition>
																																									</Sequence>
																																								</Then>
																																								<Else>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</InstantMultiSendMessageToNPC>
																																											</SuppressFailure>
																																										</IfCondition>
																																									</Sequence>
																																								</Else>
																																							</IfElseCondition>
																																						</Sequence>
																																					</FaderBarrier>
																																				</IfGate>
																																			</Parallel>
																																		</CallbackEventCatch_passParticipants>
																																	</solvedByAuthority>
																																	<solvedBySelfHelper>
																																		<CallbackEventCatch_passParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Function_crime_managePlayerUrging hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_managePlayerUrging>
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<FaderBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="solvedBySelfhelper" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<NotifyPlayerSurrender hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</NotifyPlayerSurrender>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</InstantMultiSendMessageToNPC>
																																							</SuppressFailure>
																																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</WaitAction>
																																								</UrgencyDecorator>
																																							</SuppressFailure>
																																							<Function_crime_selfhelp_resolveCrimeDialogue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Function_crime_selfhelp_resolveCrimeDialogue>
																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</InstantMultiSendMessageToNPC>
																																											</SuppressFailure>
																																										</IfCondition>
																																									</Sequence>
																																								</Then>
																																								<Else>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</InstantMultiSendMessageToNPC>
																																											</SuppressFailure>
																																										</IfCondition>
																																									</Sequence>
																																								</Else>
																																							</IfElseCondition>
																																						</Sequence>
																																					</FaderBarrier>
																																				</IfGate>
																																			</Parallel>
																																		</CallbackEventCatch_passParticipants>
																																	</solvedBySelfHelper>
																																	<surrenderRejected>
																																		<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</ShowTutorial>
																																				<Function_crime_crimeBark hasInputBreakpoint="0" comment="Rejected" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_crimeBark>
																																			</Sequence>
																																		</CallbackEventCatch_empty>
																																	</surrenderRejected>
																																	<noInformation>
																																		<CallbackEventCatch_passParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="noInformation" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<NotifyPlayerSurrender hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</NotifyPlayerSurrender>
																																				<SendAIConceptSignal_skirmish_playerSurrendered hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</SendAIConceptSignal_skirmish_playerSurrendered>
																																				<AtomicDecorator hasInputBreakpoint="0" comment="zastaven  participantu, pockame az reknou bark, konec attacku" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_reconcileAfterResolve hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_reconcileAfterResolve>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</EraseFromArray>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</InstantMultiSendMessageToNPC>
																																							</SuppressFailure>
																																						</IfCondition>
																																					</Sequence>
																																				</AtomicDecorator>
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</WUIDFilter>
																																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</LinkTagFilter>
																																						<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																						</Datalyzer>
																																					</GraphSearch>
																																					<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetTime>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																					<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</AddLink>
																																				</Sequence>
																																				<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</DetermineTrespassReaction>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<IsBandit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</IsBandit>
																																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<Function_callInterrupt_watchCampTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_callInterrupt_watchCampTrespass>
																																							</Then>
																																							<Else>
																																								<Function_callInterrupt_watchTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_callInterrupt_watchTrespass>
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</IfCondition>
																																				<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Function_crime_updatePostResolveSubscribers hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_crime_updatePostResolveSubscribers>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</InstantMultiSendMessageToNPC>
																																								</IfCondition>
																																							</Sequence>
																																						</SuppressFailure>
																																					</Sequence>
																																				</AtomicDecorator>
																																			</Sequence>
																																		</CallbackEventCatch_passParticipants>
																																	</noInformation>
																																	<solvedByQuest>
																																		<CallbackEventCatch_passParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="solvedByQuest" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<NotifyPlayerSurrender hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</NotifyPlayerSurrender>
																																				<SendAIConceptSignal_skirmish_playerSurrendered hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</SendAIConceptSignal_skirmish_playerSurrendered>
																																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</WaitAction>
																																					</UrgencyDecorator>
																																				</SuppressFailure>
																																				<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_reconcileAfterResolve hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_reconcileAfterResolve>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</EraseFromArray>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</InstantMultiSendMessageToNPC>
																																							</SuppressFailure>
																																						</IfCondition>
																																					</Sequence>
																																				</AtomicDecorator>
																																				<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Function_crime_updatePostResolveSubscribers hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_crime_updatePostResolveSubscribers>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</InstantMultiSendMessageToNPC>
																																								</IfCondition>
																																							</Sequence>
																																						</SuppressFailure>
																																					</Sequence>
																																				</AtomicDecorator>
																																			</Sequence>
																																		</CallbackEventCatch_passParticipants>
																																	</solvedByQuest>
																																	<passToResponsibleNpc>
																																		<CallbackEventCatch_passToResponsibleNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																				<InstantSendMessageToNPC hasInputBreakpoint="0" comment="passToResponsibleNpc" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</InstantSendMessageToNPC>
																																			</Sequence>
																																		</CallbackEventCatch_passToResponsibleNpc>
																																	</passToResponsibleNpc>
																																	<threeWaySkirmish>
																																		<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Function_crime_crimeBark hasInputBreakpoint="0" comment="threeWay" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_crimeBark>
																																		</CallbackEventCatch_empty>
																																	</threeWaySkirmish>
																																	<knownMurderedFriend>
																																		<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Function_crime_crimeBark hasInputBreakpoint="0" comment="Rejected murder" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_crimeBark>
																																		</CallbackEventCatch_empty>
																																	</knownMurderedFriend>
																																</CallDecorator_surrenderStatement>
																															</EntityContext>
																														</LogToLabel>
																													</ProcessMessage>
																												</Child>
																												<OnFail>
																													<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</ClearInbox>
																												</OnFail>
																											</FuseBox>
																										</EntityContext>
																									</While>
																								</Sequence>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																										</GameContext>
																									</EntityContextBarrier>
																								</DistanceGate>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</EntityContext>
																								</EntityContextBarrier>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<SendAIConceptSignal_skirmish_playerSurrendered hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</SendAIConceptSignal_skirmish_playerSurrendered>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Sequence>
																								</IfGate>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Init>
																											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</AddLink>
																										</Init>
																										<Subtree>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<EntityContextCheck hasInputBreakpoint="0" comment="let animation inside resolve handle it" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Else>
																														<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</WaitAction>
																														</UrgencyDecorator>
																													</Else>
																												</EntityContextCheck>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																											</Sequence>
																										</Subtree>
																										<Cleanup>
																											<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</RemoveLink>
																										</Cleanup>
																									</SubtreeDecorator>
																								</IfGate>
																							</Loop>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Child>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</LinkTagFilter>
																														</GraphSearch>
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</CircularSpatialQuery>
																																	<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</EraseFromArray>
																																	<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Then>
																																							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Else>
																																									<GameOver hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</GameOver>
																																								</Else>
																																							</EntityContextCheck>
																																						</Then>
																																					</EntityContextCheck>
																																					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																						<OutputBreakpoints />
																																						<Then>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Then>
																																					</EntityContextCheck>
																																					<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</PushToArray>
																																				</Sequence>
																																			</Then>
																																		</EntityContextCheck>
																																	</ForEach>
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<GetHighestStatusNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</GetHighestStatusNpc>
																																	</IfCondition>
																																	<ReinitVariable hasInputBreakpoint="0" comment="reinit variable, so that its fresh for further use" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</ReinitVariable>
																																	<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AddLink>
																																</Sequence>
																															</Then>
																														</IfElseCondition>
																													</Sequence>
																												</AtomicDecorator>
																												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_getNpcsAroundWithContextInterruptAttack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_getNpcsAroundWithContextInterruptAttack>
																															<Function_spreadInformationWithinFriends hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_spreadInformationWithinFriends>
																															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</PlayersCrimeInformationKnown>
																																</Then>
																																<Else>
																																	<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</PlayersCrimeInformationKnown>
																																</Else>
																															</EntityContextCheck>
																															<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<Function_crime_selfhelp_resolveCrimeDialogue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_selfhelp_resolveCrimeDialogue>
																																					</Sequence>
																																				</Then>
																																				<Else>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</DetermineTrespassReaction>
																																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																									<OutputBreakpoints />
																																									<Then>
																																										<Success hasInputBreakpoint="0" comment="Ahoj Vitku" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Success>
																																									</Then>
																																									<Else>
																																										<Function_callInterrupt_throwOutUnconsciousPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_callInterrupt_throwOutUnconsciousPlayer>
																																									</Else>
																																								</GameContextCheck>
																																							</Then>
																																							<Else>
																																								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Success>
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</Else>
																																			</IfElseCondition>
																																		</Then>
																																		<Else>
																																			<GameOver hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</GameOver>
																																		</Else>
																																	</EntityContextCheck>
																																</Then>
																																<Else>
																																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_getResolutionDialogIntroKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_getResolutionDialogIntroKind>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<Function_crime_resolveCrimeDialogue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_resolveCrimeDialogue>
																																					</Sequence>
																																				</Then>
																																				<Else>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<Function_crime_selfhelp_resolveCrimeDialogue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_selfhelp_resolveCrimeDialogue>
																																					</Sequence>
																																				</Else>
																																			</EntityContextCheck>
																																		</Then>
																																		<Else>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</DetermineTrespassReaction>
																																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Then>
																																								<Success hasInputBreakpoint="0" comment="Ahoj Vitku" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Success>
																																							</Then>
																																							<Else>
																																								<Function_callInterrupt_throwOutUnconsciousPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_callInterrupt_throwOutUnconsciousPlayer>
																																							</Else>
																																						</GameContextCheck>
																																					</Then>
																																					<Else>
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</Else>
																																				</IfElseCondition>
																																			</Sequence>
																																		</Else>
																																	</IfElseCondition>
																																</Else>
																															</IsPublicEnemy>
																															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</InstantMultiSendMessageToNPC>
																																			</SuppressFailure>
																																		</IfCondition>
																																	</Sequence>
																																</Then>
																																<Else>
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</InstantMultiSendMessageToNPC>
																																			</SuppressFailure>
																																		</IfCondition>
																																	</Sequence>
																																</Else>
																															</IfElseCondition>
																														</Sequence>
																													</Then>
																													<Else>
																														<Wait hasInputBreakpoint="0" comment="TODO: dangerous, NPC might get stuck here indefinitely" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Wait>
																													</Else>
																												</IfElseCondition>
																											</Sequence>
																										</Child>
																										<OnFail>
																											<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</RemoveLink>
																										</OnFail>
																									</FuseBox>
																								</IfGate>
																							</Loop>
																							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Wait>
																											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Wait>
																											</Synchronize>
																										</Parallel>
																										<SendAIConceptSignal_skirmish_fightStop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</SendAIConceptSignal_skirmish_fightStop>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Sequence>
																								</ProcessMessage>
																							</While>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_crime_surrenderDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_surrenderDecision>
																								</IfGate>
																							</Loop>
																							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_crimeBark>
																												</Semaphore>
																											</SuppressFailure>
																										</IfCondition>
																										<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Function_crime_hasVisor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_crime_hasVisor>
																												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</AnimationAction>
																													</IfGate>
																												</IfCondition>
																											</Sequence>
																										</SuppressFailure>
																									</Parallel>
																									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IsBandit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</IsBandit>
																											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</DetermineTrespassReaction>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_callInterrupt_watchCampTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_callInterrupt_watchCampTrespass>
																														</IfCondition>
																													</Sequence>
																												</Then>
																												<Else>
																													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<Function_callInterrupt_postSkirmish hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_callInterrupt_postSkirmish>
																														</Then>
																														<Else>
																															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Success>
																														</Else>
																													</IfElseCondition>
																												</Else>
																											</IfElseCondition>
																										</Sequence>
																									</AtomicDecorator>
																								</Sequence>
																							</IfGate>
																							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_crime_handleFoulsInCombat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_crime_handleFoulsInCombat>
																							</Loop>
																						</Parallel>
																						<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_callFollowUpBehavior>
																					</Sequence>
																				</Sequence>
																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<GetSkirmishParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</GetSkirmishParticipants>
																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Child>
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</FindInArray>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</Sequence>
																										</Child>
																										<OnFail>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</OnFail>
																									</FuseBox>
																								</SuppressFailure>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Sequence>
																						</AtomicDecorator>
																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Wait>
																					</Sequence>
																				</Loop>
																			</Parallel>
																		</Sequence>
																	</LogToLabel>
																</LogToLabel>
															</EntityContext>
														</AddPerceivableState>
													</EntityContextElement>
												</EntityContext>
											</EntityContext>
										</EntityContextElement>
									</AnyDecorator>
								</Sequence>
							</Child>
							<OnFail>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_addLeavingInterruptCooldown>
									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_limits_removeReactionLink>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</RemoveLink>
											</IfCondition>
										</Sequence>
									</AtomicDecorator>
								</Sequence>
							</OnFail>
						</FuseBox>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="6170" editorPosY="480" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Sequence>
				<ContinuousSwitch editorPosX="4530" editorPosY="-2640" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</IfCondition>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</IfCondition>
				</ContinuousSwitch>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>