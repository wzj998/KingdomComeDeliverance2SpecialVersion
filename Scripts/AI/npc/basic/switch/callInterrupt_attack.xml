<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_attack" is_function="1">
		<Variables>
			<Variable name="alreadyFled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="attackData" type="switch:interruptData:attack" values="" isPersistent="0" form="single" />
			<Variable name="ffCrimeIcon" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasQuestContext" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="playerInFT" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="questFightStatus" type="combat:questFightStatus" values="" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.direct" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="assaultData" type="crime:assaultData" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="criminalFreshness" type="enum:crime_criminalFreshness" values="$enum:crime_criminalFreshness.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="defenceMode" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="escalatedFromFailedSurrender" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="freshlyAttributedCrime" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="ignorePriority" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="priority" type="_int" values="160" isPersistent="0" form="single" requirementType="In" />
			<Variable name="questBehavior" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="relationOverride" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
						<Else canSkip="1">
							<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
								<Else canSkip="1">
									<Sequence>
										<IfElseCondition failOnCondition="false" condition="$questBehavior" saveVersion="2">
											<Then canSkip="1">
												<SuppressFailure>
													<Sequence>
														<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;combat_questFightStatus&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															<Datalyzer Tag="&apos;combat_questFightStatus&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$questFightStatus" saveVersion="2" />
														</GraphSearch>
														<IfElseCondition failOnCondition="false" condition="$questFightStatus == $enum:combat_questFightStatus.fled" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$alreadyFled = true" />
															</Then>
															<Else canSkip="1">
																<Expression expressions="$alreadyFled = false" />
															</Else>
														</IfElseCondition>
													</Sequence>
												</SuppressFailure>
											</Then>
										</IfElseCondition>
										<EntityContextCheck context="combat_fightInQuestSkirmish" target="" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$hasQuestContext = true" />
											</Then>
										</EntityContextCheck>
										<IfElseCondition failOnCondition="false" condition="$alreadyFled" saveVersion="2">
											<Then canSkip="1">
												<Function_callInterrupt_flee assaultData="$assaultData" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" freshlyAttributedCrime="false" ignorePriority="false" information="" initiator="$enum:switch_interruptInitiator.switch" isIndifferent="false" leaveLevel="false" mercyDialogueResult="$enum:crime_mercyDialogueResult.unknown" previousReaction="$enum:crime_reactionKind.unknown" priority="135" source="$enum:crime_source.direct" stimulusKind="$stimulusKind" target="$target" nodeLabel="28011452" />
											</Then>
											<Else canSkip="1">
												<IfElseCondition failOnCondition="false" condition="$hasQuestContext &amp; !$questBehavior" saveVersion="2">
													<Then canSkip="1">
														<Success />
													</Then>
													<Else canSkip="1">
														<Sequence>
															<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="58984157" />
															<IfCondition failOnCondition="false" condition="$shallPass | $ignorePriority">
																<Sequence>
																	<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="90476444" />
																	<EntityContextCheck context="crime_spawnMissingNpcVolume_behavior" target="$this.id" saveVersion="2">
																		<Then canSkip="1">
																			<Function_crime_spawnMissingNpcVolume destinationWuid="$target" nodeLabel="91927066" />
																		</Then>
																	</EntityContextCheck>
																	<IfCondition failOnCondition="false" condition="$initiator ~= $enum:switch_interruptInitiator.concept">
																		<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
																			<Then canSkip="1">
																				<Success />
																			</Then>
																			<Else canSkip="1">
																				<AddArrestEscalation Npc="$this.id" Reset="false" />
																			</Else>
																		</IsPublicEnemy>
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$initiator == $enum:switch_interruptInitiator.switch | &#10;$previousReaction == $enum:crime_reactionKind.unknown">
																		<GetReactionKindByContext Target="$this.id" ReactionKind="$previousReaction" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$information.label == &apos;&apos;">
																		<Sequence>
																			<CreateInformationWrapper Label="&apos;motivation&apos;" PerceivedWuid="$this.id" PositionType="positionWuid" PositionVec3="" PositionWuid="$target" Information="$information" />
																			<LockDynamicInformationValues Information="$information">
																				<SetDynamicInformationValue Information="$information" Tag="&apos;stimulusKind&apos;" Variable="$stimulusKind" Type="" Value="" />
																			</LockDynamicInformationValues>
																		</Sequence>
																	</IfCondition>
																	<Expression expressions="$attackData.target = $target &#10;$attackData.information = $information &#10;$attackData.stimulusKind = $stimulusKind &#10;$attackData.previousReaction = $previousReaction &#10;$attackData.initiatedBy = $initiator &#10;$attackData.assaultData = $assaultData &#10;$attackData.defenceMode = $defenceMode &#10;$attackData.relationOverride = $relationOverride &#10;$attackData.source = $source &#10;$attackData.freshlyAttributedCrime = $freshlyAttributedCrime &#10;$attackData.criminalFreshness = $criminalFreshness &#10;$attackData.escalatedFromFailedSurrender = $escalatedFromFailedSurrender &#10; &#10;$ffCrimeIcon = $target == $__player" />
																	<Function_crime_limits_reserveReactionLink ffCrimeIcon="$ffCrimeIcon" information="$information" priority="$priority" reactionKind="$enum:crime_reactionKind.attack" nodeLabel="26676884" />
																	<IsFastTraveling saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$playerInFT = true" />
																		</Then>
																		<Else canSkip="1">
																			<Expression expressions="$playerInFT = false" />
																		</Else>
																	</IsFastTraveling>
																	<IfElseCondition failOnCondition="false" condition="$target == $__player &amp; $playerInFT" saveVersion="2">
																		<Then canSkip="1">
																			<AddInterrupt_interrupt_intermediateEventBehaviour aa_chosenBehavior="$enum:crime_reactionKind.attack" arrestData="" attackData="$attackData" friskData="" selfHelpData="" priority="$priority" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_intermediateEventBehaviour&apos;" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Default" Aliveness="Alive" Privileged="false" FastForward="false" />
																		</Then>
																		<Else canSkip="1">
																			<IsFastForwarded failOnCondition="false" saveVersion="2">
																				<Then canSkip="1">
																					<AddInterrupt_attack attackData="$attackData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_attack&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="true" />
																				</Then>
																				<Else canSkip="1">
																					<AddInterrupt_attack attackData="$attackData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_attack&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
																				</Else>
																			</IsFastForwarded>
																		</Else>
																	</IfElseCondition>
																</Sequence>
															</IfCondition>
														</Sequence>
													</Else>
												</IfElseCondition>
											</Else>
										</IfElseCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="alreadyFled" comment="" />
				<Variable name="attackData" comment="" />
				<Variable name="ffCrimeIcon" comment="" />
				<Variable name="hasQuestContext" comment="" />
				<Variable name="mrkev" comment="" />
				<Variable name="playerInFT" comment="" />
				<Variable name="questFightStatus" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="source" comment="" />
				<Variable name="assaultData" comment="" />
				<Variable name="criminalFreshness" comment="" />
				<Variable name="defenceMode" comment="" />
				<Variable name="escalatedFromFailedSurrender" comment="" />
				<Variable name="freshlyAttributedCrime" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="information" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="questBehavior" comment="" />
				<Variable name="relationOverride" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="target" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-310" editorPosY="-430" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
																<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																</Datalyzer>
															</GraphSearch>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Else>
															</IfElseCondition>
														</Sequence>
													</SuppressFailure>
												</Then>
											</IfElseCondition>
											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
											</EntityContextCheck>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Function_callInterrupt_flee hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_flee>
												</Then>
												<Else>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Then>
														<Else>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_crime_checkReactionPriority>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_getMrkev>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Function_crime_spawnMissingNpcVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_spawnMissingNpcVolume>
																			</Then>
																		</EntityContextCheck>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Then>
																				<Else>
																					<AddArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</AddArrestEscalation>
																				</Else>
																			</IsPublicEnemy>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</GetReactionKindByContext>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</CreateInformationWrapper>
																				<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</SetDynamicInformationValue>
																				</LockDynamicInformationValues>
																			</Sequence>
																		</IfCondition>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<Function_crime_limits_reserveReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_limits_reserveReactionLink>
																		<IsFastTraveling hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																			<Else>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Else>
																		</IsFastTraveling>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<AddInterrupt_interrupt_intermediateEventBehaviour hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</AddInterrupt_interrupt_intermediateEventBehaviour>
																			</Then>
																			<Else>
																				<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<AddInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</AddInterrupt_attack>
																					</Then>
																					<Else>
																						<AddInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</AddInterrupt_attack>
																					</Else>
																				</IsFastForwarded>
																			</Else>
																		</IfElseCondition>
																	</Sequence>
																</IfCondition>
															</Sequence>
														</Else>
													</IfElseCondition>
												</Else>
											</IfElseCondition>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</Else>
						</GameContextCheck>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>