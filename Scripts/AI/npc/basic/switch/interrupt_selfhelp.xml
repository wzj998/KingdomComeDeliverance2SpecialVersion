<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_selfhelp" is_function="0">
		<Variables>
			<Variable name="anchor" type="crime:anchor" values="" isPersistent="0" form="single" />
			<Variable name="animationApproach" type="enum:animationApproach" values="$enum:animationApproach.tryDialogAnimations" isPersistent="0" form="single" />
			<Variable name="anyDecoratorPreset" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="barkContext" type="_float" values="" isPersistent="1" form="associative" />
			<Variable name="canInterruptLootLockpickAndReading" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="canUrge" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="chatFeedback" type="crime:selfhelpChatFeedback" values="" isPersistent="0" form="single" />
			<Variable name="chatStartPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="const_false" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="const_true" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="cooperationNotification" type="enum:crime_cooperationNotification" values="" isPersistent="0" form="single" />
			<Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
			<Variable name="currentPlayerPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="directionStartPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="distanceStartToPlayer" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="emitingInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="escalateReaction" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="extendedMode" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="feedbackReceived" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="forceEscalation" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="goIntoAttack" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="goIntoReport" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="goIntoResolve" type="_bool" values="false" isPersistent="1" form="single" />
			<Variable name="hasWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isReportNecessary" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="knownInformations" type="information" values="" isPersistent="0" form="array" />
			<Variable name="knownInformations_value" type="information" values="" isPersistent="0" form="single" />
			<Variable name="knownInformations_value_crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
			<Variable name="knownInformations_value_isRelated" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="lockOnFromSharedPerception" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="managedToGetCloseToPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="maxDistanceToAnchor" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="myDistanceToAnchor" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="nextMostImportantInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="useGeneratedNSO(true)" isPersistent="0" form="single" />
			<Variable name="playerHasWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerResolved" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="playerUnderArrestByAuthority" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="reportDestination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reportDestinationType" type="enum:crime_reportDestinationType" values="" isPersistent="0" form="single" />
			<Variable name="reportMovementSpeed" type="enum:movementSpeed" values="$enum:movementSpeed.sprint" isPersistent="0" form="single" />
			<Variable name="resetPlayersEscape" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="searchDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="selfhelp_resolveData" type="switch:interruptData:selfhelp_resolve" values="" isPersistent="0" form="single" />
			<Variable name="shouldHaveDrawnWeapon" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="skipToResolve" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="skirmishParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="skirmishReaction" type="enum:combat_skirmishReaction" values="" isPersistent="0" form="single" />
			<Variable name="startBarkFinished" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stimulusCombat" type="switch:stimulus:combat" values="" isPersistent="0" form="single" />
			<Variable name="urgingPriority" type="enum:crime_playerUrgingPriority" values="$enum:crime_playerUrgingPriority.selfhelp_far" isPersistent="1" form="single" />
			<Variable name="useGuardStance" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="uselessVector" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="selfhelpData" type="switch:interruptData:selfhelp" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_preventDespawn" target="">
							<EntityContext context="crime_suppressShockReactionFromSwitch" target="$this.id">
								<Sequence>
									<Function_crime_getAnyDecoratorPreset tryToKeepItems="false" tryToKeepSecondaryWeapon="true" presetString="$anyDecoratorPreset" nodeLabel="48245259" />
									<AnyDecorator preset="$anyDecoratorPreset" enabled="true">
										<EntityContextElement context="crime_interrupt" enabled="true">
											<EntityContext context="crime_interruptSelfhelp" target="">
												<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
													<GameContext context="crime_escalationLevel_script_global_confrontingGeneral">
														<EntityContext context="crime_escalationLevel_confrontingGeneral" target="">
															<EntityContextElement context="crime_escalationLevel_confrontingGeneral" enabled="true">
																<EntityContext context="crime_escalationLevel_script_confrontingGeneral" target="">
																	<EntityContextElement context="crime_escalationLevel_script_confrontingGeneral" enabled="true">
																		<EntityContext context="crime_escalationLevel_setFromBehavior_selfhelp" target="">
																			<GameContext context="crime_music_high">
																				<EntityContext context="crime_nrbLevel_confronting" target="">
																					<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:selfhelp&apos;">
																						<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$selfhelpData.stimulusKind&apos;">
																							<Sequence>
																								<Function_crime_limits_confirmReactionLink reactionKind="$enum:crime_reactionKind.selfhelp" nodeLabel="50610511" />
																								<Function_crime_checkInterruptInformation information="$selfhelpData.information" nodeLabel="81527405" />
																								<IfCondition failOnCondition="false" condition="$selfhelpData.source == $enum:crime_source.direct | $selfhelpData.source == $enum:crime_source.personal">
																									<LockDynamicInformationValues Information="$selfhelpData.information">
																										<ClearDynamicInformationValue Information="$selfhelpData.information" Tag="&apos;alreadyReactedToCrimeNpcs&apos;" />
																									</LockDynamicInformationValues>
																								</IfCondition>
																								<RemoveBuffs SoulWUID="" BuffGUID="&apos;ffc20522-134d-4811-8bc5-e933b74b7081&apos;" BuffTagId="-1" />
																								<Function_crime_getAnchor anchor="$anchor" nodeLabel="89642802" />
																								<Expression expressions="$emitingInformation = $selfhelpData.information" />
																								<Function_crime_hasWeaponDrawn checkingMethod="$enum:crime_weaponCheckingMethod.perceivableState" npc="$__player" result="$hasWeaponDrawn" nodeLabel="73499584" />
																								<GetCrimeLevelByLabel Label="$selfhelpData.information.label" CrimeLevel="$crimeLevel" />
																								<IfCondition failOnCondition="false" condition="~$playerResolved">
																									<SubtreeDecorator saveVersion="2">
																										<Init canSkip="1">
																											<AddBuff SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" />
																										</Init>
																										<Subtree canSkip="1">
																											<Parallel successMode="Any" failureMode="Any">
																												<IfGate atomic="false" condition="$playerResolved" RunLogic="KeepRunning">
																													<Success />
																												</IfGate>
																												<Loop count="-1">
																													<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$cooperationNotification" senderInfo="" inbox="&apos;crime_cooperationNotification&apos;" condition="" answerVar="">
																														<Switch>
																															<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.crimeResolved | &#10;$cooperationNotification == $enum:crime_cooperationNotification.informationTransformed">
																																<Selector>
																																	<CheckInformationKnowledge Information="$selfhelpData.information" Holder="$this.id" />
																																	<Sequence>
																																		<ReinitVariable variable="$nextMostImportantInformation" />
																																		<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
																																			<Then canSkip="1">
																																				<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="false" MostImportantInformation="$nextMostImportantInformation" />
																																			</Then>
																																			<Else canSkip="1">
																																				<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="true" MostImportantInformation="$nextMostImportantInformation" />
																																			</Else>
																																		</EntityContextCheck>
																																		<IfElseCondition failOnCondition="false" condition="$nextMostImportantInformation.label == &apos;&apos;" saveVersion="2">
																																			<Then canSkip="1">
																																				<Expression expressions="$playerResolved = true" />
																																			</Then>
																																			<Else canSkip="1">
																																				<Sequence>
																																					<Expression expressions="$selfhelpData.information = $nextMostImportantInformation" />
																																					<LinkDataExpression From="$__player" To="$this.id" Expresssion="$__link_crime_reactor.information = $nextMostImportantInformation" />
																																					<GetCrimeLevelByLabel Label="$nextMostImportantInformation" CrimeLevel="$crimeLevel" />
																																					<Expression expressions="$emitingInformation = $nextMostImportantInformation &#10;$barkContext[&apos;murder&apos;] = $crimeLevel &gt;= $enum:crime_crimeLevel.murder ? 1 : 0" />
																																				</Sequence>
																																			</Else>
																																		</IfElseCondition>
																																	</Sequence>
																																</Selector>
																															</IfCondition>
																															<IfCondition failOnCondition="false" condition="$cooperationNotification == $enum:crime_cooperationNotification.selfhelpEscalation | &#10;$cooperationNotification == $enum:crime_cooperationNotification.arrestEscalation">
																																<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																															</IfCondition>
																															<DefaultBranch>
																																<Success />
																															</DefaultBranch>
																														</Switch>
																													</ProcessMessage>
																												</Loop>
																												<EntityContextCheck context="combat_leavePlayerUnconsciousAfterFight" target="" saveVersion="2">
																													<Then canSkip="1">
																														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																													</Then>
																													<Else canSkip="1">
																														<GameContextPreset preset="crime_suppressUnconsciousPlayerShenanigans">
																															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																														</GameContextPreset>
																													</Else>
																												</EntityContextCheck>
																												<Function_crime_playerInstantRecognitionHandler nodeLabel="80967023" />
																												<Sequence>
																													<IfCondition failOnCondition="false" condition="$selfhelpData.information.label == &apos;murder&apos; | &#10;$selfhelpData.information.label == &apos;murderByDog&apos; | &#10;$selfhelpData.information.label == &apos;corpseViolation&apos;">
																														<Function_crime_addCorpseLink corpse="$selfhelpData.information.perceivedWuid" corpseState="$enum:corpseState.investigated" mateReacting="false" resolve="true" storeTime="false" nodeLabel="82734989" />
																													</IfCondition>
																													<EntityContextCheck context="combat_forceUnarmedWhileInUnarmedSkirmish" target="$this.id" saveVersion="2">
																														<Then canSkip="1">
																															<Success />
																														</Then>
																														<Else canSkip="1">
																															<HasGenderCheck Gender="Male" SoulWUID="" FailSubtMissing="false" saveVersion="2">
																																<Then canSkip="1">
																																	<IfElseCondition failOnCondition="false" condition="$crimeLevel &gt;= $enum:crime_crimeLevel.violent" saveVersion="2">
																																		<Then canSkip="1">
																																			<Expression expressions="$useGuardStance = true &#10;$animationApproach = $enum:animationApproach.dontPlayDialogAnimations" />
																																		</Then>
																																		<Else canSkip="1">
																																			<Sequence>
																																				<Function_crime_hasMeleeWeaponDrawn npc="$__player" result="$playerHasWeaponDrawn" nodeLabel="43757088" />
																																				<GetKnownInformations OutArray="$knownInformations" Holder="$this.id" />
																																				<ForEach startIndex="0" step="1" array="$knownInformations" iterator="" value="$knownInformations_value" break="$useGuardStance">
																																					<IfCondition failOnCondition="false" condition="$data:crime[$knownInformations_value.label].isCrime">
																																						<Sequence>
																																							<GetCrimeLevelByLabel Label="$knownInformations_value.label" CrimeLevel="$knownInformations_value_crimeLevel" />
																																							<IfCondition failOnCondition="false" condition="$knownInformations_value_crimeLevel &gt;= $enum:crime_crimeLevel.violent">
																																								<Sequence>
																																									<IsInformationRelatedToNpc Information="$knownInformations_value" Npc="$this.id" IsRelated="$knownInformations_value_isRelated" />
																																									<IfCondition failOnCondition="false" condition="$knownInformations_value_isRelated">
																																										<Expression expressions="$useGuardStance = true &#10;$animationApproach = $enum:animationApproach.dontPlayDialogAnimations" />
																																									</IfCondition>
																																								</Sequence>
																																							</IfCondition>
																																						</Sequence>
																																					</IfCondition>
																																				</ForEach>
																																			</Sequence>
																																		</Else>
																																	</IfElseCondition>
																																</Then>
																																<Else canSkip="1">
																																	<Success />
																																</Else>
																															</HasGenderCheck>
																														</Else>
																													</EntityContextCheck>
																													<IfGate atomic="false" condition="~$playerResolved | $canUrge" RunLogic="Halt">
																														<Parallel successMode="Any" failureMode="Any">
																															<MoveParamsDecorator speed="Walk" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
																																<MeleeGuardAutomationDecorator GuardMode="forceEnable" active="$useGuardStance">
																																	<SubsequentLocationDecorator Location="$__player">
																																		<Sequence>
																																			<IsLoadedGate saveVersion="2">
																																				<Else canSkip="1">
																																					<IsFastForwarded failOnCondition="false" saveVersion="2">
																																						<Else canSkip="1">
																																							<Function_crime_playStartleAnimation assaultData="$selfhelpData.assaultData" crimeLevel="$crimeLevel" freshlyAttributedCrime="$selfhelpData.freshlyAttributedCrime" information="$selfhelpData.information" initiator="$selfhelpData.initiatedBy" previousReaction="$selfhelpData.previousReaction" reactionKind="$enum:crime_reactionKind.selfhelp" shockSource="$__player" source="$selfhelpData.source" stimulusKind="$selfhelpData.stimulusKind" nodeLabel="94104477" />
																																						</Else>
																																					</IsFastForwarded>
																																				</Else>
																																			</IsLoadedGate>
																																			<Loop count="-1">
																																				<Switch>
																																					<IfCondition failOnCondition="false" condition="$goIntoResolve &amp; ~$playerResolved">
																																						<Parallel successMode="Any" failureMode="Any">
																																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																							<IfGate atomic="false" condition="~$goIntoResolve | $playerResolved" RunLogic="KeepRunning">
																																								<Success />
																																							</IfGate>
																																						</Parallel>
																																					</IfCondition>
																																					<IfCondition failOnCondition="false" condition="$canUrge">
																																						<UrgencyDecorator Urgency="Fast">
																																							<Parallel successMode="Any" failureMode="Any">
																																								<CrimeFollower Target="$__player" Mode="DontBackOff" Role="Main" RelativeSpeedLimit="Dash" DisableGhosting="true" />
																																								<IfGate atomic="false" condition="($goIntoResolve &amp; ~$playerResolved) | ~$canUrge" RunLogic="KeepRunning">
																																									<Success />
																																								</IfGate>
																																							</Parallel>
																																						</UrgencyDecorator>
																																					</IfCondition>
																																					<IfCondition failOnCondition="false" condition="~$canUrge">
																																						<UrgencyDecorator Urgency="Fast">
																																							<Parallel successMode="Any" failureMode="Any">
																																								<CrimeFollower Target="$__player" Mode="DontBackOff" Role="Assist" RelativeSpeedLimit="Dash" DisableGhosting="true" />
																																								<IfGate atomic="false" condition="($goIntoResolve &amp; ~$playerResolved) | $canUrge" RunLogic="KeepRunning">
																																									<Success />
																																								</IfGate>
																																							</Parallel>
																																						</UrgencyDecorator>
																																					</IfCondition>
																																				</Switch>
																																			</Loop>
																																		</Sequence>
																																	</SubsequentLocationDecorator>
																																</MeleeGuardAutomationDecorator>
																															</MoveParamsDecorator>
																															<Function_crime_estimatePlayersPosition estimatePlayersPosition="$const_true" estimationStartPos="$directionStartPos" positionShared="$lockOnFromSharedPerception" nodeLabel="16600405" />
																															<Function_crime_emitInformation crimeInformation="$emitingInformation" emitCrimeInformation="true" longDistanceModeEnabled="$const_false" reactionKind="$enum:crime_reactionKind.selfhelp" emitAlarmInformation="$const_true" nodeLabel="37587980" />
																															<Function_crime_weaponDecorator suppressWaitAction="true" weaponSet="&apos;Primary&apos;" shouldHaveDrawnWeapon="$shouldHaveDrawnWeapon" waitActionFinished="" nodeLabel="66510150" />
																															<ContinuousSwitch>
																																<IfCondition failOnCondition="false" condition="$goIntoAttack">
																																	<AtomicDecorator>
																																		<Sequence>
																																			<AffectFeelings Npc="$this.id" Token="&apos;confrontationDialog_run&apos;" AffectNervousness="false" AffectReputation="true" />
																																			<Function_crime_broadcastCooperationNotification cooperationNotification="$enum:crime_cooperationNotification.selfhelpEscalation" nodeLabel="24927232" />
																																			<AddArrestEscalation Npc="$this.id" Reset="false" />
																																			<IsPlayerUnderArrest IsUnderArrest="$playerUnderArrestByAuthority" />
																																			<IfElseCondition failOnCondition="false" condition="$playerUnderArrestByAuthority" saveVersion="2">
																																				<Then canSkip="1">
																																					<Function_callInterrupt_watch assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" freshlyAttributedCrime="false" ignorePriority="true" information="$selfhelpData.information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.selfhelp" source="$enum:crime_source.direct" stimulusKind="$selfhelpData.stimulusKind" target="$__player" nodeLabel="40917812" />
																																				</Then>
																																				<Else canSkip="1">
																																					<Function_callInterrupt_attack assaultData="" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" escalatedFromFailedSurrender="false" freshlyAttributedCrime="false" ignorePriority="true" information="$selfhelpData.information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.selfhelp" priority="160" questBehavior="false" relationOverride="true" stimulusKind="$selfhelpData.stimulusKind" target="$__player" nodeLabel="98963237" />
																																				</Else>
																																			</IfElseCondition>
																																		</Sequence>
																																	</AtomicDecorator>
																																</IfCondition>
																																<IfCondition failOnCondition="false" condition="$goIntoReport">
																																	<AtomicDecorator>
																																		<Sequence>
																																			<AffectFeelings Npc="$this.id" Token="&apos;confrontationDialog_run&apos;" AffectNervousness="false" AffectReputation="true" />
																																			<Function_crime_broadcastCooperationNotification cooperationNotification="$enum:crime_cooperationNotification.selfhelpEscalation" nodeLabel="53255934" />
																																			<AddArrestEscalation Npc="$this.id" Reset="false" />
																																			<ChooseReportDestination Information="$selfhelpData.information" IsImportant="false" Destination="$reportDestination" DestinationType="$reportDestinationType" />
																																			<IfElseCondition failOnCondition="false" condition="$reportDestinationType &gt; $enum:crime_reportDestinationType.none" saveVersion="2">
																																				<Then canSkip="1">
																																					<Sequence>
																																						<IsPlayerUnderArrest IsUnderArrest="$playerUnderArrestByAuthority" />
																																						<IsReportNecessary Information="$selfhelpData.information" ReportDestination="$reportDestination" ReportNecessary="$isReportNecessary" />
																																						<IfElseCondition failOnCondition="false" condition="$playerUnderArrestByAuthority &amp; &#10;~$isReportNecessary" saveVersion="2">
																																							<Then canSkip="1">
																																								<Function_callInterrupt_watch assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" defenceMode="false" freshlyAttributedCrime="false" ignorePriority="true" information="$selfhelpData.information" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.selfhelp" source="$enum:crime_source.direct" stimulusKind="$selfhelpData.stimulusKind" target="$__player" nodeLabel="81820051" />
																																							</Then>
																																							<Else canSkip="1">
																																								<Sequence>
																																									<GetCrimeLevelByLabel Label="$selfhelpData.information.label" CrimeLevel="$crimeLevel" />
																																									<IfCondition failOnCondition="false" condition="$crimeLevel &lt; $enum:crime_crimeLevel.violent">
																																										<Expression expressions="$reportMovementSpeed = $enum:movementSpeed.run" />
																																									</IfCondition>
																																									<Function_callInterrupt_report assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" disableDetectedIcon="false" disableEmitting="false" freshlyAttributedCrime="false" ignorePriority="true" information="$selfhelpData.information" initiator="$enum:switch_interruptInitiator.scheduler" movementSpeed="$reportMovementSpeed" previousReaction="$enum:crime_reactionKind.selfhelp" reportDestination="$reportDestination" reportDestinationType="$reportDestinationType" source="$enum:crime_source.personal" stimulusKind="$selfhelpData.stimulusKind" nodeLabel="18366862" />
																																								</Sequence>
																																							</Else>
																																						</IfElseCondition>
																																					</Sequence>
																																				</Then>
																																				<Else canSkip="1">
																																					<Function_callInterrupt_flee assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" freshlyAttributedCrime="false" ignorePriority="true" information="$selfhelpData.information" initiator="$enum:switch_interruptInitiator.scheduler" isIndifferent="false" leaveLevel="false" mercyDialogueResult="$enum:crime_mercyDialogueResult.unknown" previousReaction="$enum:crime_reactionKind.selfhelp" priority="135" source="$enum:crime_source.direct" stimulusKind="$selfhelpData.stimulusKind" target="$__player" nodeLabel="56345774" />
																																				</Else>
																																			</IfElseCondition>
																																		</Sequence>
																																	</AtomicDecorator>
																																</IfCondition>
																																<IfCondition failOnCondition="false" condition="true">
																																	<Parallel successMode="Any" failureMode="Any">
																																		<Loop count="-1">
																																			<IfGate atomic="false" condition="~$goIntoResolve" RunLogic="Halt">
																																				<Sequence>
																																					<Expression expressions="$resetPlayersEscape = false" />
																																					<IfGate atomic="false" condition="~$resetPlayersEscape" RunLogic="Halt">
																																						<CallDecorator_crime_handlePlayersEscape>
																																							<Subtree canSkip="1">
																																								<Function_crime_handlePlayersEscape npcPersistency="7" nodeLabel="50921303" />
																																							</Subtree>
																																							<PlayerLost canSkip="1">
																																								<CallbackEventCatch_empty>
																																									<Sequence>
																																										<Function_crime_getSearchDirectionTowardsPlayer startPos="$directionStartPos" direction="$searchDirection" nodeLabel="72404337" />
																																										<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="true" information_look="$selfhelpData.information" initiator="$enum:switch_interruptInitiator.scheduler" missingNpc="$__null" position="" previousReaction="$enum:crime_reactionKind.selfhelp" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="$searchDirection" searchPointsFromDirection="true" shooter="$__player" soundType="$enum:sound.movement" source="$enum:crime_source.direct" stimulusAnimalAbuse="" stimulusKind="$selfhelpData.stimulusKind" nodeLabel="29770416" />
																																									</Sequence>
																																								</CallbackEventCatch_empty>
																																							</PlayerLost>
																																						</CallDecorator_crime_handlePlayersEscape>
																																					</IfGate>
																																				</Sequence>
																																			</IfGate>
																																		</Loop>
																																		<HasActiveThreatsGate Who="$__player" Negation="false" RunLogic="KeepRunning">
																																			<SuppressFailure>
																																				<AtomicDecorator>
																																					<Sequence>
																																						<GetSkirmishParticipants ReferenceNPC="$__player" Active="true" Passive="false" Targets="false" HumanOnly="false" ParticipantsOutVar="$skirmishParticipants" />
																																						<Expression expressions="$stimulusCombat.participant1 = $__player &#10;$stimulusCombat.participant2 = $skirmishParticipants[0]" />
																																						<EntityContext context="crime_stimulusInitiatedByScheduler" target="">
																																							<Function_switch_handleStimulusCombat stimulus="$stimulusCombat" nodeLabel="23443626" />
																																						</EntityContext>
																																					</Sequence>
																																				</AtomicDecorator>
																																			</SuppressFailure>
																																		</HasActiveThreatsGate>
																																		<Loop count="-1">
																																			<IfGate atomic="false" condition="$escalateReaction" RunLogic="Halt">
																																				<AtomicDecorator>
																																					<Sequence>
																																						<DecideSkirmishReactionCrime AllowFemaleJoin="false" MoraleBoost="0.000000" Reason="Perception" ReferenceNpc="$this.id" RelationOverride="Hostile" TargetNpc="$__player" SkirmishReaction="$skirmishReaction" />
																																						<Switch>
																																							<IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.join">
																																								<Expression expressions="$goIntoAttack = true" />
																																							</IfCondition>
																																							<IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.withdraw">
																																								<IfElseCondition failOnCondition="false" condition="$forceEscalation" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$goIntoReport = true" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Selector>
																																											<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																																												<LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																																												<LinkDataFilter tag="&apos;crime_reactor&apos;" condition="$__link_crime_reactor.information == $selfhelpData.information &amp; &#10;$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.report" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																																											</GraphSearch>
																																											<Expression expressions="$goIntoReport = true" />
																																										</Selector>
																																									</Else>
																																								</IfElseCondition>
																																							</IfCondition>
																																							<IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.indifference">
																																								<Success />
																																							</IfCondition>
																																						</Switch>
																																						<Expression expressions="$escalateReaction = false" />
																																					</Sequence>
																																				</AtomicDecorator>
																																			</IfGate>
																																		</Loop>
																																		<Function_crime_managePlayerUrging canUrge="$canUrge" priority="$urgingPriority" nodeLabel="30331143" />
																																		<Sequence>
																																			<FuseBox StatusPropagation="Success" OneCleanup="true" saveVersion="2">
																																				<Child canSkip="1">
																																					<IsLoadedGate saveVersion="2">
																																						<Else canSkip="1">
																																							<Parallel successMode="Any" failureMode="Any">
																																								<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																									<Function_crime_selfhelp_startBark selfhelpData="$selfhelpData" nodeLabel="10830451" />
																																								</IfGate>
																																								<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;crime_playerUrging_waiting&apos;" RunLogic="KeepRunning">
																																									<Success />
																																								</ExternalLock>
																																							</Parallel>
																																						</Else>
																																					</IsLoadedGate>
																																				</Child>
																																				<OnFail canSkip="1">
																																					<Expression expressions="$startBarkFinished = true" />
																																				</OnFail>
																																			</FuseBox>
																																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																		</Sequence>
																																		<CallDecorator_crime_sharePlayersPosition>
																																			<Subtree canSkip="1">
																																				<Function_crime_sharePlayersLastSeenPosition allowedAssistance="$enum:crime_allowedSharePlayerPosAssistance.none" requestVisualAssistanceFromOthers="true" direction="$searchDirection" position="$uselessVector" nodeLabel="54529448" />
																																			</Subtree>
																																			<PositionUpdatedFromOtherNpc canSkip="1">
																																				<CallbackEventCatch_empty>
																																					<Success />
																																				</CallbackEventCatch_empty>
																																			</PositionUpdatedFromOtherNpc>
																																			<PlayerFound canSkip="1">
																																				<CallbackEventCatch_empty>
																																					<Expression expressions="$resetPlayersEscape = true &#10;$lockOnFromSharedPerception = true" />
																																				</CallbackEventCatch_empty>
																																			</PlayerFound>
																																			<PointingStart canSkip="1">
																																				<CallbackEventCatch_empty>
																																					<Success />
																																				</CallbackEventCatch_empty>
																																			</PointingStart>
																																			<PointingEnd canSkip="1">
																																				<CallbackEventCatch_empty>
																																					<Success />
																																				</CallbackEventCatch_empty>
																																			</PointingEnd>
																																		</CallDecorator_crime_sharePlayersPosition>
																																		<ContinuousSwitch>
																																			<IfCondition failOnCondition="false" condition="$managedToGetCloseToPlayer">
																																				<AddPerceivableState PerceivableLabel="&apos;crime_arrest&apos;">
																																					<ForceLook LookTarget="$__player" DisableVariations="true">
																																						<RelationContext context="PerceptionPriorityBoost" source="$this.id" target="$__player">
																																							<Sequence>
																																								<EntityContextCheck context="crime_isSecurity" target="" saveVersion="2">
																																									<Then canSkip="1">
																																										<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.selfhelp_security" />
																																									</Then>
																																									<Else canSkip="1">
																																										<Expression expressions="$urgingPriority = $enum:crime_playerUrgingPriority.selfhelp" />
																																									</Else>
																																								</EntityContextCheck>
																																								<Loop count="-1">
																																									<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																										<Parallel successMode="Any" failureMode="Any">
																																											<Sequence>
																																												<SuppressFailure>
																																													<TenseCircumstanceBarrier RunLogic="Halt">
																																														<LogToLabel Name="&apos;tense&apos;" Wuid="" Message="&apos;under TenseCircumstanceBarrier&apos;">
																																															<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																														</LogToLabel>
																																													</TenseCircumstanceBarrier>
																																												</SuppressFailure>
																																												<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																											</Sequence>
																																											<ContinuousSwitch>
																																												<IfCondition failOnCondition="false" condition="$goIntoResolve &amp; ~$playerResolved">
																																													<Sequence>
																																														<GetKnownInformations OutArray="$knownInformations" Holder="$this.id" />
																																														<Function_crime_reviseInformations informations="$knownInformations" nodeLabel="58475953" />
																																														<Expression expressions="$selfhelp_resolveData.stimulusKind = $selfhelpData.stimulusKind &#10;$selfhelp_resolveData.previousReaction = $enum:crime_reactionKind.selfhelp &#10;$selfhelp_resolveData.initiatedBy = $enum:switch_interruptInitiator.scheduler" />
																																														<Function_crime_selfhelp_resolveCrimeDialogue postresolveSubscribers="" selfhelp_resolveData="$selfhelp_resolveData" crimesResolved="$playerResolved" nodeLabel="38438659" />
																																													</Sequence>
																																												</IfCondition>
																																												<IfCondition failOnCondition="false" condition="$playerResolved">
																																													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																												</IfCondition>
																																												<IfCondition failOnCondition="false" condition="true">
																																													<Sequence>
																																														<StanceCheck soul="$__player" stance="lying" smartObject="" negate="false" failOnCondition="false" saveVersion="2">
																																															<Then canSkip="1">
																																																<Expression expressions="$skipToResolve = true" />
																																															</Then>
																																															<Else canSkip="1">
																																																<Success />
																																															</Else>
																																														</StanceCheck>
																																														<IsTimeSkipping saveVersion="2">
																																															<Then canSkip="1">
																																																<Expression expressions="$skipToResolve = true" />
																																															</Then>
																																															<Else canSkip="1">
																																																<Success />
																																															</Else>
																																														</IsTimeSkipping>
																																														<Sequence>
																																															<IfCondition failOnCondition="false" condition="$skipToResolve">
																																																<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																															</IfCondition>
																																															<GetSpatialInfo In="$this.id" Out="$chatStartPos" What="Position" />
																																															<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;selfhelp_chatBark&apos;" />
																																															<IsLoadedGate saveVersion="2">
																																																<Then canSkip="1">
																																																	<VariableExistsGate VarToTest="$barkContext[&apos;surrenderAttempts&apos;]" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
																																																		<Then canSkip="1">
																																																			<Success />
																																																		</Then>
																																																		<Else canSkip="1">
																																																			<Expression expressions="$barkContext[&apos;surrenderAttempts&apos;] = 0 &#10;$barkContext[&apos;murder&apos;] = $crimeLevel &gt;= $enum:crime_crimeLevel.murder ? 1 : 0" />
																																																		</Else>
																																																	</VariableExistsGate>
																																																</Then>
																																																<Else canSkip="1">
																																																	<Expression expressions="$barkContext[&apos;surrenderAttempts&apos;] = 0 &#10;$barkContext[&apos;murder&apos;] = $crimeLevel &gt;= $enum:crime_crimeLevel.murder ? 1 : 0" />
																																																</Else>
																																															</IsLoadedGate>
																																															<Parallel successMode="Any" failureMode="Any">
																																																<Loop count="-1">
																																																	<SuppressFailure>
																																																		<IfGate atomic="false" condition="$startBarkFinished" RunLogic="KeepRunning">
																																																			<Parallel successMode="All" failureMode="Any">
																																																				<Sequence>
																																																					<EntityContextCheck context="crime_isCuman" target="" saveVersion="2">
																																																						<Then canSkip="1">
																																																							<Function_crime_crimeBark animationApproach="$animationApproach" canBeDelayed="false" dialogContext="$barkContext" dramaticBark="true" lookAt="$__player" metarole="&apos;NPC_ROZPOZNAVA_STRELCE_PO_ZASAHU_(MISSILE)&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="80419093" />
																																																						</Then>
																																																						<Else canSkip="1">
																																																							<Function_crime_crimeBark animationApproach="$animationApproach" canBeDelayed="false" dialogContext="$barkContext" dramaticBark="true" lookAt="$__player" metarole="&apos;SVEPOMOC_PRVNI_VYZVA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="74326458" />
																																																						</Else>
																																																					</EntityContextCheck>
																																																					<Expression expressions="$canInterruptLootLockpickAndReading = true" />
																																																					<Loop count="-1">
																																																						<Sequence>
																																																							<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="&apos;2s&apos;" />
																																																							<SuppressFailure>
																																																								<AtomicDecorator>
																																																									<Sequence>
																																																										<InstantReadMessage variable="$chatFeedback" senderInfo="" inbox="&apos;crime_selfhelpChatFeedback&apos;" condition="" />
																																																										<Expression expressions="$feedbackReceived = true" />
																																																									</Sequence>
																																																								</AtomicDecorator>
																																																							</SuppressFailure>
																																																							<IfCondition failOnCondition="false" condition="~$feedbackReceived">
																																																								<Sequence>
																																																									<Expression expressions="$barkContext[&apos;surrenderAttempts&apos;] += 1" />
																																																									<IfElseCondition failOnCondition="false" condition="$barkContext[&apos;surrenderAttempts&apos;] &gt;= 4" saveVersion="2">
																																																										<Then canSkip="1">
																																																											<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																										</Then>
																																																										<Else canSkip="1">
																																																											<EntityContextCheck context="crime_isCuman" target="" saveVersion="2">
																																																												<Then canSkip="1">
																																																													<Function_crime_crimeBark animationApproach="$animationApproach" canBeDelayed="false" dialogContext="$barkContext" dramaticBark="true" lookAt="$__player" metarole="&apos;NPC_VYHANI_HRACE_Z_TRESPASSU&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="35397124" />
																																																												</Then>
																																																												<Else canSkip="1">
																																																													<Function_crime_crimeBark animationApproach="$animationApproach" canBeDelayed="false" dialogContext="$barkContext" dramaticBark="true" lookAt="$__player" metarole="&apos;SVEPOMOC_OPAKOVANA_VYZVA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="31213530" />
																																																												</Else>
																																																											</EntityContextCheck>
																																																										</Else>
																																																									</IfElseCondition>
																																																								</Sequence>
																																																							</IfCondition>
																																																						</Sequence>
																																																					</Loop>
																																																				</Sequence>
																																																				<Sequence>
																																																					<ShowTutorial Name="crime_arrest" />
																																																					<SuppressFailure>
																																																						<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="&apos;SVEPOMOC_CHAT&apos;" preset="$enum:dialogPreset.chat" recipient="$__player" recipientMetaroles="" nodeLabel="64736482" />
																																																					</SuppressFailure>
																																																					<IfGate atomic="false" condition="$feedbackReceived" RunLogic="KeepRunning">
																																																						<Switch>
																																																							<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_selfhelpChatResult.accept">
																																																								<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																							</IfCondition>
																																																							<IfCondition failOnCondition="false" condition="$chatFeedback.action == $enum:crime_selfhelpChatResult.reject">
																																																								<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																							</IfCondition>
																																																							<DefaultBranch>
																																																								<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																							</DefaultBranch>
																																																						</Switch>
																																																					</IfGate>
																																																				</Sequence>
																																																				<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$chatFeedback" senderInfo="" inbox="&apos;crime_selfhelpChatFeedback&apos;" condition="" answerVar="">
																																																					<Expression expressions="$feedbackReceived = true" />
																																																				</ProcessMessage>
																																																			</Parallel>
																																																		</IfGate>
																																																	</SuppressFailure>
																																																</Loop>
																																																<DeadUnconsciousGate Who="$__player" State="Unconscious" Negation="false" RunLogic="KeepRunning">
																																																	<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																</DeadUnconsciousGate>
																																																<StanceBarrier soul="$__player" stance="lying" smartObject="" negate="false" failOnCondition="false" RunLogic="KeepRunning">
																																																	<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																</StanceBarrier>
																																																<IfGate atomic="false" condition="$canInterruptLootLockpickAndReading" RunLogic="KeepRunning">
																																																	<Sequence>
																																																		<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																		<Parallel successMode="Any" failureMode="Any">
																																																			<LinkGate from="$__player" to="" tag="&apos;lockpick&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																																																				<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																			</LinkGate>
																																																			<LinkGate from="$__player" to="" tag="&apos;loot&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
																																																				<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																			</LinkGate>
																																																			<ActorStateBarrier Who="$__player" ToState="reading" NegateTo="false" RunLogic="KeepRunning">
																																																				<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																			</ActorStateBarrier>
																																																			<ActorStateBarrier Who="$__player" ToState="readingFromInventory" NegateTo="false" RunLogic="KeepRunning">
																																																				<Expression expressions="$goIntoResolve = true &#10;$urgingPriority = $enum:crime_playerUrgingPriority.resolve" />
																																																			</ActorStateBarrier>
																																																		</Parallel>
																																																	</Sequence>
																																																</IfGate>
																																																<ContinuousSwitch>
																																																	<IfCondition failOnCondition="false" condition="~$extendedMode">
																																																		<Sequence>
																																																			<GetSpatialInfo In="$__player" Out="$currentPlayerPos" What="Position" />
																																																			<MeasureDistance position1="$chatStartPos" position2="$currentPlayerPos" mode="ThreeDimensions" result="$distanceStartToPlayer" />
																																																			<IfCondition failOnCondition="false" condition="$distanceStartToPlayer &gt; $data:script_param[&apos;crime_selfhelp_maxDistanceFromChatStart&apos;].value">
																																																				<Expression expressions="$escalateReaction = true &#10;$extendedMode = true" />
																																																			</IfCondition>
																																																			<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																		</Sequence>
																																																	</IfCondition>
																																																	<IfCondition failOnCondition="false" condition="true">
																																																		<Sequence>
																																																			<MeasureDistance position1="$this.id" position2="$anchor.position" mode="ThreeDimensions" result="$myDistanceToAnchor" />
																																																			<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																																																				<Then canSkip="1">
																																																					<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_selfhelp_anchor_maxDistance&apos;].value * $data:script_param[&apos;crime_anchor_maxDistance_courageousMultiplier&apos;].value" />
																																																				</Then>
																																																				<Else canSkip="1">
																																																					<Expression expressions="$maxDistanceToAnchor = $data:script_param[&apos;crime_selfhelp_anchor_maxDistance&apos;].value" />
																																																				</Else>
																																																			</EntityContextCheck>
																																																			<IfCondition failOnCondition="false" condition="$myDistanceToAnchor &gt; $maxDistanceToAnchor">
																																																				<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																			</IfCondition>
																																																			<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																																																		</Sequence>
																																																	</IfCondition>
																																																</ContinuousSwitch>
																																																<ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;observerModeAim_lock&apos;" RunLogic="KeepRunning">
																																																	<Sequence>
																																																		<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																																	</Sequence>
																																																</ExternalLock>
																																																<StanceBarrier soul="$__player" stance="horse" smartObject="" negate="true" failOnCondition="false" RunLogic="KeepRunning">
																																																	<StanceBarrier soul="$__player" stance="horse" smartObject="" negate="false" failOnCondition="false" RunLogic="KeepRunning">
																																																		<Sequence>
																																																			<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																			<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																																		</Sequence>
																																																	</StanceBarrier>
																																																</StanceBarrier>
																																																<Parallel successMode="Any" failureMode="Any">
																																																	<Loop count="-1">
																																																		<Sequence>
																																																			<Function_crime_hasWeaponDrawn checkingMethod="$enum:crime_weaponCheckingMethod.perceivableState" npc="$__player" result="$hasWeaponDrawn" nodeLabel="31405124" />
																																																			<Wait duration="&apos;250ms&apos;" timeType="GameTime" doFail="false" variation="" />
																																																		</Sequence>
																																																	</Loop>
																																																	<IfGate atomic="false" condition="~$hasWeaponDrawn" RunLogic="KeepRunning">
																																																		<IfGate atomic="false" condition="$hasWeaponDrawn" RunLogic="KeepRunning">
																																																			<Sequence>
																																																				<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																																				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																																			</Sequence>
																																																		</IfGate>
																																																	</IfGate>
																																																</Parallel>
																																															</Parallel>
																																														</Sequence>
																																													</Sequence>
																																												</IfCondition>
																																											</ContinuousSwitch>
																																										</Parallel>
																																									</IfGate>
																																								</Loop>
																																							</Sequence>
																																						</RelationContext>
																																					</ForceLook>
																																				</AddPerceivableState>
																																			</IfCondition>
																																			<IfCondition failOnCondition="false" condition="true">
																																				<Parallel successMode="Any" failureMode="Any">
																																					<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																																						<Sequence>
																																							<Expression expressions="$managedToGetCloseToPlayer = true" />
																																							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																						</Sequence>
																																					</DistanceGate>
																																					<Loop count="-1">
																																						<IfGate atomic="false" condition="$canUrge" RunLogic="Halt">
																																							<Sequence>
																																								<Wait duration="&apos;1m&apos;" timeType="GameTime" doFail="false" variation="" />
																																								<Expression expressions="$escalateReaction = true &#10;$forceEscalation = true" />
																																							</Sequence>
																																						</IfGate>
																																					</Loop>
																																				</Parallel>
																																			</IfCondition>
																																		</ContinuousSwitch>
																																	</Parallel>
																																</IfCondition>
																															</ContinuousSwitch>
																														</Parallel>
																													</IfGate>
																												</Sequence>
																											</Parallel>
																										</Subtree>
																										<Cleanup canSkip="1">
																											<RemoveBuffs SoulWUID="" BuffGUID="&apos;1951e0bc-532d-4813-a64d-38ef635b3fd5&apos;" BuffTagId="-1" />
																										</Cleanup>
																									</SubtreeDecorator>
																								</IfCondition>
																								<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.selfhelp" nodeLabel="18074597" />
																							</Sequence>
																						</LogToLabel>
																					</LogToLabel>
																				</EntityContext>
																			</GameContext>
																		</EntityContext>
																	</EntityContextElement>
																</EntityContext>
															</EntityContextElement>
														</EntityContext>
													</GameContext>
												</AddPerceivableState>
											</EntityContext>
										</EntityContextElement>
									</AnyDecorator>
								</Sequence>
							</EntityContext>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Sequence>
							<Function_crime_addLeavingInterruptCooldown nodeLabel="77817648" />
							<AtomicDecorator>
								<Sequence>
									<Function_crime_updateAnchor nodeLabel="37102727" />
									<Function_crime_limits_removeReactionLink information="$selfhelpData.information" reactionKind="$enum:crime_reactionKind.selfhelp" nodeLabel="30216594" />
								</Sequence>
							</AtomicDecorator>
						</Sequence>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="anchor" comment="" />
				<Variable name="animationApproach" comment="" />
				<Variable name="anyDecoratorPreset" comment="" />
				<Variable name="barkContext" comment="" />
				<Variable name="canInterruptLootLockpickAndReading" comment="" />
				<Variable name="canUrge" comment="" />
				<Variable name="chatFeedback" comment="" />
				<Variable name="chatStartPos" comment="" />
				<Variable name="const_false" comment="" />
				<Variable name="const_true" comment="" />
				<Variable name="cooperationNotification" comment="" />
				<Variable name="crimeLevel" comment="" />
				<Variable name="currentPlayerPos" comment="" />
				<Variable name="directionStartPos" comment="" />
				<Variable name="distanceStartToPlayer" comment="" />
				<Variable name="emitingInformation" comment="" />
				<Variable name="escalateReaction" comment="" />
				<Variable name="extendedMode" comment="" />
				<Variable name="feedbackReceived" comment="" />
				<Variable name="forceEscalation" comment="" />
				<Variable name="goIntoAttack" comment="" />
				<Variable name="goIntoReport" comment="" />
				<Variable name="goIntoResolve" comment="" />
				<Variable name="hasWeaponDrawn" comment="" />
				<Variable name="isReportNecessary" comment="" />
				<Variable name="knownInformations" comment="" />
				<Variable name="knownInformations_value" comment="" />
				<Variable name="knownInformations_value_crimeLevel" comment="" />
				<Variable name="knownInformations_value_isRelated" comment="" />
				<Variable name="lockOnFromSharedPerception" comment="" />
				<Variable name="managedToGetCloseToPlayer" comment="" />
				<Variable name="maxDistanceToAnchor" comment="" />
				<Variable name="myDistanceToAnchor" comment="" />
				<Variable name="nextMostImportantInformation" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="playerHasWeaponDrawn" comment="" />
				<Variable name="playerResolved" comment="" />
				<Variable name="playerUnderArrestByAuthority" comment="" />
				<Variable name="reportDestination" comment="" />
				<Variable name="reportDestinationType" comment="" />
				<Variable name="reportMovementSpeed" comment="" />
				<Variable name="resetPlayersEscape" comment="" />
				<Variable name="searchDirection" comment="" />
				<Variable name="selfhelp_resolveData" comment="" />
				<Variable name="shouldHaveDrawnWeapon" comment="" />
				<Variable name="skipToResolve" comment="" />
				<Variable name="skirmishParticipants" comment="" />
				<Variable name="skirmishReaction" comment="" />
				<Variable name="startBarkFinished" comment="" />
				<Variable name="stimulusCombat" comment="" />
				<Variable name="urgingPriority" comment="" />
				<Variable name="useGuardStance" comment="" />
				<Variable name="uselessVector" comment="" />
				<Variable name="selfhelpData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="400" editorPosY="4190" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_crime_getAnyDecoratorPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_getAnyDecoratorPreset>
										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_crime_limits_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_limits_confirmReactionLink>
																									<Function_crime_checkInterruptInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_checkInterruptInformation>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<ClearDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</ClearDynamicInformationValue>
																										</LockDynamicInformationValues>
																									</IfCondition>
																									<RemoveBuffs hasInputBreakpoint="0" comment="rm drunkeness" breakpointFlags="0">
																										<OutputBreakpoints />
																									</RemoveBuffs>
																									<Function_crime_getAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_getAnchor>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<Function_crime_hasWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_hasWeaponDrawn>
																									<GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</GetCrimeLevelByLabel>
																									<IfCondition hasInputBreakpoint="0" comment="skip if loading $playerResolved = true" breakpointFlags="0">
																										<OutputBreakpoints />
																										<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Init>
																												<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</AddBuff>
																											</Init>
																											<Subtree>
																												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Success>
																													</IfGate>
																													<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<CheckInformationKnowledge hasInputBreakpoint="0" comment="This node fails if we don&apos;t known the information anymore" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</CheckInformationKnowledge>
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</ReinitVariable>
																																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetMostImportantCrimeInformation>
																																				</Then>
																																				<Else>
																																					<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetMostImportantCrimeInformation>
																																				</Else>
																																			</EntityContextCheck>
																																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Then>
																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Expression>
																																				</Then>
																																				<Else>
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="Update information to the next most critical one" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<LinkDataExpression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</LinkDataExpression>
																																						<GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</GetCrimeLevelByLabel>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</Sequence>
																																				</Else>
																																			</IfElseCondition>
																																		</Sequence>
																																	</Selector>
																																</IfCondition>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</IfCondition>
																																<DefaultBranch>
																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Success>
																																</DefaultBranch>
																															</Switch>
																														</ProcessMessage>
																													</Loop>
																													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																														</Then>
																														<Else>
																															<GameContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Wait>
																															</GameContextPreset>
																														</Else>
																													</EntityContextCheck>
																													<Function_crime_playerInstantRecognitionHandler hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_playerInstantRecognitionHandler>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Function_crime_addCorpseLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_addCorpseLink>
																														</IfCondition>
																														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Success>
																															</Then>
																															<Else>
																																<HasGenderCheck hasInputBreakpoint="0" comment="women can not run combat automations and dont carry weapons" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Then>
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																			</Then>
																																			<Else>
																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Function_crime_hasMeleeWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_hasMeleeWeaponDrawn>
																																					<GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</GetKnownInformations>
																																					<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</GetCrimeLevelByLabel>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<IsInformationRelatedToNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</IsInformationRelatedToNpc>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</IfCondition>
																																									</Sequence>
																																								</IfCondition>
																																							</Sequence>
																																						</IfCondition>
																																					</ForEach>
																																				</Sequence>
																																			</Else>
																																		</IfElseCondition>
																																	</Then>
																																	<Else>
																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Success>
																																	</Else>
																																</HasGenderCheck>
																															</Else>
																														</EntityContextCheck>
																														<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<SubsequentLocationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Else>
																																						<IsFastForwarded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Else>
																																								<Function_crime_playStartleAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_crime_playStartleAnimation>
																																							</Else>
																																						</IsFastForwarded>
																																					</Else>
																																				</IsLoadedGate>
																																				<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Wait>
																																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</IfGate>
																																							</Parallel>
																																						</IfCondition>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</CrimeFollower>
																																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Success>
																																									</IfGate>
																																								</Parallel>
																																							</UrgencyDecorator>
																																						</IfCondition>
																																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<CrimeFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</CrimeFollower>
																																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Success>
																																									</IfGate>
																																								</Parallel>
																																							</UrgencyDecorator>
																																						</IfCondition>
																																					</Switch>
																																				</Loop>
																																			</Sequence>
																																		</SubsequentLocationDecorator>
																																	</MeleeGuardAutomationDecorator>
																																</MoveParamsDecorator>
																																<Function_crime_estimatePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_estimatePlayersPosition>
																																<Function_crime_emitInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_emitInformation>
																																<Function_crime_weaponDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_weaponDecorator>
																																<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</AffectFeelings>
																																				<Function_crime_broadcastCooperationNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_broadcastCooperationNotification>
																																				<AddArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</AddArrestEscalation>
																																				<IsPlayerUnderArrest hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</IsPlayerUnderArrest>
																																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Function_callInterrupt_watch hasInputBreakpoint="0" comment="let guards handle it, they should escalate" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_callInterrupt_watch>
																																					</Then>
																																					<Else>
																																						<Function_callInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_callInterrupt_attack>
																																					</Else>
																																				</IfElseCondition>
																																			</Sequence>
																																		</AtomicDecorator>
																																	</IfCondition>
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</AffectFeelings>
																																				<Function_crime_broadcastCooperationNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Function_crime_broadcastCooperationNotification>
																																				<AddArrestEscalation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</AddArrestEscalation>
																																				<ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</ChooseReportDestination>
																																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IsPlayerUnderArrest hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</IsPlayerUnderArrest>
																																							<IsReportNecessary hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</IsReportNecessary>
																																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<Function_callInterrupt_watch hasInputBreakpoint="0" comment="player is already under arrest and my destination knows about the primary crime, watching is enough" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Function_callInterrupt_watch>
																																								</Then>
																																								<Else>
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<GetCrimeLevelByLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</GetCrimeLevelByLabel>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</IfCondition>
																																										<Function_callInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_callInterrupt_report>
																																									</Sequence>
																																								</Else>
																																							</IfElseCondition>
																																						</Sequence>
																																					</Then>
																																					<Else>
																																						<Function_callInterrupt_flee hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_callInterrupt_flee>
																																					</Else>
																																				</IfElseCondition>
																																			</Sequence>
																																		</AtomicDecorator>
																																	</IfCondition>
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Loop hasInputBreakpoint="0" comment="Handle player&apos;s escape" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<CallDecorator_crime_handlePlayersEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Subtree>
																																									<Function_crime_handlePlayersEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Function_crime_handlePlayersEscape>
																																								</Subtree>
																																								<PlayerLost>
																																									<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Function_crime_getSearchDirectionTowardsPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_crime_getSearchDirectionTowardsPlayer>
																																											<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_callInterrupt_lookAround>
																																										</Sequence>
																																									</CallbackEventCatch_empty>
																																								</PlayerLost>
																																							</CallDecorator_crime_handlePlayersEscape>
																																						</IfGate>
																																					</Sequence>
																																				</IfGate>
																																			</Loop>
																																			<HasActiveThreatsGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<GetSkirmishParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</GetSkirmishParticipants>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Function_switch_handleStimulusCombat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Function_switch_handleStimulusCombat>
																																							</EntityContext>
																																						</Sequence>
																																					</AtomicDecorator>
																																				</SuppressFailure>
																																			</HasActiveThreatsGate>
																																			<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<DecideSkirmishReactionCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</DecideSkirmishReactionCrime>
																																							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</IfCondition>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																										<Else>
																																											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</LinkTagFilter>
																																													<LinkDataFilter hasInputBreakpoint="0" comment="TODO: is such information check sufficient? it could be improved by checking all known informations / all reporters at pos etc." breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</LinkDataFilter>
																																												</GraphSearch>
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</Selector>
																																										</Else>
																																									</IfElseCondition>
																																								</IfCondition>
																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Success hasInputBreakpoint="0" comment="should never happen?" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</IfCondition>
																																							</Switch>
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</Sequence>
																																					</AtomicDecorator>
																																				</IfGate>
																																			</Loop>
																																			<Function_crime_managePlayerUrging hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Function_crime_managePlayerUrging>
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Child>
																																						<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																							<OutputBreakpoints />
																																							<Else>
																																								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Function_crime_selfhelp_startBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Function_crime_selfhelp_startBark>
																																									</IfGate>
																																									<ExternalLock hasInputBreakpoint="0" comment="if you didnt get to say startBark initially, dont try later" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Success>
																																									</ExternalLock>
																																								</Parallel>
																																							</Else>
																																						</IsLoadedGate>
																																					</Child>
																																					<OnFail>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</OnFail>
																																				</FuseBox>
																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Wait>
																																			</Sequence>
																																			<CallDecorator_crime_sharePlayersPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Subtree>
																																					<Function_crime_sharePlayersLastSeenPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Function_crime_sharePlayersLastSeenPosition>
																																				</Subtree>
																																				<PositionUpdatedFromOtherNpc>
																																					<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</CallbackEventCatch_empty>
																																				</PositionUpdatedFromOtherNpc>
																																				<PlayerFound>
																																					<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Expression hasInputBreakpoint="0" comment="when someone directs me straight to player, reset escape timer" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</CallbackEventCatch_empty>
																																				</PlayerFound>
																																				<PointingStart>
																																					<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</CallbackEventCatch_empty>
																																				</PointingStart>
																																				<PointingEnd>
																																					<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</CallbackEventCatch_empty>
																																				</PointingEnd>
																																			</CallDecorator_crime_sharePlayersPosition>
																																			<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<RelationContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																										<OutputBreakpoints />
																																										<Then>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Then>
																																										<Else>
																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Expression>
																																										</Else>
																																									</EntityContextCheck>
																																									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<TenseCircumstanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</Wait>
																																															</LogToLabel>
																																														</TenseCircumstanceBarrier>
																																													</SuppressFailure>
																																													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</Wait>
																																												</Sequence>
																																												<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</GetKnownInformations>
																																															<Function_crime_reviseInformations hasInputBreakpoint="0" comment="TODO: this function should just take array of NPCS and revise all their informations + update it in every single one + send coop notifications" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</Function_crime_reviseInformations>
																																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</Expression>
																																															<Function_crime_selfhelp_resolveCrimeDialogue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</Function_crime_selfhelp_resolveCrimeDialogue>
																																														</Sequence>
																																													</IfCondition>
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Wait>
																																													</IfCondition>
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<StanceCheck hasInputBreakpoint="0" comment="check before entering tenseCircumBarrier, but just remember it, go into resolve from under tenseCircumBarrier" breakpointFlags="0" saveVersion="2">
																																																<OutputBreakpoints />
																																																<Then>
																																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																</Then>
																																																<Else>
																																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Success>
																																																</Else>
																																															</StanceCheck>
																																															<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																<OutputBreakpoints />
																																																<Then>
																																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																</Then>
																																																<Else>
																																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Success>
																																																</Else>
																																															</IsTimeSkipping>
																																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Expression hasInputBreakpoint="0" comment="do this under tenseCircumBarrier" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																</IfCondition>
																																																<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</GetSpatialInfo>
																																																<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</SetExternalLock>
																																																<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																	<OutputBreakpoints />
																																																	<Then>
																																																		<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																			<OutputBreakpoints />
																																																			<Then>
																																																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Success>
																																																			</Then>
																																																			<Else>
																																																				<Expression hasInputBreakpoint="0" comment="gotta init" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Expression>
																																																			</Else>
																																																		</VariableExistsGate>
																																																	</Then>
																																																	<Else>
																																																		<Expression hasInputBreakpoint="0" comment="gotta init" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																	</Else>
																																																</IsLoadedGate>
																																																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<IfGate hasInputBreakpoint="0" comment="start &quot;chat&quot; after startBark finishes" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																							<OutputBreakpoints />
																																																							<Then>
																																																								<Function_crime_crimeBark hasInputBreakpoint="0" comment="no available dubbing :(" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																								</Function_crime_crimeBark>
																																																							</Then>
																																																							<Else>
																																																								<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																								</Function_crime_crimeBark>
																																																							</Else>
																																																						</EntityContextCheck>
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																								</Wait>
																																																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																											<InstantReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</InstantReadMessage>
																																																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																												<OutputBreakpoints />
																																																											</Expression>
																																																										</Sequence>
																																																									</AtomicDecorator>
																																																								</SuppressFailure>
																																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																											<OutputBreakpoints />
																																																										</Expression>
																																																										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																											<OutputBreakpoints />
																																																											<Then>
																																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																													<OutputBreakpoints />
																																																												</Expression>
																																																											</Then>
																																																											<Else>
																																																												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																													<OutputBreakpoints />
																																																													<Then>
																																																														<Function_crime_crimeBark hasInputBreakpoint="0" comment="no available dubbing :(" breakpointFlags="0">
																																																															<OutputBreakpoints />
																																																														</Function_crime_crimeBark>
																																																													</Then>
																																																													<Else>
																																																														<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																															<OutputBreakpoints />
																																																														</Function_crime_crimeBark>
																																																													</Else>
																																																												</EntityContextCheck>
																																																											</Else>
																																																										</IfElseCondition>
																																																									</Sequence>
																																																								</IfCondition>
																																																							</Sequence>
																																																						</Loop>
																																																					</Sequence>
																																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</ShowTutorial>
																																																						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																							<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																							</Function_speech_dialogInitiator>
																																																						</SuppressFailure>
																																																						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																								<OutputBreakpoints />
																																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																									</Expression>
																																																								</IfCondition>
																																																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																									<OutputBreakpoints />
																																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																									</Expression>
																																																								</IfCondition>
																																																								<DefaultBranch>
																																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																										<OutputBreakpoints />
																																																									</Expression>
																																																								</DefaultBranch>
																																																							</Switch>
																																																						</IfGate>
																																																					</Sequence>
																																																					<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</ProcessMessage>
																																																				</Parallel>
																																																			</IfGate>
																																																		</SuppressFailure>
																																																	</Loop>
																																																	<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																	</DeadUnconsciousGate>
																																																	<StanceBarrier hasInputBreakpoint="0" comment="TODO: most likely redundant, player cant start action under tenseCircumstances" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																		</Expression>
																																																	</StanceBarrier>
																																																	<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Wait>
																																																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<LinkGate hasInputBreakpoint="0" comment="If player is in lockpick minigame, skip chat and force resolve" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</LinkGate>
																																																				<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</LinkGate>
																																																				<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</ActorStateBarrier>
																																																				<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</ActorStateBarrier>
																																																			</Parallel>
																																																		</Sequence>
																																																	</IfGate>
																																																	<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</GetSpatialInfo>
																																																				<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</MeasureDistance>
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</IfCondition>
																																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Wait>
																																																			</Sequence>
																																																		</IfCondition>
																																																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</MeasureDistance>
																																																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																																					<OutputBreakpoints />
																																																					<Then>
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</Then>
																																																					<Else>
																																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																							<OutputBreakpoints />
																																																						</Expression>
																																																					</Else>
																																																				</EntityContextCheck>
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																				</IfCondition>
																																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Wait>
																																																			</Sequence>
																																																		</IfCondition>
																																																	</ContinuousSwitch>
																																																	<ExternalLock hasInputBreakpoint="0" comment="KCD2-131594" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Expression>
																																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Wait>
																																																		</Sequence>
																																																	</ExternalLock>
																																																	<StanceBarrier hasInputBreakpoint="0" comment="KCD2-89853" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Expression>
																																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Wait>
																																																			</Sequence>
																																																		</StanceBarrier>
																																																	</StanceBarrier>
																																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Function_crime_hasWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Function_crime_hasWeaponDrawn>
																																																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																				</Wait>
																																																			</Sequence>
																																																		</Loop>
																																																		<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Expression>
																																																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Wait>
																																																				</Sequence>
																																																			</IfGate>
																																																		</IfGate>
																																																	</Parallel>
																																																</Parallel>
																																															</Sequence>
																																														</Sequence>
																																													</IfCondition>
																																												</ContinuousSwitch>
																																											</Parallel>
																																										</IfGate>
																																									</Loop>
																																								</Sequence>
																																							</RelationContext>
																																						</ForceLook>
																																					</AddPerceivableState>
																																				</IfCondition>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Expression>
																																								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																								</Wait>
																																							</Sequence>
																																						</DistanceGate>
																																						<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Wait>
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																								</Sequence>
																																							</IfGate>
																																						</Loop>
																																					</Parallel>
																																				</IfCondition>
																																			</ContinuousSwitch>
																																		</Parallel>
																																	</IfCondition>
																																</ContinuousSwitch>
																															</Parallel>
																														</IfGate>
																													</Sequence>
																												</Parallel>
																											</Subtree>
																											<Cleanup>
																												<RemoveBuffs hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</RemoveBuffs>
																											</Cleanup>
																										</SubtreeDecorator>
																									</IfCondition>
																									<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_callFollowUpBehavior>
																								</Sequence>
																							</LogToLabel>
																						</LogToLabel>
																					</EntityContext>
																				</GameContext>
																			</EntityContext>
																		</EntityContextElement>
																	</EntityContext>
																</EntityContextElement>
															</EntityContext>
														</GameContext>
													</AddPerceivableState>
												</EntityContext>
											</EntityContextElement>
										</AnyDecorator>
									</Sequence>
								</EntityContext>
							</EntityContext>
						</Child>
						<OnFail>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_addLeavingInterruptCooldown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addLeavingInterruptCooldown>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_crime_updateAnchor hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_updateAnchor>
										<Function_crime_limits_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_limits_removeReactionLink>
									</Sequence>
								</AtomicDecorator>
							</Sequence>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>