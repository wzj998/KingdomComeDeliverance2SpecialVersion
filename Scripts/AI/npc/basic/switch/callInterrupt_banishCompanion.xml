<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_banishCompanion" is_function="1">
		<Variables>
			<Variable name="banishCompanionData" type="switch:interruptData:banishCompanion" values="" isPersistent="0" form="single" />
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="29" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="companion" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="forceSemipublicReaction" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="ignorePriority" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.playerCompanion" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
						<Else canSkip="1">
							<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
								<Else canSkip="1">
									<Sequence>
										<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="81488366" />
										<IfCondition failOnCondition="false" condition="$shallPass | $ignorePriority">
											<Sequence>
												<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="27337464" />
												<Expression expressions="$banishCompanionData.companion = $companion &#10;$banishCompanionData.forceSemipublicReaction = $forceSemipublicReaction" />
												<Sequence>
													<CreateInformationWrapper Label="&apos;motivation&apos;" PerceivedWuid="$this.id" PositionType="positionWuid" PositionVec3="" PositionWuid="$banishCompanionData.companion" Information="$banishCompanionData.information" />
													<LockDynamicInformationValues Information="$banishCompanionData.information">
														<SetDynamicInformationValue Information="$banishCompanionData.information" Tag="&apos;stimulusKind&apos;" Variable="$stimulusKind" Type="" Value="" />
													</LockDynamicInformationValues>
												</Sequence>
												<Function_crime_limits_reserveReactionLink ffCrimeIcon="false" information="$banishCompanionData.information" priority="$priority" reactionKind="$enum:crime_reactionKind.banishCompanion" nodeLabel="93990007" />
												<AddInterrupt_banishCompanion banishCompanionData="$banishCompanionData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_banishCompanion&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
											</Sequence>
										</IfCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="banishCompanionData" comment="" />
				<Variable name="mrkev" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="companion" comment="" />
				<Variable name="forceSemipublicReaction" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_checkReactionPriority>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_getMrkev>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Sequence hasInputBreakpoint="0" comment="Create motivation" breakpointFlags="0">
														<OutputBreakpoints />
														<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</CreateInformationWrapper>
														<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetDynamicInformationValue>
														</LockDynamicInformationValues>
													</Sequence>
													<Function_crime_limits_reserveReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_limits_reserveReactionLink>
													<AddInterrupt_banishCompanion hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddInterrupt_banishCompanion>
												</Sequence>
											</IfCondition>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</Else>
						</GameContextCheck>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>