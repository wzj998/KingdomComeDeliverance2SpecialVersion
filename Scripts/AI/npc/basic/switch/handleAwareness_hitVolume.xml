<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleAwareness_hitVolume" is_function="1">
		<Variables>
			<Variable name="assaultData" type="crime:assaultData" values="" isPersistent="0" form="single" />
			<Variable name="attacker_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
			<Variable name="ignore" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="indifferenceStimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" />
			<Variable name="indifferentCombatMetarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="isCorpseViolation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isEnemyCorpse" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isIndifferent" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isMurder" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="observer_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
			<Variable name="pos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="shouldWatch" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stimulusCombat" type="switch:stimulus:combat" values="" isPersistent="0" form="single" />
			<Variable name="stimulusCorpseViolation" type="switch:stimulus:corpseViolation" values="" isPersistent="0" form="single" />
			<Variable name="stimulusMurder" type="switch:stimulus:murder" values="" isPersistent="0" form="single" />
			<Variable name="stimulusShooter" type="switch:stimulus:shooter" values="" isPersistent="0" form="single" />
			<Variable name="useless" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="victim_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
			<Variable name="volumeData" type="crime:hitVolume" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="reactionIntermediateData" type="switch:reactionIntermediateData" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<DefaultBranch>
						<Sequence>
							<GraphSearch Origin="$volume" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;crime_hit&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								<Datalyzer Tag="&apos;crime_hit&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$volumeData" saveVersion="2" />
							</GraphSearch>
							<Switch>
								<EntityContextCheck context="crime_ignoredNPCHitVolume" target="$volumeData.target" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$ignore = true" />
									</Then>
								</EntityContextCheck>
								<RelationContextCheck context="crime_ignoreNPCHitVolume" from="$this.id" to="$volumeData.target" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$ignore = true" />
									</Then>
								</RelationContextCheck>
								<EntityContextCheck context="crime_ignoreNPCHitVolumes" target="$this.id" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$ignore = true" />
									</Then>
								</EntityContextCheck>
								<IfCondition failOnCondition="false" condition="$volumeData.target == $this.id | &#10;$volumeData.attacker == $this.id">
									<Expression expressions="$ignore = true" />
								</IfCondition>
								<RecentlySkirmished NPC1="$this.id" NPC2="$volumeData.attacker" MaxTime="2" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$ignore = true" />
									</Then>
								</RecentlySkirmished>
								<RecentlySkirmished NPC1="$this.id" NPC2="$volumeData.target" MaxTime="2" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$ignore = true" />
									</Then>
								</RecentlySkirmished>
								<DefaultBranch>
									<IfCondition failOnCondition="false" condition="$volumeData.attacker == $__player | $volumeData.attacker == $__playerDog">
										<EntityContextCheck context="crime_ignorePlayerPerception" target="" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$ignore = true" />
											</Then>
											<Else canSkip="1">
												<CheckRelationshipInterval_SoulToSoul TargetSoul="$volumeData.target" Soul="$this.id" Flag="enemy" saveVersion="2">
													<Else canSkip="1">
														<EntityContextCheck context="crime_bff" target="" saveVersion="2">
															<Then canSkip="1">
																<Sequence>
																	<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
																		<Then canSkip="1">
																			<Success />
																		</Then>
																		<Else canSkip="1">
																			<Function_crime_addBffIntermediateBarkData corpse="" isCorpse="false" isViolent="true" reactionIntermediateData="$reactionIntermediateData" nodeLabel="19023730" />
																		</Else>
																	</EntityContextCheck>
																	<Expression expressions="$ignore = true" />
																</Sequence>
															</Then>
														</EntityContextCheck>
													</Else>
												</CheckRelationshipInterval_SoulToSoul>
											</Else>
										</EntityContextCheck>
									</IfCondition>
								</DefaultBranch>
							</Switch>
							<IsIndifferent NPC="$volumeData.attacker" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$isIndifferent = true" />
								</Then>
								<Else canSkip="1">
									<IsIndifferent NPC="$volumeData.target" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$isIndifferent = true" />
										</Then>
									</IsIndifferent>
								</Else>
							</IsIndifferent>
							<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
								<Then canSkip="1">
									<IfCondition failOnCondition="false" condition="$isIndifferent">
										<SuppressFailure>
											<Sequence>
												<Selector>
													<GraphSearch Origin="$volumeData.target" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;crime_guardBarkWhenSeeingAnIndifferentCombat&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$indifferentCombatMetarole" />
													</GraphSearch>
													<GraphSearch Origin="$volumeData.attacker" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;crime_guardBarkWhenSeeingAnIndifferentCombat&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$indifferentCombatMetarole" />
													</GraphSearch>
												</Selector>
												<ReinitVariable variable="$reactionIntermediateData" />
												<Expression expressions="$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_indifferentCombat&apos;].value &#10;$reactionIntermediateData.barkData.lookAt = $volumeData.attacker &#10;$reactionIntermediateData.barkData.metarole = $indifferentCombatMetarole &#10;$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.indifferentCombat &#10;$reactionIntermediateData.barkData.barkType = $enum:crime_barkReactionType.ingameMonolog &#10; &#10; &#10;$ignore = true" />
											</Sequence>
										</SuppressFailure>
									</IfCondition>
								</Then>
							</EntityContextCheck>
							<IfElseCondition failOnCondition="false" condition="~$ignore" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<Sequence>
											<Expression expressions="$observer_soul.value = $this.id &#10;$attacker_soul.value = $volumeData.attacker &#10;$victim_soul.value = $volumeData.target" />
											<SendAIConceptSignal_hitSeenNotification observer="$observer_soul" attacker="$attacker_soul" victim="$victim_soul" attackKind="$volumeData.kind" />
										</Sequence>
										<IsDeadCheck SoulWUID="$volumeData.target" FailSubtMissing="false" saveVersion="2">
											<Then canSkip="1">
												<CheckRelationshipInterval_SoulToSoul TargetSoul="$volumeData.target" Soul="$this.id" Flag="enemy" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$isEnemyCorpse = true" />
													</Then>
													<Else canSkip="1">
														<IfCondition failOnCondition="false" condition="$volumeData.attacker == $__player | $__playerDog">
															<Sequence>
																<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
																<Selector>
																	<Sequence>
																		<GraphSearch Origin="$volumeData.target" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																			<LinkDataFilter tag="&apos;switch_corpse&apos;" condition="$__link_switch_corpse.timeOfDeath + $data:script_param[&apos;crime_corpseViolationTimer&apos;].value &lt; $now |  &#10;( &#10;  $__link_switch_corpse.resolved &amp; &#10;  $__link_switch_corpse.timeOfDeath + $data:script_param[&apos;crime_corpseViolationTimer&apos;].value / 2 &lt; $now  &#10;)" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																		</GraphSearch>
																		<Expression expressions="$stimulusCorpseViolation.corpse = $volumeData.target" />
																		<IfElseCondition failOnCondition="false" condition="$volumeData.indifferentHit" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$indifferenceStimulusKind = $enum:crime_stimulusKind.corpseViolation" />
																			</Then>
																			<Else canSkip="1">
																				<Expression expressions="$isCorpseViolation = true" />
																			</Else>
																		</IfElseCondition>
																	</Sequence>
																	<IfElseCondition failOnCondition="false" condition="$volumeData.indifferentHit" saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$indifferenceStimulusKind = $enum:crime_stimulusKind.murder" />
																		</Then>
																		<Else canSkip="1">
																			<EntityContextCheck context="combat_ignoreMurderedByPlayer" target="$volumeData.target" saveVersion="2">
																				<Else canSkip="1">
																					<Expression expressions="$isMurder = true" />
																				</Else>
																			</EntityContextCheck>
																		</Else>
																	</IfElseCondition>
																</Selector>
															</Sequence>
														</IfCondition>
													</Else>
												</CheckRelationshipInterval_SoulToSoul>
											</Then>
											<Else canSkip="1">
												<Success />
											</Else>
										</IsDeadCheck>
										<Switch>
											<IfCondition failOnCondition="false" condition="$isEnemyCorpse">
												<Success />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$isCorpseViolation">
												<Function_switch_handleStimulusCorpseViolation stimulus="$stimulusCorpseViolation" nodeLabel="99145794" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$isMurder">
												<Sequence>
													<Expression expressions="$stimulusMurder.corpse = $volumeData.target &#10;$stimulusMurder.isCarried = false &#10;$stimulusMurder.killedByDog = $volumeData.kind == $enum:crime_attackKind.dog &#10;$stimulusMurder.killedByHorse = $volumeData.kind == $enum:crime_attackKind.collision" />
													<Function_switch_handleStimulusMurder stimulus="$stimulusMurder" nodeLabel="89029463" />
												</Sequence>
											</IfCondition>
											<DefaultBranch>
												<Switch>
													<IfCondition failOnCondition="false" condition="$volumeData.kind == $enum:crime_attackKind.armed |  &#10;$volumeData.kind == $enum:crime_attackKind.unarmed |  &#10;$volumeData.kind == $enum:crime_attackKind.stealth | &#10;$volumeData.kind == $enum:crime_attackKind.dog | &#10;$volumeData.kind == $enum:crime_attackKind.collision">
														<IfElseCondition failOnCondition="false" condition="$volumeData.indifferentHit" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$indifferenceStimulusKind = $enum:crime_stimulusKind.combat" />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<Expression expressions="$stimulusCombat.participant1 = $volumeData.attacker &#10;$stimulusCombat.participant2 = $volumeData.target &#10;$stimulusCombat.attackKind = $volumeData.kind &#10;$stimulusCombat.hitStrength = $volumeData.hitStrength &#10;$stimulusCombat.isHorseCollision = $volumeData.isHorseCollision" />
																	<Function_switch_handleStimulusCombat stimulus="$stimulusCombat" nodeLabel="29046281" />
																</Sequence>
															</Else>
														</IfElseCondition>
													</IfCondition>
													<IfCondition failOnCondition="false" condition="$volumeData.kind == $enum:crime_attackKind.missile">
														<IfElseCondition failOnCondition="false" condition="$volumeData.indifferentHit" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$indifferenceStimulusKind = $enum:crime_stimulusKind.shooter" />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<Expression expressions="$stimulusShooter.shooter = $volumeData.attacker &#10;$stimulusShooter.target = $volumeData.target &#10;$stimulusShooter.gotDirectHit = true &#10;$stimulusShooter.hitStrength = $volumeData.hitStrength &#10;$stimulusShooter.projectileType = $enum:crime_projectileType.arrow" />
																	<GetSpatialInfo In="$volumeData.attacker" Out="$stimulusShooter.position" What="Position" />
																	<Function_switch_handleStimulusShooter stimulus="$stimulusShooter" nodeLabel="77150876" />
																</Sequence>
															</Else>
														</IfElseCondition>
													</IfCondition>
													<DefaultBranch>
														<ErrorNode Message="&apos;unhandled attack kind&apos;" />
													</DefaultBranch>
												</Switch>
											</DefaultBranch>
										</Switch>
										<IfCondition failOnCondition="false" condition="$indifferenceStimulusKind ~= $enum:crime_stimulusKind.unknown">
											<Sequence>
												<GetSpatialInfo In="$volumeData.target" Out="$pos" What="Position" />
												<CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.passive" Information="" Position="$pos" StimulusKind="$indifferenceStimulusKind" ShouldReact="$useless" ShouldWatch="$shouldWatch" />
												<IfCondition failOnCondition="false" condition="$shouldWatch">
													<Sequence>
														<Expression expressions="$assaultData.attacker = $volumeData.attacker &#10;$assaultData.victim = $volumeData.target &#10;$assaultData.kind = $volumeData.kind &#10;$assaultData.hitStrength = $volumeData.hitStrength &#10;$assaultData.directHit = $volumeData.directHit &#10;$assaultData.isHorseCollision = $volumeData.isHorseCollision" />
														<Function_callInterrupt_watch alreadyCriminal="false" assaultData="$assaultData" corpseState="$enum:corpseState.undiscovered" defenceMode="false" freshlyAttributedCrime="false" ignorePriority="false" information="" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$enum:crime_source.direct" stimulusKind="$indifferenceStimulusKind" target="$volumeData.attacker" nodeLabel="42002280" />
													</Sequence>
												</IfCondition>
											</Sequence>
										</IfCondition>
									</Sequence>
								</Then>
								<Else canSkip="1">
									<IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$volume" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
								</Else>
							</IfElseCondition>
						</Sequence>
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="assaultData" comment="" />
				<Variable name="attacker_soul" comment="" />
				<Variable name="ignore" comment="" />
				<Variable name="indifferenceStimulusKind" comment="" />
				<Variable name="indifferentCombatMetarole" comment="" />
				<Variable name="isCorpseViolation" comment="" />
				<Variable name="isEnemyCorpse" comment="" />
				<Variable name="isIndifferent" comment="" />
				<Variable name="isMurder" comment="" />
				<Variable name="now" comment="" />
				<Variable name="observer_soul" comment="" />
				<Variable name="pos" comment="" />
				<Variable name="shouldWatch" comment="" />
				<Variable name="stimulusCombat" comment="" />
				<Variable name="stimulusCorpseViolation" comment="" />
				<Variable name="stimulusMurder" comment="" />
				<Variable name="stimulusShooter" comment="" />
				<Variable name="useless" comment="" />
				<Variable name="victim_soul" comment="" />
				<Variable name="volumeData" comment="" />
				<Variable name="reactionIntermediateData" comment="" />
				<Variable name="volume" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="80" editorPosY="40" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
									<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
									</Datalyzer>
								</GraphSearch>
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<RelationContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</RelationContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<RecentlySkirmished hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</RecentlySkirmished>
									<RecentlySkirmished hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</RecentlySkirmished>
									<DefaultBranch>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Else>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Then>
																			<Else>
																				<Function_crime_addBffIntermediateBarkData hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_addBffIntermediateBarkData>
																			</Else>
																		</EntityContextCheck>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Sequence>
																</Then>
															</EntityContextCheck>
														</Else>
													</CheckRelationshipInterval_SoulToSoul>
												</Else>
											</EntityContextCheck>
										</IfCondition>
									</DefaultBranch>
								</Switch>
								<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</IsIndifferent>
									</Else>
								</IsIndifferent>
								<EntityContextCheck hasInputBreakpoint="0" comment="#KCD2-77317" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
													</Selector>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</SuppressFailure>
										</IfCondition>
									</Then>
								</EntityContextCheck>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<SendAIConceptSignal_hitSeenNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</SendAIConceptSignal_hitSeenNotification>
											</Sequence>
											<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="TODO: pridat bark jako v noseni mrtveho nepritele na zadech" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetTime>
																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</LinkDataFilter>
																			</GraphSearch>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																			<Else>
																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Else>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Else>
																				</EntityContextCheck>
																			</Else>
																		</IfElseCondition>
																	</Selector>
																</Sequence>
															</IfCondition>
														</Else>
													</CheckRelationshipInterval_SoulToSoul>
												</Then>
												<Else>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Else>
											</IsDeadCheck>
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_switch_handleStimulusCorpseViolation hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_switch_handleStimulusCorpseViolation>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<Function_switch_handleStimulusMurder hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_switch_handleStimulusMurder>
													</Sequence>
												</IfCondition>
												<DefaultBranch>
													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<Function_switch_handleStimulusCombat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_switch_handleStimulusCombat>
																	</Sequence>
																</Else>
															</IfElseCondition>
														</IfCondition>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetSpatialInfo>
																		<Function_switch_handleStimulusShooter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_switch_handleStimulusShooter>
																	</Sequence>
																</Else>
															</IfElseCondition>
														</IfCondition>
														<DefaultBranch>
															<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ErrorNode>
														</DefaultBranch>
													</Switch>
												</DefaultBranch>
											</Switch>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetSpatialInfo>
													<CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</CheckReactionLimit>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<Function_callInterrupt_watch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_watch>
														</Sequence>
													</IfCondition>
												</Sequence>
											</IfCondition>
										</Sequence>
									</Then>
									<Else>
										<IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</IgnorePerception>
									</Else>
								</IfElseCondition>
							</Sequence>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>