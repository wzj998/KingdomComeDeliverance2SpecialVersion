<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleStimulusSound" is_function="1">
		<Variables>
			<Variable name="affectNervousness" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="alreadySearching" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="animalDogBarkData" type="crime:animalDogBarkData" values="" isPersistent="0" form="single" />
			<Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="directReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="distanceToSound" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="dramaticbarkData" type="crime:dramaticBark" values="" isPersistent="0" form="single" />
			<Variable name="dummyWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="emptyInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="flyBy" type="weapon:onPlayerArrowFlyingBy" values="" isPersistent="0" form="single" />
			<Variable name="forcedReaction" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="globalCooldowns" type="crime:globalCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="goToLookAround" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="hasReactionPriorityBoost" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="homeCooldowns" type="crime:homeCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="hotEntity" type="switch:hotEntity" values="" isPersistent="0" form="single" />
			<Variable name="ignoreSound" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="imPublicEnemy" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="informations" type="information" values="" isPersistent="0" form="array" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.switch" isPersistent="0" form="single" />
			<Variable name="isAwareOfPlayer" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isInLimit" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="limitDistance" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="lock" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="lockpickReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="nearbyNpcs" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="nervousnessToken" type="_string" values="&apos;heard_&apos;" isPersistent="0" form="single" />
			<Variable name="npcCooldowns" type="crime:npcCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="owner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="playerInSkirmishIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="playerIsEnemy" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerPos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="playersDogTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reactBecauseAlone" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="reactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="scheduledPriority" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="shouldReact" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shouldReactTrespass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shouldWatch" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="skirmishParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="stimulusDramaticBark" type="switch:stimulus:dramaticBark" values="" isPersistent="0" form="single" />
			<Variable name="stimulus_disturbance" type="switch:stimulus:disturbance" values="" isPersistent="0" form="single" />
			<Variable name="stimulus_lockpick" type="switch:stimulus:lockpick" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:stimulus:sound" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$stimulus.kind ~= $enum:sound.hunting_alarm">
					<Sequence>
						<GetScheduledPriority Priority="$scheduledPriority" />
						<EntityContextCheck context="crime_forceReactionToSound" target="" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$forcedReaction = true" />
							</Then>
							<Else canSkip="1">
								<EntityContextCheck context="crime_interruptLookAround" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$alreadySearching = true" />
									</Then>
								</EntityContextCheck>
							</Else>
						</EntityContextCheck>
						<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$playerIsEnemy = true" />
							</Then>
							<Else canSkip="1">
								<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$imPublicEnemy = true" />
									</Then>
									<Else canSkip="1">
										<Success />
									</Else>
								</IsPublicEnemy>
							</Else>
						</CheckRelationshipInterval_SoulToSoul>
						<EntityContextCheck context="crime_boostSoundLookAroundPriority" target="" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$hasReactionPriorityBoost = true" />
							</Then>
						</EntityContextCheck>
						<IfElseCondition failOnCondition="false" condition="$forcedReaction | &#10;$alreadySearching | &#10;$stimulus.kind == $enum:sound.gun_fired | &#10;$scheduledPriority &lt;= 29 | &#10; &#10;//enemies or ctx react over quest behaviours aswell &#10;($scheduledPriority &lt;= 69 &amp; ($playerIsEnemy | $imPublicEnemy | $hasReactionPriorityBoost )) | &#10; &#10;//pebble in check &#10;( &#10; ( &#10;  $scheduledPriority == 84 |  &#10;  $scheduledPriority == 20 |  &#10;  $scheduledPriority == 28 |  &#10;  $scheduledPriority == 100 &#10; )  &#10; &amp;  &#10; ( &#10;  $stimulus.kind == $enum:sound.decoy_distract |  &#10;  $stimulus.kind == $enum:sound.lure_distract | &#10;  $stimulus.kind == $enum:sound.whistle | &#10;  $stimulus.kind == $enum:sound.dog_distract &#10; ) &#10;)" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<GetKnownInformations OutArray="$informations" Holder="$this.id" />
									<Sequence>
										<MeasureDistance position1="$this.id" position2="$stimulus.position" mode="ThreeDimensions" result="$limitDistance" />
										<IfElseCondition failOnCondition="false" condition="//NPC very close &#10;$limitDistance &lt; $data:script_param[&apos;crime_distanceToIgnoreLimitsForSoundReaction&apos;].value &#10; &#10;//everyone reacts to combat &#10;| $stimulus.kind == $enum:sound.combat &#10;| $stimulus.kind == $enum:sound.combatScript &#10;| $stimulus.kind == $enum:sound.bow_fired &#10;| $stimulus.kind == $enum:sound.gun_fired &#10;| $stimulus.kind == $enum:sound.arrow_hit &#10;| $stimulus.kind == $enum:sound.bullet_hit &#10; &#10;//distraction handled by subscriptions &#10;| $stimulus.kind == $enum:sound.decoy_distract &#10;| $stimulus.kind == $enum:sound.lure_distract &#10;| $stimulus.kind == $enum:sound.whistle &#10;| $stimulus.kind == $enum:sound.dog_distract" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$isInLimit = true" />
											</Then>
											<Else canSkip="1">
												<IfElseCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.dog_attack_command" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<SuppressFailure>
																<GetTarget ReferenceNPC="$__playerDog" TargetVarOut="$playersDogTarget" />
															</SuppressFailure>
															<IfElseCondition failOnCondition="false" condition="$playersDogTarget == $this.id" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$isInLimit = true" />
																</Then>
																<Else canSkip="1">
																	<CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.blindInvestigate" Information="" Position="$stimulus.position" StimulusKind="$enum:crime_stimulusKind.sound" ShouldReact="$isInLimit" ShouldWatch="$shouldWatch" />
																</Else>
															</IfElseCondition>
														</Sequence>
													</Then>
													<Else canSkip="1">
														<CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.blindInvestigate" Information="" Position="$stimulus.position" StimulusKind="$enum:crime_stimulusKind.sound" ShouldReact="$isInLimit" ShouldWatch="$shouldWatch" />
													</Else>
												</IfElseCondition>
											</Else>
										</IfElseCondition>
									</Sequence>
									<IfCondition failOnCondition="false" condition="$isInLimit |  &#10;($stimulus.kind == $enum:sound.dramatic_bark &amp; $shouldWatch)">
										<Sequence>
											<GetTime TimeType="GameTime" OutVar="$currentTime" Delta="" />
											<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
												<LinkTagFilter tag="&apos;crime_npcCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												<Datalyzer Tag="&apos;crime_npcCooldowns&apos;" Quantifiers="Exists" Parent="" Child="" Data="$npcCooldowns" saveVersion="2" />
											</GraphSearch>
											<Expression expressions="$hotEntity.stimulusSound = $stimulus" />
											<Function_crime_checkPlayerAwareness timeThreshold="30000" isAwareOfPlayer="$isAwareOfPlayer" nodeLabel="15206458" />
											<Switch>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.combat">
													<EntityContextCheck context="crime_ignoreCombatSounds" target="" saveVersion="2">
														<Else canSkip="1">
															<GameContextCheck context="crime_global_ignoreCombatSounds" saveVersion="2">
																<Else canSkip="1">
																	<Sequence>
																		<GetSpatialInfo In="$__player" Out="$playerPos" What="Position" />
																		<MeasureDistance position1="$playerPos" position2="$stimulus.position" mode="ThreeDimensions" result="$distanceToSound" />
																		<IfCondition failOnCondition="false" condition="$distanceToSound &lt;= $data:script_param[&apos;crime_combatSoundImmediateReactionMaxDistance&apos;].value">
																			<Sequence>
																				<GetSkirmishParticipants ReferenceNPC="$__player" Active="true" Passive="false" Targets="true" HumanOnly="false" ParticipantsOutVar="$skirmishParticipants" />
																				<VarOperation varName="$skirmishParticipants" targetVarName="$playerInSkirmishIndex" operation="Find" argument="$__player" />
																				<IfCondition failOnCondition="false" condition="$playerInSkirmishIndex &gt;= 0">
																					<IfElseCondition failOnCondition="false" condition="#skirmishParticipants &gt; 2" saveVersion="2">
																						<Then canSkip="1">
																							<Sequence>
																								<Function_switch_handleAwareness_combat perceptible="$__player" reactionIntermediateData="" nodeLabel="23144840" />
																								<Expression expressions="$directReaction = true" />
																							</Sequence>
																						</Then>
																						<Else canSkip="1">
																							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
																								<Then canSkip="1">
																									<Sequence>
																										<Function_switch_handleAwareness_enemy enemy="$__player" nodeLabel="91981978" />
																										<Expression expressions="$directReaction = true" />
																									</Sequence>
																								</Then>
																								<Else canSkip="1">
																									<Success />
																								</Else>
																							</CheckRelationshipInterval_SoulToSoul>
																						</Else>
																					</IfElseCondition>
																				</IfCondition>
																				<IsIndifferent NPC="$__player" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$affectNervousness = false" />
																					</Then>
																				</IsIndifferent>
																			</Sequence>
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="~$directReaction">
																			<EntityContextCheck context="crime_bff" target="" saveVersion="2">
																				<Then canSkip="1">
																					<Success />
																				</Then>
																				<Else canSkip="1">
																					<Sequence>
																						<IfCondition failOnCondition="false" condition="$affectNervousness">
																							<AffectFeelings Npc="$this.id" Token="&apos;heard_combat&apos;" AffectNervousness="true" AffectReputation="false" />
																						</IfCondition>
																						<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$enum:switch_interruptInitiator.switch" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="73163803" />
																					</Sequence>
																				</Else>
																			</EntityContextCheck>
																		</IfCondition>
																	</Sequence>
																</Else>
															</GameContextCheck>
														</Else>
													</EntityContextCheck>
												</IfCondition>
												<EntityContextCheck context="crime_ignorePlayersSounds" target="" saveVersion="2">
													<Then canSkip="1">
														<Success />
													</Then>
												</EntityContextCheck>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.movement | &#10;$stimulus.kind == $enum:sound.bio_drunkeness | &#10;$stimulus.kind == $enum:sound.bio_exhaustion | &#10;$stimulus.kind == $enum:sound.bio_hunger | &#10;$stimulus.kind == $enum:sound.door | &#10;$stimulus.kind == $enum:sound.alarm | &#10;$stimulus.kind == $enum:sound.photo_mode">
													<Sequence>
														<Switch>
															<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bio_drunkeness | &#10;$stimulus.kind == $enum:sound.bio_exhaustion | &#10;$stimulus.kind == $enum:sound.bio_hunger">
																<EntityContextCheck context="crime_ignoreBioSounds" target="" saveVersion="2">
																	<Then canSkip="1">
																		<Expression expressions="$ignoreSound = true" />
																	</Then>
																	<Else canSkip="1">
																		<IsTimeSkipping saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$ignoreSound = true" />
																			</Then>
																			<Else canSkip="1">
																				<Success />
																			</Else>
																		</IsTimeSkipping>
																	</Else>
																</EntityContextCheck>
															</IfCondition>
															<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.movement | &#10;$stimulus.kind == $enum:sound.door">
																<EntityContextCheck context="crime_ignoreMovementSounds" target="" saveVersion="2">
																	<Then canSkip="1">
																		<Expression expressions="$ignoreSound = true" />
																	</Then>
																</EntityContextCheck>
															</IfCondition>
															<DefaultBranch>
																<Success />
															</DefaultBranch>
														</Switch>
														<IfCondition failOnCondition="false" condition="~$ignoreSound">
															<Sequence>
																<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="$stimulus.position" ForceSemipublicReaction="false" ShouldUseVec3Position="true" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$shouldReact" ReactionSuppressed="$reactionSuppressed" />
																<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.alarm">
																	<AffectFeelings Npc="$this.id" Token="&apos;heard_alarm&apos;" AffectNervousness="true" AffectReputation="false" />
																</IfCondition>
																<Switch>
																	<IfCondition failOnCondition="false" condition="~$shouldReact &amp; &#10;~$forcedReaction &amp; &#10;~$playerIsEnemy &amp; &#10;~$imPublicEnemy &amp; &#10;~$isAwareOfPlayer">
																		<IsInsideAreaWithLabel Position="$this.id" Label="&apos;settlement&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																			<Then canSkip="1">
																				<Success />
																			</Then>
																			<Else canSkip="1">
																				<IsInsideAreaWithLabel Position="$stimulus.position" Label="&apos;settlement&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																					<Then canSkip="1">
																						<Success />
																					</Then>
																					<Else canSkip="1">
																						<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																							<Then canSkip="1">
																								<Success />
																							</Then>
																							<Else canSkip="1">
																								<IsInsideAreaWithLabel Position="$stimulus.position" Label="&apos;private&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																									<Then canSkip="1">
																										<Success />
																									</Then>
																									<Else canSkip="1">
																										<EntityContextCheck context="crime_suppressForcedReactionToSoundWhenAlone" target="" saveVersion="2">
																											<Else canSkip="1">
																												<IfCondition failOnCondition="false" condition="$npcCooldowns.reactionToSoundWhenAlone &lt; $currentTime | &#10;$npcCooldowns.reactionToSoundWhenAlone == 0">
																													<Sequence>
																														<CircularSpatialQuery Radius="35.000000" Center="$this.id" ToFill="$nearbyNpcs" Precision="Exact" Filter="All" />
																														<EraseFromArray array="$nearbyNpcs" condition="$__value == $this.id" />
																														<EraseFromArray array="$nearbyNpcs" condition="$__value == $__player" />
																														<Expression expressions="$reactBecauseAlone = #nearbyNpcs == 0" />
																														<IfCondition failOnCondition="false" condition="$reactBecauseAlone">
																															<Sequence>
																																<Expression expressions="$goToLookAround = true &#10; &#10;$npcCooldowns.reactionToSoundWhenAlone = $currentTime + $data:script_param[&apos;crime_reactionToSoundWhenAloneCooldown&apos;].value" />
																																<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_npcCooldowns&apos;" Data="$npcCooldowns" LinkOpHandleMode="OverWrite" />
																															</Sequence>
																														</IfCondition>
																													</Sequence>
																												</IfCondition>
																											</Else>
																										</EntityContextCheck>
																									</Else>
																								</IsInsideAreaWithLabel>
																							</Else>
																						</IsInsideAreaWithLabel>
																					</Else>
																				</IsInsideAreaWithLabel>
																			</Else>
																		</IsInsideAreaWithLabel>
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$imPublicEnemy &amp;  &#10;~$shouldReact &amp; &#10;~$forcedReaction &amp; &#10;~$playerIsEnemy &amp; &#10;~$reactionSuppressed">
																		<SuppressFailure>
																			<Sequence>
																				<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																					<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
																				</GraphSearch>
																				<GraphSearch Origin="$home" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																					<LinkTagFilter tag="&apos;crime_trespassEscalation&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																					<LinkDataFilter tag="&apos;crime_trespassEscalation&apos;" condition="$__link_crime_trespassEscalation.counterUpdateTimestamp &gt; $currentTime - $data:script_param[&apos;crime_nearTrespassGracePeriodAfterLeavingTrespass&apos;].value &amp; &#10;$__link_crime_trespassEscalation.counterUpdateTimestamp ~= 0" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																					<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																						<Child0 canSkip="1">
																							<SoulIsUnconsciousFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																						</Child0>
																					</NegationOp>
																					<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																				</GraphSearch>
																				<Expression expressions="$reactionSuppressed = true" />
																			</Sequence>
																		</SuppressFailure>
																	</IfCondition>
																	<DefaultBranch>
																		<Success />
																	</DefaultBranch>
																</Switch>
																<IfCondition failOnCondition="false" condition="$shouldReact | $playerIsEnemy | ($imPublicEnemy &amp; ~$reactionSuppressed) | $forcedReaction | $reactBecauseAlone">
																	<Sequence>
																		<IfCondition failOnCondition="false" condition="$playerIsEnemy | &#10;$imPublicEnemy | &#10;$trespassSevereness &gt; $enum:trespassLevel.semipublic | &#10;$scheduledPriority &lt; 29">
																			<AffectFeelings Npc="$this.id" Token="&apos;heard_movement_bio&apos;" AffectNervousness="true" AffectReputation="false" />
																		</IfCondition>
																		<IfElseCondition failOnCondition="false" condition="$isAwareOfPlayer &amp; $reactBecauseAlone" saveVersion="2">
																			<Then canSkip="1">
																				<Success />
																			</Then>
																			<Else canSkip="1">
																				<IfElseCondition failOnCondition="false" condition="$forcedReaction | ($playerIsEnemy &amp; $stimulus.kind == $enum:sound.door) | $stimulus.kind == $enum:sound.photo_mode" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$goToLookAround = true" />
																					</Then>
																					<Else canSkip="1">
																						<Sequence>
																							<ActorStateCheck Who="$__player" State="crouch" FailWithSubtreeMissing="false" saveVersion="2">
																								<Then canSkip="1">
																									<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																										<Then canSkip="1">
																											<CheckNervousnessInterval Soul="$this.id" Flag="crime_investigateSound_courageous" saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$goToLookAround = true" />
																												</Then>
																											</CheckNervousnessInterval>
																										</Then>
																										<Else canSkip="1">
																											<CheckNervousnessInterval Soul="$this.id" Flag="crime_investigateSound" saveVersion="2">
																												<Then canSkip="1">
																													<Expression expressions="$goToLookAround = true" />
																												</Then>
																											</CheckNervousnessInterval>
																										</Else>
																									</EntityContextCheck>
																								</Then>
																								<Else canSkip="1">
																									<Expression expressions="$goToLookAround = true" />
																								</Else>
																							</ActorStateCheck>
																							<IfCondition failOnCondition="false" condition="~$goToLookAround &amp; $scheduledPriority &lt;= 25 &amp; &#10;($npcCooldowns.leavingCrimeInterrupt + $data:script_param[&apos;owcd_npc_postCrimeInterrupt&apos;].value &lt; $currentTime | &#10;$npcCooldowns.leavingCrimeInterrupt == 0)">
																								<Sequence>
																									<Switch>
																										<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bio_drunkeness">
																											<Expression expressions="$metarole = &apos;NPC_REAGUJE_NA_ZVUK_BIO_OPILOST&apos;" />
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bio_exhaustion">
																											<Expression expressions="$metarole = &apos;NPC_REAGUJE_NA_ZVUK_BIO_UNAVA&apos;" />
																										</IfCondition>
																										<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bio_hunger">
																											<Expression expressions="$metarole = &apos;NPC_REAGUJE_NA_ZVUK_BIO_HLAD&apos;" />
																										</IfCondition>
																										<DefaultBranch>
																											<Expression expressions="$metarole = &apos;NPC_REAGUJE_NA_ZVUK_UNIVERZAL&apos;" />
																										</DefaultBranch>
																									</Switch>
																									<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="$metarole" priority="$enum:crime_barkPriority.low" nodeLabel="46291076" />
																								</Sequence>
																							</IfCondition>
																						</Sequence>
																					</Else>
																				</IfElseCondition>
																			</Else>
																		</IfElseCondition>
																		<IfCondition failOnCondition="false" condition="$goToLookAround">
																			<Sequence>
																				<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.sound" />
																				<Function_switch_addHotEntity data="$hotEntity" entity="$__player" expiration="20" nodeLabel="78225536" />
																				<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="$reactBecauseAlone" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="22765902" />
																			</Sequence>
																		</IfCondition>
																	</Sequence>
																</IfCondition>
																<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bio_hunger">
																	<EntityContextCheck context="crime_reactToHungryPlayer" target="" saveVersion="2">
																		<Then canSkip="1">
																			<DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="5.000000" High="5.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
																				<IfElseCondition failOnCondition="false" condition="$isAwareOfPlayer" saveVersion="2">
																					<Then canSkip="1">
																						<IsTimeSkipping saveVersion="2">
																							<Then canSkip="1">
																								<Success />
																							</Then>
																							<Else canSkip="1">
																								<IfCondition failOnCondition="false" condition="$scheduledPriority &lt;= 25">
																									<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;SENKYRKA_NABIZI_HRACI_JIDLO&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="80774430" />
																								</IfCondition>
																							</Else>
																						</IsTimeSkipping>
																					</Then>
																					<Else canSkip="1">
																						<Success />
																					</Else>
																				</IfElseCondition>
																			</DistanceCondition>
																		</Then>
																	</EntityContextCheck>
																</IfCondition>
															</Sequence>
														</IfCondition>
													</Sequence>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.decoy_distract |  &#10;$stimulus.kind == $enum:sound.lure_distract | &#10;$stimulus.kind == $enum:sound.whistle">
													<Sequence>
														<IfElseCondition failOnCondition="false" condition="$stimulus.kind ~= $enum:sound.whistle | &#10;$playerIsEnemy |  &#10;$forcedReaction |  &#10;$imPublicEnemy" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$shouldReact = true" />
															</Then>
															<Else canSkip="1">
																<EntityContextCheck context="crime_interruptLookAround" target="" saveVersion="2">
																	<Then canSkip="1">
																		<Expression expressions="$shouldReact = true" />
																	</Then>
																	<Else canSkip="1">
																		<Sequence>
																			<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="$stimulus.position" ForceSemipublicReaction="true" ShouldUseVec3Position="true" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$shouldReactTrespass" ReactionSuppressed="$reactionSuppressed" />
																			<IfCondition failOnCondition="false" condition="$shouldReactTrespass">
																				<IsInsideAreaWithLabel Position="$stimulus.position" Label="&apos;interior&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$shouldReact = $trespassSevereness &gt;= $enum:trespassLevel.semipersonal" />
																					</Then>
																					<Else canSkip="1">
																						<Expression expressions="$shouldReact = $trespassSevereness &gt;= $enum:trespassLevel.personal" />
																					</Else>
																				</IsInsideAreaWithLabel>
																			</IfCondition>
																			<IfCondition failOnCondition="false" condition="~$shouldReact">
																				<IsInsideAreaWithLabel Position="$this.id" Label="&apos;settlement&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																					<Then canSkip="1">
																						<Success />
																					</Then>
																					<Else canSkip="1">
																						<IsInsideAreaWithLabel Position="$stimulus.position" Label="&apos;settlement&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																							<Then canSkip="1">
																								<Success />
																							</Then>
																							<Else canSkip="1">
																								<IsInsideAreaWithLabel Position="$this.id" Label="&apos;private&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																									<Then canSkip="1">
																										<Success />
																									</Then>
																									<Else canSkip="1">
																										<IsInsideAreaWithLabel Position="$stimulus.position" Label="&apos;private&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
																											<Then canSkip="1">
																												<Success />
																											</Then>
																											<Else canSkip="1">
																												<EntityContextCheck context="crime_suppressForcedReactionToSoundWhenAlone" target="" saveVersion="2">
																													<Else canSkip="1">
																														<IfCondition failOnCondition="false" condition="$npcCooldowns.reactionToSoundWhenAlone &lt; $currentTime | &#10;$npcCooldowns.reactionToSoundWhenAlone == 0">
																															<Sequence>
																																<CircularSpatialQuery Radius="35.000000" Center="$this.id" ToFill="$nearbyNpcs" Precision="Exact" Filter="All" />
																																<EraseFromArray array="$nearbyNpcs" condition="$__value == $this.id" />
																																<EraseFromArray array="$nearbyNpcs" condition="$__value == $__player" />
																																<Expression expressions="$reactBecauseAlone = #nearbyNpcs == 0" />
																																<IfCondition failOnCondition="false" condition="$reactBecauseAlone">
																																	<Sequence>
																																		<Expression expressions="$shouldReact = true &#10;$npcCooldowns.reactionToSoundWhenAlone = $currentTime + $data:script_param[&apos;crime_reactionToSoundWhenAloneCooldown&apos;].value" />
																																		<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_npcCooldowns&apos;" Data="$npcCooldowns" LinkOpHandleMode="OverWrite" />
																																	</Sequence>
																																</IfCondition>
																															</Sequence>
																														</IfCondition>
																													</Else>
																												</EntityContextCheck>
																											</Else>
																										</IsInsideAreaWithLabel>
																									</Else>
																								</IsInsideAreaWithLabel>
																							</Else>
																						</IsInsideAreaWithLabel>
																					</Else>
																				</IsInsideAreaWithLabel>
																			</IfCondition>
																		</Sequence>
																	</Else>
																</EntityContextCheck>
															</Else>
														</IfElseCondition>
														<Function_crime_handleStimulusSound_reactToPebble forced="false" initiator="$initiator" reactingBecauseAlone="$reactBecauseAlone" shouldReact="$shouldReact" stimulus="$stimulus" nodeLabel="74970559" />
													</Sequence>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.dog_attack_command">
													<Sequence>
														<AffectFeelings Npc="$this.id" Token="&apos;heard_dogWhistle&apos;" AffectNervousness="true" AffectReputation="false" />
														<HasSeenPlayer NPC="$this.id" FullyAwareOnly="true" saveVersion="2">
															<Then canSkip="1">
																<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REAGUJE_NA_ZVUK_PISKANI_NA_PSA&apos;" priority="$enum:crime_barkPriority.addressingPlayer" nodeLabel="25450881" />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.dogWhistle" />
																	<Function_switch_addHotEntity data="$hotEntity" entity="$__player" expiration="20" nodeLabel="50118460" />
																	<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="11468792" />
																</Sequence>
															</Else>
														</HasSeenPlayer>
													</Sequence>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.lockpick">
													<EntityContextCheck context="crime_ignoreLockpicking" target="" saveVersion="2">
														<Else canSkip="1">
															<SuppressFailure>
																<Sequence>
																	<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;lockpick&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;lockpick&apos;" prune="true" negprune="unknown" Parent="" Child="$lock" Data="" />
																	</GraphSearch>
																	<Selector>
																		<GraphSearch Origin="$lock" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																			<LinkTagFilter tag="&apos;crime_lockpickIsLegal&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																			<UnionOp Results="true" Advance="true" EndOp="true" ShortCircuit="false" LocalNodalyzers="false">
																				<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																				<WUIDFilter WUID="$lock" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																			</UnionOp>
																		</GraphSearch>
																		<Sequence>
																			<GetOwner Object="$lock" Owner="$owner" />
																			<Function_crime_checkReactionToTheftFrom owner="$owner" result="$lockpickReaction" nodeLabel="96818517" />
																			<IfCondition failOnCondition="false" condition="$lockpickReaction">
																				<Sequence>
																					<AffectFeelings Npc="$this.id" Token="&apos;heard_lockpick&apos;" AffectNervousness="true" AffectReputation="false" />
																					<HasSeenPlayer NPC="$this.id" FullyAwareOnly="false" saveVersion="2">
																						<Then canSkip="1">
																							<Sequence>
																								<Expression expressions="$stimulus_lockpick.lock = $lock" />
																								<Function_switch_handleStimulusLockpick stimulus="$stimulus_lockpick" nodeLabel="82995878" />
																							</Sequence>
																						</Then>
																						<Else canSkip="1">
																							<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="51101977" />
																						</Else>
																					</HasSeenPlayer>
																				</Sequence>
																			</IfCondition>
																		</Sequence>
																	</Selector>
																</Sequence>
															</SuppressFailure>
														</Else>
													</EntityContextCheck>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.startled_critter">
													<Sequence>
														<IfElseCondition failOnCondition="false" condition="$playerIsEnemy | $forcedReaction" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$shouldReact = true" />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="$stimulus.position" ForceSemipublicReaction="true" ShouldUseVec3Position="true" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$shouldReact" ReactionSuppressed="$reactionSuppressed" />
																	<Expression expressions="$shouldReact = $shouldReact &amp; $trespassSevereness &gt; $enum:trespassLevel.semipublic" />
																</Sequence>
															</Else>
														</IfElseCondition>
														<IfCondition failOnCondition="false" condition="$shouldReact">
															<Sequence>
																<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.shooter &#10;$hotEntity.stimulusShooter.projectileType = $enum:crime_projectileType.pebble" />
																<Function_switch_addHotEntity data="$hotEntity" entity="$__player" expiration="10" nodeLabel="39553040" />
																<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="94946875" />
															</Sequence>
														</IfCondition>
													</Sequence>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.smell | &#10;$stimulus.kind == $enum:sound.perfume">
													<EntityContextCheck context="crime_suppressReactionToSmell" target="" saveVersion="2">
														<Else canSkip="1">
															<IsTimeSkipping saveVersion="2">
																<Then canSkip="1">
																	<Success />
																</Then>
																<Else canSkip="1">
																	<EntityContextCheck context="speech_playerWasRecentlyInNormalDialog" target="$__player" saveVersion="2">
																		<Then canSkip="1">
																			<Success />
																		</Then>
																		<Else canSkip="1">
																			<EntityContextCheck context="crime_canReactToSmell" target="" saveVersion="2">
																				<Then canSkip="1">
																					<Sequence>
																						<GetScheduledPriority Priority="$scheduledPriority" />
																						<IfCondition failOnCondition="false" condition="$scheduledPriority &lt; 10">
																							<Sequence>
																								<Function_crime_getGlobalCrimeLinkData linkData="$globalCooldowns" nodeLabel="13439995" />
																								<IfCondition failOnCondition="false" condition="( &#10; $globalCooldowns.lastSmellBarkTimestamp + $data:script_param[&apos;crime_smellGlobal_cooldown&apos;].value &lt; $currentTime | &#10; $globalCooldowns.lastSmellBarkTimestamp == 0 &#10;)  &#10;&amp; &#10;( &#10; $npcCooldowns.leavingCrimeInterrupt + $data:script_param[&apos;owcd_npc_postCrimeInterrupt&apos;].value &lt; $currentTime | &#10; $npcCooldowns.leavingCrimeInterrupt == 0 &#10;)">
																									<Sequence>
																										<AffectFeelings Npc="$this.id" Token="&apos;heard_smell&apos;" AffectNervousness="true" AffectReputation="false" />
																										<GetTime TimeType="GameTime" OutVar="$globalCooldowns.lastSmellBarkTimestamp" Delta="" />
																										<AddLink From="$__player" To="$__player" Tag="&apos;crime_globalCooldowns&apos;" Data="$globalCooldowns" LinkOpHandleMode="OverWrite" />
																										<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
																											<Then canSkip="1">
																												<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_REAGUJE_NA_PACH_HRAC&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="38049802" />
																											</Then>
																											<Else canSkip="1">
																												<Sequence>
																													<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																														<Then canSkip="1">
																															<CheckNervousnessInterval Soul="$this.id" Flag="crime_investigateSound_courageous" saveVersion="2">
																																<Then canSkip="1">
																																	<Expression expressions="$goToLookAround = true" />
																																</Then>
																															</CheckNervousnessInterval>
																														</Then>
																														<Else canSkip="1">
																															<CheckNervousnessInterval Soul="$this.id" Flag="crime_investigateSound" saveVersion="2">
																																<Then canSkip="1">
																																	<Expression expressions="$goToLookAround = true" />
																																</Then>
																															</CheckNervousnessInterval>
																														</Else>
																													</EntityContextCheck>
																													<IfElseCondition failOnCondition="false" condition="$goToLookAround" saveVersion="2">
																														<Then canSkip="1">
																															<Sequence>
																																<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.sound" />
																																<Function_switch_addHotEntity data="$hotEntity" entity="$__player" expiration="20" nodeLabel="23709449" />
																																<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="21102147" />
																															</Sequence>
																														</Then>
																														<Else canSkip="1">
																															<Sequence>
																																<PlayAdditiveAnimation Fragment="&apos;StealthRecognitionSmell&apos;" Tags="" />
																																<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_REAGUJE_NA_PACH_UNIVERZAL&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="47716783" />
																															</Sequence>
																														</Else>
																													</IfElseCondition>
																												</Sequence>
																											</Else>
																										</HasSeenPlayer>
																									</Sequence>
																								</IfCondition>
																							</Sequence>
																						</IfCondition>
																					</Sequence>
																				</Then>
																			</EntityContextCheck>
																		</Else>
																	</EntityContextCheck>
																</Else>
															</IsTimeSkipping>
														</Else>
													</EntityContextCheck>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bow_fired | &#10;$stimulus.kind == $enum:sound.gun_fired | &#10;$stimulus.kind == $enum:sound.arrow_hit | &#10;$stimulus.kind == $enum:sound.bullet_hit">
													<EntityContextCheck context="crime_ignoreCombatSounds" target="" saveVersion="2">
														<Else canSkip="1">
															<GameContextCheck context="crime_global_ignoreCombatSounds" saveVersion="2">
																<Else canSkip="1">
																	<EntityContextCheck context="crime_ignoreRangeWeaponsSounds" target="" saveVersion="2">
																		<Else canSkip="1">
																			<Sequence>
																				<MeasureDistance position1="$this.id" position2="$stimulus.position" mode="TwoDimensions" result="$distanceToSound" />
																				<Switch>
																					<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.gun_fired">
																						<IfElseCondition failOnCondition="false" condition="$distanceToSound &lt; $data:script_param[&apos;crime_gunFiredSound_highNervousnessDistance&apos;].value" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$nervousnessToken += &apos;gunFired_close&apos;" />
																							</Then>
																							<Else canSkip="1">
																								<Expression expressions="$nervousnessToken += &apos;gunFired&apos;" />
																							</Else>
																						</IfElseCondition>
																					</IfCondition>
																					<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bow_fired">
																						<Expression expressions="$nervousnessToken += &apos;bowFired&apos;" />
																					</IfCondition>
																					<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bullet_hit">
																						<Expression expressions="$nervousnessToken += &apos;bulletHit&apos;" />
																					</IfCondition>
																					<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.arrow_hit">
																						<Expression expressions="$nervousnessToken += &apos;arrowHit&apos;" />
																					</IfCondition>
																				</Switch>
																				<AffectFeelings Npc="$this.id" Token="$nervousnessToken" AffectNervousness="true" AffectReputation="false" />
																				<IfElseCondition failOnCondition="false" condition="($stimulus.kind == $enum:sound.arrow_hit | $stimulus.kind == $enum:sound.bullet_hit) &amp; &#10;$distanceToSound &lt; 1" saveVersion="2">
																					<Then canSkip="1">
																						<Function_switch_handleArrowFlyby arrowFlyingBy="$flyBy" nodeLabel="93254514" />
																					</Then>
																					<Else canSkip="1">
																						<HasSeenPlayer NPC="$this.id" FullyAwareOnly="false" saveVersion="2">
																							<Then canSkip="1">
																								<IfElseCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.gun_fired &amp;  &#10;$distanceToSound &lt; $data:script_param[&apos;crime_gunFiredSound_highNervousnessDistance&apos;].value" saveVersion="2">
																									<Then canSkip="1">
																										<CheckNervousnessInterval Soul="$this.id" Flag="highToInf" saveVersion="2">
																											<Then canSkip="1">
																												<Sequence>
																													<Expression expressions="$stimulus_disturbance.perceivedWuid = $__player" />
																													<Function_switch_handleStimulusDisturbance stimulus="$stimulus_disturbance" nodeLabel="46755419" />
																												</Sequence>
																											</Then>
																											<Else canSkip="1">
																												<Switch>
																													<HasGenderCheck Gender="Female" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
																														<Then canSkip="1">
																															<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_SE_CITI_OHROZENE_ZBABELEC&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="78976744" />
																														</Then>
																													</HasGenderCheck>
																													<EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
																														<Then canSkip="1">
																															<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_SE_CITI_OHROZENE&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="60515065" />
																														</Then>
																													</EntityContextCheck>
																													<DefaultBranch>
																														<Function_crime_crimeSwitchBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBarkFromSleep="false" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="&apos;NPC_SE_CITI_OHROZENE_ZBABELEC&apos;" priority="$enum:crime_barkPriority.medium" nodeLabel="33759418" />
																													</DefaultBranch>
																												</Switch>
																											</Else>
																										</CheckNervousnessInterval>
																									</Then>
																								</IfElseCondition>
																							</Then>
																							<Else canSkip="1">
																								<Sequence>
																									<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$shouldReactTrespass" ReactionSuppressed="$reactionSuppressed" />
																									<Expression expressions="$shouldReactTrespass = $shouldReactTrespass &amp; $trespassSevereness &gt; $enum:trespassLevel.semipersonal" />
																									<IfCondition failOnCondition="false" condition="$shouldReactTrespass | $playerIsEnemy | $distanceToSound &lt; 3 | $stimulus.kind == $enum:sound.gun_fired">
																										<Sequence>
																											<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.weaponSound &#10;$hotEntity.stimulusSound = $stimulus" />
																											<Function_switch_addHotEntity data="$hotEntity" entity="$__player" expiration="20" nodeLabel="25173118" />
																											<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="$emptyInformation" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="45156344" />
																										</Sequence>
																									</IfCondition>
																								</Sequence>
																							</Else>
																						</HasSeenPlayer>
																					</Else>
																				</IfElseCondition>
																			</Sequence>
																		</Else>
																	</EntityContextCheck>
																</Else>
															</GameContextCheck>
														</Else>
													</EntityContextCheck>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.thrash">
													<EntityContextCheck context="crime_ignoreCombatSounds" target="" saveVersion="2">
														<Else canSkip="1">
															<GameContextCheck context="crime_global_ignoreCombatSounds" saveVersion="2">
																<Else canSkip="1">
																	<Sequence>
																		<AffectFeelings Npc="$this.id" Token="&apos;heard_thrash&apos;" AffectNervousness="true" AffectReputation="false" />
																		<HasSeenPlayer NPC="$this.id" FullyAwareOnly="false" saveVersion="2">
																			<Else canSkip="1">
																				<Sequence>
																					<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$shouldReactTrespass" ReactionSuppressed="$reactionSuppressed" />
																					<Expression expressions="$shouldReactTrespass = $shouldReactTrespass &amp; $trespassSevereness &gt; $enum:trespassLevel.semipersonal" />
																					<IfCondition failOnCondition="false" condition="$shouldReactTrespass | $playerIsEnemy | $distanceToSound &lt; 5">
																						<Sequence>
																							<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.weaponSound &#10;$hotEntity.stimulusSound = $stimulus" />
																							<Function_switch_addHotEntity data="$hotEntity" entity="$__player" expiration="20" nodeLabel="54317297" />
																							<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="$emptyInformation" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="11224519" />
																						</Sequence>
																					</IfCondition>
																				</Sequence>
																			</Else>
																		</HasSeenPlayer>
																	</Sequence>
																</Else>
															</GameContextCheck>
														</Else>
													</EntityContextCheck>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.dramatic_bark">
													<Sequence>
														<SuppressFailure>
															<Sequence>
																<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																	<LinkTagFilter tag="&apos;crime_dramaticBarkPos&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$dramaticbarkData" />
																</GraphSearch>
																<RemoveLink From="$this.id" To="$this.id" Tag="&apos;crime_dramaticBarkPos&apos;" LinkOpHandleMode="Error" />
															</Sequence>
														</SuppressFailure>
														<IfElseCondition failOnCondition="false" condition="$dramaticbarkData.pos.x == $stimulus.position.x &amp; &#10;$dramaticbarkData.pos.y == $stimulus.position.y &amp; &#10;$dramaticbarkData.pos.z == $stimulus.position.z &amp; &#10;$dramaticbarkData.time + 5000 &gt; $currentTime" saveVersion="2">
															<Then canSkip="1">
																<Success />
															</Then>
															<Else canSkip="1">
																<Sequence>
																	<Expression expressions="$stimulusDramaticBark.targetVec3 = $stimulus.position" />
																	<Function_switch_handleStimulusDramaticBark stimulus="$stimulusDramaticBark" nodeLabel="65884877" />
																</Sequence>
															</Else>
														</IfElseCondition>
													</Sequence>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.dog_distract">
													<Function_crime_handleStimulusSound_reactToDogDistract forced="false" initiator="$initiator" pos="$stimulus.position" nodeLabel="86670229" />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.dog_bark">
													<Sequence>
														<Function_switch_animal_getMostRecentBarkFromMyHome animalDogBarkData="$animalDogBarkData" nodeLabel="66849307" />
														<IfCondition failOnCondition="false" condition="$animalDogBarkData.dog ~= $__null">
															<Sequence>
																<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="$stimulus.position" ForceSemipublicReaction="false" ShouldUseVec3Position="true" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$trespassArea" Reaction="$shouldReact" ReactionSuppressed="$reactionSuppressed" />
																<Function_crime_getHomeCooldowns home="$__null" useHomeWuid="false" cooldownData="$homeCooldowns" nodeLabel="12987990" />
																<IfCondition failOnCondition="false" condition="$shouldReact">
																	<IfElseCondition failOnCondition="false" condition="$homeCooldowns.dogBarkReaction &gt;= $currentTime | &#10;$homeCooldowns.dogBarkReaction == 0" saveVersion="2">
																		<Then canSkip="1">
																			<Sequence>
																				<Expression expressions="$hotEntity.reason = $enum:switch_hotEntityReason.sound" />
																				<Function_switch_addHotEntity data="$hotEntity" entity="$animalDogBarkData.dog" expiration="20" nodeLabel="93376232" />
																				<Function_callInterrupt_lookAround alarmReactionType="$enum:crime_alarmReactionType.none" amIBuddy="false" corpseState="$enum:corpseState.undiscovered" directHit="false" forceSubscribedSoundReaction="false" ignorePriority="false" information_look="" initiator="$initiator" missingNpc="$__null" position="$stimulus.position" previousReaction="$enum:crime_reactionKind.unknown" reactingToSoundBecauseAlone="false" reportedBy="$__null" searchDirection="" searchPointsFromDirection="false" shooter="$__player" soundType="$stimulus.kind" source="$enum:crime_source.hearing" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.sound" nodeLabel="49426161" />
																			</Sequence>
																		</Then>
																		<Else canSkip="1">
																			<Success />
																		</Else>
																	</IfElseCondition>
																</IfCondition>
															</Sequence>
														</IfCondition>
													</Sequence>
												</IfCondition>
												<DefaultBranch>
													<Success />
												</DefaultBranch>
											</Switch>
										</Sequence>
									</IfCondition>
								</Sequence>
							</Then>
							<Else canSkip="1">
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.decoy_distract |  &#10;$stimulus.kind == $enum:sound.lure_distract | &#10;$stimulus.kind == $enum:sound.whistle | &#10;$stimulus.kind == $enum:sound.dog_distract">
									<Function_crime_busySoundReactorCallback nodeLabel="37216710" />
								</IfCondition>
							</Else>
						</IfElseCondition>
					</Sequence>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="affectNervousness" comment="" />
				<Variable name="alreadySearching" comment="" />
				<Variable name="animalDogBarkData" comment="" />
				<Variable name="currentTime" comment="" />
				<Variable name="directReaction" comment="" />
				<Variable name="distanceToSound" comment="" />
				<Variable name="dramaticbarkData" comment="" />
				<Variable name="dummyWuid" comment="" />
				<Variable name="emptyInformation" comment="" />
				<Variable name="flyBy" comment="" />
				<Variable name="forcedReaction" comment="" />
				<Variable name="globalCooldowns" comment="" />
				<Variable name="goToLookAround" comment="" />
				<Variable name="hasReactionPriorityBoost" comment="" />
				<Variable name="home" comment="" />
				<Variable name="homeCooldowns" comment="" />
				<Variable name="hotEntity" comment="" />
				<Variable name="ignoreSound" comment="" />
				<Variable name="imPublicEnemy" comment="" />
				<Variable name="informations" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="isAwareOfPlayer" comment="" />
				<Variable name="isInLimit" comment="" />
				<Variable name="limitDistance" comment="" />
				<Variable name="lock" comment="" />
				<Variable name="lockpickReaction" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="nearbyNpcs" comment="" />
				<Variable name="nervousnessToken" comment="" />
				<Variable name="npcCooldowns" comment="" />
				<Variable name="owner" comment="" />
				<Variable name="playerInSkirmishIndex" comment="" />
				<Variable name="playerIsEnemy" comment="" />
				<Variable name="playerPos" comment="" />
				<Variable name="playersDogTarget" comment="" />
				<Variable name="reactBecauseAlone" comment="" />
				<Variable name="reactionSuppressed" comment="" />
				<Variable name="scheduledPriority" comment="" />
				<Variable name="shouldReact" comment="" />
				<Variable name="shouldReactTrespass" comment="" />
				<Variable name="shouldWatch" comment="" />
				<Variable name="skirmishParticipants" comment="" />
				<Variable name="stimulusDramaticBark" comment="" />
				<Variable name="stimulus_disturbance" comment="" />
				<Variable name="stimulus_lockpick" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassSevereness" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-340" editorPosY="-610" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="NPCs never react to this, filter out" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GetScheduledPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetScheduledPriority>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
								<Else>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
							<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
								<Else>
									<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Else>
									</IsPublicEnemy>
								</Else>
							</CheckRelationshipInterval_SoulToSoul>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
							</EntityContextCheck>
							<IfElseCondition hasInputBreakpoint="0" comment="enemies react over quest behaviors aswell" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetKnownInformations>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</MeasureDistance>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<IfElseCondition hasInputBreakpoint="0" comment="KCD2-411666 - always react if dog is commanded to attack me" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetTarget>
																</SuppressFailure>
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																	<Else>
																		<CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</CheckReactionLimit>
																	</Else>
																</IfElseCondition>
															</Sequence>
														</Then>
														<Else>
															<CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</CheckReactionLimit>
														</Else>
													</IfElseCondition>
												</Else>
											</IfElseCondition>
										</Sequence>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetTime>
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</WUIDFilter>
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
													<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
													</Datalyzer>
												</GraphSearch>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<Function_crime_checkPlayerAwareness hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_checkPlayerAwareness>
												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Else>
																<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Else>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</GetSpatialInfo>
																			<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</MeasureDistance>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GetSkirmishParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetSkirmishParticipants>
																					<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</VarOperation>
																					<IfCondition hasInputBreakpoint="0" comment="KCD2-460010, player can be passive himself but still used as a reference for skirmish" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_switch_handleAwareness_combat hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_switch_handleAwareness_combat>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Sequence>
																							</Then>
																							<Else>
																								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Function_switch_handleAwareness_enemy hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Function_switch_handleAwareness_enemy>
																											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Expression>
																										</Sequence>
																									</Then>
																									<Else>
																										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Success>
																									</Else>
																								</CheckRelationshipInterval_SoulToSoul>
																							</Else>
																						</IfElseCondition>
																					</IfCondition>
																					<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																					</IsIndifferent>
																				</Sequence>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Success>
																					</Then>
																					<Else>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</AffectFeelings>
																							</IfCondition>
																							<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_callInterrupt_lookAround>
																						</Sequence>
																					</Else>
																				</EntityContextCheck>
																			</IfCondition>
																		</Sequence>
																	</Else>
																</GameContextCheck>
															</Else>
														</EntityContextCheck>
													</IfCondition>
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Then>
													</EntityContextCheck>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Then>
																		<Else>
																			<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Else>
																			</IsTimeSkipping>
																		</Else>
																	</EntityContextCheck>
																</IfCondition>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Then>
																	</EntityContextCheck>
																</IfCondition>
																<DefaultBranch>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</DefaultBranch>
															</Switch>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</DetermineTrespassReaction>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<AffectFeelings hasInputBreakpoint="0" comment="Escalate nervousness for alarm behaviour" breakpointFlags="0">
																			<OutputBreakpoints />
																		</AffectFeelings>
																	</IfCondition>
																	<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="Ignore if forcedReaction or playerIsEnemy, only check if shouldReact is false, also don&apos;t check if you are aware of player" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Success hasInputBreakpoint="0" comment="I&apos;m inside settlement" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Then>
																				<Else>
																					<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Success hasInputBreakpoint="0" comment="Sound is inside settlement" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</Then>
																						<Else>
																							<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Success hasInputBreakpoint="0" comment="I&apos;m inside private area" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Success>
																								</Then>
																								<Else>
																									<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Success hasInputBreakpoint="0" comment="Sound is inside private area" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Success>
																										</Then>
																										<Else>
																											<EntityContextCheck hasInputBreakpoint="0" comment="@KCD2-87943" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Else>
																													<IfCondition hasInputBreakpoint="0" comment="Out in the woods?" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</CircularSpatialQuery>
																															<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</EraseFromArray>
																															<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</EraseFromArray>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</AddLink>
																																</Sequence>
																															</IfCondition>
																														</Sequence>
																													</IfCondition>
																												</Else>
																											</EntityContextCheck>
																										</Else>
																									</IsInsideAreaWithLabel>
																								</Else>
																							</IsInsideAreaWithLabel>
																						</Else>
																					</IsInsideAreaWithLabel>
																				</Else>
																			</IsInsideAreaWithLabel>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="KCD2-454923" breakpointFlags="0">
																			<OutputBreakpoints />
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkTagFilter>
																					</GraphSearch>
																					<GraphSearch hasInputBreakpoint="0" comment="if someone recently added escalation (because he saw player in trespass) then dont react, player is most likely just still leaving" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkTagFilter>
																						<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkDataFilter>
																						<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Child0>
																								<SoulIsUnconsciousFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</SoulIsUnconsciousFilter>
																							</Child0>
																						</NegationOp>
																						<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</SoulIsAliveFilter>
																					</GraphSearch>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Sequence>
																			</SuppressFailure>
																		</IfCondition>
																		<DefaultBranch>
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</DefaultBranch>
																	</Switch>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="@KCD2-31423" breakpointFlags="0">
																				<OutputBreakpoints />
																				<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</AffectFeelings>
																			</IfCondition>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Success hasInputBreakpoint="0" comment="Bark that we already know about player?" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Then>
																				<Else>
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																						<Else>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																									<OutputBreakpoints />
																									<Then>
																										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																											<OutputBreakpoints />
																											<Then>
																												<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																												</CheckNervousnessInterval>
																											</Then>
																											<Else>
																												<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																													<OutputBreakpoints />
																													<Then>
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																													</Then>
																												</CheckNervousnessInterval>
																											</Else>
																										</EntityContextCheck>
																									</Then>
																									<Else>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Else>
																								</ActorStateCheck>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</IfCondition>
																											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</IfCondition>
																											<DefaultBranch>
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																											</DefaultBranch>
																										</Switch>
																										<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="lookAt is fine at player, it was him who made the sound anyway" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_crimeSwitchBark>
																									</Sequence>
																								</IfCondition>
																							</Sequence>
																						</Else>
																					</IfElseCondition>
																				</Else>
																			</IfElseCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_switch_addHotEntity>
																					<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_callInterrupt_lookAround>
																				</Sequence>
																			</IfCondition>
																		</Sequence>
																	</IfCondition>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Success>
																								</Then>
																								<Else>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Function_crime_crimeSwitchBark>
																									</IfCondition>
																								</Else>
																							</IsTimeSkipping>
																						</Then>
																						<Else>
																							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</Else>
																					</IfElseCondition>
																				</DistanceCondition>
																			</Then>
																		</EntityContextCheck>
																	</IfCondition>
																</Sequence>
															</IfCondition>
														</Sequence>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Then>
																		<Else>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</DetermineTrespassReaction>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																						<Else>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Else>
																					</IsInsideAreaWithLabel>
																				</IfCondition>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Success hasInputBreakpoint="0" comment="I&apos;m inside settlement" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Success>
																						</Then>
																						<Else>
																							<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Success hasInputBreakpoint="0" comment="Sound is inside settlement" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Success>
																								</Then>
																								<Else>
																									<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<Success hasInputBreakpoint="0" comment="I&apos;m inside private area" breakpointFlags="0">
																												<OutputBreakpoints />
																											</Success>
																										</Then>
																										<Else>
																											<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Success hasInputBreakpoint="0" comment="Sound is inside private area" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Success>
																												</Then>
																												<Else>
																													<EntityContextCheck hasInputBreakpoint="0" comment="@KCD2-87943" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Else>
																															<IfCondition hasInputBreakpoint="0" comment="Out in the woods?" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</CircularSpatialQuery>
																																	<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</EraseFromArray>
																																	<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</EraseFromArray>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																			<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</AddLink>
																																		</Sequence>
																																	</IfCondition>
																																</Sequence>
																															</IfCondition>
																														</Else>
																													</EntityContextCheck>
																												</Else>
																											</IsInsideAreaWithLabel>
																										</Else>
																									</IsInsideAreaWithLabel>
																								</Else>
																							</IsInsideAreaWithLabel>
																						</Else>
																					</IsInsideAreaWithLabel>
																				</IfCondition>
																			</Sequence>
																		</Else>
																	</EntityContextCheck>
																</Else>
															</IfElseCondition>
															<Function_crime_handleStimulusSound_reactToPebble hasInputBreakpoint="0" comment="TODO: rename pebble -&gt; distraction" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_handleStimulusSound_reactToPebble>
														</Sequence>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</AffectFeelings>
															<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_crimeSwitchBark>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_switch_addHotEntity>
																		<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_callInterrupt_lookAround>
																	</Sequence>
																</Else>
															</HasSeenPlayer>
														</Sequence>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Else>
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																		</GraphSearch>
																		<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</LinkTagFilter>
																				<UnionOp hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</WUIDFilter>
																					<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</WUIDFilter>
																				</UnionOp>
																			</GraphSearch>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetOwner>
																				<Function_crime_checkReactionToTheftFrom hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_crime_checkReactionToTheftFrom>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</AffectFeelings>
																						<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<Function_switch_handleStimulusLockpick hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_switch_handleStimulusLockpick>
																								</Sequence>
																							</Then>
																							<Else>
																								<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_callInterrupt_lookAround>
																							</Else>
																						</HasSeenPlayer>
																					</Sequence>
																				</IfCondition>
																			</Sequence>
																		</Selector>
																	</Sequence>
																</SuppressFailure>
															</Else>
														</EntityContextCheck>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</DetermineTrespassReaction>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Sequence>
																</Else>
															</IfElseCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_switch_addHotEntity>
																	<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_callInterrupt_lookAround>
																</Sequence>
															</IfCondition>
														</Sequence>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Else>
																<IsTimeSkipping hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</Then>
																	<Else>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Then>
																			<Else>
																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<GetScheduledPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</GetScheduledPriority>
																							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Function_crime_getGlobalCrimeLinkData hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Function_crime_getGlobalCrimeLinkData>
																									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</AffectFeelings>
																											<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetTime>
																											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</AddLink>
																											<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Function_crime_crimeSwitchBark>
																												</Then>
																												<Else>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Then>
																																</CheckNervousnessInterval>
																															</Then>
																															<Else>
																																<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Then>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Then>
																																</CheckNervousnessInterval>
																															</Else>
																														</EntityContextCheck>
																														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																	<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_switch_addHotEntity>
																																	<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_callInterrupt_lookAround>
																																</Sequence>
																															</Then>
																															<Else>
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<PlayAdditiveAnimation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</PlayAdditiveAnimation>
																																	<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Function_crime_crimeSwitchBark>
																																</Sequence>
																															</Else>
																														</IfElseCondition>
																													</Sequence>
																												</Else>
																											</HasSeenPlayer>
																										</Sequence>
																									</IfCondition>
																								</Sequence>
																							</IfCondition>
																						</Sequence>
																					</Then>
																				</EntityContextCheck>
																			</Else>
																		</EntityContextCheck>
																	</Else>
																</IsTimeSkipping>
															</Else>
														</EntityContextCheck>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Else>
																<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Else>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Else>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</MeasureDistance>
																					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Else>
																							</IfElseCondition>
																						</IfCondition>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</IfCondition>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</IfCondition>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</IfCondition>
																					</Switch>
																					<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</AffectFeelings>
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Function_switch_handleArrowFlyby hasInputBreakpoint="0" comment="somehow no data are needed" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_switch_handleArrowFlyby>
																						</Then>
																						<Else>
																							<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																												<OutputBreakpoints />
																												<Then>
																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Expression>
																														<Function_switch_handleStimulusDisturbance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_switch_handleStimulusDisturbance>
																													</Sequence>
																												</Then>
																												<Else>
																													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_crimeSwitchBark>
																															</Then>
																														</HasGenderCheck>
																														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																															<OutputBreakpoints />
																															<Then>
																																<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_crimeSwitchBark>
																															</Then>
																														</EntityContextCheck>
																														<DefaultBranch>
																															<Function_crime_crimeSwitchBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Function_crime_crimeSwitchBark>
																														</DefaultBranch>
																													</Switch>
																												</Else>
																											</CheckNervousnessInterval>
																										</Then>
																									</IfElseCondition>
																								</Then>
																								<Else>
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</DetermineTrespassReaction>
																										<Expression hasInputBreakpoint="0" comment="sounds only relevant in trespass in semipersonal+" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Expression>
																												<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_switch_addHotEntity>
																												<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																												</Function_callInterrupt_lookAround>
																											</Sequence>
																										</IfCondition>
																									</Sequence>
																								</Else>
																							</HasSeenPlayer>
																						</Else>
																					</IfElseCondition>
																				</Sequence>
																			</Else>
																		</EntityContextCheck>
																	</Else>
																</GameContextCheck>
															</Else>
														</EntityContextCheck>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Else>
																<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Else>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AffectFeelings>
																			<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Else>
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</DetermineTrespassReaction>
																						<Expression hasInputBreakpoint="0" comment="sounds only relevant in trespass in semipersonal+" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																								<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_switch_addHotEntity>
																								<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_callInterrupt_lookAround>
																							</Sequence>
																						</IfCondition>
																					</Sequence>
																				</Else>
																			</HasSeenPlayer>
																		</Sequence>
																	</Else>
																</GameContextCheck>
															</Else>
														</EntityContextCheck>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LinkTagFilter>
																	</GraphSearch>
																	<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</RemoveLink>
																</Sequence>
															</SuppressFailure>
															<IfElseCondition hasInputBreakpoint="0" comment="5s is ok?" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Success hasInputBreakpoint="0" comment="if it was you barking, do not mind" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Then>
																<Else>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<Function_switch_handleStimulusDramaticBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_switch_handleStimulusDramaticBark>
																	</Sequence>
																</Else>
															</IfElseCondition>
														</Sequence>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Function_crime_handleStimulusSound_reactToDogDistract hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_handleStimulusSound_reactToDogDistract>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_switch_animal_getMostRecentBarkFromMyHome hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_switch_animal_getMostRecentBarkFromMyHome>
															<IfCondition hasInputBreakpoint="0" comment="Not my home/dog, don&apos;t care" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</DetermineTrespassReaction>
																	<Function_crime_getHomeCooldowns hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_getHomeCooldowns>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_switch_addHotEntity>
																					<Function_callInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_callInterrupt_lookAround>
																				</Sequence>
																			</Then>
																			<Else>
																				<Success hasInputBreakpoint="0" comment="IntermediateBark" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Success>
																			</Else>
																		</IfElseCondition>
																	</IfCondition>
																</Sequence>
															</IfCondition>
														</Sequence>
													</IfCondition>
													<DefaultBranch>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</DefaultBranch>
												</Switch>
											</Sequence>
										</IfCondition>
									</Sequence>
								</Then>
								<Else>
									<IfCondition hasInputBreakpoint="0" comment="pebble shenanigans" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_crime_busySoundReactorCallback hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_busySoundReactorCallback>
									</IfCondition>
								</Else>
							</IfElseCondition>
						</Sequence>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>