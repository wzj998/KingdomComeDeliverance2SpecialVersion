<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleStimulusPickpocket" is_function="1">
		<Variables>
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.personal" isPersistent="0" form="single" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.pickpocket" isPersistent="0" form="single" />
			<Variable name="trespassInformation" type="information" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:stimulus:pickpocket" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Switch>
						<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
							<Then canSkip="1">
								<Success />
							</Then>
						</EntityContextCheck>
						<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
							<Then canSkip="1">
								<Success />
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<AtomicDecorator>
								<Sequence>
									<CheckRelationshipInterval_SoulToSoul TargetSoul="$stimulus.pivot" Soul="$this.id" Flag="friend" saveVersion="2">
										<Then canSkip="1">
											<StopMinigame type="Pickpocketing" NPC="$__player" object="" typeOut="" FailStop="true" />
										</Then>
										<Else canSkip="1">
											<Success />
										</Else>
									</CheckRelationshipInterval_SoulToSoul>
									<Sequence>
										<CreateInformationWrapper Label="&apos;pickpocket&apos;" PerceivedWuid="$stimulus.pivot" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
										<LockDynamicInformationValues Information="$information">
											<Sequence>
												<SetDynamicInformationValue Information="$information" Tag="&apos;victim&apos;" Variable="$stimulus.pivot" Type="" Value="" />
												<SetDynamicInformationValue Information="$information" Tag="&apos;bagType&apos;" Variable="$stimulus.bagType" Type="" Value="" />
											</Sequence>
										</LockDynamicInformationValues>
										<Function_crime_addEyeWitness information="$information" npc="$this.id" nodeLabel="41786409" />
										<Function_crime_assessTrespass observer="" information="$trespassInformation" nodeLabel="22400965" />
									</Sequence>
								</Sequence>
							</AtomicDecorator>
						</DefaultBranch>
					</Switch>
					<CallDecorator_crime_chooseReaction>
						<Subtree canSkip="1">
							<ChooseReaction Information="$information" ReactionNpc="$__player" SkirmishDecisionReason="Perception" Source="$source" StimulusKind="$stimulusKind" />
						</Subtree>
						<Attack canSkip="1">
							<CallbackEventCatch_empty>
								<Function_callInterrupt_attack alreadyCriminal="false" assaultData="" defenceMode="false" escalatedFromFailedSurrender="false" freshlyAttributedCrime="false" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" priority="160" questBehavior="false" relationOverride="true" stimulusKind="$stimulusKind" target="$__player" nodeLabel="57789640" />
							</CallbackEventCatch_empty>
						</Attack>
						<Arrest canSkip="1">
							<CallbackEventCatch_empty>
								<Function_callInterrupt_arrest alreadyCriminal="false" assaultData="" crimeSeen="true" freshlyAttributedCrime="false" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$source" stimulusKind="$stimulusKind" trespassingRepeatedly="false" nodeLabel="78647846" />
							</CallbackEventCatch_empty>
						</Arrest>
						<LookAround canSkip="1">
							<CallbackEventCatch_empty>
								<ErrorNode Message="&apos;Unhandled behavior \&apos;LookAround\&apos; for stimulus: $stimulusKind!&apos;" />
							</CallbackEventCatch_empty>
						</LookAround>
						<Flee canSkip="1">
							<CallbackEventCatch_fleeData>
								<Function_callInterrupt_flee alreadyCriminal="false" assaultData="" corpseState="$enum:corpseState.undiscovered" freshlyAttributedCrime="false" ignorePriority="$ignoreScheduledPriority" information="$information" initiator="$enum:switch_interruptInitiator.switch" isIndifferent="false" leaveLevel="false" mercyDialogueResult="$enum:crime_mercyDialogueResult.unknown" previousReaction="$enum:crime_reactionKind.unknown" priority="135" source="$source" stimulusKind="$stimulusKind" target="$__player" nodeLabel="98753308" />
							</CallbackEventCatch_fleeData>
						</Flee>
						<ReactionToRecognitionState_I canSkip="1">
							<CallbackEventCatch_empty>
								<Function_stealth_recognitionState_I_reaction target="$__player" nodeLabel="99566592" />
							</CallbackEventCatch_empty>
						</ReactionToRecognitionState_I>
						<ReactionToRecognitionState_II canSkip="1">
							<CallbackEventCatch_empty>
								<Function_stealth_recognitionState_II_reaction stimulusKind="$stimulusKind" target="$__player" nodeLabel="19654370" />
							</CallbackEventCatch_empty>
						</ReactionToRecognitionState_II>
						<Report canSkip="1">
							<CallbackEventCatch_reportData>
								<Function_callInterrupt_report alreadyCriminal="false" assaultData="" corpseState="$enum:corpseState.undiscovered" disableDetectedIcon="false" disableEmitting="false" freshlyAttributedCrime="false" ignorePriority="$ignoreScheduledPriority" information="$information" initiator="$enum:switch_interruptInitiator.switch" movementSpeed="$enum:movementSpeed.sprint" previousReaction="$enum:crime_reactionKind.unknown" reportDestination="$destination" reportDestinationType="$destinationType" source="$source" stimulusKind="$stimulusKind" nodeLabel="77266834" />
							</CallbackEventCatch_reportData>
						</Report>
						<Scan canSkip="1">
							<CallbackEventCatch_empty>
								<ErrorNode Message="&apos;[$this.name;] Unhandled behavior \&apos;Scan\&apos; for stimulus: $stimulusKind!&apos;" />
							</CallbackEventCatch_empty>
						</Scan>
						<Selfhelp canSkip="1">
							<CallbackEventCatch_empty>
								<Function_callInterrupt_selfhelp alreadyCriminal="false" assaultData="" freshlyAttributedCrime="false" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$source" stimulusKind="$stimulusKind" nodeLabel="69715449" />
							</CallbackEventCatch_empty>
						</Selfhelp>
						<Watch canSkip="1">
							<CallbackEventCatch_empty>
								<Function_callInterrupt_watch alreadyCriminal="false" assaultData="" corpseState="$enum:corpseState.undiscovered" defenceMode="false" freshlyAttributedCrime="false" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$source" stimulusKind="$stimulusKind" target="$__player" nodeLabel="16563812" />
							</CallbackEventCatch_empty>
						</Watch>
					</CallDecorator_crime_chooseReaction>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="information" comment="" />
				<Variable name="source" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="trespassInformation" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Then>
							</EntityContextCheck>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Then>
							</EntityContextCheck>
							<DefaultBranch>
								<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<StopMinigame hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</StopMinigame>
											</Then>
											<Else>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Else>
										</CheckRelationshipInterval_SoulToSoul>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</CreateInformationWrapper>
											<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</SetDynamicInformationValue>
													<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</SetDynamicInformationValue>
												</Sequence>
											</LockDynamicInformationValues>
											<Function_crime_addEyeWitness hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_addEyeWitness>
											<Function_crime_assessTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_assessTrespass>
										</Sequence>
									</Sequence>
								</AtomicDecorator>
							</DefaultBranch>
						</Switch>
						<CallDecorator_crime_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Subtree>
								<ChooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ChooseReaction>
							</Subtree>
							<Attack>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_callInterrupt_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_attack>
								</CallbackEventCatch_empty>
							</Attack>
							<Arrest>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_callInterrupt_arrest hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_arrest>
								</CallbackEventCatch_empty>
							</Arrest>
							<LookAround>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ErrorNode>
								</CallbackEventCatch_empty>
							</LookAround>
							<Flee>
								<CallbackEventCatch_fleeData hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_callInterrupt_flee hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_flee>
								</CallbackEventCatch_fleeData>
							</Flee>
							<ReactionToRecognitionState_I>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_stealth_recognitionState_I_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_stealth_recognitionState_I_reaction>
								</CallbackEventCatch_empty>
							</ReactionToRecognitionState_I>
							<ReactionToRecognitionState_II>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_stealth_recognitionState_II_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_stealth_recognitionState_II_reaction>
								</CallbackEventCatch_empty>
							</ReactionToRecognitionState_II>
							<Report>
								<CallbackEventCatch_reportData hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_callInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_report>
								</CallbackEventCatch_reportData>
							</Report>
							<Scan>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ErrorNode>
								</CallbackEventCatch_empty>
							</Scan>
							<Selfhelp>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_callInterrupt_selfhelp hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_selfhelp>
								</CallbackEventCatch_empty>
							</Selfhelp>
							<Watch>
								<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_callInterrupt_watch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_watch>
								</CallbackEventCatch_empty>
							</Watch>
						</CallDecorator_crime_chooseReaction>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>