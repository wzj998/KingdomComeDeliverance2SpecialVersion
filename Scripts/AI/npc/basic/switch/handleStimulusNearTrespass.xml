<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_handleStimulusNearTrespass" is_function="1">
    <Variables>
      <Variable name="hotEntityData" type="switch:hotEntity" values="" isPersistent="0" form="single" />
      <Variable name="pos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="shouldReact" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="shouldWatch" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="stimulus" type="switch:stimulus:nearTrespass" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GetSpatialInfo In="$__player" Out="$pos" What="Position" />
          <CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.mildWatchTrespass" Information="" Position="$pos" StimulusKind="$enum:crime_stimulusKind.trespass" ShouldReact="$shouldReact" ShouldWatch="$shouldWatch" />
          <IfCondition failOnCondition="false" condition="$shouldReact">
            <Switch>
              <EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
                <Then canSkip="1">
                  <Function_stealth_recognitionState_I_reaction target="$__player" nodeLabel="85138761" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
                <Then canSkip="1">
                  <Sequence>
                    <Expression expressions="$hotEntityData.reason = $enum:switch_hotEntityReason.nearTrespass" />
                    <Function_switch_addHotEntity data="$hotEntityData" entity="$__player" expiration="5" nodeLabel="77778477" />
                    <Function_stealth_recognitionState_II_reaction stimulusKind="$enum:crime_stimulusKind.nearTrespass" target="$__player" nodeLabel="75170098" />
                  </Sequence>
                </Then>
              </EntityContextCheck>
              <DefaultBranch>
                <IfElseCondition failOnCondition="false" condition="$shouldReact" saveVersion="2">
                  <Then canSkip="1">
                    <Function_callInterrupt_mindPlayer ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" soundType="$enum:sound.invalid" stimulusKind="$enum:crime_stimulusKind.nearTrespass" nodeLabel="89176565" />
                  </Then>
                  <Else canSkip="1">
                    <Function_callInterrupt_watch alreadyCriminal="false" assaultData="" corpseState="$enum:corpseState.undiscovered" defenceMode="false" freshlyAttributedCrime="false" ignorePriority="false" information="" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.trespass" target="$__player" nodeLabel="56045320" />
                  </Else>
                </IfElseCondition>
              </DefaultBranch>
            </Switch>
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="hotEntityData" comment="" />
        <Variable name="pos" comment="" />
        <Variable name="shouldReact" comment="" />
        <Variable name="shouldWatch" comment="" />
        <Variable name="stimulus" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetSpatialInfo>
            <CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </CheckReactionLimit>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Function_stealth_recognitionState_I_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Function_stealth_recognitionState_I_reaction>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <Function_switch_addHotEntity hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Function_switch_addHotEntity>
                      <Function_stealth_recognitionState_II_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Function_stealth_recognitionState_II_reaction>
                    </Sequence>
                  </Then>
                </EntityContextCheck>
                <DefaultBranch>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Function_callInterrupt_mindPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Function_callInterrupt_mindPlayer>
                    </Then>
                    <Else>
                      <Function_callInterrupt_watch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Function_callInterrupt_watch>
                    </Else>
                  </IfElseCondition>
                </DefaultBranch>
              </Switch>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>