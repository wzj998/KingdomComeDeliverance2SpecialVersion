<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_bandageMyself" is_function="0">
		<Variables>
			<Variable name="barkAndAnimationDone" type="_bool" values="" isPersistent="1" form="single" />
		</Variables>
		<Parameters>
			<Variable name="bandageMyselfData" type="switch:interruptData:bandageMyself" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContext context="crime_preventDespawn" target="">
					<AnyDecorator preset="crime_keepState" enabled="true">
						<EntityContextElement context="crime_interrupt" enabled="true">
							<EntityContext context="crime_interruptBandageMyself" target="">
								<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
									<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:bandageMyself&apos;">
										<Sequence>
											<IfCondition failOnCondition="false" condition="~$barkAndAnimationDone">
												<Sequence>
													<Parallel successMode="All" failureMode="Any">
														<EntityContextCheck context="crime_suppressBandageMyselfBark" target="" saveVersion="2">
															<Else canSkip="1">
																<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__null" metarole="&apos;NPC_SI_ZASTAVUJE_KRVACENI&apos;" priority="$enum:crime_barkPriority.low" nodeLabel="12394937" />
															</Else>
														</EntityContextCheck>
														<IsWeaponDrawn who="$this.id" WeaponSet="Oversized" saveVersion="2">
															<Then canSkip="1">
																<Success />
															</Then>
															<Else canSkip="1">
																<AnimationAction fragment="&apos;SelfBandaging&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
															</Else>
														</IsWeaponDrawn>
													</Parallel>
													<Expression expressions="$barkAndAnimationDone = true" />
												</Sequence>
											</IfCondition>
											<AtomicDecorator>
												<Sequence>
													<AddBuff SoulWUID="$this.id" BuffGUID="&apos;46683e3b-e261-412f-b402-99ee17dda62a&apos;" />
													<RemoveLink From="$this.id" To="$this.id" Tag="&apos;crime_followUpBehavior_bandageMyself&apos;" LinkOpHandleMode="Success" />
													<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.bandageMyself" nodeLabel="87867441" />
												</Sequence>
											</AtomicDecorator>
										</Sequence>
									</LogToLabel>
								</AddPerceivableState>
							</EntityContext>
						</EntityContextElement>
					</AnyDecorator>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="bandageMyself" EventSet="">
			<Variables>
				<Variable name="barkAndAnimationDone" comment="" />
				<Variable name="bandageMyselfData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-40" editorPosY="60" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Else>
																	<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_crimeBark>
																</Else>
															</EntityContextCheck>
															<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Then>
																<Else>
																	<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</AnimationAction>
																</Else>
															</IsWeaponDrawn>
														</Parallel>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Sequence>
												</IfCondition>
												<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AddBuff>
														<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</RemoveLink>
														<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_callFollowUpBehavior>
													</Sequence>
												</AtomicDecorator>
											</Sequence>
										</LogToLabel>
									</AddPerceivableState>
								</EntityContext>
							</EntityContextElement>
						</AnyDecorator>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>