<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_handleAwareness_crimeInterrupt" is_function="1">
    <Variables>
      <Variable name="reactorData" type="crime:reactor" values="" isPersistent="0" form="single" />
      <Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="reactionIntermediateData" type="switch:reactionIntermediateData" values="" isPersistent="0" form="single" requirementType="Reference" />
      <Variable name="target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <EntityContextCheck context="crime_bff" target="" saveVersion="2">
          <Else canSkip="1">
            <SuppressFailure>
              <Sequence>
                <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                  <WUIDFilter WUID="$target" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                  <Datalyzer Tag="&apos;crime_reactor&apos;" Quantifiers="Exists" Parent="" Child="" Data="$reactorData" saveVersion="2" />
                </GraphSearch>
                <CheckInformationKnowledge Information="$reactorData.information" Holder="$target" />
                <Function_crime_getReactorStimulusKind reactorData="$reactorData" stimulusKind="$stimulusKind" nodeLabel="20692130" />
                <Switch>
                  <IfCondition failOnCondition="false" condition="$reactorData.reactionKind == $enum:crime_reactionKind.report">
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.animalAbuse">
                        <Success />
                      </IfCondition>
                      <DefaultBranch>
                        <Success />
                      </DefaultBranch>
                    </Switch>
                  </IfCondition>
                  <DefaultBranch>
                    <Success />
                  </DefaultBranch>
                </Switch>
              </Sequence>
            </SuppressFailure>
          </Else>
        </EntityContextCheck>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="reactorData" comment="" />
        <Variable name="stimulusKind" comment="" />
        <Variable name="reactionIntermediateData" comment="" />
        <Variable name="target" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Else>
              <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                    <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </WUIDFilter>
                    <Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                    </Datalyzer>
                  </GraphSearch>
                  <CheckInformationKnowledge hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CheckInformationKnowledge>
                  <Function_crime_getReactorStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Function_crime_getReactorStimulusKind>
                  <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Success hasInputBreakpoint="0" comment="TODO: Intermediate barks" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </IfCondition>
                        <DefaultBranch>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </DefaultBranch>
                      </Switch>
                    </IfCondition>
                    <DefaultBranch>
                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Success>
                    </DefaultBranch>
                  </Switch>
                </Sequence>
              </SuppressFailure>
            </Else>
          </EntityContextCheck>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>