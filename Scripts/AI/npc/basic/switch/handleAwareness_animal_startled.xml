<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_handleAwareness_animal_startled" is_function="1">
    <Variables>
      <Variable name="areMates" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="freeReservation" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="playerHorse" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="shouldReact" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="stimulusMissingAnimal" type="switch:stimulus:missingAnimal" values="" isPersistent="0" form="single" />
      <Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="perceptible" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reactionIntermediateData" type="switch:reactionIntermediateData" values="" isPersistent="0" form="single" requirementType="Reference" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
            <Then canSkip="1">
              <Success />
            </Then>
          </EntityContextCheck>
          <EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
            <Then canSkip="1">
              <Success />
            </Then>
          </EntityContextCheck>
          <EntityContextCheck context="crime_bff" target="" saveVersion="2">
            <Then canSkip="1">
              <Success />
            </Then>
          </EntityContextCheck>
          <DefaultBranch>
            <Sequence>
              <GetAreMates Npc1="$this.id" Npc2="$perceptible" AreMates="$shouldReact" />
              <EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$shouldReact = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="crime_forceReactionStartledAnimal" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$shouldReact = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="crime_ignoreStartledAnimals" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$shouldReact = false" />
                </Then>
              </EntityContextCheck>
              <RelationContextCheck context="crime_forceReactionToStartledAnimal" from="$this.id" to="$perceptible" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$shouldReact = true" />
                </Then>
              </RelationContextCheck>
              <Sequence>
                <GetPlayerHorse HorseWuid="$playerHorse" />
                <IfCondition failOnCondition="false" condition="$playerHorse == $perceptible">
                  <Expression expressions="$shouldReact = false" />
                </IfCondition>
              </Sequence>
              <IfCondition failOnCondition="false" condition="$shouldReact">
                <Sequence>
                  <GetTime TimeType="GameTime" OutVar="$currentTime" Delta="" />
                  <Selector>
                    <GraphSearch Origin="$perceptible" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_returnStartledAnimalReserved_reverse&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                      <LinkTagFilter tag="&apos;crime_returnStartledAnimalReserved_reverse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                    </GraphSearch>
                    <Expression expressions="$freeReservation = true" />
                  </Selector>
                  <IfElseCondition failOnCondition="false" condition="$freeReservation" saveVersion="2">
                    <Then canSkip="1">
                      <SuppressFailure>
                        <Sequence>
                          <GraphSearch Origin="$perceptible" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                            <LinkTagFilter tag="&apos;crime_animal_startledMissingVolume&apos;" prune="true" negprune="unknown" Parent="" Child="$volume" Data="" />
                          </GraphSearch>
                          <Expression expressions="$stimulusMissingAnimal.instantReturnAnimal = true &#10;$stimulusMissingAnimal.returnReason = $enum:crime_horseReturnReason.sawStartledAnimal &#10;$stimulusMissingAnimal.animal = $perceptible &#10;$stimulusMissingAnimal.volume = $volume" />
                          <Function_switch_handleStimulusMissingAnimal stimulus="$stimulusMissingAnimal" nodeLabel="44296395" />
                        </Sequence>
                      </SuppressFailure>
                    </Then>
                    <Else canSkip="1">
                      <EntityContextCheck context="crime_interruptReturnStartledAnimal" target="" saveVersion="2">
                        <Else canSkip="1">
                          <IfCondition failOnCondition="false" condition="$reactionIntermediateData.barkData.priority &lt; $data:script_param[&apos;crime_barkReactionPriority_startledAnimal&apos;].value">
                            <Sequence>
                              <ReinitVariable variable="$reactionIntermediateData" />
                              <Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;NPC_NERESI_CHYBEJICI_ZVIRE&apos; &#10;$reactionIntermediateData.barkData.isDramatic = false &#10;$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_startledAnimal&apos;].value &#10;$reactionIntermediateData.barkData.lookAt = $__null &#10;$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.playerInStealth &#10;$reactionIntermediateData.barkData.genderData.isGenderSpecific = true" />
                            </Sequence>
                          </IfCondition>
                        </Else>
                      </EntityContextCheck>
                    </Else>
                  </IfElseCondition>
                </Sequence>
              </IfCondition>
              <SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;crime_soundSourceFound_horse&apos;" />
            </Sequence>
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="areMates" comment="" />
        <Variable name="currentTime" comment="" />
        <Variable name="freeReservation" comment="" />
        <Variable name="playerHorse" comment="" />
        <Variable name="shouldReact" comment="" />
        <Variable name="stimulusMissingAnimal" comment="" />
        <Variable name="volume" comment="" />
        <Variable name="perceptible" comment="" />
        <Variable name="reactionIntermediateData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-30" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </Then>
            </EntityContextCheck>
            <EntityContextCheck hasInputBreakpoint="0" comment="TODO: maybe delete" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </Then>
            </EntityContextCheck>
            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </Then>
            </EntityContextCheck>
            <DefaultBranch>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetAreMates>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="Override reaction" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <RelationContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </RelationContextCheck>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetPlayerHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetPlayerHorse>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                </Sequence>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetTime>
                    <Selector hasInputBreakpoint="0" comment="Check for reservation" breakpointFlags="0">
                      <OutputBreakpoints />
                      <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </LinkTagFilter>
                      </GraphSearch>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Selector>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </LinkTagFilter>
                            </GraphSearch>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                            <Function_switch_handleStimulusMissingAnimal hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Function_switch_handleStimulusMissingAnimal>
                          </Sequence>
                        </SuppressFailure>
                      </Then>
                      <Else>
                        <EntityContextCheck hasInputBreakpoint="0" comment="Don&apos;t bark if we are already taking care of a horse" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Else>
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </ReinitVariable>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </IfCondition>
                          </Else>
                        </EntityContextCheck>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </IfCondition>
                <SetExternalLock hasInputBreakpoint="0" comment="Found startled horse, stop lookAround" breakpointFlags="0">
                  <OutputBreakpoints />
                </SetExternalLock>
              </Sequence>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>