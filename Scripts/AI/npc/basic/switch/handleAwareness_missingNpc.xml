<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_handleAwareness_missingNpc" is_function="1">
    <Variables>
      <Variable name="buddyAdvantage" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="corpseSO" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="information" type="information" values="" isPersistent="0" form="single" />
      <Variable name="missingNpc" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="missingNpcData" type="crime:missingNpcData" values="" isPersistent="0" form="single" />
      <Variable name="missingNpcDistance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="missingNpcReactionKind" type="enum:crime_reactionKind" values="" isPersistent="0" form="single" />
      <Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="react" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="reactionDistance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="stimulus" type="switch:stimulus:missingNpc" values="" isPersistent="0" form="single" />
      <Variable name="useless" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
            <Then canSkip="1">
              <Success />
            </Then>
          </EntityContextCheck>
          <DefaultBranch>
            <EntityContextCheck context="crime_reactToMissingNpcVolume" target="" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <GraphSearch Origin="$volume" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;crime_missingNpc&apos;" prune="true" negprune="unknown" Parent="" Child="$missingNpc" Data="$missingNpcData" />
                  </GraphSearch>
                  <IfElseCondition failOnCondition="false" condition="$missingNpc ~= $this.id" saveVersion="2">
                    <Then canSkip="1">
                      <Sequence>
                        <GetTime TimeType="GameTime" OutVar="$now" Delta="" />
                        <Expression expressions="$buddyAdvantage = $missingNpcData.buddy == $this.id ? 10000 : 0" />
                        <IfCondition failOnCondition="false" condition="$now &gt; $missingNpcData.time + 180000 - $buddyAdvantage">
                          <CheckRelationshipInterval_SoulToSoul TargetSoul="$missingNpc" Soul="$this.id" Flag="friend" saveVersion="2">
                            <Then canSkip="1">
                              <Sequence>
                                <Switch>
                                  <IsDeadCheck SoulWUID="$missingNpc" FailSubtMissing="false" saveVersion="2">
                                    <Then canSkip="1">
                                      <Sequence>
                                        <Selector>
                                          <RetrieveInformation PerceivedWuid="$missingNpc" label="&apos;corpse&apos;" OutVariable="$information" />
                                          <Expression expressions="$react = true" />
                                        </Selector>
                                        <SuppressFailure>
                                          <Sequence>
                                            <GraphSearch Origin="$missingNpc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                                              <LinkTagFilter tag="&apos;crime_spawnMissingNpcVolume_smartObject&apos;" prune="true" negprune="unknown" Parent="" Child="$corpseSO" Data="" />
                                            </GraphSearch>
                                            <Function_callInterrupt_kickNpcFromBehavior ignorePriority="false" npc="$missingNpc" smartObject="$corpseSO" nodeLabel="83284648" />
                                          </Sequence>
                                        </SuppressFailure>
                                      </Sequence>
                                    </Then>
                                  </IsDeadCheck>
                                  <IsUnconsciousCheck SoulWUID="$missingNpc" FailSubtMissing="false" saveVersion="2">
                                    <Then canSkip="1">
                                      <Expression expressions="$react = true" />
                                    </Then>
                                  </IsUnconsciousCheck>
                                  <DefaultBranch>
                                    <Sequence>
                                      <MeasureDistance position1="$volume" position2="$missingNpc" mode="ThreeDimensions" result="$missingNpcDistance" />
                                      <IsInsideAreaWithLabel Position="$volume" Label="&apos;interior&apos;" Area="$useless" FailSubtMissing="false" saveVersion="2">
                                        <Then canSkip="1">
                                          <Expression expressions="$reactionDistance = 10" />
                                        </Then>
                                        <Else canSkip="1">
                                          <Expression expressions="$reactionDistance = 3" />
                                        </Else>
                                      </IsInsideAreaWithLabel>
                                      <IfCondition failOnCondition="false" condition="$missingNpcDistance &gt; $reactionDistance">
                                        <Sequence>
                                          <GetReactionKindByContext Target="$missingNpc" ReactionKind="$missingNpcReactionKind" />
                                          <Expression expressions="$react = $missingNpcReactionKind ~= $enum:crime_reactionKind.unknown" />
                                        </Sequence>
                                      </IfCondition>
                                    </Sequence>
                                  </DefaultBranch>
                                </Switch>
                                <IfElseCondition failOnCondition="false" condition="$react" saveVersion="2">
                                  <Then canSkip="1">
                                    <Sequence>
                                      <Expression expressions="$stimulus.missingNpc = $missingNpc &#10;$stimulus.missingNpcData = $missingNpcData &#10;$stimulus.volume = $volume" />
                                      <Function_switch_handleStimulusMissingNpc stimulus="$stimulus" nodeLabel="44146920" />
                                      <CheckWuidValid wuid="$stimulus.volume" FailSubtMissing="false" saveVersion="2">
                                        <Then canSkip="1">
                                          <DeSpawnPerceptibleVolume Wuid="$stimulus.volume" />
                                        </Then>
                                        <Else canSkip="1">
                                          <Success />
                                        </Else>
                                      </CheckWuidValid>
                                    </Sequence>
                                  </Then>
                                  <Else canSkip="1">
                                    <IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$volume" IgnoreFor="&apos;10s&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
                                  </Else>
                                </IfElseCondition>
                              </Sequence>
                            </Then>
                            <Else canSkip="1">
                              <IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$volume" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
                            </Else>
                          </CheckRelationshipInterval_SoulToSoul>
                        </IfCondition>
                      </Sequence>
                    </Then>
                    <Else canSkip="1">
                      <IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$volume" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
                    </Else>
                  </IfElseCondition>
                </Sequence>
              </Then>
              <Else canSkip="1">
                <IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$volume" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
              </Else>
            </EntityContextCheck>
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="buddyAdvantage" comment="" />
        <Variable name="corpseSO" comment="" />
        <Variable name="information" comment="" />
        <Variable name="missingNpc" comment="" />
        <Variable name="missingNpcData" comment="" />
        <Variable name="missingNpcDistance" comment="" />
        <Variable name="missingNpcReactionKind" comment="" />
        <Variable name="now" comment="" />
        <Variable name="react" comment="" />
        <Variable name="reactionDistance" comment="" />
        <Variable name="stimulus" comment="" />
        <Variable name="useless" comment="" />
        <Variable name="volume" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </Then>
            </EntityContextCheck>
            <DefaultBranch>
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                    </GraphSearch>
                    <IfElseCondition hasInputBreakpoint="0" comment="to be safe,perception ignore might have reset somehow" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetTime>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <IfCondition hasInputBreakpoint="0" comment="budddy reacts one buddyAdvantage earlier, so that he is more likely to react instead of a random passerby; TODO 180 should be 180000" breakpointFlags="0">
                            <OutputBreakpoints />
                            <CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                      <OutputBreakpoints />
                                      <Then>
                                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                            <RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </RetrieveInformation>
                                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </Expression>
                                          </Selector>
                                          <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                <OutputBreakpoints />
                                                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                  <OutputBreakpoints />
                                                </LinkTagFilter>
                                              </GraphSearch>
                                              <Function_callInterrupt_kickNpcFromBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                                <OutputBreakpoints />
                                              </Function_callInterrupt_kickNpcFromBehavior>
                                            </Sequence>
                                          </SuppressFailure>
                                        </Sequence>
                                      </Then>
                                    </IsDeadCheck>
                                    <IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                      <OutputBreakpoints />
                                      <Then>
                                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Expression>
                                      </Then>
                                    </IsUnconsciousCheck>
                                    <DefaultBranch>
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </MeasureDistance>
                                        <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="shorter inside: KCD2-68916" breakpointFlags="0" saveVersion="2">
                                          <OutputBreakpoints />
                                          <Then>
                                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </Expression>
                                          </Then>
                                          <Else>
                                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </Expression>
                                          </Else>
                                        </IsInsideAreaWithLabel>
                                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                            <GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </GetReactionKindByContext>
                                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </Expression>
                                          </Sequence>
                                        </IfCondition>
                                      </Sequence>
                                    </DefaultBranch>
                                  </Switch>
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Expression>
                                        <Function_switch_handleStimulusMissingNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Function_switch_handleStimulusMissingNpc>
                                        <CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                          <OutputBreakpoints />
                                          <Then>
                                            <DeSpawnPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </DeSpawnPerceptibleVolume>
                                          </Then>
                                          <Else>
                                            <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                              <OutputBreakpoints />
                                            </Success>
                                          </Else>
                                        </CheckWuidValid>
                                      </Sequence>
                                    </Then>
                                    <Else>
                                      <IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </IgnorePerception>
                                    </Else>
                                  </IfElseCondition>
                                </Sequence>
                              </Then>
                              <Else>
                                <IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </IgnorePerception>
                              </Else>
                            </CheckRelationshipInterval_SoulToSoul>
                          </IfCondition>
                        </Sequence>
                      </Then>
                      <Else>
                        <IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </IgnorePerception>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </Then>
                <Else>
                  <IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </IgnorePerception>
                </Else>
              </EntityContextCheck>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>