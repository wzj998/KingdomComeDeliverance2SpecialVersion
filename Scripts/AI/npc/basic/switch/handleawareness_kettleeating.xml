<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleAwareness_kettleEating" is_function="1">
		<Variables>
			<Variable name="dummyBool" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="dummyBoolTwo" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="dummyWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="goIntoTheft" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="ignoreReputationCheck" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="informationPrice" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="isAuthority" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="isMateWithOwner" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="kettleType" type="enum:kettleType" values="" isPersistent="0" form="single" />
			<Variable name="kettle_volumeData" type="kettle:link:volumeData" values="" isPersistent="0" form="single" />
			<Variable name="owner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shouldReact" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="stimulusTheft" type="switch:stimulus:theft" values="" isPersistent="0" form="single" />
			<Variable name="theftInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="trespassAreaSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="reactionIntermediateData" type="switch:reactionIntermediateData" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<DefaultBranch>
						<Sequence>
							<GraphSearch Origin="$volume" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;kettle_volumeData&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;kettle_volumeData&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$kettle_volumeData" />
							</GraphSearch>
							<GetOwner Object="$kettle_volumeData.target" Owner="$owner" />
							<IfCondition failOnCondition="false" condition="$owner ~= $__null">
								<IfElseCondition failOnCondition="false" condition="$owner == $this.id" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$isMateWithOwner = true" />
									</Then>
									<Else canSkip="1">
										<GetAreMates Npc1="$this.id" Npc2="$owner" AreMates="$isMateWithOwner" />
									</Else>
								</IfElseCondition>
							</IfCondition>
							<EntityContextCheck context="crime_isCamper" target="$owner" saveVersion="2">
								<Else canSkip="1">
									<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$isAuthority = true" />
										</Then>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
							<EntityContextCheck context="crime_ignorePlayerPerception" target="" saveVersion="2">
								<Else canSkip="1">
									<EntityContextCheck context="crime_ignorePlayersKettleEating" target="" saveVersion="2">
										<Else canSkip="1">
											<EntityContextCheck context="crime_bff" target="" saveVersion="2">
												<Then canSkip="1">
													<Function_crime_addBffIntermediateBarkData corpse="" isCorpse="false" isViolent="false" reactionIntermediateData="$reactionIntermediateData" nodeLabel="44562002" />
												</Then>
												<Else canSkip="1">
													<IfCondition failOnCondition="false" condition="$isAuthority | $isMateWithOwner">
														<Sequence>
															<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassAreaSevereness" TrespassArea="$dummyWuid" Reaction="$ignoreReputationCheck" ReactionSuppressed="$dummyBoolTwo" />
															<Sequence>
																<Expression expressions="$stimulusTheft.immediate = true &#10;$stimulusTheft.method = $enum:crime_theftMethod.kettleEating &#10;$stimulusTheft.count = 1 &#10;$stimulusTheft.owner = $owner &#10;$stimulusTheft.pivot = $kettle_volumeData.target &#10;$stimulusTheft.kettleType = $kettle_volumeData.type" />
																<Function_switch_handleStimulusTheft stimulus="$stimulusTheft" nodeLabel="80232130" />
															</Sequence>
														</Sequence>
													</IfCondition>
												</Else>
											</EntityContextCheck>
										</Else>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
						</Sequence>
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfElseCondition failOnCondition="false" condition="$ignoreReputationCheck" saveVersion="2">
				<Then canSkip="1">
					<Expression expressions="$goIntoTheft = true" />
				</Then>
				<Else canSkip="1">
					<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="atLeast_5_great" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$goIntoTheft = false" />
						</Then>
						<Else canSkip="1">
							<Expression expressions="$goIntoTheft = true" />
						</Else>
					</CheckRelationshipInterval_SoulToSoul>
				</Else>
			</IfElseCondition>
			<IfElseCondition failOnCondition="false" condition="$goIntoTheft" saveVersion="2">
				<Else canSkip="1">
					<Sequence>
						<AffectFeelings Npc="$this.id" Token="&apos;witness_crime_theft&apos;" AffectNervousness="false" AffectReputation="true" />
						<IfCondition failOnCondition="false" condition="$reactionIntermediateData.barkData.priority &lt; $data:script_param[&apos;crime_barkReactionPriority_kettleEating&apos;].value">
							<IfElseCondition failOnCondition="false" condition="$kettle_volumeData.type == $enum:kettleType.kettle" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;NPC_VIDI_HRACE_JAK_MU_JI_Z_KOTLIKU_DOBRA_REPUTACE&apos; &#10;$reactionIntermediateData.barkData.isDramatic = false &#10;$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_kettleEating&apos;].value &#10;$reactionIntermediateData.barkData.lookAt = $__player &#10;$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.kettleEatingGoodRep &#10;$reactionIntermediateData.barkData.genderData.isGenderSpecific = false" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;NPC_VIDI_HRACE_JAK_MU_PIJE_ZE_SOUDKU_DOBRA_REPUTACE&apos; &#10;$reactionIntermediateData.barkData.isDramatic = false &#10;$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_kettleEating&apos;].value &#10;$reactionIntermediateData.barkData.lookAt = $__player &#10;$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.kettleEatingGoodRep &#10;$reactionIntermediateData.barkData.genderData.isGenderSpecific = false" />
								</Else>
							</IfElseCondition>
						</IfCondition>
					</Sequence>
				</Else>
			</IfElseCondition>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="dummyBool" comment="" />
				<Variable name="dummyBoolTwo" comment="" />
				<Variable name="dummyWuid" comment="" />
				<Variable name="goIntoTheft" comment="" />
				<Variable name="ignoreReputationCheck" comment="" />
				<Variable name="informationPrice" comment="" />
				<Variable name="isAuthority" comment="" />
				<Variable name="isMateWithOwner" comment="" />
				<Variable name="kettleType" comment="" />
				<Variable name="kettle_volumeData" comment="" />
				<Variable name="owner" comment="" />
				<Variable name="shouldReact" comment="" />
				<Variable name="stimulusTheft" comment="" />
				<Variable name="theftInformation" comment="" />
				<Variable name="trespassAreaSevereness" comment="" />
				<Variable name="reactionIntermediateData" comment="" />
				<Variable name="volume" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetOwner>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetAreMates>
										</Else>
									</IfElseCondition>
								</IfCondition>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</EntityContextCheck>
									</Else>
								</EntityContextCheck>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<EntityContextCheck hasInputBreakpoint="0" comment="Override reaction" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Else>
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_crime_addBffIntermediateBarkData hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_addBffIntermediateBarkData>
													</Then>
													<Else>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</DetermineTrespassReaction>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<Function_switch_handleStimulusTheft hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_switch_handleStimulusTheft>
																</Sequence>
															</Sequence>
														</IfCondition>
													</Else>
												</EntityContextCheck>
											</Else>
										</EntityContextCheck>
									</Else>
								</EntityContextCheck>
							</Sequence>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest>
				<IfElseCondition editorPosX="2420" editorPosY="280" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Then>
					<Else>
						<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</CheckRelationshipInterval_SoulToSoul>
					</Else>
				</IfElseCondition>
				<IfElseCondition editorPosX="2330" editorPosY="890" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Else>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AffectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</AffectFeelings>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
							</IfCondition>
						</Sequence>
					</Else>
				</IfElseCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>