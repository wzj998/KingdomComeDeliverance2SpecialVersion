<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_returnWithHelp" is_function="1">
		<Variables>
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="23" isPersistent="0" form="single" />
			<Variable name="returnWithHelpData" type="switch:interruptData:returnWithHelp" values="" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.direct" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="crimePos" type="vec3" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="helpingNpc" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="ignorePriority" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<GameContextCheck context="crime_global_suppressBehavioralReaction" saveVersion="2">
						<Else canSkip="1">
							<EntityContextCheck context="crime_suppressBehavioralReaction" target="" saveVersion="2">
								<Else canSkip="1">
									<Sequence>
										<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="34216779" />
										<IfCondition failOnCondition="false" condition="$shallPass | $ignorePriority">
											<Sequence>
												<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="69929623" />
												<IfCondition failOnCondition="false" condition="$initiator == $enum:switch_interruptInitiator.switch | &#10;$previousReaction == $enum:crime_reactionKind.unknown">
													<GetReactionKindByContext Target="$this.id" ReactionKind="$previousReaction" />
												</IfCondition>
												<IfElseCondition failOnCondition="false" condition="$information.label == &apos;&apos;" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<CreateInformationWrapper Label="&apos;motivation&apos;" PerceivedWuid="$this.id" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
															<LockDynamicInformationValues Information="$information">
																<SetDynamicInformationValue Information="$information" Tag="&apos;stimulusKind&apos;" Variable="$stimulusKind" Type="" Value="" />
															</LockDynamicInformationValues>
														</Sequence>
													</Then>
													<Else canSkip="1">
														<Expression expressions="$crimePos = $information.position" />
													</Else>
												</IfElseCondition>
												<EntityContextCheck context="crime_spawnMissingNpcVolume_behavior" target="$this.id" saveVersion="2">
													<Then canSkip="1">
														<Function_crime_spawnMissingNpcVolumeAtPosition destination="$crimePos" nodeLabel="91908211" />
													</Then>
												</EntityContextCheck>
												<Expression expressions="$returnWithHelpData.initiatedBy = $initiator &#10;$returnWithHelpData.previousReaction = $previousReaction &#10;$returnWithHelpData.stimulusKind = $stimulusKind &#10;$returnWithHelpData.information = $information &#10;$returnWithHelpData.source = $source &#10;$returnWithHelpData.helpingNpc = $helpingNpc &#10;$returnWithHelpData.crimePos = $crimePos" />
												<Function_crime_limits_reserveReactionLink ffCrimeIcon="false" information="$information" priority="$priority" reactionKind="$enum:crime_reactionKind.returnWithHelp" nodeLabel="35797994" />
												<AddInterrupt_returnWithHelp returnWithHelpData="$returnWithHelpData" Target="$this.id" Host="$mrkev" Behavior="&apos;interrupt_returnWithHelp&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
											</Sequence>
										</IfCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Else>
					</GameContextCheck>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="mrkev" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="returnWithHelpData" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="source" comment="" />
				<Variable name="crimePos" comment="" />
				<Variable name="helpingNpc" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="information" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_checkReactionPriority>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_getMrkev>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetReactionKindByContext>
													</IfCondition>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</CreateInformationWrapper>
																<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SetDynamicInformationValue>
																</LockDynamicInformationValues>
															</Sequence>
														</Then>
														<Else>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Else>
													</IfElseCondition>
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Function_crime_spawnMissingNpcVolumeAtPosition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_spawnMissingNpcVolumeAtPosition>
														</Then>
													</EntityContextCheck>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Function_crime_limits_reserveReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_limits_reserveReactionLink>
													<AddInterrupt_returnWithHelp hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddInterrupt_returnWithHelp>
												</Sequence>
											</IfCondition>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</Else>
						</GameContextCheck>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>