<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_handleAwareness_theft" is_function="1">
		<Variables>
			<Variable name="canBeAttributed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="check" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="data" type="stealData" values="" isPersistent="0" form="single" />
			<Variable name="despawnVolumeRequest" type="crime:despawnVolumeRequest" values="" isPersistent="0" form="single" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" />
			<Variable name="method" type="enum:crime_theftMethod" values="$enum:crime_theftMethod.pick" isPersistent="0" form="single" />
			<Variable name="mrkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="owner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ownerIsMeOrMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pos" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="retrievedTheftInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="stimulusNonAttributedCrime" type="switch:stimulus:nonAttributedCrime" values="" isPersistent="0" form="single" />
			<Variable name="stimulusTheft" type="switch:stimulus:theft" values="" isPersistent="0" form="single" />
			<Variable name="theftVolumeReactionKind" type="enum:crime_theftVolumeReactionKind" values="" isPersistent="0" form="single" />
			<Variable name="theftVolumeSeenNotification" type="crime:theftVolumeSeenDuringCheckHomeStashesNotification" values="" isPersistent="0" form="single" />
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="reactionIntermediateData" type="switch:reactionIntermediateData" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<EntityContextCheck context="crime_ignoreThefts" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<EntityContextCheck context="crime_ignorePlayerPerception" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<EntityContextCheck context="crime_bff" target="" saveVersion="2">
						<Then canSkip="1">
							<Function_crime_addBffIntermediateBarkData corpse="" isCorpse="false" isViolent="false" reactionIntermediateData="$reactionIntermediateData" nodeLabel="76042325" />
						</Then>
					</EntityContextCheck>
					<DefaultBranch>
						<Sequence>
							<GraphSearch Origin="$volume" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;stealData&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$data" />
							</GraphSearch>
							<Expression expressions="$owner = $data.owner" />
							<Function_crime_checkReactionToTheftFrom owner="$owner" result="$check" nodeLabel="88621009" />
							<IfElseCondition failOnCondition="false" condition="$owner == $this.id" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$ownerIsMeOrMate = true" />
								</Then>
								<Else canSkip="1">
									<GetAreMates Npc1="$this.id" Npc2="$owner" AreMates="$ownerIsMeOrMate" />
								</Else>
							</IfElseCondition>
							<IfCondition failOnCondition="false" condition="$check">
								<Sequence>
									<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
									<Switch>
										<IfCondition failOnCondition="false" condition="$now &lt; $data.timestamp + $data:script_param[&apos;crime_theft_autoAttributionTimer&apos;].value">
											<Expression expressions="$theftVolumeReactionKind = $enum:crime_theftVolumeReactionKind.immediate" />
										</IfCondition>
										<DefaultBranch>
											<Selector>
												<Sequence>
													<RetrieveInformation PerceivedWuid="$volume" label="&apos;theft&apos;" OutVariable="$retrievedTheftInformation" />
													<Expression expressions="$theftVolumeReactionKind = $enum:crime_theftVolumeReactionKind.immediate" />
												</Sequence>
												<IfCondition failOnCondition="false" condition="$ownerIsMeOrMate">
													<HasSeenPlayer NPC="" FullyAwareOnly="true" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$theftVolumeReactionKind = $enum:crime_theftVolumeReactionKind.immediate" />
														</Then>
														<Else canSkip="1">
															<Sequence>
																<IsInsideAreaWithLabel Position="$volume" Label="&apos;private&apos;" Area="$trespassArea" FailSubtMissing="false" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<GetHomeFromArea Area="$trespassArea" Home="$home" />
																			<IfCondition failOnCondition="false" condition="$home ~= $__null">
																				<Function_crime_checkLongTermMemoryTrespass home="$home" knowAboutPlayer="$canBeAttributed" nodeLabel="10212036" />
																			</IfCondition>
																		</Sequence>
																	</Then>
																</IsInsideAreaWithLabel>
																<IfCondition failOnCondition="false" condition="~$canBeAttributed">
																	<EntityContextCheck context="crime_autoAttributeTheftToPlayer" target="$this.id" saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$canBeAttributed = true" />
																		</Then>
																	</EntityContextCheck>
																</IfCondition>
																<IfElseCondition failOnCondition="false" condition="$canBeAttributed" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<Expression expressions="$theftVolumeReactionKind = $enum:crime_theftVolumeReactionKind.attributed" />
																			<ShowTutorial Name="crime_SecondaryPerceptionTheft" />
																		</Sequence>
																	</Then>
																	<Else canSkip="1">
																		<Expression expressions="$theftVolumeReactionKind = $enum:crime_theftVolumeReactionKind.nonAttributed" />
																	</Else>
																</IfElseCondition>
															</Sequence>
														</Else>
													</HasSeenPlayer>
												</IfCondition>
											</Selector>
										</DefaultBranch>
									</Switch>
									<Switch>
										<IfCondition failOnCondition="false" condition="$theftVolumeReactionKind == $enum:crime_theftVolumeReactionKind.immediate">
											<Sequence>
												<Expression expressions="$stimulusTheft.method = $method &#10;$stimulusTheft.owner = $owner &#10;$stimulusTheft.pivot = $volume &#10;$stimulusTheft.count = $data.count &#10;$stimulusTheft.immediate = true" />
												<Switch>
													<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
														<Then canSkip="1">
															<Success />
														</Then>
													</EntityContextCheck>
													<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
														<Then canSkip="1">
															<Success />
														</Then>
													</EntityContextCheck>
													<DefaultBranch>
														<Expression expressions="$stimulusTheft.shouldCheckHomeStashes = $ownerIsMeOrMate" />
													</DefaultBranch>
												</Switch>
												<EntityContext context="switch_doNotOpenRecognizingLock" target="">
													<Function_switch_handleStimulusTheft stimulus="$stimulusTheft" nodeLabel="83728970" />
												</EntityContext>
												<Switch>
													<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
														<Then canSkip="1">
															<Success />
														</Then>
													</EntityContextCheck>
													<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
														<Then canSkip="1">
															<Success />
														</Then>
													</EntityContextCheck>
													<DefaultBranch>
														<Sequence>
															<Expression expressions="$despawnVolumeRequest.volume = $volume &#10;$despawnVolumeRequest.timestamp = $now" />
															<Function_crime_getMrkev mrkev="$mrkev" nodeLabel="82942703" />
															<InstantSendMessageToNPC target="$mrkev" variable="$despawnVolumeRequest" />
														</Sequence>
													</DefaultBranch>
												</Switch>
											</Sequence>
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$theftVolumeReactionKind == $enum:crime_theftVolumeReactionKind.attributed">
											<CheckWuidValid wuid="$volume" FailSubtMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Switch>
														<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
															<Then canSkip="1">
																<Function_stealth_recognitionState_I_reaction target="$volume" nodeLabel="81097901" />
															</Then>
														</EntityContextCheck>
														<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
															<Then canSkip="1">
																<Function_stealth_recognitionState_II_reaction stimulusKind="$enum:crime_stimulusKind.theft" target="$volume" nodeLabel="72753449" />
															</Then>
														</EntityContextCheck>
														<DefaultBranch>
															<Sequence>
																<Function_crime_createTheftInformation count="0" immediate="false" isNonAttributedCrime="false" kettleType="$enum:kettleType.kettle" method="$method" owner="$owner" pivot="$volume" seenEquippedItems="" information="$information" nodeLabel="11448078" />
																<EntityContextCheck context="crime_interruptCheckHomeStashes" target="" saveVersion="2">
																	<Then canSkip="1">
																		<Sequence>
																			<GetSpatialInfo In="$volume" Out="$pos" What="Position" />
																			<Expression expressions="$theftVolumeSeenNotification.pos = $pos &#10;$theftVolumeSeenNotification.attributed = true &#10;$theftVolumeSeenNotification.information = $information" />
																			<InstantSendMessageToNPC target="$this.id" variable="$theftVolumeSeenNotification" />
																		</Sequence>
																	</Then>
																	<Else canSkip="1">
																		<Sequence>
																			<GetSpatialInfo In="$volume" Out="$pos" What="Position" />
																			<Function_callInterrupt_scan corpseState="$enum:corpseState.undiscovered" ignorePriority="false" information="$information" initiator="$enum:switch_interruptInitiator.unknown" previousReaction="$enum:crime_reactionKind.unknown" scanDirection="$pos" source="$enum:crime_source.direct" stimulusAnimalAbuse="" stimulusKind="$enum:crime_stimulusKind.theft" stimulusMissingAnimal="" stimulusShooter="" nodeLabel="50696528" />
																			<IfCondition failOnCondition="false" condition="$ownerIsMeOrMate">
																				<SuppressFailure>
																					<Sequence>
																						<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																							<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
																						</GraphSearch>
																						<Function_crime_addFollowUp_checkHomeStashes home="$home" information="$information" playerRelated="true" resetStolenItemsFound="false" stolenItemsFound="true" added="" nodeLabel="31905620" />
																					</Sequence>
																				</SuppressFailure>
																			</IfCondition>
																		</Sequence>
																	</Else>
																</EntityContextCheck>
																<DeSpawnPerceptibleVolume Wuid="$volume" />
															</Sequence>
														</DefaultBranch>
													</Switch>
												</Then>
											</CheckWuidValid>
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$theftVolumeReactionKind == $enum:crime_theftVolumeReactionKind.nonAttributed">
											<Selector>
												<RetrieveInformation PerceivedWuid="$volume" label="&apos;nonAttributedCrime&apos;" OutVariable="$information" />
												<CheckWuidValid wuid="$volume" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<Switch>
															<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
																<Then canSkip="1">
																	<Function_stealth_recognitionState_I_reaction target="$volume" nodeLabel="32394830" />
																</Then>
															</EntityContextCheck>
															<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
																<Then canSkip="1">
																	<Function_stealth_recognitionState_II_reaction stimulusKind="$enum:crime_stimulusKind.theft" target="$volume" nodeLabel="34612498" />
																</Then>
															</EntityContextCheck>
															<DefaultBranch>
																<Sequence>
																	<Function_crime_createTheftInformation count="0" immediate="true" isNonAttributedCrime="true" kettleType="$enum:kettleType.kettle" method="$method" owner="$owner" pivot="$volume" seenEquippedItems="" information="$information" nodeLabel="43417723" />
																	<EntityContextCheck context="crime_interruptCheckHomeStashes" target="" saveVersion="2">
																		<Then canSkip="1">
																			<Sequence>
																				<GetSpatialInfo In="$volume" Out="$pos" What="Position" />
																				<Expression expressions="$theftVolumeSeenNotification.pos = $pos &#10;$theftVolumeSeenNotification.attributed = false &#10;$theftVolumeSeenNotification.information = $information" />
																				<InstantSendMessageToNPC target="$this.id" variable="$theftVolumeSeenNotification" />
																			</Sequence>
																		</Then>
																		<Else canSkip="1">
																			<Sequence>
																				<Expression expressions="$stimulusNonAttributedCrime.information = $information" />
																				<Function_switch_handleStimulusNonAttributedCrime stimulus="$stimulusNonAttributedCrime" nodeLabel="52245605" />
																			</Sequence>
																		</Else>
																	</EntityContextCheck>
																	<DeSpawnPerceptibleVolume Wuid="$volume" />
																	<IfCondition failOnCondition="false" condition="$ownerIsMeOrMate">
																		<SuppressFailure>
																			<Sequence>
																				<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																					<LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
																				</GraphSearch>
																				<Function_crime_addFollowUp_checkHomeStashes home="$home" information="$information" playerRelated="false" resetStolenItemsFound="false" stolenItemsFound="true" added="" nodeLabel="32893200" />
																			</Sequence>
																		</SuppressFailure>
																	</IfCondition>
																</Sequence>
															</DefaultBranch>
														</Switch>
													</Then>
												</CheckWuidValid>
											</Selector>
										</IfCondition>
										<DefaultBranch>
											<Success />
										</DefaultBranch>
									</Switch>
								</Sequence>
							</IfCondition>
						</Sequence>
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_crime_createTheftInformation count="$stimulusTheft.count" immediate="$stimulusTheft.immediate" isNonAttributedCrime="false" kettleType="$enum:kettleType.kettle" method="$stimulusTheft.method" owner="$stimulusTheft.owner" pivot="$stimulusTheft.pivot" seenEquippedItems="" information="$information" nodeLabel="52634008" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="canBeAttributed" comment="" />
				<Variable name="check" comment="" />
				<Variable name="data" comment="" />
				<Variable name="despawnVolumeRequest" comment="" />
				<Variable name="home" comment="" />
				<Variable name="information" comment="" />
				<Variable name="method" comment="" />
				<Variable name="mrkev" comment="" />
				<Variable name="now" comment="" />
				<Variable name="owner" comment="" />
				<Variable name="ownerIsMeOrMate" comment="" />
				<Variable name="pos" comment="" />
				<Variable name="retrievedTheftInformation" comment="" />
				<Variable name="stimulusNonAttributedCrime" comment="" />
				<Variable name="stimulusTheft" comment="" />
				<Variable name="theftVolumeReactionKind" comment="" />
				<Variable name="theftVolumeSeenNotification" comment="" />
				<Variable name="trespassArea" comment="" />
				<Variable name="reactionIntermediateData" comment="" />
				<Variable name="volume" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="Ignore theft" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Function_crime_addBffIntermediateBarkData hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_addBffIntermediateBarkData>
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<Sequence hasInputBreakpoint="0" comment="ToDo: ownership check (as soon as we&apos;re able to determine the owner: KCD2-5398)" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<Function_crime_checkReactionToTheftFrom hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_checkReactionToTheftFrom>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetAreMates>
									</Else>
								</IfElseCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetTime>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<DefaultBranch>
												<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</RetrieveInformation>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Sequence>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
															<Else>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetHomeFromArea hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetHomeFromArea>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Function_crime_checkLongTermMemoryTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_checkLongTermMemoryTrespass>
																				</IfCondition>
																			</Sequence>
																		</Then>
																	</IsInsideAreaWithLabel>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																		</EntityContextCheck>
																	</IfCondition>
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																				<ShowTutorial hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</ShowTutorial>
																			</Sequence>
																		</Then>
																		<Else>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Else>
																	</IfElseCondition>
																</Sequence>
															</Else>
														</HasSeenPlayer>
													</IfCondition>
												</Selector>
											</DefaultBranch>
										</Switch>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Then>
														</EntityContextCheck>
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Then>
														</EntityContextCheck>
														<DefaultBranch>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</DefaultBranch>
													</Switch>
													<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Function_switch_handleStimulusTheft hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_switch_handleStimulusTheft>
													</EntityContext>
													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Then>
														</EntityContextCheck>
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Then>
														</EntityContextCheck>
														<DefaultBranch>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
																<Function_crime_getMrkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_crime_getMrkev>
																<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantSendMessageToNPC>
															</Sequence>
														</DefaultBranch>
													</Switch>
												</Sequence>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Function_stealth_recognitionState_I_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_stealth_recognitionState_I_reaction>
																</Then>
															</EntityContextCheck>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Function_stealth_recognitionState_II_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_stealth_recognitionState_II_reaction>
																</Then>
															</EntityContextCheck>
															<DefaultBranch>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_crime_createTheftInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_createTheftInformation>
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetSpatialInfo>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																				<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</InstantSendMessageToNPC>
																			</Sequence>
																		</Then>
																		<Else>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetSpatialInfo>
																				<Function_callInterrupt_scan hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Function_callInterrupt_scan>
																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</LinkTagFilter>
																							</GraphSearch>
																							<Function_crime_addFollowUp_checkHomeStashes hasInputBreakpoint="0" comment="TODO: add to immediate" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_crime_addFollowUp_checkHomeStashes>
																						</Sequence>
																					</SuppressFailure>
																				</IfCondition>
																			</Sequence>
																		</Else>
																	</EntityContextCheck>
																	<DeSpawnPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</DeSpawnPerceptibleVolume>
																</Sequence>
															</DefaultBranch>
														</Switch>
													</Then>
												</CheckWuidValid>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Selector hasInputBreakpoint="0" comment="do this once" breakpointFlags="0">
													<OutputBreakpoints />
													<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</RetrieveInformation>
													<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Function_stealth_recognitionState_I_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_stealth_recognitionState_I_reaction>
																	</Then>
																</EntityContextCheck>
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Function_stealth_recognitionState_II_reaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_stealth_recognitionState_II_reaction>
																	</Then>
																</EntityContextCheck>
																<DefaultBranch>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_crime_createTheftInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_crime_createTheftInformation>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</GetSpatialInfo>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</InstantSendMessageToNPC>
																				</Sequence>
																			</Then>
																			<Else>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																					<Function_switch_handleStimulusNonAttributedCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_switch_handleStimulusNonAttributedCrime>
																				</Sequence>
																			</Else>
																		</EntityContextCheck>
																		<DeSpawnPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</DeSpawnPerceptibleVolume>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</LinkTagFilter>
																					</GraphSearch>
																					<Function_crime_addFollowUp_checkHomeStashes hasInputBreakpoint="0" comment="TODO: add to immediate" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_crime_addFollowUp_checkHomeStashes>
																				</Sequence>
																			</SuppressFailure>
																		</IfCondition>
																	</Sequence>
																</DefaultBranch>
															</Switch>
														</Then>
													</CheckWuidValid>
												</Selector>
											</IfCondition>
											<DefaultBranch>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DefaultBranch>
										</Switch>
									</Sequence>
								</IfCondition>
							</Sequence>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest>
				<Function_crime_createTheftInformation editorPosX="2500" editorPosY="1170" hasInputBreakpoint="0" comment="here so it can be sent to checkHomeStashes followUp" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_crime_createTheftInformation>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>