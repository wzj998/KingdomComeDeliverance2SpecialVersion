<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="use_eating" is_function="0">
		<Variables>
			<Variable name="randomPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="resultPosition" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<CallDecorator_animal_boidTemplate>
					<Subtree canSkip="1">
						<Function_boidTemplate boidDataOrigin="$__object.id" homeArea="$__resource.id" nodeLabel="58461069" />
					</Subtree>
					<OnRest canSkip="1">
						<CallbackEventCatch_animal_boidTemplate_onRest>
							<Sequence>
								<GetRandomPos StartPos="$this.id" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="3.000000" Precise="false" MaxIterantions="100" Target="$randomPosition" navAgentType="Automatic" pathFindingParams="$pathFindParams" />
								<Move stopWithinDistance="0.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$randomPosition" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$additionalMoveParams" pathFindingParams="$pathFindParams" staminaPolicy="" pathInfo="" />
								<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</CallbackEventCatch_animal_boidTemplate_onRest>
					</OnRest>
				</CallDecorator_animal_boidTemplate>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="randomPosition" comment="" />
				<Variable name="resultPosition" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-20" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<CallDecorator_animal_boidTemplate hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Subtree>
							<Function_boidTemplate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_boidTemplate>
						</Subtree>
						<OnRest>
							<CallbackEventCatch_animal_boidTemplate_onRest hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetRandomPos>
									<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Move>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</CallbackEventCatch_animal_boidTemplate_onRest>
						</OnRest>
					</CallDecorator_animal_boidTemplate>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="boidTemplate" is_function="1">
		<Variables>
			<Variable name="behaviorPhase" type="_int" values="0" isPersistent="0" form="single" />
			<Variable name="boidData" type="animal:boid" values="" isPersistent="0" form="single" />
			<Variable name="homeAreaType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="init_additionalParams_idle" type="additionalMoveParams" values="turnBeforeMove(true),useStoppingDistanceForCuttingFromEnd(false)" isPersistent="0" form="single" />
			<Variable name="init_additionalParams_run" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
			<Variable name="init_pathFindParams" type="pathFindingParams" values="usePaths(false),useSmartObjects(false),useGeneratedNSO(false)" isPersistent="0" form="single" />
			<Variable name="onRestBehaviorDone" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="resultPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="totalThreat" type="_float" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="boidDataOrigin" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="homeArea" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<CheckWuidValid wuid="$boidDataOrigin" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<GraphSearch Origin="$boidDataOrigin" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;animalBoid&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								<Datalyzer Tag="&apos;animalBoid&apos;" Quantifiers="Exists" Parent="" Child="" Data="$boidData" saveVersion="2" />
							</GraphSearch>
						</Then>
					</CheckWuidValid>
					<GetType WUID="$homeArea" OutString="$homeAreaType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<EntityContextElement context="crime_animal_suppressImpulsesDuringActivity" enabled="$boidData.suppressSwitchImpulses">
					<Sequence>
						<Parallel successMode="Any" failureMode="Any">
							<While doFail="false" propagateChildFail="false" condition="!$onRestBehaviorDone">
								<Switch>
									<IfCondition failOnCondition="true" condition="$behaviorPhase == 3">
										<UrgencyDecorator Urgency="Fast">
											<Parallel successMode="Any" failureMode="Any">
												<IfGate atomic="false" condition="$behaviorPhase ~= 3" RunLogic="KeepRunning">
													<Success />
												</IfGate>
												<Sequence>
													<ForgetDecision decisionLabel="animal_move" />
													<Move stopWithinDistance="0.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$resultPosition" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="$init_additionalParams_run" pathFindingParams="$init_pathFindParams" staminaPolicy="" pathInfo="" />
												</Sequence>
											</Parallel>
										</UrgencyDecorator>
									</IfCondition>
									<IfCondition failOnCondition="true" condition="$behaviorPhase == 2">
										<UrgencyDecorator Urgency="Slow">
											<Parallel successMode="Any" failureMode="Any">
												<IfGate atomic="false" condition="$behaviorPhase ~= 2" RunLogic="KeepRunning">
													<Success />
												</IfGate>
												<Sequence>
													<ForgetDecision decisionLabel="animal_move" />
													<Move stopWithinDistance="0.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$resultPosition" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$init_additionalParams_run" pathFindingParams="$init_pathFindParams" staminaPolicy="" pathInfo="" />
												</Sequence>
											</Parallel>
										</UrgencyDecorator>
									</IfCondition>
									<IfCondition failOnCondition="true" condition="$behaviorPhase == 1">
										<Parallel successMode="Any" failureMode="Any">
											<IfGate atomic="false" condition="$behaviorPhase ~= 1 &amp; $totalThreat &gt; 0" RunLogic="KeepRunning">
												<Success />
											</IfGate>
											<Sequence>
												<Callback_animal_boidTemplate_onRest pathFindParams="$init_pathFindParams" additionalMoveParams="$init_additionalParams_idle" EventName="&apos;OnRest&apos;" />
												<Expression expressions="$onRestBehaviorDone = true" />
											</Sequence>
										</Parallel>
									</IfCondition>
									<DefaultBranch>
										<Wait duration="&apos;200ms&apos;" timeType="GameTime" doFail="false" variation="" />
									</DefaultBranch>
								</Switch>
							</While>
							<Boid duration="&apos;400ms&apos;" timeType="GameTime" variation="" resultVariable="$resultPosition" runVariable="$behaviorPhase" totalThreatVar="$totalThreat" separationWeight="$boidData.separation" alignmentWeight="$boidData.alignment" cohesionWeight="$boidData.cohesion" threatWeight="$boidData.threat" herdSize="$boidData.herdSize" targetSeparation="$boidData.targetSeparation" maxSeparationForce="$boidData.maxSeparationForce" safeDistance="$boidData.safeDistance" activationThreshold="$boidData.activationTreshold" deactivationThreshold="$boidData.deactivationTreshold" runThreshold="$boidData.runTreshold" reactToThreats="$boidData.reactToThreats" strafe="$boidData.strafe" strafeAngle="$boidData.strafeAngle" strafePeriod="&apos;1s&apos;" homeAreaWuid="" homeAreaLabel="" homeAreaRadius="100.000000" homeWeightSafe="$boidData.homeWeightSafe" homeWeightThreatened="$boidData.homeWeightThreatened" threatSpeedMultiplier="0.200000" rpgThreatWeightStrength="1.000000" />
						</Parallel>
					</Sequence>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="animal_boidTemplate" EventSet="animal_boidTemplate">
			<Variables>
				<Variable name="behaviorPhase" comment="" />
				<Variable name="boidData" comment="" />
				<Variable name="homeAreaType" comment="" />
				<Variable name="init_additionalParams_idle" comment="" />
				<Variable name="init_additionalParams_run" comment="" />
				<Variable name="init_pathFindParams" comment="" />
				<Variable name="onRestBehaviorDone" comment="" />
				<Variable name="resultPosition" comment="" />
				<Variable name="totalThreat" comment="" />
				<Variable name="boidDataOrigin" comment="" />
				<Variable name="homeArea" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-10" editorPosY="610" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
									<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
									</Datalyzer>
								</GraphSearch>
							</Then>
						</CheckWuidValid>
						<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetType>
					</Sequence>
				</OnInit>
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="chasing" breakpointFlags="0">
											<OutputBreakpoints />
											<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfGate>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ForgetDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ForgetDecision>
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
													</Sequence>
												</Parallel>
											</UrgencyDecorator>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="walk" breakpointFlags="0">
											<OutputBreakpoints />
											<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</IfGate>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ForgetDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ForgetDecision>
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
													</Sequence>
												</Parallel>
											</UrgencyDecorator>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="idle" breakpointFlags="0">
											<OutputBreakpoints />
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</IfGate>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Callback_animal_boidTemplate_onRest hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Callback_animal_boidTemplate_onRest>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</Parallel>
										</IfCondition>
										<DefaultBranch>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</DefaultBranch>
									</Switch>
								</While>
								<Boid hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Boid>
							</Parallel>
						</Sequence>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="animalRandomMove" is_function="1">
		<Variables>
			<Variable name="alreadyOnPosition" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="objectType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="randomPosition" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="additionalMoveParams" type="additionalMoveParams" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="area" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="pathFindParams" type="pathFindingParams" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GetType WUID="$area" OutString="$objectType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
			</OnInit>
			<Behavior canSkip="1">
				<Decision decisionLabel="animal_move" variable="$alreadyOnPosition" saveVersion="2">
					<Search canSkip="1">
						<Success />
					</Search>
					<Exec canSkip="1">
						<SuppressFailure>
							<Sequence>
								<IfCondition failOnCondition="false" condition="$alreadyOnPosition">
									<AtomicDecorator>
										<RandomGate opensWithChance="0.050000" saveVersion="2">
											<Then canSkip="1">
												<Sequence>
													<ForgetDecision decisionLabel="animal_move" />
												</Sequence>
											</Then>
											<Else canSkip="1">
												<Success />
											</Else>
										</RandomGate>
									</AtomicDecorator>
								</IfCondition>
								<IfElseCondition failOnCondition="false" condition="!$alreadyOnPosition" saveVersion="2">
									<Then canSkip="1">
										<IfElseCondition failOnCondition="false" condition="$objectType == &apos;TA&apos; | $objectType == &apos;SA&apos;" saveVersion="2">
											<Then canSkip="1">
												<Sequence>
													<IsInsideArea Origin="$this.id" Area="$area" FailSubtMissing="false" saveVersion="2">
														<Then canSkip="1">
															<Success />
														</Then>
														<Else canSkip="1">
															<Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$area" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
														</Else>
													</IsInsideArea>
													<GetRandomPosInArea SearchOrigin="$this.id" Area="$area" MinDistanceFromNavmeshEdge="0.500000" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxIterantions="8" Range="15.000000" Target="$randomPosition" navAgentType="Automatic" pathFindingParams="$pathFindParams" />
													<Move stopWithinDistance="3.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$randomPosition" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$additionalMoveParams" pathFindingParams="$pathFindParams" staminaPolicy="" pathInfo="" />
													<Expression expressions="$alreadyOnPosition = true" />
												</Sequence>
											</Then>
											<Else canSkip="1">
												<DistanceCondition Origin="$area" ReferencePt="$this.id" Low="2.000000" High="2.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
													<ExactMove directionType="AlignWithEntity" directionSpecification="$area" animationTriggerDist="0.150000" precise="false" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$area" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
												</DistanceCondition>
											</Else>
										</IfElseCondition>
									</Then>
								</IfElseCondition>
							</Sequence>
						</SuppressFailure>
					</Exec>
				</Decision>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="alreadyOnPosition" comment="" />
				<Variable name="objectType" comment="" />
				<Variable name="randomPosition" comment="" />
				<Variable name="additionalMoveParams" comment="" />
				<Variable name="area" comment="" />
				<Variable name="pathFindParams" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</GetType>
				</OnInit>
				<Behavior>
					<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Search>
						<Exec>
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ForgetDecision hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ForgetDecision>
													</Sequence>
												</Then>
												<Else>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Else>
											</RandomGate>
										</AtomicDecorator>
									</IfCondition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Then>
															<Else>
																<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Move>
															</Else>
														</IsInsideArea>
														<GetRandomPosInArea hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetRandomPosInArea>
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Sequence>
												</Then>
												<Else>
													<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExactMove>
													</DistanceCondition>
												</Else>
											</IfElseCondition>
										</Then>
									</IfElseCondition>
								</Sequence>
							</SuppressFailure>
						</Exec>
					</Decision>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>