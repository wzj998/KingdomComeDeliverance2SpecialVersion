<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="onUpdate" is_function="0">
    <Variables>
      <Variable name="areaSound" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="areasTakeoff" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="currTime" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="soundAreaMissing" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <Selector>
            <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;areaTakeoff&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
              <Nodalyzer Quantifiers="ForAll" Parent="" Child="$areasTakeoff" saveVersion="2" />
            </GraphSearch>
            <ErrorNode Message="&apos;[$this.name;] \&apos;areaTakeoff\&apos; link not found on so_birdsTakeoff&apos;" />
          </Selector>
          <Selector>
            <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;areaSound&apos;" prune="true" negprune="unknown" Parent="" Child="$areaSound" Data="" />
            </GraphSearch>
            <Expression expressions="$soundAreaMissing = true" />
          </Selector>
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <Parallel successMode="Any" failureMode="Any">
          <IfElseCondition failOnCondition="false" condition="$soundAreaMissing" saveVersion="2">
            <Then canSkip="1">
              <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Then>
            <Else canSkip="1">
              <Loop count="-1">
                <Sequence>
                  <AreaPresenceGate aiObjects="$__player" area="$areaSound" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
                    <AreaPresenceGate aiObjects="$__player" area="$areaSound" amount="AtLeastOne" presence="Present" RunLogic="Halt">
                      <Sequence>
                        <ExecuteLua code="entity:EnteredSoundArea()" />
                        <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                      </Sequence>
                    </AreaPresenceGate>
                  </AreaPresenceGate>
                  <ExecuteLua code="entity:LeftSoundArea()" />
                </Sequence>
              </Loop>
            </Else>
          </IfElseCondition>
          <Function_birdsTakeoffAreaCheck_RECURSION areas="$areasTakeoff" nodeLabel="19901434" />
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="areaSound" comment="" />
        <Variable name="areasTakeoff" comment="" />
        <Variable name="currTime" comment="" />
        <Variable name="soundAreaMissing" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
                <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                </Nodalyzer>
              </GraphSearch>
              <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ErrorNode>
            </Selector>
            <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
              </GraphSearch>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Selector>
          </Sequence>
        </OnInit>
        <Behavior>
          <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Then>
              <Else>
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Wait>
                        </Sequence>
                      </AreaPresenceGate>
                    </AreaPresenceGate>
                    <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </ExecuteLua>
                  </Sequence>
                </Loop>
              </Else>
            </IfElseCondition>
            <Function_birdsTakeoffAreaCheck_RECURSION hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Function_birdsTakeoffAreaCheck_RECURSION>
          </Parallel>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="birdsTakeoffAreaCheck_RECURSION" is_function="1">
    <Variables>
      <Variable name="thisArea" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="areas" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <PopFromArray array="$areas" valueOut="$thisArea" direction="Back" />
          <Parallel successMode="Any" failureMode="Any">
            <Loop count="-1">
              <AreaPresenceGate aiObjects="$__player" area="$thisArea" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
                <AreaPresenceGate aiObjects="$__player" area="$thisArea" amount="AtLeastOne" presence="Present" RunLogic="Halt">
                  <Sequence>
                    <LuaGate code="return entity:SpawnBirds(player)" saveVersion="2">
                      <Then canSkip="1">
                        <SendAIConceptSignal_animals_birdsTakeoffNotification so_birdsTakeoff="$this.id" />
                      </Then>
                      <Else canSkip="1">
                        <Success />
                      </Else>
                    </LuaGate>
                    <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </Sequence>
                </AreaPresenceGate>
              </AreaPresenceGate>
            </Loop>
            <IfElseCondition failOnCondition="false" condition="#areas &gt; 0" saveVersion="2">
              <Then canSkip="1">
                <Function_birdsTakeoffAreaCheck_RECURSION areas="$areas" nodeLabel="51975746" />
              </Then>
              <Else canSkip="1">
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Else>
            </IfElseCondition>
          </Parallel>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="thisArea" comment="" />
        <Variable name="areas" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <PopFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </PopFromArray>
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <AreaPresenceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <SendAIConceptSignal_animals_birdsTakeoffNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </SendAIConceptSignal_animals_birdsTakeoffNotification>
                        </Then>
                        <Else>
                          <Success hasInputBreakpoint="0" comment="On cooldown" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </Else>
                      </LuaGate>
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </Sequence>
                  </AreaPresenceGate>
                </AreaPresenceGate>
              </Loop>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Function_birdsTakeoffAreaCheck_RECURSION hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Function_birdsTakeoffAreaCheck_RECURSION>
                </Then>
                <Else>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Else>
              </IfElseCondition>
            </Parallel>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>