<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_decideAttackOrEscape" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="previousReaction" type="enum:crime_animal_reactionKind" values="$enum:crime_animal_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="skirmishRelationOverride" type="enum:skirmishRelationOverride" values="$enum:skirmishRelationOverride.none" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_animal_stimulusKind" values="$enum:crime_animal_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="targetNPC" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextCheck context="crime_animal_interruptEscape" target="" saveVersion="2">
					<Else canSkip="1">
						<EntityContextCheck context="combat_alwaysWithdrawSkirmish" target="" saveVersion="2">
							<Else canSkip="1">
								<EntityContext context="combat_alwaysJoinSkirmish" target="">
									<DecideSkirmishReaction ReferenceNPC="$this.id" TargetNPC="$targetNPC" Reason="Perception" RelationOverride="$skirmishRelationOverride" MoraleBoost="0.000000" AllowFemaleJoin="false" saveVersion="2">
										<Join canSkip="1">
											<Function_callInterrupt_animal_attack ignorePriority="false" initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$previousReaction" skirmishRelationOverride="$skirmishRelationOverride" stimulusKind="$stimulusKind" target="$targetNPC" nodeLabel="47444811" />
										</Join>
										<Withdraw canSkip="1">
											<Success />
										</Withdraw>
										<Indifference canSkip="1">
											<Success />
										</Indifference>
									</DecideSkirmishReaction>
								</EntityContext>
							</Else>
						</EntityContextCheck>
					</Else>
				</EntityContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="previousReaction" comment="" />
				<Variable name="skirmishRelationOverride" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="targetNPC" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-10" editorPosY="-90" hasInputBreakpoint="0" comment="Illusion of choice" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Else>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<DecideSkirmishReaction hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Join>
												<Function_callInterrupt_animal_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_callInterrupt_animal_attack>
											</Join>
											<Withdraw>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Withdraw>
											<Indifference>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Indifference>
										</DecideSkirmishReaction>
									</EntityContext>
								</Else>
							</EntityContextCheck>
						</Else>
					</EntityContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>