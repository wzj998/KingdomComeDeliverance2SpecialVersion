<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_animal_continuouslyCheckTrespass" is_function="1">
    <Variables>
      <Variable name="dummyBool" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="dummyLevel" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
      <Variable name="dummyWuid" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="isInsideRelevantTrespass" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="isPlayerInsideInterior" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" optional="1" />
      <Variable name="shouldBark" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" optional="1" />
      <Variable name="shouldFollowPlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" optional="1" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Parallel successMode="Any" failureMode="Any">
          <Loop count="-1">
            <IsInsideAreaWithLabelBarrier Who="$__player" Label="&apos;interior&apos;" Negation="true" RunLogic="KeepRunning">
              <Sequence>
                <Expression expressions="$isPlayerInsideInterior = false" />
                <IsInsideAreaWithLabelBarrier Who="$__player" Label="&apos;interior&apos;" Negation="false" RunLogic="Halt">
                  <Sequence>
                    <Expression expressions="$isPlayerInsideInterior = true" />
                    <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </Sequence>
                </IsInsideAreaWithLabelBarrier>
              </Sequence>
            </IsInsideAreaWithLabelBarrier>
          </Loop>
          <Loop count="-1">
            <Sequence>
              <Function_switch_animal_determineTrespassReaction observer="$this.id" positionVec3="" positionWuid="$__player" shouldUseVec3="false" reaction="$isInsideRelevantTrespass" trespassArea="$dummyWuid" trespassLevel="$dummyLevel" nodeLabel="65935845" />
              <Expression expressions="$shouldFollowPlayer = $isInsideRelevantTrespass &amp; ~$isPlayerInsideInterior" />
              <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </Loop>
          <Loop count="-1">
            <Sequence>
              <Function_crime_determineTrespassReaction forceSemipublicReaction="false" observer="$this.id" shouldUseVec3Position="false" target="$__player" vec3Position="" trespassAreaSevereness="$dummyLevel" reaction="$shouldBark" reactionSuppressed="$dummyBool" trespassArea="$dummyWuid" nodeLabel="29174059" />
              <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </Loop>
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="dummyBool" comment="" />
        <Variable name="dummyLevel" comment="" />
        <Variable name="dummyWuid" comment="" />
        <Variable name="isInsideRelevantTrespass" comment="" />
        <Variable name="isPlayerInsideInterior" comment="" />
        <Variable name="shouldBark" comment="" />
        <Variable name="shouldFollowPlayer" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Loop hasInputBreakpoint="0" comment="Check if player went inside interior" breakpointFlags="0">
              <OutputBreakpoints />
              <IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <IsInsideAreaWithLabelBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </Sequence>
                  </IsInsideAreaWithLabelBarrier>
                </Sequence>
              </IsInsideAreaWithLabelBarrier>
            </Loop>
            <Loop hasInputBreakpoint="0" comment="Periodically check trespass" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_switch_animal_determineTrespassReaction hasInputBreakpoint="0" comment="We can&apos;t use gates because of &apos;expected&apos;" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_switch_animal_determineTrespassReaction>
                <Expression hasInputBreakpoint="0" comment="Dogs don&apos;t follow into interior" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Loop>
            <Loop hasInputBreakpoint="0" comment="Periodically check barking" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_crime_determineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_crime_determineTrespassReaction>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Loop>
          </Parallel>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>