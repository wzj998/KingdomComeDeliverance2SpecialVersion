<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_animal_escape" is_function="1">
		<Variables>
			<Variable name="animalEscapeData" type="switch:animal_interruptData:escape" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="135" isPersistent="0" form="single" />
			<Variable name="randomDistanceToFlee" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="redkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="urgency" type="enum:urgency" values="$enum:urgency.fast" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="escapeFromVec3" type="vec3" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="escapeFromWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="ignorePriority" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_animal_reactionKind" values="$enum:crime_animal_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_animal_stimulusKind" values="$enum:crime_animal_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="useVec3ForEscape" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_crime_getRedkev redkev="$redkev" nodeLabel="66033577" />
					<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="14160537" />
					<EntityContextCheck context="crime_animal_interruptEscape" target="" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$ignorePriority = true" />
						</Then>
					</EntityContextCheck>
					<IfCondition failOnCondition="false" condition="$shallPass | $ignorePriority">
						<Sequence>
							<Expression expressions="$animalEscapeData.escapeFromWuid = $escapeFromWuid &#10;$animalEscapeData.escapeFromVec3 = $escapeFromVec3 &#10;$animalEscapeData.useVec3ForEscape = $useVec3ForEscape" />
							<Switch>
								<EntityContextCheck context="switch_isRedDeer" target="" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<GenerateRandomInteger lowerBoundary="-10" upperBoundary="10" result="$randomDistanceToFlee" />
											<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.slowSprint &#10;$animalEscapeData.distanceToFlee = 80 + $randomDistanceToFlee &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = true &#10; &#10;$urgency = $enum:urgency.instant" />
										</Sequence>
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="switch_isDeerDoe" target="" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<GenerateRandomInteger lowerBoundary="-10" upperBoundary="10" result="$randomDistanceToFlee" />
											<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.slowSprint &#10;$animalEscapeData.distanceToFlee = 80 + $randomDistanceToFlee &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = true &#10; &#10;$urgency = $enum:urgency.instant" />
										</Sequence>
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="switch_isBoar" target="" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<GenerateRandomInteger lowerBoundary="-10" upperBoundary="10" result="$randomDistanceToFlee" />
											<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.sprint &#10;$animalEscapeData.distanceToFlee = 80 + $randomDistanceToFlee &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = true" />
										</Sequence>
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="switch_isPig" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.sprint &#10;$animalEscapeData.distanceToFlee = 40 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false" />
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="switch_isCow" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.run &#10;$animalEscapeData.distanceToFlee = 40 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false" />
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="switch_isHare" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.slowSprint &#10;$animalEscapeData.distanceToFlee = 50 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false &#10; &#10;$urgency = $enum:urgency.instant" />
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.run &#10;$animalEscapeData.distanceToFlee = 40 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false" />
									</Then>
								</EntityContextCheck>
								<DefaultBranch>
									<Expression expressions="$animalEscapeData.movementSpeed = $enum:movementSpeed.sprint &#10;$animalEscapeData.distanceToFlee = 50 &#10;$animalEscapeData.keepMinimalDistance = 10 &#10;$animalEscapeData.shouldEmitInformation = false" />
								</DefaultBranch>
							</Switch>
							<Expression expressions="$animalEscapeData.initiatedBy = $initiator &#10;$animalEscapeData.previousReaction = $previousReaction &#10;$animalEscapeData.stimulusKind = $stimulusKind" />
							<AddInterrupt_animal_escape animalEscapeData="$animalEscapeData" Target="$this.id" Host="$redkev" Behavior="&apos;interrupt_animal_escape&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="$urgency" Aliveness="Alive" Privileged="false" FastForward="false" />
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animalEscapeData" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="randomDistanceToFlee" comment="" />
				<Variable name="redkev" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="urgency" comment="" />
				<Variable name="escapeFromVec3" comment="" />
				<Variable name="escapeFromWuid" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="useVec3ForEscape" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_crime_getRedkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_getRedkev>
						<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_checkReactionPriority>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
						</EntityContextCheck>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GenerateRandomInteger>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GenerateRandomInteger>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GenerateRandomInteger hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GenerateRandomInteger>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<DefaultBranch>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</DefaultBranch>
								</Switch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<AddInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AddInterrupt_animal_escape>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>