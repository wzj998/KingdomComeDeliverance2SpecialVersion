<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_chooseReaction" is_function="1">
		<Variables>
			<Variable name="result" type="enum:crime_animal_reactionKind" values="" isPersistent="0" form="single" />
			<Variable name="shouldIgnore" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="impulseLevel" type="enum:crime_animal_impulseLevel" values="$enum:crime_animal_impulseLevel.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_animal_stimulusKind" values="$enum:crime_animal_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$impulseLevel ~= $enum:crime_animal_impulseLevel.unknown">
					<Sequence>
						<Switch>
							<EntityContextCheck context="switch_isHorse" target="" saveVersion="2">
								<Then canSkip="1">
									<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.human | &#10;$stimulusKind == $enum:crime_animal_stimulusKind.flyBy">
										<Expression expressions="$shouldIgnore = true" />
									</IfCondition>
								</Then>
							</EntityContextCheck>
							<DefaultBranch>
								<Expression expressions="$shouldIgnore = false" />
							</DefaultBranch>
						</Switch>
						<IfElseCondition failOnCondition="false" condition="~$shouldIgnore" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<Switch>
										<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.hit">
											<EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
												</Then>
												<Else canSkip="1">
													<IfElseCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.critical" saveVersion="2">
														<Then canSkip="1">
															<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$result = $enum:crime_animal_reactionKind.attack" />
																</Then>
																<Else canSkip="1">
																	<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
																</Else>
															</EntityContextCheck>
														</Then>
														<Else canSkip="1">
															<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
																<Then canSkip="1">
																	<EntityContextCheck context="crime_animal_interruptAnnoyance" target="" saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$result = $enum:crime_animal_reactionKind.attack" />
																		</Then>
																		<Else canSkip="1">
																			<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																		</Else>
																	</EntityContextCheck>
																</Then>
																<Else canSkip="1">
																	<EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$result = $enum:crime_animal_reactionKind.reposition" />
																		</Then>
																		<Else canSkip="1">
																			<CheckNervousnessInterval Soul="" Flag="animals_domestic_repositionThreshold" saveVersion="2">
																				<Then canSkip="1">
																					<Expression expressions="$result = $enum:crime_animal_reactionKind.reposition" />
																				</Then>
																				<Else canSkip="1">
																					<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																				</Else>
																			</CheckNervousnessInterval>
																		</Else>
																	</EntityContextCheck>
																</Else>
															</EntityContextCheck>
														</Else>
													</IfElseCondition>
												</Else>
											</EntityContextCheck>
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.combat">
											<Success />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.sound | &#10;$stimulusKind == $enum:crime_animal_stimulusKind.human | &#10;$stimulusKind == $enum:crime_animal_stimulusKind.flyBy">
											<Switch>
												<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
													<Then canSkip="1">
														<IfElseCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.human" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
															</Then>
															<Else canSkip="1">
																<HasSeenPlayer NPC="$this.id" FullyAwareOnly="false" saveVersion="2">
																	<Then canSkip="1">
																		<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																	</Then>
																	<Else canSkip="1">
																		<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$result = $enum:crime_animal_reactionKind.lookAround" />
																			</Then>
																			<Else canSkip="1">
																				<IfElseCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.flyBy" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																					</Then>
																					<Else canSkip="1">
																						<CheckNervousnessInterval Soul="$this.id" Flag="animals_dog_heardSoundGoAnnoyance" saveVersion="2">
																							<Then canSkip="1">
																								<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																							</Then>
																							<Else canSkip="1">
																								<Expression expressions="$result = $enum:crime_animal_reactionKind.lookAround" />
																							</Else>
																						</CheckNervousnessInterval>
																					</Else>
																				</IfElseCondition>
																			</Else>
																		</CheckRelationshipInterval_SoulToSoul>
																	</Else>
																</HasSeenPlayer>
															</Else>
														</IfElseCondition>
													</Then>
												</EntityContextCheck>
												<EntityContextCheck context="crime_isDomesticAnimal" target="" saveVersion="2">
													<Then canSkip="1">
														<IfElseCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.critical" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
															</Then>
															<Else canSkip="1">
																<EntityContextCheck context="switch_isHorse" target="" saveVersion="2">
																	<Then canSkip="1">
																		<Expression expressions="$result = $enum:crime_animal_reactionKind.reposition" />
																	</Then>
																	<Else canSkip="1">
																		<CheckNervousnessInterval Soul="" Flag="animals_domestic_annoyanceThreshold" saveVersion="2">
																			<Then canSkip="1">
																				<CheckNervousnessInterval Soul="" Flag="animals_domestic_repositionThreshold" saveVersion="2">
																					<Then canSkip="1">
																						<Expression expressions="$result = $enum:crime_animal_reactionKind.reposition" />
																					</Then>
																					<Else canSkip="1">
																						<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																					</Else>
																				</CheckNervousnessInterval>
																			</Then>
																			<Else canSkip="1">
																				<Success />
																			</Else>
																		</CheckNervousnessInterval>
																	</Else>
																</EntityContextCheck>
															</Else>
														</IfElseCondition>
													</Then>
												</EntityContextCheck>
												<EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
													<Then canSkip="1">
														<IfElseCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.critical" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
															</Then>
															<Else canSkip="1">
																<CheckNervousnessInterval Soul="" Flag="animals_wild_annoyanceThreshold" saveVersion="2">
																	<Then canSkip="1">
																		<CheckNervousnessInterval Soul="" Flag="animals_wild_escapeThreshold" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
																			</Then>
																			<Else canSkip="1">
																				<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
																			</Else>
																		</CheckNervousnessInterval>
																	</Then>
																	<Else canSkip="1">
																		<Success />
																	</Else>
																</CheckNervousnessInterval>
															</Else>
														</IfElseCondition>
													</Then>
												</EntityContextCheck>
											</Switch>
										</IfCondition>
									</Switch>
									<Switch>
										<IfCondition failOnCondition="false" condition="$result == $enum:crime_animal_reactionKind.annoyance">
											<InstantCallback_empty EventName="&apos;Annoyance&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$result == $enum:crime_animal_reactionKind.attack">
											<InstantCallback_empty EventName="&apos;Attack&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$result == $enum:crime_animal_reactionKind.escape">
											<InstantCallback_empty EventName="&apos;Escape&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$result == $enum:crime_animal_reactionKind.lookAround">
											<InstantCallback_empty EventName="&apos;LookAround&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$result == $enum:crime_animal_reactionKind.reposition">
											<EntityContextCheck context="crime_animal_useAnnoyanceNotReposition" target="" saveVersion="2">
												<Then canSkip="1">
													<InstantCallback_empty EventName="&apos;Annoyance&apos;" />
												</Then>
												<Else canSkip="1">
													<InstantCallback_empty EventName="&apos;Reposition&apos;" />
												</Else>
											</EntityContextCheck>
										</IfCondition>
										<DefaultBranch>
											<InstantCallback_empty EventName="&apos;IgnoreImpulse&apos;" />
										</DefaultBranch>
									</Switch>
								</Sequence>
							</Then>
							<Else canSkip="1">
								<InstantCallback_empty EventName="&apos;IgnoreImpulse&apos;" />
							</Else>
						</IfElseCondition>
					</Sequence>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer>
			<Switch>
				<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_animal_stimulusKind.hit">
					<IfElseCondition failOnCondition="false" condition="$canFight" saveVersion="2">
						<Then canSkip="1">
							<IfElseCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.critical" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$result = $enum:crime_animal_reactionKind.attack" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
								</Else>
							</IfElseCondition>
						</Then>
						<Else canSkip="1">
							<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
						</Else>
					</IfElseCondition>
				</IfCondition>
				<DefaultBranch>
					<IfElseCondition failOnCondition="false" condition="$canFight" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$result = $enum:crime_animal_reactionKind.lookAround" />
						</Then>
						<Else canSkip="1">
							<Switch>
								<EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
									<Then canSkip="1">
										<CheckNervousnessInterval Soul="" Flag="animals_wild_escapeThreshold" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
											</Then>
											<Else canSkip="1">
												<IfElseCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.critical" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$result = $enum:crime_animal_reactionKind.escape" />
													</Then>
													<Else canSkip="1">
														<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
													</Else>
												</IfElseCondition>
											</Else>
										</CheckNervousnessInterval>
									</Then>
								</EntityContextCheck>
								<EntityContextCheck context="crime_isDomesticAnimal" target="" saveVersion="2">
									<Then canSkip="1">
										<CheckNervousnessInterval Soul="" Flag="animals_domestic_repositionThreshold" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$result = $enum:crime_animal_reactionKind.reposition" />
											</Then>
											<Else canSkip="1">
												<Expression expressions="$result = $enum:crime_animal_reactionKind.annoyance" />
											</Else>
										</CheckNervousnessInterval>
									</Then>
								</EntityContextCheck>
								<DefaultBranch>
									<ErrorNode Message="&apos;[$this.name;] animal_chooseReaction - unknown animal type&apos;" />
								</DefaultBranch>
							</Switch>
						</Else>
					</IfElseCondition>
				</DefaultBranch>
			</Switch>
			<EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
				<Then canSkip="1">
					<IfCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.annoying">
						<Expression expressions="$shouldIgnore = true" />
					</IfCondition>
				</Then>
			</EntityContextCheck>
		</ForestContainer>
		<EditorData EventSet="crime_animal_chooseReaction">
			<Variables>
				<Variable name="result" comment="" />
				<Variable name="shouldIgnore" comment="" />
				<Variable name="impulseLevel" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-100" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Then>
								</EntityContextCheck>
								<DefaultBranch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</DefaultBranch>
							</Switch>
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="Critical" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
													<Else>
														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																	<Else>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Else>
																</EntityContextCheck>
															</Then>
															<Else>
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																			<Else>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Else>
																		</EntityContextCheck>
																	</Then>
																	<Else>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																			<Else>
																				<CheckNervousnessInterval hasInputBreakpoint="0" comment="Annoying" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Then>
																					<Else>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Else>
																				</CheckNervousnessInterval>
																			</Else>
																		</EntityContextCheck>
																	</Else>
																</EntityContextCheck>
															</Else>
														</IfElseCondition>
													</Else>
												</EntityContextCheck>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="Stimulus deals with this" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Then>
																		<Else>
																			<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																						<Else>
																							<CheckNervousnessInterval hasInputBreakpoint="0" comment="Sound" breakpointFlags="0" saveVersion="2">
																								<OutputBreakpoints />
																								<Then>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Then>
																								<Else>
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																								</Else>
																							</CheckNervousnessInterval>
																						</Else>
																					</IfElseCondition>
																				</Else>
																			</CheckRelationshipInterval_SoulToSoul>
																		</Else>
																	</HasSeenPlayer>
																</Else>
															</IfElseCondition>
														</Then>
													</EntityContextCheck>
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="Critical" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Then>
																		<Else>
																			<CheckNervousnessInterval hasInputBreakpoint="0" comment="Annoying" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<CheckNervousnessInterval hasInputBreakpoint="0" comment="Annoying" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Then>
																						<Else>
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																						</Else>
																					</CheckNervousnessInterval>
																				</Then>
																				<Else>
																					<Success hasInputBreakpoint="0" comment="Don&apos;t do anything" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</Else>
																			</CheckNervousnessInterval>
																		</Else>
																	</EntityContextCheck>
																</Else>
															</IfElseCondition>
														</Then>
													</EntityContextCheck>
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="Critical" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<CheckNervousnessInterval hasInputBreakpoint="0" comment="Annoying" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<CheckNervousnessInterval hasInputBreakpoint="0" comment="Annoying" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="Critical" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Else>
																			</CheckNervousnessInterval>
																		</Then>
																		<Else>
																			<Success hasInputBreakpoint="0" comment="Don&apos;t do anything" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</Else>
																	</CheckNervousnessInterval>
																</Else>
															</IfElseCondition>
														</Then>
													</EntityContextCheck>
												</Switch>
											</IfCondition>
										</Switch>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantCallback_empty>
													</Then>
													<Else>
														<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantCallback_empty>
													</Else>
												</EntityContextCheck>
											</IfCondition>
											<DefaultBranch>
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</DefaultBranch>
										</Switch>
									</Sequence>
								</Then>
								<Else>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</Else>
							</IfElseCondition>
						</Sequence>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest>
				<Switch editorPosX="2490" editorPosY="-1220" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</IfElseCondition>
					</IfCondition>
					<DefaultBranch>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Else>
													</IfElseCondition>
												</Else>
											</CheckNervousnessInterval>
										</Then>
									</EntityContextCheck>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Else>
											</CheckNervousnessInterval>
										</Then>
									</EntityContextCheck>
									<DefaultBranch>
										<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ErrorNode>
									</DefaultBranch>
								</Switch>
							</Else>
						</IfElseCondition>
					</DefaultBranch>
				</Switch>
				<EntityContextCheck editorPosX="470" editorPosY="-980" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
					</Then>
				</EntityContextCheck>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>