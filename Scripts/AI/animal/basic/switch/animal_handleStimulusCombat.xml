<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_handleStimulusCombat" is_function="1">
		<Variables>
			<Variable name="attackerIsMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="combatWithMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="mate" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="mateTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shouldIgnore" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="skirmishParticipants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="skirmishParticipants_value" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="targetIsMate" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:animal_stimulus:combat" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Success />
			</OnInit>
			<Behavior canSkip="1">
				<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
					<Then canSkip="1">
						<Sequence>
							<IsIndifferent NPC="$stimulus.attacker" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$shouldIgnore = true" />
								</Then>
								<Else canSkip="1">
									<IfElseCondition failOnCondition="false" condition="$stimulus.isFromHitVolume" saveVersion="2">
										<Then canSkip="1">
											<Sequence>
												<EntityContextCheck context="combat_invisible" target="$stimulus.attacker" saveVersion="2">
													<Then canSkip="1">
														<EntityContextCheck context="combat_invisible" target="$stimulus.target" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$shouldIgnore = true" />
															</Then>
															<Else canSkip="1">
																<Expression expressions="$shouldIgnore = false" />
															</Else>
														</EntityContextCheck>
													</Then>
													<Else canSkip="1">
														<Expression expressions="$shouldIgnore = false" />
													</Else>
												</EntityContextCheck>
												<IfCondition failOnCondition="false" condition="~$shouldIgnore">
													<Sequence>
														<Sequence>
															<GetAreMates Npc1="$this.id" Npc2="$stimulus.target" AreMates="$targetIsMate" />
															<RelationContextCheck context="crime_animal_forceReactionToNPCCombat" from="$this.id" to="$stimulus.target" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$targetIsMate = true" />
																</Then>
															</RelationContextCheck>
															<IfCondition failOnCondition="false" condition="$targetIsMate">
																<Expression expressions="$mate = $stimulus.target &#10;$mateTarget = $stimulus.attacker" />
															</IfCondition>
														</Sequence>
														<Sequence>
															<GetAreMates Npc1="$this.id" Npc2="$stimulus.attacker" AreMates="$attackerIsMate" />
															<RelationContextCheck context="crime_animal_forceReactionToNPCCombat" from="$this.id" to="$stimulus.attacker" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$attackerIsMate = true" />
																</Then>
															</RelationContextCheck>
															<IfCondition failOnCondition="false" condition="$attackerIsMate">
																<Expression expressions="$mate = $stimulus.attacker &#10;$mateTarget = $stimulus.target" />
															</IfCondition>
														</Sequence>
														<Expression expressions="$combatWithMate = $targetIsMate | $attackerIsMate" />
													</Sequence>
												</IfCondition>
											</Sequence>
										</Then>
										<Else canSkip="1">
											<EntityContextCheck context="combat_invisible" target="$stimulus.attacker" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$shouldIgnore = true" />
												</Then>
												<Else canSkip="1">
													<Sequence>
														<GetSkirmishParticipants ReferenceNPC="$stimulus.attacker" Active="true" Passive="true" Targets="true" HumanOnly="false" ParticipantsOutVar="$skirmishParticipants" />
														<ForEach startIndex="0" step="1" array="$skirmishParticipants" iterator="" value="$skirmishParticipants_value" break="$break">
															<Sequence>
																<GetAreMates Npc1="$this.id" Npc2="$skirmishParticipants_value" AreMates="$combatWithMate" />
																<IfElseCondition failOnCondition="false" condition="$combatWithMate" saveVersion="2">
																	<Then canSkip="1">
																		<EntityContextCheck context="combat_defenceMode" target="$skirmishParticipants_value" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$combatWithMate = false" />
																			</Then>
																			<Else canSkip="1">
																				<PlayersCrimeInformationKnown Npc="$skirmishParticipants_value" OnlyRelated="true" PlayersCrimeInformationKnown="$combatWithMate" />
																			</Else>
																		</EntityContextCheck>
																	</Then>
																</IfElseCondition>
																<RelationContextCheck context="crime_animal_forceReactionToNPCCombat" from="$this.id" to="$skirmishParticipants_value" saveVersion="2">
																	<Then canSkip="1">
																		<Expression expressions="$combatWithMate = true" />
																	</Then>
																</RelationContextCheck>
																<IfCondition failOnCondition="false" condition="$combatWithMate">
																	<Sequence>
																		<SuppressFailure>
																			<GetTarget ReferenceNPC="$skirmishParticipants_value" TargetVarOut="$mateTarget" />
																		</SuppressFailure>
																		<Expression expressions="$mate = $skirmishParticipants_value &#10;$break = true" />
																	</Sequence>
																</IfCondition>
															</Sequence>
														</ForEach>
													</Sequence>
												</Else>
											</EntityContextCheck>
										</Else>
									</IfElseCondition>
								</Else>
							</IsIndifferent>
							<IfCondition failOnCondition="false" condition="~$shouldIgnore  &#10; &#10;&amp; $combatWithMate &amp; $mate ~= $__null &amp; $mateTarget ~= $__null">
								<Function_switch_animal_decideAttackOrEscape previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.hostile" stimulusKind="$enum:crime_animal_stimulusKind.combat" targetNPC="$mateTarget" nodeLabel="50140203" />
							</IfCondition>
						</Sequence>
					</Then>
					<Else canSkip="1">
						<Function_callInterrupt_animal_reposition banishmentSource="" ignorePriority="false" initiator="$enum:switch_interruptInitiator.scheduler" isBanishment="false" previousReaction="$enum:crime_animal_reactionKind.unknown" shouldUseVec3="false" shouldUseWuid="true" stimulusKind="$enum:crime_animal_stimulusKind.combat" targetPositionVec3="" targetPositionWuid="$stimulus.attacker" nodeLabel="24571464" />
					</Else>
				</EntityContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="attackerIsMate" comment="" />
				<Variable name="break" comment="" />
				<Variable name="combatWithMate" comment="" />
				<Variable name="mate" comment="" />
				<Variable name="mateTarget" comment="" />
				<Variable name="shouldIgnore" comment="" />
				<Variable name="skirmishParticipants" comment="" />
				<Variable name="skirmishParticipants_value" comment="" />
				<Variable name="targetIsMate" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Success hasInputBreakpoint="0" comment="Attacker is always filled in, Target only when coming from StimulusHit" breakpointFlags="0">
						<OutputBreakpoints />
					</Success>
				</OnInit>
				<Behavior>
					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Else>
															</EntityContextCheck>
														</Then>
														<Else>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Else>
													</EntityContextCheck>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="Target" breakpointFlags="0">
																<OutputBreakpoints />
																<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetAreMates>
																<RelationContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																</RelationContextCheck>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</IfCondition>
															</Sequence>
															<Sequence hasInputBreakpoint="0" comment="Attacker" breakpointFlags="0">
																<OutputBreakpoints />
																<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetAreMates>
																<RelationContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																</RelationContextCheck>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</IfCondition>
															</Sequence>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
													</IfCondition>
												</Sequence>
											</Then>
											<Else>
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
													<Else>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GetSkirmishParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetSkirmishParticipants>
															<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetAreMates>
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																				<Else>
																					<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</PlayersCrimeInformationKnown>
																				</Else>
																			</EntityContextCheck>
																		</Then>
																	</IfElseCondition>
																	<RelationContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Then>
																	</RelationContextCheck>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetTarget hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetTarget>
																			</SuppressFailure>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Sequence>
																	</IfCondition>
																</Sequence>
															</ForEach>
														</Sequence>
													</Else>
												</EntityContextCheck>
											</Else>
										</IfElseCondition>
									</Else>
								</IsIndifferent>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Function_switch_animal_decideAttackOrEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_switch_animal_decideAttackOrEscape>
								</IfCondition>
							</Sequence>
						</Then>
						<Else>
							<Function_callInterrupt_animal_reposition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_callInterrupt_animal_reposition>
						</Else>
					</EntityContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>