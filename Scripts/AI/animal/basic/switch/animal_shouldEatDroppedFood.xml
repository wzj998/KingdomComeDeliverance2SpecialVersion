<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_animal_shouldEatDroppedFood" is_function="1">
    <Variables>
      <Variable name="amountOfFood" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="animalCooldowns" type="crime:animalCooldowns" values="" isPersistent="0" form="single" />
      <Variable name="animalSpecies" type="enum:crime_animalSpecies" values="" isPersistent="0" form="single" />
      <Variable name="calculatedChance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="clampedChance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="shouldCalculate" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="useCooldownNotEq" type="_bool" values="false" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="item" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="shouldEat" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <SuppressFailure>
            <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_animalCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;crime_animalCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$animalCooldowns" />
            </GraphSearch>
          </SuppressFailure>
          <GetTime TimeType="GameTime" OutVar="$currentTime" Delta="" />
          <Expression expressions="$shouldEat = $animalCooldowns.horse_droppedFoodEatenCooldown &lt; $currentTime" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer>
      <IfElseCondition failOnCondition="false" condition="$useCooldownNotEq" saveVersion="2">
        <Else canSkip="1">
          <Sequence>
            <Switch>
              <EntityContextCheck context="crime_animal_interruptCheck" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$shouldCalculate = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="crime_animal_interruptWatchTrespass" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$shouldCalculate = true" />
                </Then>
              </EntityContextCheck>
              <DefaultBranch>
                <Expression expressions="$shouldEat = true" />
              </DefaultBranch>
            </Switch>
            <IfCondition failOnCondition="false" condition="$shouldCalculate">
              <Sequence>
                <ExecuteLua code="-- parameters &#10;local maxCourage = 30 &#10;local meatParam = 0.001 &#10;local nervousnessParam = 0.5 &#10;local courageParam = 0.7 &#10;-------------------------------- &#10; &#10;local courage = entity.soul:GetStatLevel(&apos;courage&apos;) &#10;local nervousness = entity.soul:GetDerivedStat(&apos;nrv&apos;) &#10;local amount = data.amountOfFood &#10; &#10;local couragePart = math.sqrt( courage/maxCourage ) * courageParam &#10;local nervousnessPart = math.sqrt( nervousness ) * nervousnessParam &#10; &#10;local EQ1 = 1 - (couragePart + nervousnessPart) &#10;data.calculatedChance = EQ1 + amount * meatParam" />
                <Clamp value="$calculatedChance" lowerBoundary="0.150000" upperBoundary="0.900000" result="$clampedChance" />
                <RandomGate opensWithChance="$clampedChance" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$shouldEat = true" />
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$shouldEat = false" />
                  </Else>
                </RandomGate>
                <GameContextCheck context="crime_dogEatChance_debugEnabled" saveVersion="2">
                  <Then canSkip="1">
                    <IfElseCondition failOnCondition="false" condition="$shouldEat" saveVersion="2">
                      <Then canSkip="1">
                        <ExecuteLua code="Game.SendInfoText(&apos;DEBUG_____DogEat chance, Chance: &apos; .. data.clampedChance .. &apos;, Result: true&apos;,false)" />
                      </Then>
                      <Else canSkip="1">
                        <ExecuteLua code="Game.SendInfoText(&apos;DEBUG_____DogEat chance, Chance: &apos; .. data.clampedChance .. &apos;, Result: false&apos;,false)" />
                      </Else>
                    </IfElseCondition>
                  </Then>
                </GameContextCheck>
              </Sequence>
            </IfCondition>
          </Sequence>
        </Else>
      </IfElseCondition>
      <Sequence>
        <GetItemProperty itemId="$item" property="Amount" result="$amountOfFood" />
        <EntityContextCheck context="switch_isHorse" target="" saveVersion="2">
          <Then canSkip="1">
            <Expression expressions="$useCooldownNotEq = true" />
          </Then>
          <Else canSkip="1">
            <Expression expressions="$useCooldownNotEq = false" />
          </Else>
        </EntityContextCheck>
      </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="amountOfFood" comment="" />
        <Variable name="animalCooldowns" comment="" />
        <Variable name="animalSpecies" comment="" />
        <Variable name="calculatedChance" comment="" />
        <Variable name="clampedChance" comment="" />
        <Variable name="currentTime" comment="" />
        <Variable name="shouldCalculate" comment="" />
        <Variable name="useCooldownNotEq" comment="" />
        <Variable name="item" comment="" />
        <Variable name="shouldEat" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
              </GraphSearch>
            </SuppressFailure>
            <GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetTime>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
          </Sequence>
        </Behavior>
      </Root>
      <Forest>
        <IfElseCondition editorPosX="1190" editorPosY="1260" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
          <Else>
            <Sequence hasInputBreakpoint="0" comment="Currently DISABLED, ALWAYS USE COOLDOWN" breakpointFlags="0">
              <OutputBreakpoints />
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <DefaultBranch>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </DefaultBranch>
              </Switch>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ExecuteLua>
                  <Clamp hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Clamp>
                  <RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </RandomGate>
                  <GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <IfElseCondition hasInputBreakpoint="0" comment="Can&apos;t write bool as lua variable zZzZ" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                        </Then>
                        <Else>
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                        </Else>
                      </IfElseCondition>
                    </Then>
                  </GameContextCheck>
                </Sequence>
              </IfCondition>
            </Sequence>
          </Else>
        </IfElseCondition>
        <Sequence editorPosX="1140" editorPosY="830" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </GetItemProperty>
          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Then>
            <Else>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Else>
          </EntityContextCheck>
        </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>