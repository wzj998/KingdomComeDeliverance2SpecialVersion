<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_animal_alertMode" is_function="1">
    <Variables>
      <Variable name="_shouldPlayAlertUnstance" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="_shouldPlayShock" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="duration" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="source" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="waitActionOnEnd" type="_bool" values="true" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <UrgencyDecorator Urgency="Fast">
          <Sequence>
            <UrgencyDecorator Urgency="Fast">
              <WaitAction />
            </UrgencyDecorator>
            <StopMovement waitUntilStopped="false" />
            <Switch>
              <EntityContextCheck context="switch_isRedDeer" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$_shouldPlayAlertUnstance = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="switch_isPig" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$_shouldPlayAlertUnstance = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="switch_isBoar" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$_shouldPlayAlertUnstance = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="switch_isHare" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$_shouldPlayAlertUnstance = true" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="switch_isCow" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$_shouldPlayAlertUnstance = true" />
                </Then>
              </EntityContextCheck>
              <DefaultBranch>
                <Expression expressions="$_shouldPlayAlertUnstance = true" />
              </DefaultBranch>
            </Switch>
            <Switch>
              <IfCondition failOnCondition="false" condition="$_shouldPlayAlertUnstance">
                <UnstanceAction unstance="animal_alert" locationObject="" slaveObject="" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$_shouldPlayShock">
                <ShockNPC Target="$this.id" Source="$source" Type="Low" />
              </IfCondition>
            </Switch>
            <Wait duration="$duration" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            <IfCondition failOnCondition="false" condition="$waitActionOnEnd">
              <WaitAction />
            </IfCondition>
          </Sequence>
        </UrgencyDecorator>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="_shouldPlayAlertUnstance" comment="" />
        <Variable name="_shouldPlayShock" comment="" />
        <Variable name="duration" comment="" />
        <Variable name="source" comment="" />
        <Variable name="waitActionOnEnd" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </WaitAction>
              </UrgencyDecorator>
              <StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMovement>
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="&gt;Not sure&lt;" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <DefaultBranch>
                  <Expression hasInputBreakpoint="0" comment="Not sure, but try instead of failing" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </DefaultBranch>
              </Switch>
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </UnstanceAction>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <ShockNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ShockNPC>
                </IfCondition>
              </Switch>
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </WaitAction>
              </IfCondition>
            </Sequence>
          </UrgencyDecorator>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>