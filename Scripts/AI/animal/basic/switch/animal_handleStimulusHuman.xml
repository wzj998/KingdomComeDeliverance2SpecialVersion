<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_animal_handleStimulusHuman" is_function="1">
    <Variables>
      <Variable name="dummyWuid" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="impulseLevel" type="enum:crime_animal_impulseLevel" values="" isPersistent="0" form="single" />
      <Variable name="isInInterior" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="shouldCareAboutInterior" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="shouldReact" type="_bool" values="false" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="stimulus" type="switch:animal_stimulus:human" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
          <Else canSkip="1">
            <EntityContextCheck context="crime_animal_suppressImpulsesDuringActivity" target="" saveVersion="2">
              <Else canSkip="1">
                <IsInsideAreaWithLabel Position="$this.id" Label="&apos;animals_publicSpace&apos;" Area="" FailSubtMissing="false" saveVersion="2">
                  <Else canSkip="1">
                    <Sequence>
                      <Switch>
                        <EntityContextCheck context="switch_isCow" target="" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$shouldCareAboutInterior = true" />
                          </Then>
                        </EntityContextCheck>
                        <EntityContextCheck context="switch_isPig" target="" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$shouldCareAboutInterior = true" />
                          </Then>
                        </EntityContextCheck>
                        <EntityContextCheck context="switch_isDogBreed" target="" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$shouldCareAboutInterior = true" />
                          </Then>
                        </EntityContextCheck>
                        <DefaultBranch>
                          <Expression expressions="$shouldCareAboutInterior = false" />
                        </DefaultBranch>
                      </Switch>
                      <IsInsideAreaWithLabel Position="$this.id" Label="&apos;interior&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$isInInterior = true" />
                        </Then>
                      </IsInsideAreaWithLabel>
                      <IfCondition failOnCondition="false" condition="~$shouldCareAboutInterior | &#10;($shouldCareAboutInterior &amp; ~$isInInterior)">
                        <Sequence>
                          <Function_switch_animal_affectFeelings affectNervousness="true" affectReputation="false" token="&apos;saw_human&apos;" nodeLabel="48071477" />
                          <Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying" />
                          <CallDecorator_crime_animal_chooseReaction>
                            <Subtree canSkip="1">
                              <Function_switch_animal_chooseReaction impulseLevel="$impulseLevel" stimulusKind="$enum:crime_animal_stimulusKind.human" nodeLabel="99513193" />
                            </Subtree>
                            <IgnoreImpulse canSkip="1">
                              <CallbackEventCatch_empty>
                                <Success />
                              </CallbackEventCatch_empty>
                            </IgnoreImpulse>
                            <Annoyance canSkip="1">
                              <CallbackEventCatch_empty>
                                <Function_callInterrupt_animal_annoyance attackKind="$enum:crime_attackKind.unknown" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.human" target="$stimulus.who" nodeLabel="89645193" />
                              </CallbackEventCatch_empty>
                            </Annoyance>
                            <Attack canSkip="1">
                              <CallbackEventCatch_empty>
                                <Success />
                              </CallbackEventCatch_empty>
                            </Attack>
                            <Escape canSkip="1">
                              <CallbackEventCatch_empty>
                                <Function_callInterrupt_animal_escape escapeFromVec3="" escapeFromWuid="$stimulus.who" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.human" useVec3ForEscape="false" nodeLabel="76422070" />
                              </CallbackEventCatch_empty>
                            </Escape>
                            <LookAround canSkip="1">
                              <CallbackEventCatch_empty>
                                <Success />
                              </CallbackEventCatch_empty>
                            </LookAround>
                            <Reposition canSkip="1">
                              <CallbackEventCatch_empty>
                                <Function_callInterrupt_animal_reposition ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" isBanishment="false" previousReaction="$enum:crime_animal_reactionKind.unknown" shouldUseVec3="false" shouldUseWuid="true" stimulusKind="$enum:crime_animal_stimulusKind.human" targetPositionVec3="" targetPositionWuid="$stimulus.who" nodeLabel="79757756" />
                              </CallbackEventCatch_empty>
                            </Reposition>
                          </CallDecorator_crime_animal_chooseReaction>
                        </Sequence>
                      </IfCondition>
                    </Sequence>
                  </Else>
                </IsInsideAreaWithLabel>
              </Else>
            </EntityContextCheck>
          </Else>
        </EntityContextCheck>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="dummyWuid" comment="" />
        <Variable name="impulseLevel" comment="" />
        <Variable name="isInInterior" comment="" />
        <Variable name="shouldCareAboutInterior" comment="" />
        <Variable name="shouldReact" comment="" />
        <Variable name="stimulus" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Else>
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Else>
                  <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Else>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                          </EntityContextCheck>
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                          </EntityContextCheck>
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                          </EntityContextCheck>
                          <DefaultBranch>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </DefaultBranch>
                        </Switch>
                        <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                        </IsInsideAreaWithLabel>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Function_switch_animal_affectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Function_switch_animal_affectFeelings>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                            <CallDecorator_crime_animal_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Subtree>
                                <Function_switch_animal_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Function_switch_animal_chooseReaction>
                              </Subtree>
                              <IgnoreImpulse>
                                <CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </CallbackEventCatch_empty>
                              </IgnoreImpulse>
                              <Annoyance>
                                <CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Function_callInterrupt_animal_annoyance>
                                </CallbackEventCatch_empty>
                              </Annoyance>
                              <Attack>
                                <CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </CallbackEventCatch_empty>
                              </Attack>
                              <Escape>
                                <CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Function_callInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Function_callInterrupt_animal_escape>
                                </CallbackEventCatch_empty>
                              </Escape>
                              <LookAround>
                                <CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </CallbackEventCatch_empty>
                              </LookAround>
                              <Reposition>
                                <CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Function_callInterrupt_animal_reposition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Function_callInterrupt_animal_reposition>
                                </CallbackEventCatch_empty>
                              </Reposition>
                            </CallDecorator_crime_animal_chooseReaction>
                          </Sequence>
                        </IfCondition>
                      </Sequence>
                    </Else>
                  </IsInsideAreaWithLabel>
                </Else>
              </EntityContextCheck>
            </Else>
          </EntityContextCheck>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>