<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="interrupt_animal_lookAround" is_function="0">
		<Variables>
			<Variable name="movementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
			<Variable name="randomPoint" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="searchPoints" type="vec3" values="" isPersistent="0" form="array" />
			<Variable name="searchPoints_val" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="animalLookAroundData" type="switch:animal_interruptData:lookAround" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_animal_interruptLookAround" target="$this.id">
							<AddPerceivableState PerceivableLabel="&apos;crime_interrupt&apos;">
								<LogToLabel Name="&apos;crime_interrupt&apos;" Wuid="" Message="&apos;interrupt:animal:lookAround&apos;">
									<LogToLabel Name="&apos;crime_stimulusKind&apos;" Wuid="" Message="&apos;stimulusKind:$animalLookAroundData.stimulusKind&apos;">
										<Sequence>
											<Function_crime_animal_confirmReactionLink reactionKind="$enum:crime_animal_reactionKind.lookAround" target="" nodeLabel="62983412" />
											<WaitAction />
											<Turn target="$animalLookAroundData.targetPosition" align="false" />
											<Parallel successMode="Any" failureMode="Any">
												<Function_switch_animal_continuouslyCheckNervousnessForSpeed movementSpeed="$movementSpeed" nodeLabel="54147103" />
												<Sequence>
													<Move stopWithinDistance="1.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$animalLookAroundData.targetPosition" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
													<CheckNervousnessInterval Soul="$this.id" Flag="animals_dog_lookAround_searchThreshold" saveVersion="2">
														<Then canSkip="1">
															<Sequence>
																<IfGate atomic="false" condition="#searchPoints &lt; 3" RunLogic="Halt">
																	<Loop count="10">
																		<Sequence>
																			<GetRandomPos StartPos="$animalLookAroundData.targetPosition" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="3.000000" Precise="false" MaxIterantions="1" Target="$randomPoint" navAgentType="Automatic" pathFindingParams="" />
																			<IsInsideAreaWithLabel Position="$randomPoint" Label="&apos;private&apos;" Area="" FailSubtMissing="false" saveVersion="2">
																				<Then canSkip="1">
																					<IsInsideAreaWithLabel Position="$randomPoint" Label="&apos;interior&apos;" Area="" FailSubtMissing="false" saveVersion="2">
																						<Else canSkip="1">
																							<Expression expressions="$searchPoints[#searchPoints] = $randomPoint" />
																						</Else>
																					</IsInsideAreaWithLabel>
																				</Then>
																			</IsInsideAreaWithLabel>
																		</Sequence>
																	</Loop>
																</IfGate>
																<ForEach startIndex="0" step="1" array="$searchPoints" iterator="" value="$searchPoints_val" break="">
																	<Move stopWithinDistance="1.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$searchPoints_val" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
																</ForEach>
															</Sequence>
														</Then>
														<Else canSkip="1">
															<Success />
														</Else>
													</CheckNervousnessInterval>
												</Sequence>
											</Parallel>
											<Function_switch_animal_callFollowUpBehavior previousReaction="$enum:crime_animal_reactionKind.lookAround" nodeLabel="58302249" />
										</Sequence>
									</LogToLabel>
								</LogToLabel>
							</AddPerceivableState>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<Function_crime_animal_removeReactionLink reactionKind="$enum:crime_animal_reactionKind.lookAround" target="" nodeLabel="82750725" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="animal_lookAround" EventSet="">
			<Variables>
				<Variable name="movementSpeed" comment="" />
				<Variable name="randomPoint" comment="" />
				<Variable name="searchPoints" comment="" />
				<Variable name="searchPoints_val" comment="" />
				<Variable name="animalLookAroundData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AddPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_crime_animal_confirmReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_animal_confirmReactionLink>
												<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WaitAction>
												<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Turn>
												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_switch_animal_continuouslyCheckNervousnessForSpeed hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_switch_animal_continuouslyCheckNervousnessForSpeed>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Move>
														<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</GetRandomPos>
																				<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Else>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Else>
																						</IsInsideAreaWithLabel>
																					</Then>
																				</IsInsideAreaWithLabel>
																			</Sequence>
																		</Loop>
																	</IfGate>
																	<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Move>
																	</ForEach>
																</Sequence>
															</Then>
															<Else>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Else>
														</CheckNervousnessInterval>
													</Sequence>
												</Parallel>
												<Function_switch_animal_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_switch_animal_callFollowUpBehavior>
											</Sequence>
										</LogToLabel>
									</LogToLabel>
								</AddPerceivableState>
							</EntityContext>
						</Child>
						<OnFail>
							<Function_crime_animal_removeReactionLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_crime_animal_removeReactionLink>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>