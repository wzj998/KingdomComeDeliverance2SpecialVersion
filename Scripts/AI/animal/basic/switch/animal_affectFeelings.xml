<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_animal_affectFeelings" is_function="1">
    <Variables>
      <Variable name="animalToken" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="nervousnessToken" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="affectNervousness" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="affectReputation" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="token" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfCondition failOnCondition="false" condition="$token ~= &apos;&apos;">
          <Sequence>
            <Switch>
              <EntityContextCheck context="switch_isDogBreed" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animalToken = &apos;dog&apos;" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="crime_isDomesticAnimal" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animalToken = &apos;domestic&apos;" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animalToken = &apos;wild&apos;" />
                </Then>
              </EntityContextCheck>
              <DefaultBranch>
                <ErrorNode Message="&apos;[$this.name;] animal_affectFeelings - unknown animal type&apos;" />
              </DefaultBranch>
            </Switch>
            <Concatenation OutString="$nervousnessToken" Pattern="&apos;auto_animal_$animalToken;_$token&apos;" />
            <IfCondition failOnCondition="false" condition="$affectNervousness">
              <AddNervousness Change="$nervousnessToken" SoulWUID="$this.id" IsCourageous="" />
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$affectReputation">
              <SetReputationNPC NPC="$this.id" reputationChange="$nervousnessToken" />
            </IfCondition>
          </Sequence>
        </IfCondition>
      </Behavior>
    </Root>
    <ForestContainer>
      <LogToConsole LogLevel="Info" Message="&apos;[$this.name;] animal_affectFeelings: $nervousnessToken;&apos;" />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="animalToken" comment="" />
        <Variable name="nervousnessToken" comment="" />
        <Variable name="affectNervousness" comment="" />
        <Variable name="affectReputation" comment="" />
        <Variable name="token" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <DefaultBranch>
                  <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ErrorNode>
                </DefaultBranch>
              </Switch>
              <Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Concatenation>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <AddNervousness hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </AddNervousness>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <SetReputationNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SetReputationNPC>
              </IfCondition>
            </Sequence>
          </IfCondition>
        </Behavior>
      </Root>
      <Forest>
        <LogToConsole editorPosX="1110" editorPosY="140" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
        </LogToConsole>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>