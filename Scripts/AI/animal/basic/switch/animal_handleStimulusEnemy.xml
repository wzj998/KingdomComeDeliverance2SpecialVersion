<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_handleStimulusEnemy" is_function="1">
		<Variables>
			<Variable name="distanceMeToEnemy" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="shouldReact" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="skirmishReaction" type="enum:combat_skirmishReaction" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:animal_stimulus:enemy" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Switch>
						<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$shouldReact = true" />
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<Success />
						</DefaultBranch>
					</Switch>
					<IfCondition failOnCondition="false" condition="$shouldReact">
						<EntityContextCheck context="switch_recognitionLevel_II" target="$this.id" saveVersion="2">
							<Then canSkip="1">
								<Function_callInterrupt_animal_check ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.enemy" target="$stimulus.enemy" nodeLabel="95614613" />
							</Then>
							<Else canSkip="1">
								<EntityContextCheck context="crime_animal_interruptEscape" target="" saveVersion="2">
									<Else canSkip="1">
										<HasPerceivableState PerceivableState="&apos;combat&apos;" PerceivedWUID="$stimulus.enemy" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
											<Then canSkip="1">
												<Function_callInterrupt_animal_attack ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.none" stimulusKind="$enum:crime_animal_stimulusKind.enemy" target="$stimulus.enemy" nodeLabel="83913577" />
											</Then>
											<Else canSkip="1">
												<Sequence>
													<MeasureDistance position1="$this.id" position2="$stimulus.enemy" mode="ThreeDimensions" result="$distanceMeToEnemy" />
													<IfElseCondition failOnCondition="false" condition="$distanceMeToEnemy &lt; $data:script_param[&apos;crime_animal_attackDistanceThreshold&apos;].value" saveVersion="2">
														<Then canSkip="1">
															<Function_callInterrupt_animal_attack ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.none" stimulusKind="$enum:crime_animal_stimulusKind.enemy" target="$stimulus.enemy" nodeLabel="56115644" />
														</Then>
														<Else canSkip="1">
															<EntityContextCheck context="crime_animal_forceInstantAttackOnEnemy" target="" saveVersion="2">
																<Then canSkip="1">
																	<Function_callInterrupt_animal_attack ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.none" stimulusKind="$enum:crime_animal_stimulusKind.enemy" target="$stimulus.enemy" nodeLabel="14402667" />
																</Then>
																<Else canSkip="1">
																	<Function_callInterrupt_animal_annoyance attackKind="$enum:crime_attackKind.unknown" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.enemy" target="$stimulus.enemy" nodeLabel="21818896" />
																</Else>
															</EntityContextCheck>
														</Else>
													</IfElseCondition>
												</Sequence>
											</Else>
										</HasPerceivableState>
									</Else>
								</EntityContextCheck>
							</Else>
						</EntityContextCheck>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="distanceMeToEnemy" comment="" />
				<Variable name="shouldReact" comment="" />
				<Variable name="skirmishReaction" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
							</EntityContextCheck>
							<DefaultBranch>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</DefaultBranch>
						</Switch>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Function_callInterrupt_animal_check hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_callInterrupt_animal_check>
								</Then>
								<Else>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Else>
											<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Function_callInterrupt_animal_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_animal_attack>
												</Then>
												<Else>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</MeasureDistance>
														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Function_callInterrupt_animal_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_callInterrupt_animal_attack>
															</Then>
															<Else>
																<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Function_callInterrupt_animal_attack hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_callInterrupt_animal_attack>
																	</Then>
																	<Else>
																		<Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_callInterrupt_animal_annoyance>
																	</Else>
																</EntityContextCheck>
															</Else>
														</IfElseCondition>
													</Sequence>
												</Else>
											</HasPerceivableState>
										</Else>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>