<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_handleStimulusSound" is_function="1">
		<Variables>
			<Variable name="affectFeelingsToken" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="animalCooldown" type="crime:animalCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="dummyWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="escapeFromWuid" type="_wuid" values="$__player" isPersistent="0" form="single" />
			<Variable name="ignorePriority" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="impulseLevel" type="enum:crime_animal_impulseLevel" values="" isPersistent="0" form="single" />
			<Variable name="isInInterior" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerHorse" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shouldCareAboutInterior" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="shouldHear" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="shouldIgnoreSound" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="shouldIgnoreThisSound" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="shouldUseChooseReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassLevel" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:animal_stimulus:sound" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Switch>
						<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$shouldHear = true" />
							</Then>
						</CheckRelationshipInterval_SoulToSoul>
						<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
							<Then canSkip="1">
								<IfElseCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.combat" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$shouldHear = true" />
									</Then>
									<Else canSkip="1">
										<Function_switch_animal_determineTrespassReaction observer="$this.id" positionVec3="$stimulus.position" positionWuid="" shouldUseVec3="true" reaction="$shouldHear" trespassArea="$dummyWuid" trespassLevel="$trespassLevel" nodeLabel="25426837" />
									</Else>
								</IfElseCondition>
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<Expression expressions="$shouldHear = true" />
						</DefaultBranch>
					</Switch>
					<Switch>
						<EntityContextCheck context="switch_isCow" target="" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$shouldCareAboutInterior = true" />
							</Then>
						</EntityContextCheck>
						<EntityContextCheck context="switch_isPig" target="" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$shouldCareAboutInterior = true" />
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<Expression expressions="$shouldCareAboutInterior = false" />
						</DefaultBranch>
					</Switch>
					<Sequence>
						<EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
							<Else canSkip="1">
								<SuppressFailure>
									<Sequence>
										<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_animalCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;crime_animalCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$animalCooldown" />
										</GraphSearch>
										<GetTime TimeType="GameTime" OutVar="$currentTime" Delta="" />
										<IfCondition failOnCondition="false" condition="$animalCooldown.soundReactionTimestamp &gt; $currentTime">
											<Expression expressions="$shouldIgnoreSound = true" />
										</IfCondition>
									</Sequence>
								</SuppressFailure>
							</Else>
						</EntityContextCheck>
						<EntityContextCheck context="switch_isHorse" target="" saveVersion="2">
							<Then canSkip="1">
								<Switch>
									<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.gun_fired">
										<Sequence>
											<EntityContextCheck context="crime_horse_ignoreGunFiredSound" target="" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$shouldIgnoreSound = true" />
												</Then>
												<Else canSkip="1">
													<Sequence>
														<Expression expressions="$shouldUseChooseReaction = false" />
														<AddBuff SoulWUID="$this.id" BuffGUID="&apos;761f5b41-5e11-44a3-bcca-815cf4ddbd2e&apos;" />
														<Function_callInterrupt_animal_startle ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.sound" suppressBuckingAnimation="false" target="$__player" nodeLabel="58921221" />
													</Sequence>
												</Else>
											</EntityContextCheck>
											<Expression expressions="$shouldIgnoreSound = true" />
										</Sequence>
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.combat">
										<Sequence>
											<GetPlayerHorse HorseWuid="$playerHorse" />
											<IfCondition failOnCondition="false" condition="$this.id ~= $playerHorse">
												<Sequence>
													<Expression expressions="$shouldHear = true" />
													<EntityContextCheck context="crime_animal_interruptReposition" target="" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$ignorePriority = true" />
														</Then>
													</EntityContextCheck>
												</Sequence>
											</IfCondition>
										</Sequence>
									</IfCondition>
									<DefaultBranch>
										<Expression expressions="$shouldIgnoreSound = true" />
									</DefaultBranch>
								</Switch>
							</Then>
						</EntityContextCheck>
					</Sequence>
					<IfCondition failOnCondition="false" condition="$shouldHear &amp; ~$shouldIgnoreSound">
						<Sequence>
							<IfCondition failOnCondition="false" condition="$shouldCareAboutInterior">
								<IsInsideAreaWithLabel Position="$this.id" Label="&apos;interior&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$isInInterior = true" />
									</Then>
									<Else canSkip="1">
										<IsInsideAreaWithLabel Position="$stimulus.position" Label="&apos;interior&apos;" Area="$dummyWuid" FailSubtMissing="false" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$isInInterior = true" />
											</Then>
										</IsInsideAreaWithLabel>
									</Else>
								</IsInsideAreaWithLabel>
							</IfCondition>
							<Switch>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.bow_fired &amp; &#10;~$isInInterior">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_bow_fired&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.arrow_hit">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical &#10;$affectFeelingsToken = &apos;heard_arrow_hit&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.movement &amp; &#10;~$isInInterior">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_movement&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.hunting_alarm &amp; &#10;~$isInInterior">
									<Switch>
										<EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical &#10;$affectFeelingsToken = &apos;heard_hunting_alarm&apos;" />
											</Then>
										</EntityContextCheck>
										<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
											<Then canSkip="1">
												<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical &#10;$affectFeelingsToken = &apos;heard_hunting_alarm&apos;" />
													</Then>
												</CheckRelationshipInterval_SoulToSoul>
											</Then>
										</EntityContextCheck>
										<DefaultBranch>
											<Expression expressions="$shouldIgnoreThisSound = true" />
										</DefaultBranch>
									</Switch>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.whistle &amp; &#10;~$isInInterior">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_whistle&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="($stimulus.kind == $enum:sound.decoy_distract |  &#10;$stimulus.kind == $enum:sound.lure_distract) &amp; &#10;~$isInInterior">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_distraction&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="($stimulus.kind == $enum:sound.smell | $stimulus.kind == $enum:sound.perfume) &amp; &#10;~$isInInterior">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_smell&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.gun_fired">
									<Sequence>
										<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical &#10;$affectFeelingsToken = &apos;heard_gun_fired&apos;" />
										<EntityContext context="switch_isHorse" target="">
											<AddBuff SoulWUID="$this.id" BuffGUID="&apos;5d3175c5-4064-4270-bd48-92fa9bbc694&apos;" />
										</EntityContext>
									</Sequence>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.dog_attack_command">
									<EntityContextCheck context="crime_isWildAnimal" target="" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical &#10;$affectFeelingsToken = &apos;heard_hunting_alarm&apos; &#10;$escapeFromWuid = $__playerDog" />
										</Then>
										<Else canSkip="1">
											<Expression expressions="$shouldIgnoreThisSound = true" />
										</Else>
									</EntityContextCheck>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.combat">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_combat&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.thrash">
									<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying &#10;$affectFeelingsToken = &apos;heard_thrash&apos;" />
								</IfCondition>
								<DefaultBranch>
									<Success />
								</DefaultBranch>
							</Switch>
							<EntityContextCheck context="crime_animal_suppressImpulsesDuringActivity" target="" saveVersion="2">
								<Then canSkip="1">
									<EntityContextCheck context="switch_isHare" target="" saveVersion="2">
										<Then canSkip="1">
											<IfCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.annoying &amp;  &#10;$stimulus.kind ~= $enum:sound.decoy_distract">
												<Expression expressions="$shouldIgnoreThisSound = true" />
											</IfCondition>
										</Then>
										<Else canSkip="1">
											<IfCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.annoying">
												<Expression expressions="$shouldIgnoreThisSound = true" />
											</IfCondition>
										</Else>
									</EntityContextCheck>
								</Then>
							</EntityContextCheck>
							<IsInsideAreaWithLabel Position="$this.id" Label="&apos;animals_publicSpace&apos;" Area="" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<IfCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.annoying">
										<Expression expressions="$shouldIgnoreThisSound = true" />
									</IfCondition>
								</Then>
							</IsInsideAreaWithLabel>
							<EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
								<Then canSkip="1">
									<IfCondition failOnCondition="false" condition="$impulseLevel == $enum:crime_animal_impulseLevel.annoying">
										<Expression expressions="$shouldIgnoreThisSound = true" />
									</IfCondition>
								</Then>
							</EntityContextCheck>
							<IfCondition failOnCondition="false" condition="~$shouldIgnoreThisSound &amp;  &#10;$impulseLevel ~= $enum:crime_animal_impulseLevel.unknown">
								<Sequence>
									<Function_switch_animal_affectFeelings affectNervousness="true" affectReputation="false" token="$affectFeelingsToken" nodeLabel="53354524" />
									<CallDecorator_crime_animal_chooseReaction>
										<Subtree canSkip="1">
											<Function_switch_animal_chooseReaction impulseLevel="$impulseLevel" stimulusKind="$enum:crime_animal_stimulusKind.sound" nodeLabel="63124916" />
										</Subtree>
										<IgnoreImpulse canSkip="1">
											<CallbackEventCatch_empty>
												<Success />
											</CallbackEventCatch_empty>
										</IgnoreImpulse>
										<Annoyance canSkip="1">
											<CallbackEventCatch_empty>
												<Function_callInterrupt_animal_annoyance attackKind="$enum:crime_attackKind.unknown" ignorePriority="$ignorePriority" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.sound" target="$__player" nodeLabel="89719802" />
											</CallbackEventCatch_empty>
										</Annoyance>
										<Attack canSkip="1">
											<CallbackEventCatch_empty>
												<Success />
											</CallbackEventCatch_empty>
										</Attack>
										<Escape canSkip="1">
											<CallbackEventCatch_empty>
												<IfElseCondition failOnCondition="false" condition="$stimulus.kind == $enum:sound.combat" saveVersion="2">
													<Then canSkip="1">
														<Function_callInterrupt_animal_escape escapeFromVec3="$stimulus.position" escapeFromWuid="" ignorePriority="$ignorePriority" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.sound" useVec3ForEscape="true" nodeLabel="20960024" />
													</Then>
													<Else canSkip="1">
														<Function_callInterrupt_animal_escape escapeFromVec3="" escapeFromWuid="$__player" ignorePriority="$ignorePriority" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.sound" useVec3ForEscape="false" nodeLabel="93153504" />
													</Else>
												</IfElseCondition>
											</CallbackEventCatch_empty>
										</Escape>
										<LookAround canSkip="1">
											<CallbackEventCatch_empty>
												<Function_callInterrupt_animal_lookAround ignorePriority="$ignorePriority" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" shouldUseVec3="true" stimulusKind="$enum:crime_animal_stimulusKind.sound" targetPositionVec3="$stimulus.position" targetPositionWuid="" nodeLabel="27533368" />
											</CallbackEventCatch_empty>
										</LookAround>
										<Reposition canSkip="1">
											<CallbackEventCatch_empty>
												<Function_callInterrupt_animal_reposition banishmentSource="" ignorePriority="$ignorePriority" initiator="$enum:switch_interruptInitiator.switch" isBanishment="false" previousReaction="$enum:crime_animal_reactionKind.unknown" shouldUseVec3="true" shouldUseWuid="false" stimulusKind="$enum:crime_animal_stimulusKind.sound" targetPositionVec3="$stimulus.position" targetPositionWuid="" nodeLabel="19109481" />
											</CallbackEventCatch_empty>
										</Reposition>
									</CallDecorator_crime_animal_chooseReaction>
								</Sequence>
							</IfCondition>
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="affectFeelingsToken" comment="" />
				<Variable name="animalCooldown" comment="" />
				<Variable name="currentTime" comment="" />
				<Variable name="dummyWuid" comment="" />
				<Variable name="escapeFromWuid" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="impulseLevel" comment="" />
				<Variable name="isInInterior" comment="" />
				<Variable name="playerHorse" comment="" />
				<Variable name="shouldCareAboutInterior" comment="" />
				<Variable name="shouldHear" comment="" />
				<Variable name="shouldIgnoreSound" comment="" />
				<Variable name="shouldIgnoreThisSound" comment="" />
				<Variable name="shouldUseChooseReaction" comment="" />
				<Variable name="trespassLevel" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-140" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
							</CheckRelationshipInterval_SoulToSoul>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Function_switch_animal_determineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_switch_animal_determineTrespassReaction>
										</Else>
									</IfElseCondition>
								</Then>
							</EntityContextCheck>
							<DefaultBranch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</DefaultBranch>
						</Switch>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
							</EntityContextCheck>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
							</EntityContextCheck>
							<DefaultBranch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</DefaultBranch>
						</Switch>
						<Sequence hasInputBreakpoint="0" comment="Special stuff" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Else>
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetTime>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
										</Sequence>
									</SuppressFailure>
								</Else>
							</EntityContextCheck>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
													<Else>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<AddBuff hasInputBreakpoint="0" comment="Morale debuff" breakpointFlags="0">
																<OutputBreakpoints />
															</AddBuff>
															<Function_callInterrupt_animal_startle hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_startle>
														</Sequence>
													</Else>
												</EntityContextCheck>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetPlayerHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetPlayerHorse>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
														</EntityContextCheck>
													</Sequence>
												</IfCondition>
											</Sequence>
										</IfCondition>
										<DefaultBranch>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</DefaultBranch>
									</Switch>
								</Then>
							</EntityContextCheck>
						</Sequence>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
											</IsInsideAreaWithLabel>
										</Else>
									</IsInsideAreaWithLabel>
								</IfCondition>
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
											</EntityContextCheck>
											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
													</CheckRelationshipInterval_SoulToSoul>
												</Then>
											</EntityContextCheck>
											<DefaultBranch>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</DefaultBranch>
										</Switch>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<EntityContext hasInputBreakpoint="0" comment="#KCD2-225105" breakpointFlags="0">
												<OutputBreakpoints />
												<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AddBuff>
											</EntityContext>
										</Sequence>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Else>
										</EntityContextCheck>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<DefaultBranch>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DefaultBranch>
								</Switch>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<EntityContextCheck hasInputBreakpoint="0" comment="KCD2-345407 quick fix, if more like this - create system" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
											</Then>
											<Else>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
											</Else>
										</EntityContextCheck>
									</Then>
								</EntityContextCheck>
								<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Then>
								</IsInsideAreaWithLabel>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Then>
								</EntityContextCheck>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_switch_animal_affectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_switch_animal_affectFeelings>
										<CallDecorator_crime_animal_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Subtree>
												<Function_switch_animal_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_switch_animal_chooseReaction>
											</Subtree>
											<IgnoreImpulse>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</CallbackEventCatch_empty>
											</IgnoreImpulse>
											<Annoyance>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_animal_annoyance>
												</CallbackEventCatch_empty>
											</Annoyance>
											<Attack>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</CallbackEventCatch_empty>
											</Attack>
											<Escape>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Function_callInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_escape>
														</Then>
														<Else>
															<Function_callInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_escape>
														</Else>
													</IfElseCondition>
												</CallbackEventCatch_empty>
											</Escape>
											<LookAround>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_callInterrupt_animal_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_animal_lookAround>
												</CallbackEventCatch_empty>
											</LookAround>
											<Reposition>
												<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_callInterrupt_animal_reposition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_callInterrupt_animal_reposition>
												</CallbackEventCatch_empty>
											</Reposition>
										</CallDecorator_crime_animal_chooseReaction>
									</Sequence>
								</IfCondition>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>