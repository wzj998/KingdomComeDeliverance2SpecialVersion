<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="callInterrupt_animal_reposition" is_function="1">
		<Variables>
			<Variable name="animalRepositionData" type="switch:animal_interruptData:reposition" values="" isPersistent="0" form="single" />
			<Variable name="distanceToSource" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="priority" type="_int" values="35" isPersistent="0" form="single" />
			<Variable name="redkev" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shallPass" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="banishmentSource" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="ignorePriority" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isBanishment" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_animal_reactionKind" values="$enum:crime_animal_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="shouldUseVec3" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="shouldUseWuid" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_animal_stimulusKind" values="$enum:crime_animal_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="targetPositionVec3" type="vec3" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="targetPositionWuid" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_crime_getRedkev redkev="$redkev" nodeLabel="70574999" />
					<Function_crime_checkReactionPriority priority="$priority" shallPass="$shallPass" nodeLabel="33445506" />
					<IfCondition failOnCondition="false" condition="$shallPass | $ignorePriority">
						<Sequence>
							<Expression expressions="$animalRepositionData.initiatedBy = $initiator &#10;$animalRepositionData.previousReaction = $previousReaction &#10;$animalRepositionData.stimulusKind = $stimulusKind &#10;$animalRepositionData.isBanishment = $isBanishment &#10;$animalRepositionData.banishmentSource = $banishmentSource" />
							<IfElseCondition failOnCondition="false" condition="$shouldUseVec3" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$animalRepositionData.repositionFromVec3 = $targetPositionVec3" />
								</Then>
								<Else canSkip="1">
									<GetSpatialInfo In="$targetPositionWuid" Out="$animalRepositionData.repositionFromVec3" What="Position" />
								</Else>
							</IfElseCondition>
							<MeasureDistance position1="$this.id" position2="$animalRepositionData.repositionFromVec3" mode="ThreeDimensions" result="$distanceToSource" />
							<Switch>
								<EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$animalRepositionData.distanceToFlee = $distanceToSource + 10 &#10;$animalRepositionData.keepMinimalDistance = 2 &#10;$animalRepositionData.movementSpeed = $enum:movementSpeed.run" />
									</Then>
								</EntityContextCheck>
								<DefaultBranch>
									<Expression expressions="$animalRepositionData.distanceToFlee = $distanceToSource + 10 &#10;$animalRepositionData.keepMinimalDistance = 2 &#10;$animalRepositionData.movementSpeed = $enum:movementSpeed.walk" />
								</DefaultBranch>
							</Switch>
							<AddInterrupt_animal_reposition animalRepositionData="$animalRepositionData" Target="$this.id" Host="$redkev" Behavior="&apos;interrupt_animal_reposition&apos;" Priority="$priority" IgnorePriorityOnPreviousInterrupt="$ignorePriority" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animalRepositionData" comment="" />
				<Variable name="distanceToSource" comment="" />
				<Variable name="priority" comment="" />
				<Variable name="redkev" comment="" />
				<Variable name="shallPass" comment="" />
				<Variable name="banishmentSource" comment="" />
				<Variable name="ignorePriority" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="isBanishment" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="shouldUseVec3" comment="" />
				<Variable name="shouldUseWuid" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="targetPositionVec3" comment="" />
				<Variable name="targetPositionWuid" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-10" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_crime_getRedkev hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_getRedkev>
						<Function_crime_checkReactionPriority hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_checkReactionPriority>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetSpatialInfo>
									</Else>
								</IfElseCondition>
								<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</MeasureDistance>
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</EntityContextCheck>
									<DefaultBranch>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</DefaultBranch>
								</Switch>
								<AddInterrupt_animal_reposition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AddInterrupt_animal_reposition>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>