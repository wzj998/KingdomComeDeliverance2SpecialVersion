<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="switch_animal_oneshotDogBark" is_function="1">
    <Variables>
      <Variable name="animalDogBarkData" type="crime:animalDogBarkData" values="" isPersistent="0" form="single" />
      <Variable name="barkSoundModifier" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="hasDogPersonPerk" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="barkTarget" type="_wuid" values="$__player" isPersistent="0" form="single" requirementType="In" />
      <Variable name="count" type="_int" values="3" isPersistent="0" form="single" requirementType="In" />
      <Variable name="shouldConsiderPerk" type="_bool" values="true" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <HasPerk SoulWUID="$__player" Perk="&apos;6ef70c3e-aac3-4368-8b75-d37d9910cf6e&apos;" Value="$hasDogPersonPerk" UsePerk="false" />
          <EntityContextCheck context="switch_isWolf" target="$this.id" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$hasDogPersonPerk = true" />
            </Then>
          </EntityContextCheck>
          <IfElseCondition failOnCondition="false" condition="$hasDogPersonPerk" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$barkSoundModifier = 0.2" />
            </Then>
            <Else canSkip="1">
              <Expression expressions="$barkSoundModifier = 1.0" />
            </Else>
          </IfElseCondition>
          <Parallel successMode="Any" failureMode="Any">
            <IfElseCondition failOnCondition="false" condition="$hasDogPersonPerk" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <Parallel successMode="Any" failureMode="Any">
                    <Sequence>
                      <Turn target="$barkTarget" align="false" />
                      <Loop count="-1">
                        <AnimationAction fragment="&apos;GrowlingStand&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                      </Loop>
                    </Sequence>
                    <Loop count="$count">
                      <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
                    </Loop>
                  </Parallel>
                  <WaitAction />
                </Sequence>
              </Then>
              <Else canSkip="1">
                <Loop count="$count">
                  <Sequence>
                    <AnimationAction fragment="&apos;Bark&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                    <Wait duration="&apos;250ms&apos;" timeType="GameTime" doFail="false" variation="" />
                  </Sequence>
                </Loop>
              </Else>
            </IfElseCondition>
            <Sequence>
              <Wait duration="&apos;150ms&apos;" timeType="GameTime" doFail="false" variation="" />
              <AtomicDecorator>
                <Sequence>
                  <GetSpatialInfo In="$barkTarget" Out="$animalDogBarkData.position" What="Position" />
                  <GetTime TimeType="WorldTime" OutVar="$animalDogBarkData.timestamp" Delta="" />
                  <Expression expressions="$animalDogBarkData.dog = $this.id" />
                  <SuppressFailure>
                    <Sequence>
                      <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <LinkTagFilter tag="&apos;home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
                      </GraphSearch>
                      <AddLink From="$home" To="$this.id" Tag="&apos;crime_animal_dogBarkData&apos;" Data="$animalDogBarkData" LinkOpHandleMode="OverWrite" />
                    </Sequence>
                  </SuppressFailure>
                  <ProduceSound Sound="dog_bark" Position="$animalDogBarkData.position" Multiplier="$barkSoundModifier" />
                </Sequence>
              </AtomicDecorator>
              <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
            </Sequence>
          </Parallel>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="animalDogBarkData" comment="" />
        <Variable name="barkSoundModifier" comment="" />
        <Variable name="currentTime" comment="" />
        <Variable name="hasDogPersonPerk" comment="" />
        <Variable name="home" comment="" />
        <Variable name="barkTarget" comment="" />
        <Variable name="count" comment="" />
        <Variable name="shouldConsiderPerk" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <HasPerk hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </HasPerk>
            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
            </EntityContextCheck>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
              <Else>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Else>
            </IfElseCondition>
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Turn>
                        <Loop hasInputBreakpoint="0" comment="Run until wait below finishes" breakpointFlags="0">
                          <OutputBreakpoints />
                          <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </AnimationAction>
                        </Loop>
                      </Sequence>
                      <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </Loop>
                    </Parallel>
                    <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </WaitAction>
                  </Sequence>
                </Then>
                <Else>
                  <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </AnimationAction>
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </Sequence>
                  </Loop>
                </Else>
              </IfElseCondition>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
                <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetSpatialInfo>
                    <GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetTime>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                    <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </LinkTagFilter>
                        </GraphSearch>
                        <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddLink>
                      </Sequence>
                    </SuppressFailure>
                    <ProduceSound hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </ProduceSound>
                  </Sequence>
                </AtomicDecorator>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Parallel>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>