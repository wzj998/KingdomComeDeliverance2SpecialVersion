<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_handleStimulusHit" is_function="1">
		<Variables>
			<Variable name="dummyWuidArray" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="goIntoSkirmishDecision" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="impulseLevel" type="enum:crime_animal_impulseLevel" values="" isPersistent="0" form="single" />
			<Variable name="isEnemy" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="packSO" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="shouldIgnoreHit" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="stimulus" type="switch:animal_stimulus:hit" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextCheck context="lovVlku_dogPack" target="" saveVersion="2">
					<Then canSkip="1">
						<Sequence>
							<Function_switch_lovvlku_getPackData pack="$dummyWuidArray" packSO="$packSO" nodeLabel="92348419" />
							<AddInterrupt_goto tagpoint="$stimulus.attacker" Target="$this.id" Host="$packSO" Behavior="&apos;goTo&apos;" Priority="56" IgnorePriorityOnPreviousInterrupt="false" urgency="Fast" Aliveness="Alive" Privileged="false" FastForward="false" />
						</Sequence>
					</Then>
					<Else canSkip="1">
						<Sequence>
							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="$this.id" Flag="enemy" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$isEnemy = true" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$isEnemy = false" />
								</Else>
							</CheckRelationshipInterval_SoulToSoul>
							<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<Switch>
											<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:crime_attackKind.armed | &#10;$stimulus.kind == $enum:crime_attackKind.unarmed">
												<Expression expressions="$goIntoSkirmishDecision = true" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:crime_attackKind.pebble">
												<EntityContextCheck context="crime_animal_interruptAnnoyance" target="" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$goIntoSkirmishDecision = true" />
													</Then>
													<Else canSkip="1">
														<Function_callInterrupt_animal_annoyance attackKind="$enum:crime_attackKind.unknown" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.hit" target="$stimulus.attacker" nodeLabel="44479453" />
													</Else>
												</EntityContextCheck>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:crime_attackKind.missile">
												<HasSeenPlayer NPC="$this.id" FullyAwareOnly="false" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$goIntoSkirmishDecision = true" />
													</Then>
													<Else canSkip="1">
														<Function_callInterrupt_animal_annoyance attackKind="$stimulus.kind" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.hit" target="$stimulus.attacker" nodeLabel="50344923" />
													</Else>
												</HasSeenPlayer>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:crime_attackKind.collision">
												<IfElseCondition failOnCondition="false" condition="$isEnemy" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$goIntoSkirmishDecision = true" />
													</Then>
													<Else canSkip="1">
														<Function_callInterrupt_animal_annoyance attackKind="$enum:crime_attackKind.unknown" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.hit" target="$stimulus.attacker" nodeLabel="21740557" />
													</Else>
												</IfElseCondition>
											</IfCondition>
											<DefaultBranch>
												<Success />
											</DefaultBranch>
										</Switch>
										<IfCondition failOnCondition="false" condition="$goIntoSkirmishDecision">
											<Function_switch_animal_decideAttackOrEscape previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.hostile" stimulusKind="$enum:crime_animal_stimulusKind.hit" targetNPC="$stimulus.attacker" nodeLabel="71911083" />
										</IfCondition>
									</Sequence>
								</Then>
								<Else canSkip="1">
									<Sequence>
										<Switch>
											<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:crime_attackKind.pebble">
												<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$stimulus.kind == $enum:crime_attackKind.collision">
												<IfElseCondition failOnCondition="false" condition="$stimulus.attackerOnHorse" saveVersion="2">
													<Then canSkip="1">
														<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical" />
													</Then>
													<Else canSkip="1">
														<EntityContextCheck context="switch_isSheep" target="" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$shouldIgnoreHit = true" />
															</Then>
															<Else canSkip="1">
																<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.annoying" />
															</Else>
														</EntityContextCheck>
													</Else>
												</IfElseCondition>
											</IfCondition>
											<DefaultBranch>
												<Expression expressions="$impulseLevel = $enum:crime_animal_impulseLevel.critical" />
											</DefaultBranch>
										</Switch>
										<IfCondition failOnCondition="false" condition="~$shouldIgnoreHit">
											<CallDecorator_crime_animal_chooseReaction>
												<Subtree canSkip="1">
													<Function_switch_animal_chooseReaction impulseLevel="$impulseLevel" stimulusKind="$enum:crime_animal_stimulusKind.hit" nodeLabel="76519339" />
												</Subtree>
												<IgnoreImpulse canSkip="1">
													<CallbackEventCatch_empty>
														<Success />
													</CallbackEventCatch_empty>
												</IgnoreImpulse>
												<Annoyance canSkip="1">
													<CallbackEventCatch_empty>
														<Function_callInterrupt_animal_annoyance attackKind="$stimulus.kind" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.hit" target="$stimulus.attacker" nodeLabel="14666244" />
													</CallbackEventCatch_empty>
												</Annoyance>
												<Attack canSkip="1">
													<CallbackEventCatch_empty>
														<Function_switch_animal_decideAttackOrEscape previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.hostile" stimulusKind="$enum:crime_animal_stimulusKind.hit" targetNPC="$stimulus.attacker" nodeLabel="91666855" />
													</CallbackEventCatch_empty>
												</Attack>
												<Escape canSkip="1">
													<CallbackEventCatch_empty>
														<Function_callInterrupt_animal_escape escapeFromVec3="" escapeFromWuid="$stimulus.attacker" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$enum:crime_animal_stimulusKind.hit" useVec3ForEscape="false" nodeLabel="81236340" />
													</CallbackEventCatch_empty>
												</Escape>
												<LookAround canSkip="1">
													<CallbackEventCatch_empty>
														<Success />
													</CallbackEventCatch_empty>
												</LookAround>
												<Reposition canSkip="1">
													<CallbackEventCatch_empty>
														<Function_callInterrupt_animal_reposition ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" isBanishment="false" previousReaction="$enum:crime_animal_reactionKind.unknown" shouldUseVec3="false" shouldUseWuid="true" stimulusKind="$enum:crime_animal_stimulusKind.hit" targetPositionVec3="" targetPositionWuid="$stimulus.attacker" nodeLabel="41572024" />
													</CallbackEventCatch_empty>
												</Reposition>
											</CallDecorator_crime_animal_chooseReaction>
										</IfCondition>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</Sequence>
					</Else>
				</EntityContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="dummyWuidArray" comment="" />
				<Variable name="goIntoSkirmishDecision" comment="" />
				<Variable name="impulseLevel" comment="" />
				<Variable name="isEnemy" comment="" />
				<Variable name="packSO" comment="" />
				<Variable name="shouldIgnoreHit" comment="" />
				<Variable name="stimulus" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_switch_lovvlku_getPackData hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_switch_lovvlku_getPackData>
								<AddInterrupt_goto hasInputBreakpoint="0" comment="todo: refactor" breakpointFlags="0">
									<OutputBreakpoints />
								</AddInterrupt_goto>
							</Sequence>
						</Then>
						<Else>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</CheckRelationshipInterval_SoulToSoul>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_annoyance>
														</Else>
													</EntityContextCheck>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_annoyance>
														</Else>
													</HasSeenPlayer>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_annoyance>
														</Else>
													</IfElseCondition>
												</IfCondition>
												<DefaultBranch>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DefaultBranch>
											</Switch>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_switch_animal_decideAttackOrEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_switch_animal_decideAttackOrEscape>
											</IfCondition>
										</Sequence>
									</Then>
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Then>
														<Else>
															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Else>
															</EntityContextCheck>
														</Else>
													</IfElseCondition>
												</IfCondition>
												<DefaultBranch>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</DefaultBranch>
											</Switch>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CallDecorator_crime_animal_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Subtree>
														<Function_switch_animal_chooseReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_switch_animal_chooseReaction>
													</Subtree>
													<IgnoreImpulse>
														<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</CallbackEventCatch_empty>
													</IgnoreImpulse>
													<Annoyance>
														<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_callInterrupt_animal_annoyance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_annoyance>
														</CallbackEventCatch_empty>
													</Annoyance>
													<Attack>
														<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_switch_animal_decideAttackOrEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_switch_animal_decideAttackOrEscape>
														</CallbackEventCatch_empty>
													</Attack>
													<Escape>
														<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_callInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_escape>
														</CallbackEventCatch_empty>
													</Escape>
													<LookAround>
														<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</CallbackEventCatch_empty>
													</LookAround>
													<Reposition>
														<CallbackEventCatch_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_callInterrupt_animal_reposition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_callInterrupt_animal_reposition>
														</CallbackEventCatch_empty>
													</Reposition>
												</CallDecorator_crime_animal_chooseReaction>
											</IfCondition>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</Sequence>
						</Else>
					</EntityContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>