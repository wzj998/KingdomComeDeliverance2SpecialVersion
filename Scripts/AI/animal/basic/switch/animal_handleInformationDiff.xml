<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="switch_animal_handleInformationDiff" is_function="1">
		<Variables>
			<Variable name="addMyselfToHowled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="alarmAttackTarget" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="alarmReactionKind" type="enum:crime_animal_reactionKind" values="" isPersistent="0" form="single" />
			<Variable name="alreadyAlarmed" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="alreadyAlarmedKey" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="alreadyHowled" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="alreadyHowledKey" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="animalCooldown" type="crime:animalCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="dummyInfo" type="information" values="" isPersistent="0" form="single" />
			<Variable name="escapeFromVec3" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="escapeFromWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="howlOnCooldown" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="isRelevant" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="stimulusKind" type="enum:crime_animal_stimulusKind" values="" isPersistent="0" form="single" />
			<Variable name="useVec3ForEscape" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="informationDiff" type="informationDiff" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfElseCondition failOnCondition="false" condition="$informationDiff.status == &apos;Received&apos;" saveVersion="2">
					<Then canSkip="1">
						<SuppressFailure>
							<Sequence>
								<CheckInformationKnowledge Information="$informationDiff.information" Holder="$this.id" />
								<Function_switch_animal_isInformationDiffRelevant information="$informationDiff.information" isRelevant="$isRelevant" nodeLabel="26940684" />
								<IfElseCondition failOnCondition="false" condition="$isRelevant" saveVersion="2">
									<Then canSkip="1">
										<Switch>
											<IfCondition failOnCondition="false" condition="$informationDiff.information.label == &apos;animal_alarm&apos;">
												<Selector>
													<LockDynamicInformationValues Information="$informationDiff.information">
														<Sequence>
															<SuppressFailure>
																<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;alreadyAlarmed&apos;" Out="$alreadyAlarmed" />
															</SuppressFailure>
															<FindInArray array="$alreadyAlarmed" keyOut="$alreadyAlarmedKey" condition="$__value == $this.id" />
														</Sequence>
													</LockDynamicInformationValues>
													<Sequence>
														<LockDynamicInformationValues Information="$informationDiff.information">
															<Sequence>
																<SuppressFailure>
																	<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;alreadyAlarmed&apos;" Out="$alreadyAlarmed" />
																</SuppressFailure>
																<PushToArray array="$alreadyAlarmed" value="$this.id" direction="Back" />
																<SetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;alreadyAlarmed&apos;" Variable="$alreadyAlarmed" Type="" Value="" />
															</Sequence>
														</LockDynamicInformationValues>
														<LockDynamicInformationValues Information="$informationDiff.information">
															<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;reactionKind&apos;" Out="$alarmReactionKind" />
														</LockDynamicInformationValues>
														<Switch>
															<IfCondition failOnCondition="false" condition="$alarmReactionKind == $enum:crime_animal_reactionKind.escape">
																<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
																	<Else canSkip="1">
																		<Selector>
																			<RetrieveInformation PerceivedWuid="$this.id" label="&apos;animal_alarm&apos;" OutVariable="$dummyInfo" />
																			<EntityContextCheck context="crime_animal_interruptEscape" target="" saveVersion="2">
																				<Else canSkip="1">
																					<Sequence>
																						<LockDynamicInformationValues Information="$informationDiff.information">
																							<Sequence>
																								<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;useVec3ForEscape&apos;" Out="$useVec3ForEscape" />
																								<IfElseCondition failOnCondition="false" condition="$useVec3ForEscape" saveVersion="2">
																									<Then canSkip="1">
																										<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;escapeFromVec3&apos;" Out="$escapeFromVec3" />
																									</Then>
																									<Else canSkip="1">
																										<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;escapeFromWuid&apos;" Out="$escapeFromWuid" />
																									</Else>
																								</IfElseCondition>
																								<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;stimulusKind&apos;" Out="$stimulusKind" />
																							</Sequence>
																						</LockDynamicInformationValues>
																						<Function_switch_animal_affectFeelings affectNervousness="true" affectReputation="false" token="&apos;information_animal_alarm&apos;" nodeLabel="19948810" />
																						<Function_callInterrupt_animal_escape escapeFromVec3="$escapeFromVec3" escapeFromWuid="$escapeFromWuid" ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" stimulusKind="$stimulusKind" useVec3ForEscape="$useVec3ForEscape" nodeLabel="48693025" />
																					</Sequence>
																				</Else>
																			</EntityContextCheck>
																		</Selector>
																	</Else>
																</EntityContextCheck>
															</IfCondition>
															<IfCondition failOnCondition="false" condition="$alarmReactionKind == $enum:crime_animal_reactionKind.attack">
																<EntityContextCheck context="crime_isCombatableAnimal" target="" saveVersion="2">
																	<Then canSkip="1">
																		<Selector>
																			<RetrieveInformation PerceivedWuid="$this.id" label="&apos;animal_alarm&apos;" OutVariable="$dummyInfo" />
																			<Sequence>
																				<LockDynamicInformationValues Information="$informationDiff.information">
																					<Sequence>
																						<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;attackTarget&apos;" Out="$alarmAttackTarget" />
																						<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;stimulusKind&apos;" Out="$stimulusKind" />
																					</Sequence>
																				</LockDynamicInformationValues>
																				<CheckRelationshipInterval_SoulToSoul TargetSoul="$alarmAttackTarget" Soul="$this.id" Flag="enemy" saveVersion="2">
																					<Then canSkip="1">
																						<Sequence>
																							<Function_switch_animal_affectFeelings affectNervousness="true" affectReputation="false" token="&apos;information_animal_alarm&apos;" nodeLabel="81465888" />
																							<Function_switch_animal_decideAttackOrEscape previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.hostile" stimulusKind="$stimulusKind" targetNPC="$alarmAttackTarget" nodeLabel="61100663" />
																						</Sequence>
																					</Then>
																				</CheckRelationshipInterval_SoulToSoul>
																			</Sequence>
																		</Selector>
																	</Then>
																</EntityContextCheck>
															</IfCondition>
															<DefaultBranch>
																<Success />
															</DefaultBranch>
														</Switch>
													</Sequence>
												</Selector>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$informationDiff.information.label == &apos;animal_howl&apos;">
												<Sequence>
													<SuppressFailure>
														<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_animalCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;crime_animalCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$animalCooldown" />
														</GraphSearch>
													</SuppressFailure>
													<GetTime TimeType="WorldTime" OutVar="$currentTime" Delta="" />
													<IfElseCondition failOnCondition="false" condition="$animalCooldown.animalHowlCooldown == 0 | &#10;$currentTime &gt; $animalCooldown.animalHowlCooldown + (24 * 3600 * 1000)" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$howlOnCooldown = false" />
														</Then>
														<Else canSkip="1">
															<Expression expressions="$howlOnCooldown = true" />
														</Else>
													</IfElseCondition>
													<IfElseCondition failOnCondition="false" condition="~$howlOnCooldown" saveVersion="2">
														<Then canSkip="1">
															<RandomGate opensWithChance="0.250000" saveVersion="2">
																<Then canSkip="1">
																	<Selector>
																		<LockDynamicInformationValues Information="$informationDiff.information">
																			<Sequence>
																				<SuppressFailure>
																					<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;alreadyHowled&apos;" Out="$alreadyHowled" />
																				</SuppressFailure>
																				<FindInArray array="$alreadyHowled" keyOut="$alreadyHowledKey" condition="$__value == $this.id" />
																			</Sequence>
																		</LockDynamicInformationValues>
																		<Sequence>
																			<Expression expressions="$addMyselfToHowled = true" />
																			<Selector>
																				<RetrieveInformation PerceivedWuid="$this.id" label="&apos;animal_howl&apos;" OutVariable="$dummyInfo" />
																				<Function_callInterrupt_animal_howl nodeLabel="61081910" />
																			</Selector>
																		</Sequence>
																	</Selector>
																</Then>
																<Else canSkip="1">
																	<Success />
																</Else>
															</RandomGate>
														</Then>
														<Else canSkip="1">
															<Expression expressions="$addMyselfToHowled = true" />
														</Else>
													</IfElseCondition>
													<IfCondition failOnCondition="false" condition="$addMyselfToHowled">
														<LockDynamicInformationValues Information="$informationDiff.information">
															<Sequence>
																<SuppressFailure>
																	<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;alreadyHowled&apos;" Out="$alreadyHowled" />
																</SuppressFailure>
																<PushToArray array="$alreadyHowled" value="$this.id" direction="Back" />
																<SetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;alreadyHowled&apos;" Variable="$alreadyHowled" Type="" Value="" />
															</Sequence>
														</LockDynamicInformationValues>
													</IfCondition>
												</Sequence>
											</IfCondition>
											<DefaultBranch>
												<Success />
											</DefaultBranch>
										</Switch>
									</Then>
									<Else canSkip="1">
										<DestroyInformationFromHolder Information="$informationDiff.information" />
									</Else>
								</IfElseCondition>
							</Sequence>
						</SuppressFailure>
					</Then>
					<Else canSkip="1">
						<Success />
					</Else>
				</IfElseCondition>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_callInterrupt_animal_attack ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_animal_reactionKind.unknown" skirmishRelationOverride="$enum:skirmishRelationOverride.none" stimulusKind="$stimulusKind" target="$alarmAttackTarget" nodeLabel="99345012" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="addMyselfToHowled" comment="" />
				<Variable name="alarmAttackTarget" comment="" />
				<Variable name="alarmReactionKind" comment="" />
				<Variable name="alreadyAlarmed" comment="" />
				<Variable name="alreadyAlarmedKey" comment="" />
				<Variable name="alreadyHowled" comment="" />
				<Variable name="alreadyHowledKey" comment="" />
				<Variable name="animalCooldown" comment="" />
				<Variable name="currentTime" comment="" />
				<Variable name="dummyInfo" comment="" />
				<Variable name="escapeFromVec3" comment="" />
				<Variable name="escapeFromWuid" comment="" />
				<Variable name="howlOnCooldown" comment="" />
				<Variable name="isRelevant" comment="" />
				<Variable name="stimulusKind" comment="" />
				<Variable name="useVec3ForEscape" comment="" />
				<Variable name="informationDiff" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CheckInformationKnowledge hasInputBreakpoint="0" comment="Information might get deleted before we read informationDiff message; so check" breakpointFlags="0">
										<OutputBreakpoints />
									</CheckInformationKnowledge>
									<Function_switch_animal_isInformationDiffRelevant hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_switch_animal_isInformationDiffRelevant>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LockDynamicInformationValues hasInputBreakpoint="0" comment="check if this information already alarmed me" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetDynamicInformationValue>
																</SuppressFailure>
																<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</FindInArray>
															</Sequence>
														</LockDynamicInformationValues>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LockDynamicInformationValues hasInputBreakpoint="0" comment="add myself to alarmed animals on the received information" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetDynamicInformationValue>
																	</SuppressFailure>
																	<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</PushToArray>
																	<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SetDynamicInformationValue>
																</Sequence>
															</LockDynamicInformationValues>
															<LockDynamicInformationValues hasInputBreakpoint="0" comment="Get alarm reactionKind" breakpointFlags="0">
																<OutputBreakpoints />
																<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetDynamicInformationValue>
															</LockDynamicInformationValues>
															<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Else>
																			<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</RetrieveInformation>
																				<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Else>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</GetDynamicInformationValue>
																									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																										<OutputBreakpoints />
																										<Then>
																											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetDynamicInformationValue>
																										</Then>
																										<Else>
																											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																											</GetDynamicInformationValue>
																										</Else>
																									</IfElseCondition>
																									<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</GetDynamicInformationValue>
																								</Sequence>
																							</LockDynamicInformationValues>
																							<Function_switch_animal_affectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_switch_animal_affectFeelings>
																							<Function_callInterrupt_animal_escape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_callInterrupt_animal_escape>
																						</Sequence>
																					</Else>
																				</EntityContextCheck>
																			</Selector>
																		</Else>
																	</EntityContextCheck>
																</IfCondition>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</RetrieveInformation>
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</GetDynamicInformationValue>
																							<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</GetDynamicInformationValue>
																						</Sequence>
																					</LockDynamicInformationValues>
																					<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<Function_switch_animal_affectFeelings hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_switch_animal_affectFeelings>
																								<Function_switch_animal_decideAttackOrEscape hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Function_switch_animal_decideAttackOrEscape>
																							</Sequence>
																						</Then>
																					</CheckRelationshipInterval_SoulToSoul>
																				</Sequence>
																			</Selector>
																		</Then>
																	</EntityContextCheck>
																</IfCondition>
																<DefaultBranch>
																	<Success hasInputBreakpoint="0" comment="Ignore" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</DefaultBranch>
															</Switch>
														</Sequence>
													</Selector>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
															</GraphSearch>
														</SuppressFailure>
														<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetTime>
														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
															<Else>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Else>
														</IfElseCondition>
														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LockDynamicInformationValues hasInputBreakpoint="0" comment="Check if I already howled for this information" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</GetDynamicInformationValue>
																					</SuppressFailure>
																					<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</FindInArray>
																				</Sequence>
																			</LockDynamicInformationValues>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																				<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</RetrieveInformation>
																					<Function_callInterrupt_animal_howl hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_callInterrupt_animal_howl>
																				</Selector>
																			</Sequence>
																		</Selector>
																	</Then>
																	<Else>
																		<Success hasInputBreakpoint="0" comment="unluck" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Success>
																	</Else>
																</RandomGate>
															</Then>
															<Else>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Else>
														</IfElseCondition>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LockDynamicInformationValues hasInputBreakpoint="0" comment="add myself to howled on received information" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetDynamicInformationValue>
																	</SuppressFailure>
																	<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</PushToArray>
																	<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SetDynamicInformationValue>
																</Sequence>
															</LockDynamicInformationValues>
														</IfCondition>
													</Sequence>
												</IfCondition>
												<DefaultBranch>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DefaultBranch>
											</Switch>
										</Then>
										<Else>
											<DestroyInformationFromHolder hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</DestroyInformationFromHolder>
										</Else>
									</IfElseCondition>
								</Sequence>
							</SuppressFailure>
						</Then>
						<Else>
							<Success hasInputBreakpoint="0" comment="Ignore other status" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Else>
					</IfElseCondition>
				</Behavior>
			</Root>
			<Forest>
				<Function_callInterrupt_animal_attack editorPosX="3380" editorPosY="480" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_callInterrupt_animal_attack>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>