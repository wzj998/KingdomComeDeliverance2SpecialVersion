<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getCrimeDistrict" is_function="1">
    <Variables>
      <Variable name="districtOrigins" type="_wuid" values="" isPersistent="0" form="array" />
    </Variables>
    <Parameters>
      <Variable name="district" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="isInside" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <IsInsideAreaWithLabel Position="$this.id" Label="&apos;crimeDistrict&apos;" Area="$district" FailSubtMissing="false" saveVersion="2">
          <Then canSkip="1">
            <Expression expressions="$isInside = true" />
          </Then>
          <Else canSkip="1">
            <IsInsideAreaWithLabel Position="$this.id" Label="&apos;crimeDistrict_main&apos;" Area="$district" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <GraphSearch Origin="$district" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="" AllowedEdges="" SubGraph="&apos;crime_district,crime_districtOrigin&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;crime_districtOrigin&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                    <Nodalyzer Quantifiers="ForAll" Parent="" Child="$districtOrigins" saveVersion="2">
                      <Child0 canSkip="1">
                        <RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
                      </Child0>
                    </Nodalyzer>
                  </GraphSearch>
                  <GraphSearch Origin="$districtOrigins[0]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;crime_districtOriginReverse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                    <Nodalyzer Quantifiers="ForAll" Parent="" Child="$district" saveVersion="2" />
                  </GraphSearch>
                </Sequence>
              </Then>
              <Else canSkip="1">
                <ErrorNode Message="&apos;CrimeDistrictMain is missing!&apos;" />
              </Else>
            </IsInsideAreaWithLabel>
          </Else>
        </IsInsideAreaWithLabel>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="districtOrigins" comment="" />
        <Variable name="district" comment="" />
        <Variable name="isInside" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <IsInsideAreaWithLabel editorPosX="330" editorPosY="320" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
            <Then>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Then>
            <Else>
              <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                      <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Child0>
                          <RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </RangeSorter>
                        </Child0>
                      </Nodalyzer>
                    </GraphSearch>
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                      <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                      </Nodalyzer>
                    </GraphSearch>
                  </Sequence>
                </Then>
                <Else>
                  <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ErrorNode>
                </Else>
              </IsInsideAreaWithLabel>
            </Else>
          </IsInsideAreaWithLabel>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>