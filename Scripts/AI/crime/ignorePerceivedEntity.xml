<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_ignorePerceivedEntity" is_function="1">
		<Variables>
			<Variable name="ignoreTime" type="_string" values="&apos;8s&apos;" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="disableIgnore" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="perceivedEntity" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<EntityContextCheck context="switch_recognitionLevel_I" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<EntityContextCheck context="switch_recognitionLevel_II" target="" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</EntityContextCheck>
					<DefaultBranch>
						<IfCondition failOnCondition="false" condition="~$disableIgnore">
							<RelationContextCheck context="crime_disableRecurrentPerceptionIgnore" from="$this.id" to="$perceivedEntity" saveVersion="2">
								<Else canSkip="1">
									<EntityContextCheck context="crime_disabledRecurrentPerceptionIgnore" target="" saveVersion="2">
										<Else canSkip="1">
											<Sequence>
												<Switch>
													<EntityContextCheck context="crime_shortestRecurrentPerceptionIgnore" target="" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$ignoreTime = &apos;2s&apos;" />
														</Then>
													</EntityContextCheck>
													<EntityContextCheck context="crime_shorterRecurrentPerceptionIgnore" target="" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$ignoreTime = &apos;4s&apos;" />
														</Then>
													</EntityContextCheck>
													<DefaultBranch>
														<Success />
													</DefaultBranch>
												</Switch>
												<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;observerModeAim_lock&apos;" />
												<SuppressFailure>
													<InstantExternalLock LockManagerType="Intellect" SemaphoreName="&apos;crime_escalationLevel_recognizing&apos;" RunLogic="KeepRunning">
														<SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;crime_escalationLevel_recognizing_delay&apos;" />
													</InstantExternalLock>
												</SuppressFailure>
												<IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$perceivedEntity" IgnoreFor="$ignoreTime" TimerType="GameTime" Uninterruptible="false" Persistent="false" />
												<HasPerceivableState PerceivableState="&apos;combat&apos;" PerceivedWUID="$perceivedEntity" PerceptorWUID="$this.id" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<Function_crime_ignorePerceptionForSkirmishParticipants ignoreTimer="$ignoreTime" perceivedEntity="$perceivedEntity" nodeLabel="36483602" />
													</Then>
												</HasPerceivableState>
											</Sequence>
										</Else>
									</EntityContextCheck>
								</Else>
							</RelationContextCheck>
						</IfCondition>
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;crime_escalationLevel_recognizing&apos;" />
			</Sequence>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="ignoreTime" comment="" />
				<Variable name="disableIgnore" comment="" />
				<Variable name="perceivedEntity" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</EntityContextCheck>
						<DefaultBranch>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RelationContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Else>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
														</EntityContextCheck>
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
														</EntityContextCheck>
														<DefaultBranch>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</DefaultBranch>
													</Switch>
													<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</SetExternalLock>
													<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<InstantExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetExternalLock>
														</InstantExternalLock>
													</SuppressFailure>
													<IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</IgnorePerception>
													<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Function_crime_ignorePerceptionForSkirmishParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_ignorePerceptionForSkirmishParticipants>
														</Then>
													</HasPerceivableState>
												</Sequence>
											</Else>
										</EntityContextCheck>
									</Else>
								</RelationContextCheck>
							</IfCondition>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="2120" editorPosY="30" hasInputBreakpoint="0" comment="TODO: disconnected to let next perception message with recognition=0 lock it, maybe add back" breakpointFlags="0">
					<OutputBreakpoints />
					<SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</SetExternalLock>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>