<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_chooseReportDestination" is_function="1">
    <Variables>
      <Variable name="isPlayerRelated" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isRelated" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isViolent" type="_bool" values="true" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="destinationType" type="enum:crime_reportDestinationType" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="isImportant" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
      <EntityContextCheck context="crime_disableReport" target="" saveVersion="2">
        <Then canSkip="1">
          <Expression expressions="$destinationType = $enum:crime_reportDestinationType.none" />
        </Then>
        <Else canSkip="1">
          <Sequence>
            <GetReportDestinationType DestinationType="$destinationType" />
            <IsInformationRelatedToNpc Information="$information" Npc="$this.id" IsRelated="$isRelated" />
            <IfCondition failOnCondition="false" condition="$destinationType == $enum:crime_reportDestinationType.security &amp; &#10;$information.label ~= &apos;&apos; &amp; &#10;~$isImportant &amp; $isRelated">
              <IfCondition failOnCondition="false" condition="($data:crime[$information.label].isCrime | $information.label == &apos;nonAttributedCrime&apos;)">
                <ChooseReportDestinationSecurity Destination="$destination" />
              </IfCondition>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$destinationType == $enum:crime_reportDestinationType.authority | &#10; &#10;($destination == $__null &amp; $destinationType == $enum:crime_reportDestinationType.security)">
              <Sequence>
                <Expression expressions="$destinationType = $enum:crime_reportDestinationType.authority" />
                <IfCondition failOnCondition="false" condition="$information.label ~= &apos;&apos;">
                  <Expression expressions="$isViolent = $data:crime[$information.label].isViolent" />
                </IfCondition>
                <ChooseReportDestinationAuthority ExtraDistance="$isImportant" IsViolent="$isViolent" Destination="$destination" />
              </Sequence>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="($destinationType == $enum:crime_reportDestinationType.mate | &#10;$destination == $__null) &amp; &#10;$isRelated">
              <Sequence>
                <Expression expressions="$destinationType = $enum:crime_reportDestinationType.mate" />
                <IfCondition failOnCondition="false" condition="$information.label ~= &apos;&apos;">
                  <Expression expressions="$isPlayerRelated = $data:crime[$information.label].isCrime | $information.label == &apos;nonAttributedCrime&apos;" />
                </IfCondition>
                <ChooseReportDestinationCampmate IsPlayerRelated="$isPlayerRelated" Destination="$destination" />
              </Sequence>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$destination == $__null">
              <Expression expressions="$destinationType = $enum:crime_reportDestinationType.none" />
            </IfCondition>
          </Sequence>
        </Else>
      </EntityContextCheck>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="isPlayerRelated" comment="" />
        <Variable name="isRelated" comment="" />
        <Variable name="isViolent" comment="" />
        <Variable name="destination" comment="" />
        <Variable name="destinationType" comment="" />
        <Variable name="information" comment="" />
        <Variable name="isImportant" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="830" editorPosY="930" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <EntityContextCheck editorPosX="1130" editorPosY="1400" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
          <Then>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
          </Then>
          <Else>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GetReportDestinationType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetReportDestinationType>
              <IsInformationRelatedToNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </IsInformationRelatedToNpc>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="gotta check label != &apos; &apos; first" breakpointFlags="0">
                  <OutputBreakpoints />
                  <ChooseReportDestinationSecurity hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ChooseReportDestinationSecurity>
                </IfCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <IfCondition hasInputBreakpoint="0" comment="should only ever happen in stimulusEnemy" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <ChooseReportDestinationAuthority hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ChooseReportDestinationAuthority>
                </Sequence>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <ChooseReportDestinationCampmate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ChooseReportDestinationCampmate>
                </Sequence>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
            </Sequence>
          </Else>
        </EntityContextCheck>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>