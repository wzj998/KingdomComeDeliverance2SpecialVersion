<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_cleanupDuplicitThefts" is_function="1">
		<Variables>
			<Variable name="_dummyInt" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="information_price" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="information_val" type="information" values="" isPersistent="0" form="single" />
			<Variable name="knownItems" type="itemPrescriptor" values="" isPersistent="0" form="array" />
			<Variable name="modifiedInformation" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="theftItems" type="itemPrescriptor" values="" isPersistent="0" form="array" />
			<Variable name="theftItems_clean" type="itemPrescriptor" values="" isPersistent="0" form="array" />
			<Variable name="theftItems_divisible" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="theftItems_price" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="theftItems_val" type="itemPrescriptor" values="" isPersistent="0" form="single" />
			<Variable name="theftMethod" type="enum:crime_theftMethod" values="" isPersistent="0" form="single" />
			<Variable name="validInformation" type="information" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="information" type="information" values="" isPersistent="0" form="array" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<Sequence>
						<ReinitVariable variable="$knownItems" />
						<ReinitVariable variable="$validInformation" />
						<For startIndex="-1" endIndex="-1" step="-1" array="$information" iterator="" value="$information_val" break="">
							<IfElseCondition failOnCondition="false" condition="$information_val.label == &apos;theft&apos;" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<Sequence>
											<LockDynamicInformationValues Information="$information_val">
												<GetDynamicInformationValue Information="$information_val" Tag="&apos;theftMethod&apos;" Out="$theftMethod" />
											</LockDynamicInformationValues>
											<IfElseCondition failOnCondition="false" condition="$theftMethod ~= $enum:crime_theftMethod.kettleEating" saveVersion="2">
												<Then canSkip="1">
													<Function_crime_updateStolenItemsOnInformation information="$information_val" nodeLabel="37041429" />
												</Then>
											</IfElseCondition>
										</Sequence>
										<Sequence>
											<Sequence>
												<Expression expressions="$modifiedInformation = false" />
												<ReinitVariable variable="$theftItems_clean" />
											</Sequence>
											<LockDynamicInformationValues Information="$information_val">
												<Sequence>
													<Sequence>
														<GetDynamicInformationValue Information="$information_val" Tag="&apos;items&apos;" Out="$theftItems" />
														<GetDynamicInformationValue Information="$information_val" Tag="&apos;value&apos;" Out="$information_price" />
													</Sequence>
													<ForEach startIndex="0" step="1" array="$theftItems" iterator="" value="$theftItems_val" break="">
														<IfElseCondition failOnCondition="false" condition="$theftItems_val.instance == $__null" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$theftItems_clean[#theftItems_clean] = $theftItems_val" />
															</Then>
															<Else canSkip="1">
																<Selector>
																	<Sequence>
																		<FindInArray array="$knownItems" keyOut="$_dummyInt" condition="$__value == $theftItems_val" />
																		<GetItemProperty itemId="$theftItems_val.instance" property="Price" result="$theftItems_price" />
																		<Expression expressions="$modifiedInformation = true &#10;$information_price = $information_price - $theftItems_price" />
																	</Sequence>
																	<Expression expressions="$knownItems[#knownItems] = $theftItems_val &#10;$theftItems_clean[#theftItems_clean] = $theftItems_val" />
																</Selector>
															</Else>
														</IfElseCondition>
													</ForEach>
													<Sequence>
														<SetDynamicInformationValue Information="$information_val" Tag="&apos;items&apos;" Variable="$theftItems_clean" Type="" Value="" />
														<SetDynamicInformationValue Information="$information_val" Tag="&apos;value&apos;" Variable="$information_price" Type="" Value="" />
													</Sequence>
												</Sequence>
											</LockDynamicInformationValues>
											<IfElseCondition failOnCondition="false" condition="$modifiedInformation &amp; #theftItems_clean == 0" saveVersion="2">
												<Then canSkip="1">
													<DestroyInformationCompletely Information="$information_val" />
												</Then>
												<Else canSkip="1">
													<Expression expressions="$validInformation[#validInformation] = $information_val" />
												</Else>
											</IfElseCondition>
										</Sequence>
									</Sequence>
								</Then>
								<Else canSkip="1">
									<Expression expressions="$validInformation[#validInformation] = $information_val" />
								</Else>
							</IfElseCondition>
						</For>
						<Expression expressions="$information = $validInformation" />
					</Sequence>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="_dummyInt" comment="" />
				<Variable name="information_price" comment="" />
				<Variable name="information_val" comment="" />
				<Variable name="knownItems" comment="" />
				<Variable name="modifiedInformation" comment="" />
				<Variable name="theftItems" comment="" />
				<Variable name="theftItems_clean" comment="" />
				<Variable name="theftItems_divisible" comment="" />
				<Variable name="theftItems_price" comment="" />
				<Variable name="theftItems_val" comment="" />
				<Variable name="theftMethod" comment="" />
				<Variable name="validInformation" comment="" />
				<Variable name="information" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ReinitVariable>
							<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ReinitVariable>
							<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="Update items for loot/body" breakpointFlags="0">
												<OutputBreakpoints />
												<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetDynamicInformationValue>
												</LockDynamicInformationValues>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Function_crime_updateStolenItemsOnInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_updateStolenItemsOnInformation>
													</Then>
												</IfElseCondition>
											</Sequence>
											<Sequence hasInputBreakpoint="0" comment="Cleanup" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ReinitVariable>
												</Sequence>
												<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="Pre-cleanup data" breakpointFlags="0">
															<OutputBreakpoints />
															<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetDynamicInformationValue>
															<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetDynamicInformationValue>
														</Sequence>
														<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="#KCD2-428522 Ignore divisible items" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</FindInArray>
																			<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</GetItemProperty>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</Sequence>
																		<Expression hasInputBreakpoint="0" comment="New item" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Selector>
																</Else>
															</IfElseCondition>
														</ForEach>
														<Sequence hasInputBreakpoint="0" comment="Post cleanup data" breakpointFlags="0">
															<OutputBreakpoints />
															<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetDynamicInformationValue>
															<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetDynamicInformationValue>
														</Sequence>
													</Sequence>
												</LockDynamicInformationValues>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<DestroyInformationCompletely hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</DestroyInformationCompletely>
													</Then>
													<Else>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Else>
												</IfElseCondition>
											</Sequence>
										</Sequence>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
							</For>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>