<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_watch_duration" is_function="1">
		<Variables>
			<Variable name="area" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="corpseData" type="crime:corpseData" values="" isPersistent="0" form="single" />
			<Variable name="corpseIsMate" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerConfronted" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerResolved" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="targetUnconscious" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="timerFinished" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassReactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
			<Variable name="watchDuration" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="watchData" type="switch:interruptData:watch" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IsDeadCheck SoulWUID="$watchData.target" FailSubtMissing="false" saveVersion="2">
						<Else canSkip="1">
							<IsUnconsciousCheck SoulWUID="$watchData.target" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$targetUnconscious = true" />
								</Then>
							</IsUnconsciousCheck>
						</Else>
					</IsDeadCheck>
					<IfElseCondition failOnCondition="false" condition="$targetUnconscious | $watchData.stimulusKind == $enum:crime_stimulusKind.unconsciousBody" saveVersion="2">
						<Then canSkip="1">
							<DeadUnconsciousGate Who="$watchData.target" State="Unconscious" Negation="true" RunLogic="KeepRunning">
								<IfElseCondition failOnCondition="false" condition="$watchData.previousReaction == $enum:crime_reactionKind.wakeUp &amp; &#10;$watchData.initiatedBy == $enum:switch_interruptInitiator.scheduler" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<Timeout duration="&apos;20s&apos;" timeType="GameTime" doFail="false" variation="">
												<ActorStateBarrier Who="$watchData.target" ToState="idle" NegateTo="false" RunLogic="KeepRunning">
													<EntityContextBarrier context="crime_interrupt" target="$watchData.target" Negation="false" RunLogic="KeepRunning">
														<Success />
													</EntityContextBarrier>
												</ActorStateBarrier>
											</Timeout>
											<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
												<Then canSkip="1">
													<EntityContextCheck context="crime_isAuthority" target="$watchData.target" saveVersion="2">
														<Else canSkip="1">
															<Timeout duration="&apos;20s&apos;" timeType="GameTime" doFail="false" variation="">
																<EntityContextBarrier context="crime_interruptCheckPockets" target="$watchData.target" Negation="false" RunLogic="KeepRunning">
																	<EntityContextBarrier context="crime_interruptCheckPockets" target="$watchData.target" Negation="true" RunLogic="KeepRunning">
																		<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
																	</EntityContextBarrier>
																</EntityContextBarrier>
															</Timeout>
														</Else>
													</EntityContextCheck>
												</Then>
											</EntityContextCheck>
											<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
										</Sequence>
									</Then>
									<Else canSkip="1">
										<Sequence>
											<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
											<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
										</Sequence>
									</Else>
								</IfElseCondition>
							</DeadUnconsciousGate>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<Timeout duration="&apos;4h&apos;" timeType="WorldTime" doFail="false" variation="">
									<IsDeadCheck SoulWUID="$watchData.target" FailSubtMissing="false" saveVersion="2">
										<Then canSkip="1">
											<Sequence>
												<GetAreMates Npc1="$watchData.target" Npc2="$this.id" AreMates="$corpseIsMate" />
												<IfElseCondition failOnCondition="false" condition="$corpseIsMate" saveVersion="2">
													<Then canSkip="1">
														<While doFail="false" propagateChildFail="false" condition="$corpseData.state &lt; $enum:corpseState.watched">
															<Sequence>
																<SuppressFailure>
																	<GraphSearch Origin="$watchData.target" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;switch_corpse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$corpseData" />
																	</GraphSearch>
																</SuppressFailure>
																<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
														</While>
													</Then>
													<Else canSkip="1">
														<While doFail="false" propagateChildFail="false" condition="$corpseData.state &lt; $enum:corpseState.investigated">
															<Sequence>
																<SuppressFailure>
																	<GraphSearch Origin="$watchData.target" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;switch_corpse&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$corpseData" />
																	</GraphSearch>
																</SuppressFailure>
																<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
														</While>
													</Else>
												</IfElseCondition>
												<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;10s&apos;" />
												<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
											</Sequence>
										</Then>
										<Else canSkip="1">
											<IfElseCondition failOnCondition="false" condition="$watchData.target == $__player" saveVersion="2">
												<Then canSkip="1">
													<Parallel successMode="Any" failureMode="Any">
														<Loop count="-1">
															<GameContextBarrier context="crime_escalationLevel_script_global_confrontingGeneral" Negation="false" RunLogic="KeepRunning">
																<Sequence>
																	<Expression expressions="$playerResolved = false" />
																	<GameContextBarrier context="crime_escalationLevel_script_global_confrontingTrespass" Negation="true" RunLogic="Halt">
																		<GameContextBarrier context="crime_escalationLevel_script_global_confrontingGeneral" Negation="true" RunLogic="Halt">
																			<Expression expressions="$playerResolved = true &#10;$timerFinished = true" />
																		</GameContextBarrier>
																	</GameContextBarrier>
																</Sequence>
															</GameContextBarrier>
														</Loop>
														<Loop count="-1">
															<Sequence>
																<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassSevereness" TrespassArea="$area" Reaction="$trespassReaction" ReactionSuppressed="$trespassReactionSuppressed" />
																<Wait duration="&apos;4s&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
														</Loop>
														<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_watchMaximumDistance&apos;].value" High="$data:script_param[&apos;crime_watchMaximumDistance&apos;].value" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
															<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
														</DistanceGate>
														<Loop count="-1">
															<IfGate atomic="false" condition="$playerResolved &amp; ~$trespassReaction &amp;  &#10;($timerFinished | ~$data:crime[$watchData.information.label].isCrime)" RunLogic="Halt">
																<Sequence>
																	<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
																	<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
																</Sequence>
															</IfGate>
														</Loop>
													</Parallel>
												</Then>
												<Else canSkip="1">
													<Sequence>
														<Function_crime_watch_getDuration watchData="$watchData" duration="$watchDuration" nodeLabel="21431481" />
														<Wait duration="$watchDuration" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" />
														<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
													</Sequence>
												</Else>
											</IfElseCondition>
										</Else>
									</IsDeadCheck>
								</Timeout>
								<InstantCallback_empty EventName="&apos;EndWatch&apos;" />
							</Sequence>
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="crime_interruptWatch_duration">
			<Variables>
				<Variable name="area" comment="" />
				<Variable name="corpseData" comment="" />
				<Variable name="corpseIsMate" comment="" />
				<Variable name="playerConfronted" comment="" />
				<Variable name="playerResolved" comment="" />
				<Variable name="targetUnconscious" comment="" />
				<Variable name="timerFinished" comment="" />
				<Variable name="trespassReaction" comment="" />
				<Variable name="trespassReactionSuppressed" comment="" />
				<Variable name="trespassSevereness" comment="" />
				<Variable name="watchDuration" comment="" />
				<Variable name="watchData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="duration" breakpointFlags="0">
						<OutputBreakpoints />
						<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Else>
								<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</IsUnconsciousCheck>
							</Else>
						</IsDeadCheck>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="when going from wakeUp stay a little longer" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Timeout hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</EntityContextBarrier>
													</ActorStateBarrier>
												</Timeout>
												<EntityContextCheck hasInputBreakpoint="0" comment="when authority wake up civilian wait a little longer, in case of report" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Else>
																<Timeout hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</EntityContextBarrier>
																	</EntityContextBarrier>
																</Timeout>
															</Else>
														</EntityContextCheck>
													</Then>
												</EntityContextCheck>
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</Sequence>
										</Then>
										<Else>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="dont leave all at once" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
												<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantCallback_empty>
											</Sequence>
										</Else>
									</IfElseCondition>
								</DeadUnconsciousGate>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Timeout hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetAreMates>
													<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																		</GraphSearch>
																	</SuppressFailure>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</While>
														</Then>
														<Else>
															<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																		</GraphSearch>
																	</SuppressFailure>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</While>
														</Else>
													</IfElseCondition>
													<Wait hasInputBreakpoint="0" comment="dont leave all at once" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
													<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantCallback_empty>
												</Sequence>
											</Then>
											<Else>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																		<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</GameContextBarrier>
																		</GameContextBarrier>
																	</Sequence>
																</GameContextBarrier>
															</Loop>
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</DetermineTrespassReaction>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</Loop>
															<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</InstantCallback_empty>
															</DistanceGate>
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Wait hasInputBreakpoint="0" comment="dont leave all at once" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																		<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</InstantCallback_empty>
																	</Sequence>
																</IfGate>
															</Loop>
														</Parallel>
													</Then>
													<Else>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_crime_watch_getDuration hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_watch_getDuration>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
															<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</InstantCallback_empty>
														</Sequence>
													</Else>
												</IfElseCondition>
											</Else>
										</IsDeadCheck>
									</Timeout>
									<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantCallback_empty>
								</Sequence>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>