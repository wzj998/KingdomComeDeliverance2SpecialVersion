<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_watch_watchCombat" is_function="1">
		<Variables>
			<Variable name="canResetSearch" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="perceivedType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="perceptionInfo" type="perceptionInfo" values="" isPersistent="0" form="single" />
			<Variable name="resetSearch" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="perceptibleInCombat" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<EntityContext context="crime_disabledRecurrentPerceptionIgnore" target="">
							<While doFail="false" propagateChildFail="false" condition="true">
								<Sequence>
									<CancelPerceptionIgnore PerceptorObject="$this.id" PerceptibleObject="" WasIgnoredAtLeastFor="&apos;0s&apos;" />
									<PerceptionSearch ComponentToBoost="BoostPlayer" saveVersion="2">
										<Search canSkip="1">
											<While doFail="false" propagateChildFail="false" condition="true">
												<Sequence>
													<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$perceptionInfo" senderInfo="" inbox="&apos;perceptionInfo_watchCombat&apos;" condition="$__content.threshold == 1" answerVar="">
														<Sequence>
															<GetType WUID="$perceptionInfo.perceptible" OutString="$perceivedType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
															<Switch>
																<IfCondition failOnCondition="false" condition="$perceivedType == &apos;NPC&apos; |  &#10;$perceivedType == &apos;NHNPC&apos;">
																	<HasPerceivableState PerceivableState="&apos;combat&apos;" PerceivedWUID="$perceptionInfo.perceptible" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
																		<Then canSkip="1">
																			<Expression expressions="$perceptibleInCombat = true" />
																		</Then>
																		<Else canSkip="1">
																			<HasPerceivableState PerceivableState="&apos;crima_arrest&apos;" PerceivedWUID="$perceptionInfo.perceptible" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
																				<Then canSkip="1">
																					<Expression expressions="$perceptibleInCombat = true" />
																				</Then>
																				<Else canSkip="1">
																					<Sequence>
																						<Expression expressions="$perceptibleInCombat = false" />
																						<DismissSearchCandidate PerceptibleObject="$perceptionInfo.perceptible" />
																					</Sequence>
																				</Else>
																			</HasPerceivableState>
																		</Else>
																	</HasPerceivableState>
																</IfCondition>
																<IfCondition failOnCondition="false" condition="$perceivedType == &apos;UNK&apos;">
																	<CheckWuidValid wuid="$perceptionInfo.perceptible" FailSubtMissing="false" saveVersion="2">
																		<Then canSkip="1">
																			<HasPerceivableState PerceivableState="&apos;crime_hit&apos;" PerceivedWUID="$perceptionInfo.perceptible" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
																				<Then canSkip="1">
																					<Expression expressions="$perceptibleInCombat = true" />
																				</Then>
																				<Else canSkip="1">
																					<HasPerceivableState PerceivableState="&apos;crime_animal_hit&apos;" PerceivedWUID="$perceptionInfo.perceptible" PerceptorWUID="" FailSubtMissing="false" saveVersion="2">
																						<Then canSkip="1">
																							<Expression expressions="$perceptibleInCombat = true" />
																						</Then>
																						<Else canSkip="1">
																							<Sequence>
																								<Expression expressions="$perceptibleInCombat = false" />
																								<DismissSearchCandidate PerceptibleObject="$perceptionInfo.perceptible" />
																							</Sequence>
																						</Else>
																					</HasPerceivableState>
																				</Else>
																			</HasPerceivableState>
																		</Then>
																	</CheckWuidValid>
																</IfCondition>
																<DefaultBranch>
																	<DismissSearchCandidate PerceptibleObject="$perceptionInfo.perceptible" />
																</DefaultBranch>
															</Switch>
														</Sequence>
													</ProcessMessage>
													<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Sequence>
											</While>
										</Search>
										<NoCandidate canSkip="1">
											<Sequence>
												<Expression expressions="$perceptibleInCombat = false" />
												<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
											</Sequence>
										</NoCandidate>
									</PerceptionSearch>
								</Sequence>
							</While>
						</EntityContext>
					</Child>
					<OnFail canSkip="1">
						<ClearInbox inbox="&apos;perceptionInfo_watchCombat&apos;" type="" condition="" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="canResetSearch" comment="" />
				<Variable name="perceivedType" comment="" />
				<Variable name="perceptionInfo" comment="" />
				<Variable name="resetSearch" comment="" />
				<Variable name="perceptibleInCombat" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<CancelPerceptionIgnore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</CancelPerceptionIgnore>
										<PerceptionSearch hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</GetType>
																<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</Then>
																			<Else>
																				<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Then>
																					<Else>
																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Expression>
																							<DismissSearchCandidate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</DismissSearchCandidate>
																						</Sequence>
																					</Else>
																				</HasPerceivableState>
																			</Else>
																		</HasPerceivableState>
																	</IfCondition>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Then>
																					<Else>
																						<HasPerceivableState hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Then>
																							<Else>
																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Expression>
																									<DismissSearchCandidate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</DismissSearchCandidate>
																								</Sequence>
																							</Else>
																						</HasPerceivableState>
																					</Else>
																				</HasPerceivableState>
																			</Then>
																		</CheckWuidValid>
																	</IfCondition>
																	<DefaultBranch>
																		<DismissSearchCandidate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</DismissSearchCandidate>
																	</DefaultBranch>
																</Switch>
															</Sequence>
														</ProcessMessage>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Sequence>
												</While>
											</Search>
											<NoCandidate>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Wait>
												</Sequence>
											</NoCandidate>
										</PerceptionSearch>
									</Sequence>
								</While>
							</EntityContext>
						</Child>
						<OnFail>
							<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ClearInbox>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>