<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_affectFeelings" is_function="1">
    <Variables>
      <Variable name="isBandit" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isCourageous" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="affectNervousness" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="affectReputation" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="npc" type="_wuid" values="$this.id" isPersistent="0" form="single" requirementType="In" optional="1" />
      <Variable name="token" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
      <Sequence>
        <Expression expressions="$token = &apos;auto_&apos; + $token" />
        <IsBandit Npc="$this.id" IsBandit="$isBandit" />
        <IfCondition failOnCondition="false" condition="$isBandit">
          <Expression expressions="$token += &apos;_bandit&apos;" />
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$affectReputation">
          <SetReputationNPC NPC="$npc" reputationChange="$token" />
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$affectNervousness">
          <Sequence>
            <EntityContextCheck context="crime_isCourageous" target="" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$isCourageous = true" />
              </Then>
            </EntityContextCheck>
            <AddNervousness Change="$token" SoulWUID="$npc" IsCourageous="$isCourageous" />
          </Sequence>
        </IfCondition>
      </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="isBandit" comment="" />
        <Variable name="isCourageous" comment="" />
        <Variable name="affectNervousness" comment="" />
        <Variable name="affectReputation" comment="" />
        <Variable name="npc" comment="" />
        <Variable name="token" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="720" editorPosY="380" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Expression>
          <IsBandit hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IsBandit>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <SetReputationNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </SetReputationNPC>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
              </EntityContextCheck>
              <AddNervousness hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </AddNervousness>
            </Sequence>
          </IfCondition>
        </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>