<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getCrimeLevelByStimulusKind" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <Switch>
          <IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.murder">
            <Expression expressions="$crimeLevel = $enum:crime_crimeLevel.murder" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.aim | &#10;$stimulusKind == $enum:crime_stimulusKind.combat | &#10;$stimulusKind == $enum:crime_stimulusKind.corpse | &#10;$stimulusKind == $enum:crime_stimulusKind.corpseViolation | &#10;$stimulusKind == $enum:crime_stimulusKind.enemy | &#10;$stimulusKind == $enum:crime_stimulusKind.hit | &#10;$stimulusKind == $enum:crime_stimulusKind.kettlePoisoning | &#10;$stimulusKind == $enum:crime_stimulusKind.lyingBody | &#10;$stimulusKind == $enum:crime_stimulusKind.missingNpc | &#10;$stimulusKind == $enum:crime_stimulusKind.takedown | &#10;$stimulusKind == $enum:crime_stimulusKind.shooter | &#10;$stimulusKind == $enum:crime_stimulusKind.unconsciousBody | &#10;$stimulusKind == $enum:crime_stimulusKind.unknownShooter | &#10;$stimulusKind == $enum:crime_stimulusKind.threat">
            <Expression expressions="$crimeLevel = $enum:crime_crimeLevel.violent" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.corpseMissing | &#10;$stimulusKind == $enum:crime_stimulusKind.graveRobbing | &#10;$stimulusKind == $enum:crime_stimulusKind.horseTheft | &#10;$stimulusKind == $enum:crime_stimulusKind.lockpick | &#10;$stimulusKind == $enum:crime_stimulusKind.pickpocket | &#10;$stimulusKind == $enum:crime_stimulusKind.pilloryBreak | &#10;$stimulusKind == $enum:crime_stimulusKind.suspiciousDoor | &#10;$stimulusKind == $enum:crime_stimulusKind.theft | &#10;$stimulusKind == $enum:crime_stimulusKind.missingAnimal |  &#10;$stimulusKind == $enum:crime_stimulusKind.item | &#10;$stimulusKind == $enum:crime_stimulusKind.animalAbuse |  &#10;$stimulusKind == $enum:crime_stimulusKind.animalCorpse">
            <Expression expressions="$crimeLevel = $enum:crime_crimeLevel.property" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.trespass | &#10;$stimulusKind == $enum:crime_stimulusKind.escalatedTrespass | &#10;$stimulusKind == $enum:crime_stimulusKind.nearTrespass">
            <Expression expressions="$crimeLevel = $enum:crime_crimeLevel.trespass" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.disturbance | &#10;$stimulusKind == $enum:crime_stimulusKind.dramaticBark | &#10;$stimulusKind == $enum:crime_stimulusKind.friskable | &#10;$stimulusKind == $enum:crime_stimulusKind.missingNpc | &#10;$stimulusKind == $enum:crime_stimulusKind.offence | &#10;$stimulusKind == $enum:crime_stimulusKind.sound |  &#10;$stimulusKind == $enum:crime_stimulusKind.playerCompanion">
            <Expression expressions="$crimeLevel = $enum:crime_crimeLevel.offence" />
          </IfCondition>
          <DefaultBranch>
            <ErrorNode Message="&apos;ERROR: Label \&apos;$stimulusKind\&apos; does not belong in any crimeLevel!&apos;" />
          </DefaultBranch>
        </Switch>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="crimeLevel" comment="" />
        <Variable name="stimulusKind" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Switch editorPosX="570" editorPosY="350" hasInputBreakpoint="0" comment="TODO: iffy af" breakpointFlags="0">
          <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="TODO: missingNPC is okay here?" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <DefaultBranch>
              <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ErrorNode>
            </DefaultBranch>
          </Switch>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>