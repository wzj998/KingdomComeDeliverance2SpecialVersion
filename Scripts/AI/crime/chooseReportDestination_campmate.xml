<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_chooseReportDestination_campmate" is_function="1">
    <Variables>
      <Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="mates" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="mates_value" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="skirmishReaction" type="enum:combat_skirmishReaction" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="isPlayerRelated" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <Sequence>
        <GetMatesAliveAndWithinDistance Target="$this.id" Distance="$data:script_param[&apos;crime_maximumReportDistance&apos;].value" Mates="$mates" />
          <ForEach startIndex="0" step="1" array="$mates" iterator="" value="$mates_value" break="$break">
            <HasGenderCheck Gender="Male" SoulWUID="$mates_value" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <EntityContextCheck context="crime_interruptReport" target="$mates_value" saveVersion="2">
                  <Else canSkip="1">
                    <EntityContextCheck context="crime_interruptFlee" target="$mates_value" saveVersion="2">
                      <Else canSkip="1">
                        <EntityContextCheck context="crime_interruptMercy" target="$mates_value" saveVersion="2">
                          <Else canSkip="1">
                            <IfElseCondition failOnCondition="false" condition="$isPlayerRelated" saveVersion="2">
                              <Then canSkip="1">
                                <Sequence>
                                <DecideSkirmishReactionCrime AllowFemaleJoin="false" MoraleBoost="0.000000" Reason="Perception" ReferenceNpc="$mates_value" RelationOverride="Hostile" TargetNpc="$__player" SkirmishReaction="$skirmishReaction" />
                                  <IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.join">
                                    <EntityContextCheck context="crime_sleeping" target="$mates_value" saveVersion="2">
                                      <Then canSkip="1">
                                        <Expression expressions="$destination = $mates_value" />
                                      </Then>
                                      <Else canSkip="1">
                                        <Expression expressions="$destination = $mates_value &#10;$break = true" />
                                      </Else>
                                    </EntityContextCheck>
                                  </IfCondition>
                                </Sequence>
                              </Then>
                              <Else canSkip="1">
                                <EntityContextCheck context="crime_sleeping" target="$mates_value" saveVersion="2">
                                  <Then canSkip="1">
                                    <Expression expressions="$destination = $mates_value" />
                                  </Then>
                                  <Else canSkip="1">
                                    <Expression expressions="$destination = $mates_value &#10;$break = true" />
                                  </Else>
                                </EntityContextCheck>
                              </Else>
                            </IfElseCondition>
                          </Else>
                        </EntityContextCheck>
                      </Else>
                    </EntityContextCheck>
                  </Else>
                </EntityContextCheck>
              </Then>
            </HasGenderCheck>
          </ForEach>
        </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="break" comment="" />
        <Variable name="mates" comment="" />
        <Variable name="mates_value" comment="" />
        <Variable name="skirmishReaction" comment="" />
        <Variable name="destination" comment="" />
        <Variable name="isPlayerRelated" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="280" editorPosY="390" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
          <GetMatesAliveAndWithinDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </GetMatesAliveAndWithinDistance>
            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Else>
                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Else>
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Else>
                              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  <DecideSkirmishReactionCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                  </DecideSkirmishReactionCrime>
                                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                        <OutputBreakpoints />
                                        <Then>
                                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Expression>
                                        </Then>
                                        <Else>
                                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                            <OutputBreakpoints />
                                          </Expression>
                                        </Else>
                                      </EntityContextCheck>
                                    </IfCondition>
                                  </Sequence>
                                </Then>
                                <Else>
                                  <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Then>
                                    <Else>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Else>
                                  </EntityContextCheck>
                                </Else>
                              </IfElseCondition>
                            </Else>
                          </EntityContextCheck>
                        </Else>
                      </EntityContextCheck>
                    </Else>
                  </EntityContextCheck>
                </Then>
              </HasGenderCheck>
            </ForEach>
          </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>