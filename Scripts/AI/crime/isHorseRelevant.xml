<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_isHorseRelevant" is_function="1">
    <Variables>
      <Variable name="currentTime" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="highestNpcMates" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="horseMates" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="legalness_timestamp" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="playerHorse" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="settlement_horse" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="settlement_npc" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="horse" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="isRelevant" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="npc" type="_wuid" values="$this.id" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
      <EntityContextCheck context="switch_isHorse" target="$horse" saveVersion="2">
        <Then canSkip="1">
          <Sequence>
            <GetPlayerHorse HorseWuid="$playerHorse" />
            <IfElseCondition failOnCondition="false" condition="$horse ~= $playerHorse" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <GetAreMates Npc1="$npc" Npc2="$horse" AreMates="$isRelevant" />
                  <EntityContextCheck context="crime_isAuthority" target="$npc" saveVersion="2">
                    <Then canSkip="1">
                      <EntityContextCheck context="crime_ignoreHorseTheftInSettlement" target="$horse" saveVersion="2">
                        <Then canSkip="1">
                          <Success />
                        </Then>
                        <Else canSkip="1">
                          <Sequence>
                            <Sequence>
                              <GetMates Target="$horse" Mates="$horseMates" />
                              <GetHighestStatusNpc Npcs="$horseMates" HighestStatusNpc="$highestNpcMates" />
                            </Sequence>
                            <GetFactionWithLabel Soul="$highestNpcMates" Label="settlement" OutputFaction="$settlement_horse" />
                            <GetFactionWithLabel Soul="$npc" Label="settlement" OutputFaction="$settlement_npc" />
                            <Expression expressions="$isRelevant = $settlement_npc == $settlement_horse" />
                          </Sequence>
                        </Else>
                      </EntityContextCheck>
                    </Then>
                    <Else canSkip="1">
                      <Success />
                    </Else>
                  </EntityContextCheck>
                </Sequence>
              </Then>
              <Else canSkip="1">
                <Expression expressions="$isRelevant = false" />
              </Else>
            </IfElseCondition>
          </Sequence>
        </Then>
        <Else canSkip="1">
          <Expression expressions="$isRelevant = false" />
        </Else>
      </EntityContextCheck>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="currentTime" comment="" />
        <Variable name="highestNpcMates" comment="" />
        <Variable name="horseMates" comment="" />
        <Variable name="legalness_timestamp" comment="" />
        <Variable name="playerHorse" comment="" />
        <Variable name="settlement_horse" comment="" />
        <Variable name="settlement_npc" comment="" />
        <Variable name="horse" comment="" />
        <Variable name="isRelevant" comment="" />
        <Variable name="npc" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <EntityContextCheck editorPosX="310" editorPosY="610" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
          <Then>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GetPlayerHorse hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetPlayerHorse>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetAreMates>
                    <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Success hasInputBreakpoint="0" comment="don&apos;t care" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Success>
                          </Then>
                          <Else>
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <GetMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </GetMates>
                                <GetHighestStatusNpc hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </GetHighestStatusNpc>
                              </Sequence>
                              <GetFactionWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GetFactionWithLabel>
                              <GetFactionWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </GetFactionWithLabel>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Sequence>
                          </Else>
                        </EntityContextCheck>
                      </Then>
                      <Else>
                        <Success hasInputBreakpoint="0" comment="don&apos;t care" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </Else>
                    </EntityContextCheck>
                  </Sequence>
                </Then>
                <Else>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Else>
              </IfElseCondition>
            </Sequence>
          </Then>
          <Else>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
          </Else>
        </EntityContextCheck>
      </Forest>
      <Comments>
        <Comment text="Horse_is_relevant_for_mates_and_guards_in_the_same_settlement" posX="270" posY="300" width="1750" height="657" resizeBorderWidth="1750" resizeBorderHeight="630" color="0.65,0.65,0.65" author="patrik.papso" />
      </Comments>
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>