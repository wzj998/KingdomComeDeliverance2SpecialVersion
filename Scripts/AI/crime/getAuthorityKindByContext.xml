<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getAuthorityKindByContext" is_function="1">
    <Variables>
      <Variable name="reactionKind" type="enum:crime_reactionKind" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="authorityKind" type="enum:crime_authorityKind" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <EntityContextCheck context="crime_isAuthority" target="$target" saveVersion="2">
          <Then canSkip="1">
            <EntityContextCheck context="crime_isAuthorityOnStationaryDuty" target="$target" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$authorityKind = $enum:crime_authorityKind.stationaryDuty" />
              </Then>
              <Else canSkip="1">
                <EntityContextCheck context="crime_isAuthorityOnDuty" target="$target" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$authorityKind = $enum:crime_authorityKind.onDuty" />
                  </Then>
                  <Else canSkip="1">
                    <Sequence>
                    <GetReactionKindByContext Target="$target" ReactionKind="$reactionKind" />
                      <IfElseCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.unknown" saveVersion="2">
                        <Then canSkip="1">
                          <EntityContextCheck context="crime_sleeping" target="$target" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$authorityKind = $enum:crime_authorityKind.offDuty_sleeping" />
                            </Then>
                            <Else canSkip="1">
                              <Expression expressions="$authorityKind = $enum:crime_authorityKind.offDuty" />
                            </Else>
                          </EntityContextCheck>
                        </Then>
                        <Else canSkip="1">
                          <Expression expressions="$authorityKind = $enum:crime_authorityKind.activeDuty" />
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </Else>
                </EntityContextCheck>
              </Else>
            </EntityContextCheck>
          </Then>
          <Else canSkip="1">
            <Success />
          </Else>
        </EntityContextCheck>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="reactionKind" comment="" />
        <Variable name="authorityKind" comment="" />
        <Variable name="target" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <EntityContextCheck editorPosX="270" editorPosY="340" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
                <Else>
                  <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      <GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                      </GetReactionKindByContext>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Else>
                            </EntityContextCheck>
                          </Then>
                          <Else>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </Else>
                  </EntityContextCheck>
                </Else>
              </EntityContextCheck>
            </Then>
            <Else>
              <Success hasInputBreakpoint="0" comment="Not an authority" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </EntityContextCheck>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>