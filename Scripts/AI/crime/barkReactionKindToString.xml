<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_barkReactionKindToString" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="barkKind" type="enum:crime_barkReactionKind" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="string" type="_string" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.companionComment">
            <Expression expressions="$string = &apos;companionComment&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.heldBodyEnemy">
            <Expression expressions="$string = &apos;heldBodyEnemy&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.bodyFound">
            <Expression expressions="$string = &apos;bodyFound&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.heldBodyFriendly">
            <Expression expressions="$string = &apos;heldBodyFriendly&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.ignoredPickpocket">
            <Expression expressions="$string = &apos;ignoredPickpocket&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.hasWeapon">
            <Expression expressions="$string = &apos;hasWeapon&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.semipublicTrespass">
            <Expression expressions="$string = &apos;semipublicTrespass&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.isTorchless">
            <Expression expressions="$string = &apos;isTorchless&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.playerInStealth">
            <Expression expressions="$string = &apos;playerInStealth&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.kettleEatingGoodRep">
            <Expression expressions="$string = &apos;kettleEatingGoodRep&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.greetPlayer">
            <Expression expressions="$string = &apos;greetPlayer&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.companionDog">
            <Expression expressions="$string = &apos;companionDog&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.mourn">
            <Expression expressions="$string = &apos;mourn&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.companionHorse">
            <Expression expressions="$string = &apos;companionHorse&apos;" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$barkKind == $enum:crime_barkReactionKind.indifferentCombat">
            <Expression expressions="$string = &apos;indifferentCombat&apos;" />
          </IfCondition>
          <DefaultBranch>
            <ErrorNode Message="&apos;MISSING BARK KIND!&apos;" />
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="barkKind" comment="" />
        <Variable name="string" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <DefaultBranch>
              <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ErrorNode>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>