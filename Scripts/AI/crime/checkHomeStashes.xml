<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_checkHomeStashes" is_function="1">
		<Variables>
			<Variable name="ignorePriority" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="interruptData" type="switch:interruptData:checkHomeStashes" values="" isPersistent="0" form="single" />
			<Variable name="notRobbedStashes" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="playerRelated" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="robbedStashes" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="robbedValue" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="stashes" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="stashes_value" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="checker" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="home" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$home" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;home_area,home_equipment&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<EntityClassFilter Class="Stash" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<LinkTagFilter tag="&apos;home_equipment&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$stashes" saveVersion="2" />
					</GraphSearch>
					<ForEach startIndex="0" step="1" array="$stashes" iterator="" value="$stashes_value" break="">
						<Sequence>
							<GetStashRobbedValue StashWUID="$stashes_value" Value="$robbedValue" />
							<IfElseCondition failOnCondition="false" condition="$robbedValue &gt; 0" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$robbedStashes[#robbedStashes] = $stashes_value" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$notRobbedStashes[#notRobbedStashes] = $stashes_value" />
								</Else>
							</IfElseCondition>
						</Sequence>
					</ForEach>
					<IfCondition failOnCondition="false" condition="#robbedStashes &gt; 0">
						<AtomicDecorator>
							<Sequence>
								<ForEach startIndex="0" step="1" array="$notRobbedStashes" iterator="" value="$stashes_value" break="">
									<AddLink From="$this.id" To="$stashes_value" Tag="&apos;crime_checkHomeStashes_checkedStash&apos;" Data="" LinkOpHandleMode="OverWrite" />
								</ForEach>
								<Function_crime_checkLongTermMemoryTrespass home="$home" knowAboutPlayer="$playerRelated" nodeLabel="38918487" />
								<Function_crime_addFollowUp_checkHomeStashes home="$home" information="" playerRelated="$playerRelated" resetStolenItemsFound="false" stolenItemsFound="false" added="" nodeLabel="34338319" />
								<Expression expressions="$ignorePriority = $initiator == $enum:switch_interruptInitiator.scheduler &#10; &#10;$interruptData.home = $home &#10;$interruptData.initiatedBy = $initiator &#10;$interruptData.playerRelated = false &#10;$interruptData.previousReaction = $previousReaction &#10;$interruptData.stimulusKind = $enum:crime_stimulusKind.theft &#10;$interruptData.stolenItemsFound = false &#10;$interruptData.playerRelated = $playerRelated" />
								<InstantSendMessageToNPC target="$checker" variable="$interruptData" />
							</Sequence>
						</AtomicDecorator>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="ignorePriority" comment="" />
				<Variable name="interruptData" comment="" />
				<Variable name="notRobbedStashes" comment="" />
				<Variable name="playerRelated" comment="" />
				<Variable name="robbedStashes" comment="" />
				<Variable name="robbedValue" comment="" />
				<Variable name="stashes" comment="" />
				<Variable name="stashes_value" comment="" />
				<Variable name="checker" comment="" />
				<Variable name="home" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-100" editorPosY="-220" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</EntityClassFilter>
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetStashRobbedValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetStashRobbedValue>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
							</Sequence>
						</ForEach>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ForEach hasInputBreakpoint="0" comment="mark the notRobbedOnes as checked so that NPC checks only the robbed ones; used for better synchronization if &gt;1 ppl are checking stashes in a home" breakpointFlags="0">
										<OutputBreakpoints />
										<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AddLink>
									</ForEach>
									<Function_crime_checkLongTermMemoryTrespass hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_checkLongTermMemoryTrespass>
									<Function_crime_addFollowUp_checkHomeStashes hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_addFollowUp_checkHomeStashes>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="Call interrupt_checkHomeStashes on NPC" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</Sequence>
							</AtomicDecorator>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>