<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_playStartleAnimation" is_function="1">
		<Variables>
			<Variable name="dot" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="isDisabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="pickpocketBagType" type="enum:crime_pickpocketBagType" values="" isPersistent="0" form="single" />
			<Variable name="shockStrength" type="enum:shockReaction" values="$enum:shockReaction.low" isPersistent="0" form="single" />
			<Variable name="theftMethod" type="enum:crime_theftMethod" values="" isPersistent="0" form="single" />
			<Variable name="usePickpocketReaction" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="assaultData" type="crime:assaultData" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="freshlyAttributedCrime" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="initiator" type="enum:switch_interruptInitiator" values="$enum:switch_interruptInitiator.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="previousReaction" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="reactionKind" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="shockSource" type="_wuid" values="$__player" isPersistent="0" form="single" requirementType="In" />
			<Variable name="source" type="enum:crime_source" values="$enum:crime_source.direct" isPersistent="0" form="single" requirementType="In" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$source &gt;= $enum:crime_source.direct &amp; &#10;$initiator == $enum:switch_interruptInitiator.switch &amp; &#10;~$freshlyAttributedCrime &amp; &#10; &#10;//react to arrow even when going from an interrupt &#10;($previousReaction == $enum:crime_reactionKind.unknown &amp; &#10;(($stimulusKind ~= $enum:crime_stimulusKind.hit &amp; $stimulusKind ~= $enum:crime_stimulusKind.shooter) | $assaultData.victim ~= $this.id) | &#10;($assaultData.kind == $enum:crime_attackKind.missile &amp; $assaultData.directHit == false))">
					<Sequence>
						<IfElseCondition failOnCondition="false" condition="$information.label == &apos;pickpocket&apos; &amp; &#10;$information.perceivedWuid == $this.id" saveVersion="2">
							<Then canSkip="1">
								<StanceCheck soul="$this.id" stance="standing" smartObject="" negate="false" failOnCondition="false" saveVersion="2">
									<Then canSkip="1">
										<Sequence>
											<NumericalOperation In1VariableName="this.id" In2VariableName="__player" In3VariableName="" OutVariableName="$dot" Operation="dot(w1_look_dir, w1_to_w2_dir)" />
											<LockDynamicInformationValues Information="$information">
												<GetDynamicInformationValue Information="$information" Tag="&apos;bagType&apos;" Out="$pickpocketBagType" />
											</LockDynamicInformationValues>
											<Switch>
												<IfCondition failOnCondition="false" condition="$dot &gt; 0.8 &amp; $pickpocketBagType == $enum:crime_pickpocketBagType.pouch">
													<Expression expressions="$usePickpocketReaction = true" />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$dot &lt; -0.8 &amp; $pickpocketBagType == $enum:crime_pickpocketBagType.satchel">
													<Expression expressions="$usePickpocketReaction = true" />
												</IfCondition>
												<DefaultBranch>
													<Expression expressions="$shockStrength = $enum:shockReaction.medium" />
												</DefaultBranch>
											</Switch>
										</Sequence>
									</Then>
									<Else canSkip="1">
										<Expression expressions="$shockStrength = $enum:shockReaction.medium" />
									</Else>
								</StanceCheck>
							</Then>
							<Else canSkip="1">
								<IfElseCondition failOnCondition="false" condition="$crimeLevel &gt; $enum:crime_crimeLevel.violent | &#10;($crimeLevel == $enum:crime_crimeLevel.violent &amp; $assaultData.kind &gt; $enum:crime_attackKind.unarmed)" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$shockStrength = $enum:shockReaction.medium" />
									</Then>
									<Else canSkip="1">
										<IfCondition failOnCondition="false" condition="$information.label == &apos;theft&apos;">
											<Sequence>
												<LockDynamicInformationValues Information="$information">
													<GetDynamicInformationValue Information="$information" Tag="&apos;theftMethod&apos;" Out="$theftMethod" />
												</LockDynamicInformationValues>
												<Expression expressions="$isDisabled =  &#10;$theftMethod == $enum:crime_theftMethod.kettleEating | &#10;$theftMethod == $enum:crime_theftMethod.seenEquipped" />
											</Sequence>
										</IfCondition>
									</Else>
								</IfElseCondition>
							</Else>
						</IfElseCondition>
						<IfCondition failOnCondition="false" condition="~$isDisabled">
							<Switch>
								<IfCondition failOnCondition="false" condition="$usePickpocketReaction">
									<ShockNPC Target="$this.id" Source="$shockSource" Type="Pickpocket" />
								</IfCondition>
								<DefaultBranch>
									<Sequence>
										<Wait duration="&apos;0s&apos;" timeType="GameTime" doFail="false" variation="&apos;1s&apos;" />
										<ShockNPC Target="$this.id" Source="$shockSource" Type="$shockStrength" />
									</Sequence>
								</DefaultBranch>
							</Switch>
						</IfCondition>
					</Sequence>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfElseCondition failOnCondition="false" condition="$pickpocketBagType == $enum:crime_pickpocketBagType.pouch" saveVersion="2">
				<Then canSkip="1">
					<AnimationAction fragment="&apos;CrimeRobbingReaction&apos;" tags="&apos;side_front&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
				</Then>
				<Else canSkip="1">
					<AnimationAction fragment="&apos;CrimeRobbingReaction&apos;" tags="&apos;side_back&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
				</Else>
			</IfElseCondition>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="dot" comment="" />
				<Variable name="isDisabled" comment="" />
				<Variable name="pickpocketBagType" comment="" />
				<Variable name="shockStrength" comment="" />
				<Variable name="theftMethod" comment="" />
				<Variable name="usePickpocketReaction" comment="" />
				<Variable name="assaultData" comment="" />
				<Variable name="crimeLevel" comment="" />
				<Variable name="freshlyAttributedCrime" comment="" />
				<Variable name="information" comment="" />
				<Variable name="initiator" comment="" />
				<Variable name="previousReaction" comment="" />
				<Variable name="reactionKind" comment="" />
				<Variable name="shockSource" comment="" />
				<Variable name="source" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<StanceCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</NumericalOperation>
												<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetDynamicInformationValue>
												</LockDynamicInformationValues>
												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
													<DefaultBranch>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</DefaultBranch>
												</Switch>
											</Sequence>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</StanceCheck>
								</Then>
								<Else>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<IfCondition hasInputBreakpoint="0" comment="KCD2-436547" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetDynamicInformationValue>
													</LockDynamicInformationValues>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</IfCondition>
										</Else>
									</IfElseCondition>
								</Else>
							</IfElseCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ShockNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ShockNPC>
									</IfCondition>
									<DefaultBranch>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
											<ShockNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ShockNPC>
										</Sequence>
									</DefaultBranch>
								</Switch>
							</IfCondition>
						</Sequence>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest>
				<IfElseCondition editorPosX="1920" editorPosY="410" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AnimationAction>
					</Then>
					<Else>
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AnimationAction>
					</Else>
				</IfElseCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>