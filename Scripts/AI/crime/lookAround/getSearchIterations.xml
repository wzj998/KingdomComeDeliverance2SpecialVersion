<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_lookAround_getSearchIterations" is_function="1">
		<Variables>
			<Variable name="additionalIterationsNervousness" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="hasEscapeArtist_I" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasEscapeArtist_II" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="minIterations" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="perk_iterations" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="random" type="_float" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="iterations" type="_int" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="iterationsParamToken" type="_string" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="iterationsSet" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="lookAroundReason" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="maxIterations" type="_float" values="4" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="~$iterationsSet">
					<IfElseCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$iterationsParamToken = &apos;_sound&apos; &#10; &#10;$minIterations = $data:script_param[&apos;crime_lookAround_minIterations&apos; + $iterationsParamToken].value &#10;$maxIterations = $data:script_param[&apos;crime_lookAround_maxIterations&apos; + $iterationsParamToken].value &#10; &#10;$iterations = $minIterations + $random * ($maxIterations - $minIterations) &#10; &#10;$iterationsSet = true" />
						</Then>
						<Else canSkip="1">
							<Sequence>
								<Switch>
									<CheckNervousnessInterval Soul="" Flag="highToInf" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$additionalIterationsNervousness = $data:script_param[&apos;crime_lookAround_additionalIterationsNervousness&apos; + $iterationsParamToken].value" />
										</Then>
									</CheckNervousnessInterval>
									<CheckNervousnessInterval Soul="" Flag="midToInf" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$additionalIterationsNervousness = $data:script_param[&apos;crime_lookAround_additionalIterationsNervousness&apos; + $iterationsParamToken].value * 0.5" />
										</Then>
									</CheckNervousnessInterval>
									<DefaultBranch>
										<Success />
									</DefaultBranch>
								</Switch>
								<GenerateRandomFloat result="$random" />
								<Expression expressions="$minIterations = $data:script_param[&apos;crime_lookAround_minIterations&apos; + $iterationsParamToken].value + $additionalIterationsNervousness &#10;$maxIterations = $data:script_param[&apos;crime_lookAround_maxIterations&apos; + $iterationsParamToken].value + $additionalIterationsNervousness &#10; &#10;$iterations = $minIterations + $random * ($maxIterations - $minIterations)" />
								<IfCondition failOnCondition="false" condition="$iterations &gt; 3">
									<Sequence>
										<Expression expressions="$perk_iterations = $iterations" />
										<Sequence>
											<HasPerk SoulWUID="$__player" Perk="&apos;ecee2a90-309a-48d6-bc66-eec9b0825a63&apos;" Value="$hasEscapeArtist_I" UsePerk="false" />
											<IfCondition failOnCondition="false" condition="$hasEscapeArtist_I">
												<Expression expressions="$perk_iterations -= 2" />
											</IfCondition>
										</Sequence>
										<Sequence>
											<HasPerk SoulWUID="$__player" Perk="&apos;91f67efc-12e2-479f-964c-f10a3d9e4bf2&apos;" Value="$hasEscapeArtist_II" UsePerk="false" />
											<IfCondition failOnCondition="false" condition="$hasEscapeArtist_II">
												<Expression expressions="$perk_iterations -= 2" />
											</IfCondition>
										</Sequence>
										<ExecuteLua code="data.iterations = math.max(data.perk_iterations, 3)" />
									</Sequence>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.corpse | &#10;$lookAroundReason == $enum:crime_stimulusKind.murder">
									<EntityContextCheck context="crime_shortCorpseLookAround" target="" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$iterations = 1" />
										</Then>
									</EntityContextCheck>
								</IfCondition>
								<Expression expressions="$iterationsSet = true" />
							</Sequence>
						</Else>
					</IfElseCondition>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="additionalIterationsNervousness" comment="" />
				<Variable name="hasEscapeArtist_I" comment="" />
				<Variable name="hasEscapeArtist_II" comment="" />
				<Variable name="minIterations" comment="" />
				<Variable name="perk_iterations" comment="" />
				<Variable name="random" comment="" />
				<Variable name="iterations" comment="" />
				<Variable name="iterationsParamToken" comment="" />
				<Variable name="iterationsSet" comment="" />
				<Variable name="lookAroundReason" comment="" />
				<Variable name="maxIterations" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="if not loading iterations" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="nervousness doesnt matter here" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</CheckNervousnessInterval>
										<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</CheckNervousnessInterval>
										<DefaultBranch>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</DefaultBranch>
									</Switch>
									<GenerateRandomFloat hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GenerateRandomFloat>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="Perk #KCD2-83669 a #KCD2-114914" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<HasPerk hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</HasPerk>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
											</Sequence>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<HasPerk hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</HasPerk>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
											</Sequence>
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
										</Sequence>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</EntityContextCheck>
									</IfCondition>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</Else>
						</IfElseCondition>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>