<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_lookAround_receiveReport" is_function="1">
		<Variables>
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="move_additionalMoveParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="move_pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="move_speed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="dialogContext_reactingToReportFrom" type="_float" values="" isPersistent="0" form="associative" requirementType="Reference" />
			<Variable name="dialogContext_reactingToReportFrom_appendix" type="_float" values="" isPersistent="0" form="associative" requirementType="Reference" />
			<Variable name="lookAroundData" type="switch:interruptData:lookAround" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="nonInvestigable" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$lookAroundData.reactingToReportFrom ~= $__null">
					<EntityContext context="crime_interruptLookAround_receivingReport" target="">
						<Sequence>
							<Switch>
								<DistanceCondition Origin="$this.id" ReferencePt="$lookAroundData.reactingToReportFrom" Low="3.000000" High="3.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
									<Sequence>
										<WaitAction />
										<StopMovement waitUntilStopped="false" />
									</Sequence>
								</DistanceCondition>
								<DefaultBranch>
									<Sequence>
										<Function_crime_lookAround_getParamsFromMovementType movementType="$enum:crime_lookAround_movementType.receiveReport" moveParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" speed="$move_speed" nodeLabel="56634891" />
										<MoveParamsDecorator speed="$move_speed" pathFindingParams="" doorClosingPolicy="LeaveOpened">
											<Move stopWithinDistance="2.500000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$lookAroundData.reactingToReportFrom" destinationSpecification2="" destinationSpecification3="" speed="$move_speed" additionalParams="$move_additionalMoveParams" pathFindingParams="$move_pathFindingParams" staminaPolicy="" pathInfo="" />
										</MoveParamsDecorator>
									</Sequence>
								</DefaultBranch>
							</Switch>
							<Parallel successMode="All" failureMode="Any">
								<Turn target="$lookAroundData.reactingToReportFrom" align="false" />
								<Timeout duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="">
									<EntityContextBarrier context="crime_interruptReport_waitingForReceiver" target="$lookAroundData.reactingToReportFrom" Negation="false" RunLogic="KeepRunning">
										<Success />
									</EntityContextBarrier>
								</Timeout>
							</Parallel>
							<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
								<Then canSkip="1">
									<IfElseCondition failOnCondition="false" condition="$nonInvestigable" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$metarole = &apos;STRAZ_REAGUJE_NA_REPORT_NPC_ALE_NEJDE_NIC_DELAT_STRAZ&apos;" />
										</Then>
										<Else canSkip="1">
											<Sequence>
												<Function_crime_getCrimeMetaroleLabel information="$lookAroundData.information" reportedBy="$lookAroundData.reactingToReportFrom" situation="$enum:crime_barkSituation.crimeReported" soundType="$enum:sound.invalid" source="$enum:crime_source.personal" stimulusKind="$lookAroundData.stimulusKind" dialogContext="$dialogContext_reactingToReportFrom_appendix" metaroleLabel="$metarole" nodeLabel="21964681" />
												<AppendArray baseArray="$dialogContext_reactingToReportFrom" appendix="$dialogContext_reactingToReportFrom_appendix" />
											</Sequence>
										</Else>
									</IfElseCondition>
								</Then>
								<Else canSkip="1">
									<Expression expressions="$metarole = &apos;NPC_REAGUJE_NA_REPORT_SPOLUBYDLICIHO&apos;" />
								</Else>
							</EntityContextCheck>
							<Function_crime_crimeBark animationApproach="$enum:animationApproach.tryDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext_reactingToReportFrom" dramaticBark="false" lookAt="$lookAroundData.reactingToReportFrom" metarole="$metarole" priority="$enum:crime_barkPriority.medium" nodeLabel="14675033" />
						</Sequence>
					</EntityContext>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="metarole" comment="" />
				<Variable name="move_additionalMoveParams" comment="" />
				<Variable name="move_pathFindingParams" comment="" />
				<Variable name="move_speed" comment="" />
				<Variable name="dialogContext_reactingToReportFrom" comment="" />
				<Variable name="dialogContext_reactingToReportFrom_appendix" comment="" />
				<Variable name="lookAroundData" comment="" />
				<Variable name="nonInvestigable" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<StopMovement hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</StopMovement>
										</Sequence>
									</DistanceCondition>
									<DefaultBranch>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_crime_lookAround_getParamsFromMovementType hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_lookAround_getParamsFromMovementType>
											<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Move>
											</MoveParamsDecorator>
										</Sequence>
									</DefaultBranch>
								</Switch>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Turn>
									<Timeout hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</EntityContextBarrier>
									</Timeout>
								</Parallel>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_crime_getCrimeMetaroleLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_getCrimeMetaroleLabel>
													<AppendArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AppendArray>
												</Sequence>
											</Else>
										</IfElseCondition>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</EntityContextCheck>
								<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_crimeBark>
							</Sequence>
						</EntityContext>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>