<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_lookaround_shouldHaveWeaponDrawn" is_function="1">
		<Variables>
			<Variable name="attackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
			<Variable name="stimulus_unknownShooter" type="switch:stimulus:unknownShooter" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="intenseSoundReaction" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
			<Variable name="shouldHaveWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<IsWeaponDrawn who="$this.id" WeaponSet="Oversized" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
					</IsWeaponDrawn>
					<IfCondition failOnCondition="false" condition="$crimeLevel &gt;= $enum:crime_crimeLevel.murder">
						<Expression expressions="$shouldHaveWeaponDrawn = true" />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$crimeLevel &gt;= $enum:crime_crimeLevel.violent">
						<Switch>
							<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$shouldHaveWeaponDrawn = true" />
								</Then>
							</IsPublicEnemy>
							<IfCondition failOnCondition="false" condition="$information.label == &apos;corpse&apos;">
								<Expression expressions="$shouldHaveWeaponDrawn = true" />
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$information.label == &apos;assault&apos; | &#10;$information.label == &apos;aggression&apos;">
								<SuppressFailure>
									<Sequence>
										<LockDynamicInformationValues Information="$information">
											<GetDynamicInformationValue Information="$information" Tag="&apos;kind&apos;" Out="$attackKind" />
										</LockDynamicInformationValues>
										<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.armed | $attackKind  == $enum:crime_attackKind.missile">
											<Expression expressions="$shouldHaveWeaponDrawn = true" />
										</IfCondition>
									</Sequence>
								</SuppressFailure>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$information.label == &apos;nonAttributedCrime&apos;">
								<SuppressFailure>
									<Sequence>
										<LockDynamicInformationValues Information="$information">
											<GetDynamicInformationValue Information="$information" Tag="&apos;stimulusUnknownShooter&apos;" Out="$stimulus_unknownShooter" />
										</LockDynamicInformationValues>
										<IfCondition failOnCondition="false" condition="$stimulus_unknownShooter.projectileType == $enum:crime_projectileType.arrow">
											<Expression expressions="$shouldHaveWeaponDrawn = true" />
										</IfCondition>
									</Sequence>
								</SuppressFailure>
							</IfCondition>
							<DefaultBranch>
								<Success />
							</DefaultBranch>
						</Switch>
					</IfCondition>
					<DefaultBranch>
						<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$shouldHaveWeaponDrawn = $intenseSoundReaction" />
							</Then>
							<Else canSkip="1">
								<CheckNervousnessInterval Soul="$this.id" Flag="highToInf" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$shouldHaveWeaponDrawn = true" />
									</Then>
								</CheckNervousnessInterval>
							</Else>
						</IsPublicEnemy>
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="attackKind" comment="" />
				<Variable name="stimulus_unknownShooter" comment="" />
				<Variable name="crimeLevel" comment="" />
				<Variable name="information" comment="" />
				<Variable name="intenseSoundReaction" comment="" />
				<Variable name="shouldHaveWeaponDrawn" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
						</IsWeaponDrawn>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</IsPublicEnemy>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetDynamicInformationValue>
											</LockDynamicInformationValues>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
										</Sequence>
									</SuppressFailure>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetDynamicInformationValue>
											</LockDynamicInformationValues>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
										</Sequence>
									</SuppressFailure>
								</IfCondition>
								<DefaultBranch>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</DefaultBranch>
							</Switch>
						</IfCondition>
						<DefaultBranch>
							<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
								<Else>
									<CheckNervousnessInterval hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
									</CheckNervousnessInterval>
								</Else>
							</IsPublicEnemy>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>