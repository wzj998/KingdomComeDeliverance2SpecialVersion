<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="lookAround_handleOnHotEntitySeen" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="lookAroundData" type="switch:interruptData:lookAround" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="lookAroundReason" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="onHotEntitySeenEvent" type="switch:onHotEntitySeenEvent" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="targetFound" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <IfCondition failOnCondition="false" condition="$onHotEntitySeenEvent.data.reason == $enum:switch_hotEntityReason.missingNpc &amp; &#10; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.missingNpc">
            <Expression expressions="$targetFound = true" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$onHotEntitySeenEvent.data.reason == $enum:switch_hotEntityReason.shooter &amp; &#10; &#10; &#10;( &#10;  $lookAroundReason == $enum:crime_stimulusKind.shooter | &#10;  $lookAroundReason == $enum:crime_stimulusKind.disturbance | &#10;  ( &#10;   $lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;   ( $lookAroundData.soundType == $enum:sound.decoy_distract | $lookAroundData.soundType == $enum:sound.lure_distract) &#10;  ) &#10;)">
            <Expression expressions="$targetFound = true" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$onHotEntitySeenEvent.data.reason == $enum:switch_hotEntityReason.weaponSound &amp; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;($lookAroundData.soundType == $enum:sound.bow_fired | &#10;$lookAroundData.soundType == $enum:sound.gun_fired | &#10;$lookAroundData.soundType == $enum:sound.arrow_hit | &#10;$lookAroundData.soundType == $enum:sound.bullet_hit | &#10;$lookAroundData.soundType == $enum:sound.thrash)">
            <Expression expressions="$targetFound = true" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="($onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.poaching | &#10;$onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.murderAnimal) &amp; &#10; &#10; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.animalAbuse">
            <Expression expressions="$targetFound = true" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="($onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.sound | &#10;$onHotEntitySeenEvent.data.reason  == $enum:switch_hotEntityReason.dogWhistle) &amp; &#10; &#10;$lookAroundReason == $enum:crime_stimulusKind.sound">
            <Expression expressions="$targetFound = true" />
          </IfCondition>
          <DefaultBranch>
            <Success />
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer>
      <Switch>
        <IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.missingNpc">
          <Parallel successMode="Any" failureMode="Any">
            <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;lookAround_missingNpcFound&apos;" RunLogic="KeepRunning">
              <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
            </ExternalLock>
            <DistanceGate Origin="$this.id" ReferencePt="$lookAroundData.missingNpc" Low="5.000000" High="5.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
              <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
            </DistanceGate>
          </Parallel>
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.shooter | &#10;$lookAroundReason == $enum:crime_stimulusKind.disturbance | &#10;( &#10; $lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10; $lookAroundData.soundType == $enum:sound.decoy_distract &#10;)">
          <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_shooterFound&apos;" RunLogic="KeepRunning">
            <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
          </ExternalLock>
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound &amp; &#10;$lookAroundData.soundType == $enum:sound.bow_fired">
          <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_shooterSoundFound&apos;" RunLogic="KeepRunning">
            <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
          </ExternalLock>
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.animalAbuse">
          <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_animalAbuserFound&apos;" RunLogic="KeepRunning">
            <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
          </ExternalLock>
        </IfCondition>
        <IfCondition failOnCondition="false" condition="$lookAroundReason == $enum:crime_stimulusKind.sound">
          <Parallel successMode="Any" failureMode="Any">
            <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_soundSourceFound&apos;" RunLogic="KeepRunning">
              <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
            </ExternalLock>
            <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_soundSourceFound_horse&apos;" RunLogic="KeepRunning">
              <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
            </ExternalLock>
            <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;crime_soundSourceFound_dogWhistle&apos;" RunLogic="KeepRunning">
              <Expression expressions="$targetFound = true &#10;$stopLooking = true" />
            </ExternalLock>
          </Parallel>
        </IfCondition>
        <DefaultBranch>
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </DefaultBranch>
      </Switch>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="lookAroundData" comment="" />
        <Variable name="lookAroundReason" comment="" />
        <Variable name="onHotEntitySeenEvent" comment="" />
        <Variable name="targetFound" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <DefaultBranch>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest>
        <Switch editorPosX="1350" editorPosY="320" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </ExternalLock>
              <DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </DistanceGate>
            </Parallel>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </ExternalLock>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </ExternalLock>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </ExternalLock>
          </IfCondition>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </ExternalLock>
              <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </ExternalLock>
              <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </ExternalLock>
            </Parallel>
          </IfCondition>
          <DefaultBranch>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </DefaultBranch>
        </Switch>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>