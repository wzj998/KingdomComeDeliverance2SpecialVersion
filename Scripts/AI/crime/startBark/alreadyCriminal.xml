<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_startBark_alreadyCriminal" is_function="1">
    <Variables>
      <Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="useAuthorityBark" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Selector>
          <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
            <LinkDataFilter tag="&apos;crime_reactor&apos;" condition="$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.frisk | &#10;$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.selfhelp | &#10;$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.arrest | &#10;$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.attack" prune="true" negprune="unknown" Parent="" Child="" Data="" />
            <NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
              <Child0 canSkip="1">
                <WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
              </Child0>
            </NegationOp>
          </GraphSearch>
          <Sequence>
            <EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
              <Then canSkip="1">
                <RandomGate opensWithChance="0.500000" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$useAuthorityBark = true" />
                  </Then>
                  <Else canSkip="1">
                    <Success />
                  </Else>
                </RandomGate>
              </Then>
            </EntityContextCheck>
            <IfElseCondition failOnCondition="false" condition="$useAuthorityBark" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$metarole = &apos;STRAZ_VIDI_HLEDANEHO_HRACE&apos;" />
              </Then>
              <Else canSkip="1">
                <Switch>
                  <IfCondition failOnCondition="false" condition="$information.label == &apos;disturbance&apos; | &#10;$information.label == &apos;drawnWeapon&apos; | &#10;$information.label == &apos;friskRefusal&apos; | &#10;$information.label == &apos;pilloryBreak&apos; | &#10;$information.label == &apos;sneak&apos;">
                    <Expression expressions="$metarole = &apos;NPC_VIDI_HLEDANEHO_HRACE_VYTRZNOST&apos;" />
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$information.label == &apos;graveRobbing&apos; | &#10;$information.label == &apos;horseTheft&apos; | &#10;$information.label == &apos;lockpick&apos; | &#10;$information.label == &apos;pickpocket&apos; | &#10;$information.label == &apos;theft&apos;">
                    <Expression expressions="$metarole = &apos;NPC_VIDI_HLEDANEHO_HRACE_KRADEZE&apos;" />
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$information.label == &apos;aggression&apos; | &#10;$information.label == &apos;assault&apos; | &#10;$information.label == &apos;assaultAnimal&apos; | &#10;$information.label == &apos;assaultByDog&apos; | &#10;$information.label == &apos;corpseViolation&apos; | &#10;$information.label == &apos;kettlePoisoning&apos; | &#10;$information.label == &apos;murderAnimal&apos; | &#10;$information.label == &apos;resistingArrest&apos;">
                    <Expression expressions="$metarole = &apos;NPC_VIDI_HLEDANEHO_HRACE_NASILI&apos;" />
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$information.label == &apos;murder&apos; | &#10;$information.label == &apos;murderByDog&apos;">
                    <Expression expressions="$metarole = &apos;NPC_VIDI_HLEDANEHO_HRACE_VRAZDA&apos;" />
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$information.label == &apos;poaching&apos;">
                    <Expression expressions="$metarole = &apos;NPC_VIDI_HLEDANEHO_HRACE_PYTLACTVI&apos;" />
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$information.label == &apos;trespass&apos;">
                    <Expression expressions="$metarole = &apos;NPC_VIDI_HLEDANEHO_HRACE_TRESPASS&apos;" />
                  </IfCondition>
                  <DefaultBranch>
                    <ErrorNode Message="&apos;Missing criminal bark for information label!&apos;" />
                  </DefaultBranch>
                </Switch>
              </Else>
            </IfElseCondition>
            <Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="" dramaticBark="false" lookAt="$__player" metarole="$metarole" priority="$enum:crime_barkPriority.important" nodeLabel="65465811" />
          </Sequence>
        </Selector>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="metarole" comment="" />
        <Variable name="useAuthorityBark" comment="" />
        <Variable name="information" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="someone else already confronting" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
              <LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkDataFilter>
              <NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Child0>
                  <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WUIDFilter>
                </Child0>
              </NegationOp>
            </GraphSearch>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Success>
                    </Else>
                  </RandomGate>
                </Then>
              </EntityContextCheck>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
                <Else>
                  <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <DefaultBranch>
                      <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </ErrorNode>
                    </DefaultBranch>
                  </Switch>
                </Else>
              </IfElseCondition>
              <Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_crime_crimeBark>
            </Sequence>
          </Selector>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>