<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_startBark_murder" is_function="1">
		<Variables>
			<Variable name="areMates" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="attackData" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
			<Variable name="bodyIsCarried" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="dialogContext" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="killedByDog" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="killedByHorse" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="&apos;SVEDEK_VIDI_VRAZDU&apos;" isPersistent="0" form="single" />
			<Variable name="victim" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SuppressFailure>
						<DetermineCrimeVictim Information="$information" Victim="$victim" />
					</SuppressFailure>
					<CheckWuidValid wuid="$victim" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<Expression expressions="$killedByDog = $information.label == &apos;murderByDog&apos;" />
								<LockDynamicInformationValues Information="$information">
									<Sequence>
										<GetDynamicInformationValue Information="$information" Tag="&apos;bodyIsCarried&apos;" Out="$bodyIsCarried" />
										<GetDynamicInformationValue Information="$information" Tag="&apos;killedByHorse&apos;" Out="$killedByHorse" />
									</Sequence>
								</LockDynamicInformationValues>
								<HasGenderCheck Gender="Female" SoulWUID="$victim" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$dialogContext[&apos;isMan&apos;] = 0" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$dialogContext[&apos;isMan&apos;] = 1" />
									</Else>
								</HasGenderCheck>
								<GetAreMates Npc1="$this.id" Npc2="$victim" AreMates="$areMates" />
								<Switch>
									<IfElseCondition failOnCondition="false" condition="$killedByDog &amp; $areMates" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$metarole += &apos;_SPOLUBYDLICIHO_PSEM&apos;" />
										</Then>
									</IfElseCondition>
									<IfCondition failOnCondition="false" condition="$killedByDog">
										<Expression expressions="$metarole += &apos;_PSEM&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$killedByHorse">
										<Expression expressions="$metarole += &apos;_KONEM&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$areMates">
										<Expression expressions="$metarole += &apos;_SPOLUBYDLICIHO&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$bodyIsCarried">
										<Expression expressions="$metarole = &apos;NPC_VIDI_HRACE_JAK_NESE_MRTVOLU_(PRITEL)&apos;" />
									</IfCondition>
									<DefaultBranch>
										<Success />
									</DefaultBranch>
								</Switch>
								<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="true" lookAt="$__player" metarole="$metarole" priority="$enum:crime_barkPriority.important" nodeLabel="73489038" />
							</Sequence>
						</Then>
					</CheckWuidValid>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="areMates" comment="" />
				<Variable name="attackData" comment="" />
				<Variable name="bodyIsCarried" comment="" />
				<Variable name="dialogContext" comment="" />
				<Variable name="killedByDog" comment="" />
				<Variable name="killedByHorse" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="victim" comment="" />
				<Variable name="information" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<DetermineCrimeVictim hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</DetermineCrimeVictim>
						</SuppressFailure>
						<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
										</Sequence>
									</LockDynamicInformationValues>
									<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</HasGenderCheck>
									<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetAreMates>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
										</IfElseCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<DefaultBranch>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</DefaultBranch>
									</Switch>
									<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_crimeBark>
								</Sequence>
							</Then>
						</CheckWuidValid>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>