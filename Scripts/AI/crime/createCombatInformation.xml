<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_createCombatInformation" is_function="1">
    <Variables>
      <Variable name="existingAttackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
      <Variable name="existingInformation" type="information" values="" isPersistent="0" form="single" />
      <Variable name="isResistingArrest" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="label" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="addConfiscation" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="attackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="directHit" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="victim" type="_wuid" values="$this.id" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
      <AtomicDecorator>
        <IsDeadCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
          <Else canSkip="1">
            <Sequence>
              <IfElseCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.dog" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$label = &apos;assaultByDog&apos;" />
                </Then>
                <Else canSkip="1">
                  <Sequence>
                    <IfCondition failOnCondition="false" condition="$victim == $this.id">
                      <EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
                        <Then canSkip="1">
                          <EntityContextCheck context="crime_playerUnderArrestByAuthority" target="" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$isResistingArrest = true" />
                            </Then>
                          </EntityContextCheck>
                        </Then>
                      </EntityContextCheck>
                    </IfCondition>
                    <IfElseCondition failOnCondition="false" condition="$isResistingArrest" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$label = &apos;resistingArrest&apos;" />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$label = $directHit ? &apos;assault&apos; : &apos;aggression&apos;" />
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </Else>
              </IfElseCondition>
              <IfElseCondition failOnCondition="false" condition="$isResistingArrest" saveVersion="2">
                <Then canSkip="1">
                  <CreateInformationWrapper Label="$label" PerceivedWuid="$victim" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
                </Then>
                <Else canSkip="1">
                  <Sequence>
                    <SuppressFailure>
                      <Sequence>
                        <RetrieveInformation PerceivedWuid="$victim" label="$label" OutVariable="$existingInformation" />
                        <LockDynamicInformationValues Information="$existingInformation">
                          <GetDynamicInformationValue Information="$existingInformation" Tag="&apos;kind&apos;" Out="$existingAttackKind" />
                        </LockDynamicInformationValues>
                        <IfCondition failOnCondition="false" condition="$existingAttackKind &gt; $attackKind">
                          <Expression expressions="$attackKind = $existingAttackKind" />
                        </IfCondition>
                      </Sequence>
                    </SuppressFailure>
                    <CreateInformationWrapper Label="$label" PerceivedWuid="$victim" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$information" />
                    <LockDynamicInformationValues Information="$information">
                      <Sequence>
                        <SetDynamicInformationValue Information="$information" Tag="&apos;kind&apos;" Variable="$attackKind" Type="" Value="" />
                        <SetDynamicInformationValue Information="$information" Tag="&apos;victim&apos;" Variable="$victim" Type="" Value="" />
                      </Sequence>
                    </LockDynamicInformationValues>
                  </Sequence>
                </Else>
              </IfElseCondition>
              <IfCondition failOnCondition="false" condition="$addConfiscation">
                <LockDynamicInformationValues Information="$information">
                  <SetDynamicInformationValue Information="$information" Tag="&apos;confiscation&apos;" Variable="" Type="&apos;_bool&apos;" Value="true" />
                </LockDynamicInformationValues>
              </IfCondition>
            </Sequence>
          </Else>
        </IsDeadCheck>
      </AtomicDecorator>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="existingAttackKind" comment="" />
        <Variable name="existingInformation" comment="" />
        <Variable name="isResistingArrest" comment="" />
        <Variable name="label" comment="" />
        <Variable name="addConfiscation" comment="" />
        <Variable name="attackKind" comment="" />
        <Variable name="directHit" comment="" />
        <Variable name="information" comment="" />
        <Variable name="victim" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <AtomicDecorator editorPosX="370" editorPosY="400" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                            </EntityContextCheck>
                          </Then>
                        </EntityContextCheck>
                      </IfCondition>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </Else>
                </IfElseCondition>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CreateInformationWrapper>
                  </Then>
                  <Else>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </RetrieveInformation>
                          <LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </GetDynamicInformationValue>
                          </LockDynamicInformationValues>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </IfCondition>
                        </Sequence>
                      </SuppressFailure>
                      <CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </CreateInformationWrapper>
                      <LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </SetDynamicInformationValue>
                          <SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </SetDynamicInformationValue>
                        </Sequence>
                      </LockDynamicInformationValues>
                    </Sequence>
                  </Else>
                </IfElseCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </SetDynamicInformationValue>
                  </LockDynamicInformationValues>
                </IfCondition>
              </Sequence>
            </Else>
          </IsDeadCheck>
        </AtomicDecorator>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>