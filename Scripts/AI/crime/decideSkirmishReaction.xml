<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_decideSkirmishReaction" is_function="1">
    <Variables>
      <Variable name="entityType" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="mates" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="playerIsBadass" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="tryFindingMates" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="allowFemaleJoin" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="moraleBoost" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reason" type="enum:skirmishDecisionReason" values="$enum:skirmishDecisionReason.perception" isPersistent="0" form="single" requirementType="In" />
      <Variable name="referenceNpc" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="relationOverride" type="enum:skirmishRelationOverride" values="$enum:skirmishRelationOverride.none" isPersistent="0" form="single" requirementType="In" />
      <Variable name="skirmishReaction" type="enum:combat_skirmishReaction" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="targetNpc" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <Sequence>
          <GetType WUID="$referenceNpc" OutString="$entityType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
          <IfCondition failOnCondition="false" condition="$entityType == &apos;NPC&apos;">
            <EntityContextCheck context="combat_alwaysWithdrawSkirmish" target="$referenceNpc" saveVersion="2">
              <Else canSkip="1">
                <HasGenderCheck Gender="Male" SoulWUID="$referenceNpc" FailSubtMissing="false" saveVersion="2">
                  <Then canSkip="1">
                    <EntityContextCheck context="crime_isSecurity" target="" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.join" />
                      </Then>
                      <Else canSkip="1">
                        <Sequence>
                          <Switch>
                            <EntityContextCheck context="crime_isCamper" target="$referenceNpc" saveVersion="2">
                              <Then canSkip="1">
                                <Expression expressions="$tryFindingMates = true" />
                              </Then>
                            </EntityContextCheck>
                            <EntityContextCheck context="crime_isLoner" target="$referenceNpc" saveVersion="2">
                              <Then canSkip="1">
                                <Sequence>
                                  <Function_crime_isPlayerVeryBadass isVeryBadass="$playerIsBadass" nodeLabel="34223247" />
                                  <IfCondition failOnCondition="false" condition="~$playerIsBadass">
                                    <Expression expressions="$tryFindingMates = true" />
                                  </IfCondition>
                                </Sequence>
                              </Then>
                            </EntityContextCheck>
                            <DefaultBranch>
                              <Success />
                            </DefaultBranch>
                          </Switch>
                          <IfCondition failOnCondition="false" condition="$tryFindingMates">
                            <Sequence>
                            <GetMatesAliveAndWithinDistance Target="$referenceNpc" Distance="$data:script_param[&apos;crime_alarmInformationEmitDistance&apos;].value" Mates="$mates" />
                              <IfCondition failOnCondition="false" condition="#mates &gt;= 2">
                                <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.join" />
                              </IfCondition>
                            </Sequence>
                          </IfCondition>
                        </Sequence>
                      </Else>
                    </EntityContextCheck>
                  </Then>
                </HasGenderCheck>
              </Else>
            </EntityContextCheck>
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$skirmishReaction == $enum:combat_skirmishReaction.none">
            <Sequence>
              <EntityContextCheck context="crime_isLoner" target="$referenceNpc" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$moraleBoost += $data:script_param[&apos;crime_lonerMoraleBoost&apos;].value" />
                </Then>
              </EntityContextCheck>
              <EntityContextCheck context="crime_isCourageous" target="$referenceNpc" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$moraleBoost += $data:script_param[&apos;crime_courageousMoraleBoost&apos;].value" />
                </Then>
              </EntityContextCheck>
              <DecideSkirmishReaction ReferenceNPC="$referenceNpc" TargetNPC="$targetNpc" Reason="$reason" RelationOverride="$relationOverride" MoraleBoost="$moraleBoost" AllowFemaleJoin="$allowFemaleJoin" saveVersion="2">
                <Join canSkip="1">
                  <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.join" />
                </Join>
                <Withdraw canSkip="1">
                  <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.withdraw" />
                </Withdraw>
                <Indifference canSkip="1">
                  <Expression expressions="$skirmishReaction = $enum:combat_skirmishReaction.indifference" />
                </Indifference>
              </DecideSkirmishReaction>
            </Sequence>
          </IfCondition>
        </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="entityType" comment="" />
        <Variable name="mates" comment="" />
        <Variable name="playerIsBadass" comment="" />
        <Variable name="tryFindingMates" comment="" />
        <Variable name="allowFemaleJoin" comment="" />
        <Variable name="moraleBoost" comment="" />
        <Variable name="reason" comment="" />
        <Variable name="referenceNpc" comment="" />
        <Variable name="relationOverride" comment="" />
        <Variable name="skirmishReaction" comment="" />
        <Variable name="targetNpc" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="440" editorPosY="470" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetType>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Else>
                  <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Then>
                              </EntityContextCheck>
                              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <Function_crime_isPlayerVeryBadass hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Function_crime_isPlayerVeryBadass>
                                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </IfCondition>
                                  </Sequence>
                                </Then>
                              </EntityContextCheck>
                              <DefaultBranch>
                                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Success>
                              </DefaultBranch>
                            </Switch>
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              <GetMatesAliveAndWithinDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                              </GetMatesAliveAndWithinDistance>
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </IfCondition>
                              </Sequence>
                            </IfCondition>
                          </Sequence>
                        </Else>
                      </EntityContextCheck>
                    </Then>
                  </HasGenderCheck>
                </Else>
              </EntityContextCheck>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                </EntityContextCheck>
                <DecideSkirmishReaction hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Join>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Join>
                  <Withdraw>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Withdraw>
                  <Indifference>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Indifference>
                </DecideSkirmishReaction>
              </Sequence>
            </IfCondition>
          </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>