<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_updateStolenItemsOnInformation" is_function="1">
		<Variables>
			<Variable name="foundItemWuids" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="foundItems" type="itemPrescriptor" values="" isPersistent="0" form="array" />
			<Variable name="foundItems_value" type="itemPrescriptor" values="" isPersistent="0" form="single" />
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="itemsOnInformation" type="itemPrescriptor" values="" isPersistent="0" form="array" />
			<Variable name="origValue" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="theftMethod" type="enum:crime_theftMethod" values="" isPersistent="0" form="single" />
			<Variable name="value" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<LockDynamicInformationValues Information="$information">
						<Sequence>
							<GetDynamicInformationValue Information="$information" Tag="&apos;theftMethod&apos;" Out="$theftMethod" />
							<IfCondition failOnCondition="false" condition="$theftMethod == $enum:crime_theftMethod.loot | &#10;$theftMethod == $enum:crime_theftMethod.pickpocket | &#10;$theftMethod == $enum:crime_theftMethod.lootCorpse | &#10;$theftMethod == $enum:crime_theftMethod.lootUnconsciousBody">
								<Sequence>
									<GetDynamicInformationValue Information="$information" Tag="&apos;items&apos;" Out="$itemsOnInformation" />
									<Function_crime_findStolenItems filterByInventory="$information.perceivedWuid" stolenItems="$foundItemWuids" nodeLabel="11293041" />
									<Function_crime_prescribeItems items="$foundItemWuids" prescribedItems="$foundItems" nodeLabel="17331610" />
									<ForEach startIndex="0" step="1" array="$foundItems" iterator="" value="$foundItems_value" break="">
										<IfElseCondition failOnCondition="false" condition="$foundItems_value.instance == &apos;&apos;" saveVersion="2">
											<Then canSkip="1">
												<Selector>
													<Sequence>
														<FindInArray array="$itemsOnInformation" keyOut="$index" condition="$__value.class == $foundItems_value.class" />
														<IfCondition failOnCondition="false" condition="$itemsOnInformation[$index].count &lt; $foundItems_value.count">
															<Expression expressions="$itemsOnInformation[$index].count = foundItems_value.count" />
														</IfCondition>
													</Sequence>
													<PushToArray array="$itemsOnInformation" value="$foundItems_value" direction="Back" />
												</Selector>
											</Then>
											<Else canSkip="1">
												<Selector>
													<FindInArray array="$itemsOnInformation" keyOut="$index" condition="$__value.instance == $foundItems_value.instance" />
													<PushToArray array="$itemsOnInformation" value="$foundItems_value" direction="Back" />
												</Selector>
											</Else>
										</IfElseCondition>
									</ForEach>
									<SetDynamicInformationValue Information="$information" Tag="&apos;items&apos;" Variable="$itemsOnInformation" Type="" Value="" />
									<CheckWuidValid wuid="$information.perceivedWuid" FailSubtMissing="false" saveVersion="2">
										<Then canSkip="1">
											<Switch>
												<IfCondition failOnCondition="false" condition="$theftMethod == $enum:crime_theftMethod.pickpocket">
													<Sequence>
														<GetDynamicInformationValue Information="$information" Tag="&apos;value&apos;" Out="$origValue" />
														<GetNPCRobbedValue NPC="$information.perceivedWuid" Value="$value" />
														<Expression expressions="$value += $origValue" />
													</Sequence>
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$theftMethod == $enum:crime_theftMethod.lootCorpse | &#10;$theftMethod == $enum:crime_theftMethod.lootUnconsciousBody">
													<GetNPCRobbedValue NPC="$information.perceivedWuid" Value="$value" />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$theftMethod == $enum:crime_theftMethod.loot">
													<GetStashRobbedValue StashWUID="$information.perceivedWuid" Value="$value" />
												</IfCondition>
											</Switch>
										</Then>
									</CheckWuidValid>
									<SetDynamicInformationValue Information="$information" Tag="&apos;value&apos;" Variable="$value" Type="" Value="" />
								</Sequence>
							</IfCondition>
						</Sequence>
					</LockDynamicInformationValues>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="foundItemWuids" comment="" />
				<Variable name="foundItems" comment="" />
				<Variable name="foundItems_value" comment="" />
				<Variable name="index" comment="" />
				<Variable name="itemsOnInformation" comment="" />
				<Variable name="origValue" comment="" />
				<Variable name="theftMethod" comment="" />
				<Variable name="value" comment="" />
				<Variable name="information" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="4">
						<OutputBreakpoints />
						<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetDynamicInformationValue>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetDynamicInformationValue>
										<Function_crime_findStolenItems hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_findStolenItems>
										<Function_crime_prescribeItems hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_prescribeItems>
										<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</FindInArray>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
														</Sequence>
														<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</PushToArray>
													</Selector>
												</Then>
												<Else>
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</FindInArray>
														<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</PushToArray>
													</Selector>
												</Else>
											</IfElseCondition>
										</ForEach>
										<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SetDynamicInformationValue>
										<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetDynamicInformationValue>
															<GetNPCRobbedValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetNPCRobbedValue>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetNPCRobbedValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetNPCRobbedValue>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetStashRobbedValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetStashRobbedValue>
													</IfCondition>
												</Switch>
											</Then>
										</CheckWuidValid>
										<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SetDynamicInformationValue>
									</Sequence>
								</IfCondition>
							</Sequence>
						</LockDynamicInformationValues>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>