<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_checking_bleeding" is_function="1">
		<Variables>
			<Variable name="followUpBandage" type="crime:followUpBehavior:bandageMyself" values="" isPersistent="0" form="single" />
			<Variable name="scheduledBandaging" type="_bool" values="false" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="isBleeding" type="_bool" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<BuffTagCheck SoulId="$this.id" buffAITagId="7" FailWithSubtreeMissing="false" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<SuppressFailure>
									<Sequence>
										<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;crime_followUpBehavior_bandageMyself&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										</GraphSearch>
										<Expression expressions="$scheduledBandaging = true" />
									</Sequence>
								</SuppressFailure>
								<Expression expressions="$isBleeding = true" />
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<Success />
							</Sequence>
						</Else>
					</BuffTagCheck>
					<While doFail="false" propagateChildFail="false" condition="true">
						<DeadUnconsciousGate Who="$this.id" State="Any" Negation="true" RunLogic="Halt">
							<EntityContextBarrier context="crime_suppressBandageMyself" target="" Negation="true" RunLogic="Halt">
								<Parallel successMode="Any" failureMode="Any">
									<Loop count="-1">
										<IfGate atomic="false" condition="~$scheduledBandaging" RunLogic="KeepRunning">
											<IfGate atomic="false" condition="$isBleeding" RunLogic="KeepRunning">
												<Sequence>
													<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_followUpBehavior_bandageMyself&apos;" Data="$followUpBandage" LinkOpHandleMode="OverWrite" />
													<Expression expressions="$scheduledBandaging = true" />
													<Function_callInterrupt_bandageMyself ignorePriority="false" initiator="$enum:switch_interruptInitiator.switch" previousReaction="$enum:crime_reactionKind.unknown" source="$enum:crime_source.direct" stimulusKind="$enum:crime_stimulusKind.unknown" nodeLabel="65335940" />
												</Sequence>
											</IfGate>
										</IfGate>
									</Loop>
									<Loop count="-1">
										<LinkGate from="$this.id" to="$this.id" tag="&apos;crime_followUpBehavior_bandageMyself&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
											<LinkGate from="$this.id" to="$this.id" tag="&apos;crime_followUpBehavior_bandageMyself&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
												<Expression expressions="$scheduledBandaging = false" />
											</LinkGate>
										</LinkGate>
									</Loop>
								</Parallel>
							</EntityContextBarrier>
						</DeadUnconsciousGate>
					</While>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<RemoveLink From="$this.id" To="$this.id" Tag="&apos;crime_followUpBehavior_bandageMyself&apos;" LinkOpHandleMode="Success" />
			<Expression expressions="$scheduledBandaging = false &#10;$isBleeding = false" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="followUpBandage" comment="" />
				<Variable name="scheduledBandaging" comment="" />
				<Variable name="isBleeding" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<BuffTagCheck hasInputBreakpoint="0" comment="Some checks right after game start/load" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SuppressFailure hasInputBreakpoint="0" comment="Check if we aren&apos;t scheduled to bandage already" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</SuppressFailure>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="If i&apos;m not bleeding, remove followup if it exists" breakpointFlags="0">
									<OutputBreakpoints />
									<Success hasInputBreakpoint="0" comment="Actually keep it (meeting with Cyril)" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Sequence>
							</Else>
						</BuffTagCheck>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AddLink>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<Function_callInterrupt_bandageMyself hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_callInterrupt_bandageMyself>
													</Sequence>
												</IfGate>
											</IfGate>
										</Loop>
										<Loop hasInputBreakpoint="0" comment="Check for finished bandaging - reset variable" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</LinkGate>
											</LinkGate>
										</Loop>
									</Parallel>
								</EntityContextBarrier>
							</DeadUnconsciousGate>
						</While>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<RemoveLink editorPosX="940" editorPosY="-450" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</RemoveLink>
				<Expression editorPosX="1300" editorPosY="-450" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Expression>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>