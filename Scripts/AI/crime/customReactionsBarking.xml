<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_customReactionsBarking" is_function="1">
		<Variables>
			<Variable name="attackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
			<Variable name="dialogContext" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="informationDiff" type="informationDiff" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<While doFail="false" propagateChildFail="false" condition="true">
					<Sequence>
						<ClearInbox inbox="&apos;informationDiff&apos;" type="" condition="" />
						<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$informationDiff" senderInfo="" inbox="&apos;informationDiff&apos;" condition="" answerVar="">
							<IfCondition failOnCondition="false" condition="$data:crime[$informationDiff.information.label].isCrime &amp; &#10;$informationDiff.status == &apos;Created&apos;">
								<Sequence>
									<Expression expressions="$metarole = &apos;HRAC_DELA_BORDEL_V_TRESPASSU&apos;" />
									<Switch>
										<IfCondition failOnCondition="false" condition="$informationDiff.information.label == &apos;pickpocket&apos;">
											<Expression expressions="$metarole = &apos;OBET_PRISTIHLA_HRACE_(PICKPOCKET)&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$data:crime[$informationDiff.information.label].isViolent">
											<Sequence>
												<LockDynamicInformationValues Information="$informationDiff.information">
													<SuppressFailure>
														<GetDynamicInformationValue Information="$informationDiff.information" Tag="&apos;kind&apos;" Out="$attackKind" />
													</SuppressFailure>
												</LockDynamicInformationValues>
												<Switch>
													<IfCondition failOnCondition="false" condition="informationDiff.information.label == &apos;assault&apos;">
														<Function_crime_getHitMetaroleLabel attackKind="$attackKind" attacker="$__player" hitStrength="$enum:HitReactionStrength.Zero" isWitness="false" victim="$this.id" dialogContext="$dialogContext" metaroleLabel="$metarole" nodeLabel="83631782" />
													</IfCondition>
													<IfCondition failOnCondition="false" condition="informationDiff.information.label == &apos;aggression&apos;">
														<Switch>
															<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.unarmed">
																<Expression expressions="$metarole = &apos;OBET_REAGUJE_NA_NEARMISS_(UNARMED)&apos;" />
															</IfCondition>
															<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.armed">
																<Expression expressions="$metarole = &apos;OBET_REAGUJE_NA_NEARMISS_(MELEE)&apos;" />
															</IfCondition>
															<DefaultBranch>
																<Success />
															</DefaultBranch>
														</Switch>
													</IfCondition>
													<DefaultBranch>
														<Success />
													</DefaultBranch>
												</Switch>
											</Sequence>
										</IfCondition>
										<DefaultBranch>
											<Success />
										</DefaultBranch>
									</Switch>
									<Function_crime_crimeBark animationApproach="$enum:animationApproach.dontPlayDialogAnimations" canBeDelayed="false" dialogContext="$dialogContext" dramaticBark="true" lookAt="$__player" metarole="$metarole" priority="$enum:crime_barkPriority.important" nodeLabel="46453596" />
								</Sequence>
							</IfCondition>
						</ProcessMessage>
					</Sequence>
				</While>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="attackKind" comment="" />
				<Variable name="dialogContext" comment="" />
				<Variable name="informationDiff" comment="" />
				<Variable name="metarole" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ClearInbox>
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetDynamicInformationValue>
														</SuppressFailure>
													</LockDynamicInformationValues>
													<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_crime_getHitMetaroleLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_getHitMetaroleLabel>
														</IfCondition>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</IfCondition>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</IfCondition>
																<DefaultBranch>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</DefaultBranch>
															</Switch>
														</IfCondition>
														<DefaultBranch>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</DefaultBranch>
													</Switch>
												</Sequence>
											</IfCondition>
											<DefaultBranch>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DefaultBranch>
										</Switch>
										<Function_crime_crimeBark hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_crime_crimeBark>
									</Sequence>
								</IfCondition>
							</ProcessMessage>
						</Sequence>
					</While>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>