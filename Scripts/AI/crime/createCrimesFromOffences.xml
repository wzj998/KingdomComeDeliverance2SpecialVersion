<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_createCrimesFromOffences" is_function="1">
    <Variables>
      <Variable name="crimeInformation" type="information" values="" isPersistent="0" form="single" />
      <Variable name="label" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="playersOffences_value" type="enum:crime_offence" values="" isPersistent="0" form="single" />
      <Variable name="shouldCreateInformation" type="_bool" values="false" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="knowViolentInformation" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="mostImportantCreatedCrimeInformation" type="information" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="playersOffences" type="enum:crime_offence" values="" isPersistent="0" form="array" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ForEach startIndex="0" step="1" array="$playersOffences" iterator="" value="$playersOffences_value" break="">
          <Sequence>
            <Switch>
              <IfCondition failOnCondition="false" condition="$playersOffences_value == $enum:crime_offence.noTorch">
                <Expression expressions="$label = &apos;sneak&apos; &#10;$shouldCreateInformation = true" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$playersOffences_value == $enum:crime_offence.drawnWeapon &amp; &#10;~$knowViolentInformation">
                <Expression expressions="$label = &apos;drawnWeapon&apos; &#10;$shouldCreateInformation = true" />
              </IfCondition>
              <DefaultBranch>
                <Success />
              </DefaultBranch>
            </Switch>
            <IfCondition failOnCondition="false" condition="$shouldCreateInformation">
              <Sequence>
                <CreateInformationWrapper Label="$label" PerceivedWuid="$__player" PositionType="perceivedWuid" PositionVec3="" PositionWuid="" Information="$crimeInformation" />
                <IfElseCondition failOnCondition="false" condition="$mostImportantCreatedCrimeInformation.label == &apos;&apos;" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$mostImportantCreatedCrimeInformation = $crimeInformation" />
                  </Then>
                  <Else canSkip="1">
                    <IfCondition failOnCondition="false" condition="$data:crime[$label].importance &gt; $data:crime[$mostImportantCreatedCrimeInformation.label].importance">
                      <Expression expressions="$mostImportantCreatedCrimeInformation = $crimeInformation" />
                    </IfCondition>
                  </Else>
                </IfElseCondition>
              </Sequence>
            </IfCondition>
          </Sequence>
        </ForEach>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="crimeInformation" comment="" />
        <Variable name="label" comment="" />
        <Variable name="playersOffences_value" comment="" />
        <Variable name="shouldCreateInformation" comment="" />
        <Variable name="knowViolentInformation" comment="" />
        <Variable name="mostImportantCreatedCrimeInformation" comment="" />
        <Variable name="playersOffences" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
                <DefaultBranch>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </DefaultBranch>
              </Switch>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CreateInformationWrapper>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </IfCondition>
                    </Else>
                  </IfElseCondition>
                </Sequence>
              </IfCondition>
            </Sequence>
          </ForEach>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>