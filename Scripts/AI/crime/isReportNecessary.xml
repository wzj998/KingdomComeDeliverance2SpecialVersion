<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_isReportNecessary" is_function="1">
    <Variables>
      <Variable name="alreadyEngaged" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="information" type="information" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reportDestination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reportNecessary" type="_bool" values="true" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <Sequence>
          <Switch>
            <EntityContextCheck context="crime_interruptWatch" target="" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$alreadyEngaged = true" />
              </Then>
            </EntityContextCheck>
            <EntityContextCheck context="crime_interruptReturnWithHelp" target="" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$alreadyEngaged = true" />
              </Then>
            </EntityContextCheck>
            <DistanceCondition Origin="$this.id" ReferencePt="$reportDestination" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
              <Expression expressions="$alreadyEngaged = true" />
            </DistanceCondition>
            <DefaultBranch>
              <Success />
            </DefaultBranch>
          </Switch>
          <IfCondition failOnCondition="false" condition="$alreadyEngaged">
            <SuppressFailure>
              <Sequence>
                <CheckInformationKnowledge Information="$information" Holder="$reportDestination" />
                <Switch>
                  <EntityContextCheck context="crime_interruptArrest" target="$reportDestination" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$reportNecessary = false" />
                    </Then>
                  </EntityContextCheck>
                  <EntityContextCheck context="crime_interruptSelfhelp" target="$reportDestination" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$reportNecessary = false" />
                    </Then>
                  </EntityContextCheck>
                  <EntityContextCheck context="crime_interruptAttack" target="$reportDestination" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$reportNecessary = false" />
                    </Then>
                  </EntityContextCheck>
                  <DefaultBranch>
                    <Success />
                  </DefaultBranch>
                </Switch>
              </Sequence>
            </SuppressFailure>
          </IfCondition>
        </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="alreadyEngaged" comment="" />
        <Variable name="information" comment="" />
        <Variable name="reportDestination" comment="" />
        <Variable name="reportNecessary" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="320" editorPosY="460" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
              </EntityContextCheck>
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
              </EntityContextCheck>
              <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </DistanceCondition>
              <DefaultBranch>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </DefaultBranch>
            </Switch>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CheckInformationKnowledge hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CheckInformationKnowledge>
                  <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <EntityContextCheck hasInputBreakpoint="0" comment="all these context checks are for when NPC would try to report to someone already arresting player" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                    </EntityContextCheck>
                    <EntityContextCheck hasInputBreakpoint="0" comment="all these context checks are for when NPC would try to report to someone already arresting player" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                    </EntityContextCheck>
                    <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                    </EntityContextCheck>
                    <DefaultBranch>
                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Success>
                    </DefaultBranch>
                  </Switch>
                </Sequence>
              </SuppressFailure>
            </IfCondition>
          </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>