<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_attack_getInitialAttackState" is_function="1">
		<Variables>
			<Variable name="currentUrger" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="attackData" type="switch:interruptData:attack" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="attackState" type="enum:crime_interruptAttackState" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<IfElseCondition failOnCondition="false" condition="$attackData.target == $__player" saveVersion="2">
						<Then canSkip="1">
							<EntityContextCheck context="crime_inCrimeDialog" target="$__player" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;crime_playerUrging&apos;" prune="true" negprune="unknown" Parent="" Child="$currentUrger" Data="" />
										</GraphSearch>
										<CheckRelationshipInterval_SoulToSoul TargetSoul="$currentUrger" Soul="$this.id" Flag="enemy" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$attackState = $enum:crime_interruptAttackState.attacking" />
											</Then>
											<Else canSkip="1">
												<Expression expressions="$attackState = $enum:crime_interruptAttackState.playerIsSurrendering" />
											</Else>
										</CheckRelationshipInterval_SoulToSoul>
									</Sequence>
								</Then>
								<Else canSkip="1">
									<Expression expressions="$attackState = $enum:crime_interruptAttackState.attacking" />
								</Else>
							</EntityContextCheck>
						</Then>
						<Else canSkip="1">
							<Expression expressions="$attackState = $enum:crime_interruptAttackState.attacking" />
						</Else>
					</IfElseCondition>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="currentUrger" comment="" />
				<Variable name="attackData" comment="" />
				<Variable name="attackState" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Else>
											</CheckRelationshipInterval_SoulToSoul>
										</Sequence>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</EntityContextCheck>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</IfElseCondition>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>