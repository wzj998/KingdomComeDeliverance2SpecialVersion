<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_reviseInformations" is_function="1">
		<Variables>
			<Variable name="attackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
			<Variable name="informationTransformed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="informations_value" type="information" values="" isPersistent="0" form="single" />
			<Variable name="killedByHorse" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="newInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="oldInformation" type="information" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="informations" type="information" values="" isPersistent="0" form="array" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ForEach startIndex="0" step="1" array="$informations" iterator="" value="$informations_value" break="">
						<Switch>
							<IfCondition failOnCondition="false" condition="$informations_value.label == &apos;assault&apos; | &#10;$informations_value.label == &apos;aggression&apos;">
								<CheckWuidValid wuid="$informations_value.perceivedWuid" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<IsDeadCheck SoulWUID="$informations_value.perceivedWuid" FailSubtMissing="false" saveVersion="2">
											<Then canSkip="1">
												<Selector>
													<Sequence>
														<RetrieveInformation PerceivedWuid="$informations_value.perceivedWuid" label="&apos;murder&apos;" OutVariable="$oldInformation" />
														<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$oldInformation" skipAllDynamicInfo="true" skipMetadata="false" nodeLabel="17045698" />
														<Expression expressions="$informationTransformed = true" />
													</Sequence>
													<Sequence>
														<CreateInformationWrapper Label="&apos;murder&apos;" PerceivedWuid="$informations_value.perceivedWuid" PositionType="positionVec3" PositionVec3="$informations_value.position" PositionWuid="" Information="$newInformation" />
														<LockDynamicInformationValues Information="$newInformation">
															<Sequence>
																<LockDynamicInformationValues Information="$informations_value">
																	<GetDynamicInformationValue Information="$informations_value" Tag="&apos;kind&apos;" Out="$attackKind" />
																</LockDynamicInformationValues>
																<Expression expressions="$killedByHorse = $attackKind == $enum:crime_attackKind.collision" />
																<SetDynamicInformationValue Information="$newInformation" Tag="&apos;killedByHorse&apos;" Variable="$killedByHorse" Type="" Value="" />
															</Sequence>
														</LockDynamicInformationValues>
														<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$newInformation" skipAllDynamicInfo="false" skipMetadata="false" nodeLabel="79198925" />
														<Expression expressions="$informationTransformed = true" />
													</Sequence>
												</Selector>
											</Then>
											<Else canSkip="1">
												<IfCondition failOnCondition="false" condition="$informations_value.label == &apos;aggression&apos;">
													<SuppressFailure>
														<Sequence>
															<RetrieveInformation PerceivedWuid="$informations_value.perceivedWuid" label="&apos;assault&apos;" OutVariable="$oldInformation" />
															<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$oldInformation" skipAllDynamicInfo="true" skipMetadata="false" nodeLabel="33974981" />
															<Expression expressions="$informationTransformed = true" />
														</Sequence>
													</SuppressFailure>
												</IfCondition>
											</Else>
										</IsDeadCheck>
									</Then>
								</CheckWuidValid>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$informations_value.label == &apos;assaultByDog&apos; | &#10;$informations_value.label == &apos;murderByDog&apos;">
								<CheckWuidValid wuid="$informations_value.perceivedWuid" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Selector>
											<Sequence>
												<RetrieveInformation PerceivedWuid="$informations_value.perceivedWuid" label="&apos;murder&apos;" OutVariable="$oldInformation" />
												<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$oldInformation" skipAllDynamicInfo="true" skipMetadata="false" nodeLabel="16602073" />
												<Expression expressions="$informationTransformed = true" />
											</Sequence>
											<IfCondition failOnCondition="false" condition="$informations_value.label == &apos;assaultByDog&apos;">
												<IsDeadCheck SoulWUID="$informations_value.perceivedWuid" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<Selector>
															<Sequence>
																<RetrieveInformation PerceivedWuid="$informations_value.perceivedWuid" label="&apos;murderByDog&apos;" OutVariable="$oldInformation" />
																<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$oldInformation" skipAllDynamicInfo="true" skipMetadata="false" nodeLabel="51894016" />
																<Expression expressions="$informationTransformed = true" />
															</Sequence>
															<Sequence>
																<CreateInformationWrapper Label="&apos;murderByDog&apos;" PerceivedWuid="$informations_value.perceivedWuid" PositionType="positionVec3" PositionVec3="$informations_value.position" PositionWuid="" Information="$newInformation" />
																<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$newInformation" skipAllDynamicInfo="false" skipMetadata="false" nodeLabel="16919933" />
																<Expression expressions="$informationTransformed = true" />
															</Sequence>
														</Selector>
													</Then>
												</IsDeadCheck>
											</IfCondition>
										</Selector>
									</Then>
								</CheckWuidValid>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$informations_value.label == &apos;assaultAnimal&apos;">
								<CheckWuidValid wuid="$informations_value.perceivedWuid" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<IsDeadCheck SoulWUID="$informations_value.perceivedWuid" FailSubtMissing="false" saveVersion="2">
											<Then canSkip="1">
												<Selector>
													<Sequence>
														<RetrieveInformation PerceivedWuid="$informations_value.perceivedWuid" label="&apos;murderAnimal&apos;" OutVariable="$oldInformation" />
														<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$oldInformation" skipAllDynamicInfo="true" skipMetadata="false" nodeLabel="51617204" />
														<Expression expressions="$informationTransformed = true" />
													</Sequence>
													<Sequence>
														<CreateInformationWrapper Label="&apos;murderAnimal&apos;" PerceivedWuid="$informations_value.perceivedWuid" PositionType="positionVec3" PositionVec3="$informations_value.position" PositionWuid="" Information="$newInformation" />
														<Function_crime_transformInformation a_originalInformation="$informations_value" b_newInformation="$newInformation" skipAllDynamicInfo="false" skipMetadata="false" nodeLabel="20302052" />
														<Expression expressions="$informationTransformed = true" />
													</Sequence>
												</Selector>
											</Then>
											<Else canSkip="1">
												<Success />
											</Else>
										</IsDeadCheck>
									</Then>
								</CheckWuidValid>
							</IfCondition>
							<DefaultBranch>
								<Success />
							</DefaultBranch>
						</Switch>
					</ForEach>
					<IfCondition failOnCondition="false" condition="$informationTransformed">
						<Function_crime_broadcastCooperationNotification cooperationNotification="$enum:crime_cooperationNotification.informationTransformed" nodeLabel="52049785" />
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="attackKind" comment="" />
				<Variable name="informationTransformed" comment="" />
				<Variable name="informations_value" comment="" />
				<Variable name="killedByHorse" comment="" />
				<Variable name="newInformation" comment="" />
				<Variable name="oldInformation" comment="" />
				<Variable name="informations" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RetrieveInformation>
															<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_transformInformation>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</CreateInformationWrapper>
															<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetDynamicInformationValue>
																	</LockDynamicInformationValues>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</SetDynamicInformationValue>
																</Sequence>
															</LockDynamicInformationValues>
															<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_transformInformation>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
													</Selector>
												</Then>
												<Else>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</RetrieveInformation>
																<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_crime_transformInformation>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</SuppressFailure>
													</IfCondition>
												</Else>
											</IsDeadCheck>
										</Then>
									</CheckWuidValid>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</RetrieveInformation>
													<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_crime_transformInformation>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</RetrieveInformation>
																	<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_transformInformation>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</CreateInformationWrapper>
																	<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_crime_transformInformation>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</Selector>
														</Then>
													</IsDeadCheck>
												</IfCondition>
											</Selector>
										</Then>
									</CheckWuidValid>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<CheckWuidValid hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RetrieveInformation>
															<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_transformInformation>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<CreateInformationWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</CreateInformationWrapper>
															<Function_crime_transformInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_crime_transformInformation>
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
														</Sequence>
													</Selector>
												</Then>
												<Else>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Else>
											</IsDeadCheck>
										</Then>
									</CheckWuidValid>
								</IfCondition>
								<DefaultBranch>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</DefaultBranch>
							</Switch>
						</ForEach>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_crime_broadcastCooperationNotification hasInputBreakpoint="0" comment="Notify reactors that SOME informations got transformed, they have to check for themselves" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_crime_broadcastCooperationNotification>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>