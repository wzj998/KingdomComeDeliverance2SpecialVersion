<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getResolutionDialogIntroKind" is_function="1">
    <Variables>
      <Variable name="information" type="information" values="" isPersistent="0" form="single" />
      <Variable name="isResistingArrest" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="lastHit" type="crime:lastHitByPlayer" values="" isPersistent="0" form="single" />
      <Variable name="lastHits" type="crime:lastHitByPlayer" values="" isPersistent="0" form="array" />
      <Variable name="lastVictims" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="postResolveSubscribers_value" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="crimeSeen" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="currentInterrupt" type="enum:crime_reactionKind" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="postResolveSubscribers" type="_wuid" values="" isPersistent="0" form="array" requirementType="In" optional="1" />
      <Variable name="previousReaction" type="enum:crime_reactionKind" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="repeatedSurrender" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="resolutionDialogIntroKind" type="enum:crime_resolutionDialogIntroKind" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IsUnconsciousCheck SoulWUID="$__player" FailSubtMissing="false" saveVersion="2">
          <Then canSkip="1">
            <IfElseCondition failOnCondition="false" condition="$currentInterrupt == $enum:crime_reactionKind.attack" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.resistingArrest_beaten" />
              </Then>
              <Else canSkip="1">
                <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.unconscious" />
              </Else>
            </IfElseCondition>
          </Then>
          <Else canSkip="1">
            <IfElseCondition failOnCondition="false" condition="$currentInterrupt == $enum:crime_reactionKind.arrest" saveVersion="2">
              <Then canSkip="1">
                <IfElseCondition failOnCondition="false" condition="$previousReaction == $enum:crime_reactionKind.lookAround" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.notResistingArrest_lookedFor" />
                  </Then>
                  <Else canSkip="1">
                    <IfElseCondition failOnCondition="false" condition="$crimeSeen" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.notResistingArrest_crimeSeenByGuard" />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.notResistingArrest_foundAccidentally" />
                      </Else>
                    </IfElseCondition>
                  </Else>
                </IfElseCondition>
              </Then>
              <Else canSkip="1">
                <IfElseCondition failOnCondition="false" condition="$repeatedSurrender" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.resistingArrest_repeated" />
                  </Then>
                  <Else canSkip="1">
                    <Sequence>
                      <Selector>
                        <Sequence>
                          <RetrieveInformation PerceivedWuid="$this.id" label="&apos;resistingArrest&apos;" OutVariable="$information" />
                          <Expression expressions="$isResistingArrest = true" />
                        </Sequence>
                        <IfCondition failOnCondition="false" condition="~$isResistingArrest">
                          <ForEach startIndex="0" step="1" array="$postResolveSubscribers" iterator="" value="$postResolveSubscribers_value" break="$isResistingArrest">
                            <Sequence>
                              <RetrieveInformation PerceivedWuid="$postResolveSubscribers_value" label="&apos;resistingArrest&apos;" OutVariable="$information" />
                              <Expression expressions="$isResistingArrest = true" />
                            </Sequence>
                          </ForEach>
                        </IfCondition>
                      </Selector>
                      <IfElseCondition failOnCondition="false" condition="$isResistingArrest" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.resistingArrest_violent" />
                        </Then>
                        <Else canSkip="1">
                          <Expression expressions="$resolutionDialogIntroKind = $enum:crime_resolutionDialogIntroKind.resistingArrest_running" />
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </Else>
                </IfElseCondition>
              </Else>
            </IfElseCondition>
          </Else>
        </IsUnconsciousCheck>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="information" comment="" />
        <Variable name="isResistingArrest" comment="" />
        <Variable name="lastHit" comment="" />
        <Variable name="lastHits" comment="" />
        <Variable name="lastVictims" comment="" />
        <Variable name="postResolveSubscribers_value" comment="" />
        <Variable name="crimeSeen" comment="" />
        <Variable name="currentInterrupt" comment="" />
        <Variable name="postResolveSubscribers" comment="" />
        <Variable name="previousReaction" comment="" />
        <Variable name="repeatedSurrender" comment="" />
        <Variable name="resolutionDialogIntroKind" comment="" />
        <Variable name="stimulusKind" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-1000" editorPosY="-300" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
                <Else>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Else>
              </IfElseCondition>
            </Then>
            <Else>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                    </Else>
                  </IfElseCondition>
                </Then>
                <Else>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </RetrieveInformation>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Sequence>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <RetrieveInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </RetrieveInformation>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </ForEach>
                          </IfCondition>
                        </Selector>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </Else>
                  </IfElseCondition>
                </Else>
              </IfElseCondition>
            </Else>
          </IsUnconsciousCheck>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>