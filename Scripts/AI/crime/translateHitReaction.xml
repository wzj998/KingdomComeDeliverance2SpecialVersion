<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_translateHitReaction" is_function="1">
    <Variables>
      <Variable name="hasWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="attackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="hitReaction" type="hitReaction" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$hitReaction.attacker == $__playerDog" saveVersion="2">
          <Then canSkip="1">
            <Expression expressions="$attackKind = $enum:crime_attackKind.dog" />
          </Then>
          <Else canSkip="1">
            <Switch>
              <IfCondition failOnCondition="false" condition="$hitReaction.hitType == $enum:HitReactionType.Collision">
                <EntityContextCheck context="switch_isHorse" target="$hitReaction.attacker" saveVersion="2">
                  <Then canSkip="1">
                    <SuppressFailure>
                      <Sequence>
                        <GraphSearch Origin="$hitReaction.attacker" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                          <LinkTagFilter tag="&apos;rider&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                          <WUIDFilter WUID="$__player" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                        </GraphSearch>
                        <Expression expressions="$attackKind = $enum:crime_attackKind.playerHorseCollision" />
                      </Sequence>
                    </SuppressFailure>
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$attackKind = $enum:crime_attackKind.collision" />
                  </Else>
                </EntityContextCheck>
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$hitReaction.hitType == $enum:HitReactionType.Melee">
                <Sequence>
                  <Function_crime_hasMeleeWeaponDrawn npc="$hitReaction.attacker" result="$hasWeaponDrawn" nodeLabel="29792951" />
                  <IfElseCondition failOnCondition="false" condition="$hasWeaponDrawn" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$attackKind = $enum:crime_attackKind.armed" />
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$attackKind = $enum:crime_attackKind.unarmed" />
                    </Else>
                  </IfElseCondition>
                </Sequence>
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$hitReaction.hitType == $enum:HitReactionType.Bullet">
                <Expression expressions="$attackKind = $enum:crime_attackKind.missile" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$hitReaction.hitType == $enum:HitReactionType.MeleeStealth">
                <Expression expressions="$attackKind = $enum:crime_attackKind.stealth" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$hitReaction.hitType == $enum:HitReactionType.Decoy">
                <Expression expressions="$attackKind = $enum:crime_attackKind.pebble" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$hitReaction.hitType == $enum:HitReactionType.Stone">
                <Expression expressions="$attackKind = $enum:crime_attackKind.stone" />
              </IfCondition>
              <DefaultBranch>
                <Success />
              </DefaultBranch>
            </Switch>
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="hasWeaponDrawn" comment="" />
        <Variable name="attackKind" comment="" />
        <Variable name="hitReaction" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Then>
            <Else>
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </LinkTagFilter>
                            <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </WUIDFilter>
                          </GraphSearch>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </SuppressFailure>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </EntityContextCheck>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Function_crime_hasMeleeWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Function_crime_hasMeleeWeaponDrawn>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
                <DefaultBranch>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </DefaultBranch>
              </Switch>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>