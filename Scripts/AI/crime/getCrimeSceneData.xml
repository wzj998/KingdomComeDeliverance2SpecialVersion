<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getCrimeSceneData" is_function="1">
    <Variables>
      <Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="mates" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
      <Variable name="reactorData" type="_wuid,crime:reactor" values="" isPersistent="0" form="custom_associative" />
      <Variable name="reactorData_crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" />
      <Variable name="reactorData_key" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="reactorData_reactionPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="reactorData_reactionType" type="enum:crime_reactionType" values="" isPersistent="0" form="single" />
      <Variable name="reactorData_stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" />
      <Variable name="reactorData_value" type="crime:reactor" values="" isPersistent="0" form="single" />
      <Variable name="reactorWithinRelevantDistance" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="reactors" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="removeLink" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="authorityOnSceneReactionType" type="enum:crime_reactionType" values="$enum:crime_reactionType.unknown" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="crimeLevel" type="enum:crime_crimeLevel" values="" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="informations" type="information" values="" isPersistent="0" form="array" requirementType="Out" />
      <Variable name="isNonAuthorityArrest" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="pos" type="vec3" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reactorsCountByType" type="enum:crime_reactionType,_int" values="" isPersistent="0" form="custom_associative" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <Sequence>
          <IfElseCondition failOnCondition="false" condition="$isNonAuthorityArrest" saveVersion="2">
            <Then canSkip="1">
              <Sequence>
                <Function_crime_getMates target="$this.id" mates="$mates" nodeLabel="75169073" />
                <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                  <LinkDataFilter tag="&apos;crime_reactor&apos;" condition="$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.selfhelp | &#10;$__link_crime_reactor.reactionKind == $enum:crime_reactionKind.attack" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                  <WUIDFilter WUID="$mates" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                  <EvaLLyzer Expresion="$reactorData[$__to] = $__link_crime_reactor" Quantifiers="ForAll" saveVersion="2" />
                </GraphSearch>
              </Sequence>
            </Then>
            <Else canSkip="1">
              <Sequence>
                <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;crime_reactor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                  <NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
                    <Child0 canSkip="1">
                      <WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                    </Child0>
                  </NegationOp>
                  <EvaLLyzer Expresion="$reactorData[$__to] = $__link_crime_reactor" Quantifiers="ForAll" saveVersion="2" />
                </GraphSearch>
              </Sequence>
            </Else>
          </IfElseCondition>
          <Expression expressions="$reactorsCountByType[$enum:crime_reactionType.passive] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.reactToCorpse] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.watchTrespass] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.reportNonattributedCrime] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.blindInvestigate] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.shooterInvestigate] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.reactToUnconsciousBody] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.warnOrFrisk] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.report] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.investigate] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.arrest] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.pickUpItem] = 0 &#10;$reactorsCountByType[$enum:crime_reactionType.banishCompanion] = 0" />
          <GetTime TimeType="GameTime" OutVar="$now" Delta="" />
          <ForEach startIndex="0" step="1" array="$reactorData" iterator="$reactorData_key" value="$reactorData_value" break="">
            <Sequence>
              <ReinitVariable variable="$removeLink" />
              <IfElseCondition failOnCondition="false" condition="$reactorData_value.reservation &amp; &#10;$reactorData_value.timeCreated &lt; ($now - 10000)" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$removeLink = true" />
                </Then>
                <Else canSkip="1">
                  <IsDeadCheck SoulWUID="$reactorData_key" FailSubtMissing="false" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$removeLink = true" />
                    </Then>
                    <Else canSkip="1">
                      <IsUnconsciousCheck SoulWUID="$reactorData_key" FailSubtMissing="false" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$removeLink = true" />
                        </Then>
                        <Else canSkip="1">
                          <Success />
                        </Else>
                      </IsUnconsciousCheck>
                    </Else>
                  </IsDeadCheck>
                </Else>
              </IfElseCondition>
              <IfElseCondition failOnCondition="false" condition="$removeLink" saveVersion="2">
                <Then canSkip="1">
                  <Sequence>
                    <RemoveLink From="$__player" To="$reactorData_key" Tag="&apos;crime_reactor&apos;" LinkOpHandleMode="Success" />
                    <InstantSendMessageToNPC target="$reactorData_key" type="&apos;crime:demotivation&apos;" values="" />
                  </Sequence>
                </Then>
                <Else canSkip="1">
                  <Sequence>
                    <MeasureDistance position1="$pos" position2="$reactorData_value.information.position" mode="ThreeDimensions" result="$distance" />
                    <Expression expressions="$reactorWithinRelevantDistance = $distance &lt; $data:script_param[&apos;crime_crimeSceneSpatialSize&apos;].value" />
                    <IfCondition failOnCondition="false" condition="~$reactorWithinRelevantDistance &amp; &#10;( &#10; $reactorData_value.reactionKind == $enum:crime_reactionKind.arrest | &#10; $reactorData_value.reactionKind == $enum:crime_reactionKind.attack | &#10; $reactorData_value.reactionKind == $enum:crime_reactionKind.selfhelp | &#10; $reactorData_value.reactionKind == $enum:crime_reactionKind.warnPlayer | &#10; $reactorData_value.reactionKind == $enum:crime_reactionKind.watchTrespass &#10;)">
                      <Sequence>
                        <GetSpatialInfo In="$reactorData_key" Out="$reactorData_reactionPos" What="Position" />
                        <MeasureDistance position1="$pos" position2="$reactorData_reactionPos" mode="ThreeDimensions" result="$distance" />
                        <Expression expressions="$reactorWithinRelevantDistance = $distance &lt; $data:script_param[&apos;crime_crimeSceneSpatialSize&apos;].value * 2" />
                      </Sequence>
                    </IfCondition>
                    <IfCondition failOnCondition="false" condition="$reactorWithinRelevantDistance">
                      <Sequence>
                        <Function_crime_getReactorStimulusKind reactorData="$reactorData_value" stimulusKind="$reactorData_stimulusKind" nodeLabel="48224597" />
                        <GetCrimeLevelByStimulusKind StimulusKind="$reactorData_stimulusKind" CrimeLevel="$reactorData_crimeLevel" />
                        <IfCondition failOnCondition="false" condition="$crimeLevel &lt; $reactorData_crimeLevel">
                          <Expression expressions="$crimeLevel = $reactorData_crimeLevel" />
                        </IfCondition>
                        <PushToArray array="$reactors" value="$reactorData_key" direction="Back" />
                        <Function_crime_getReactionType reactionKind="$reactorData_value.reactionKind" stimulusKind="$reactorData_stimulusKind" reactionType="$reactorData_reactionType" nodeLabel="22147866" />
                        <IfCondition failOnCondition="false" condition="$reactorData_reactionType ~= $enum:crime_reactionType.unknown">
                          <Expression expressions="$reactorsCountByType[$reactorData_reactionType] += 1" />
                        </IfCondition>
                        <EntityContextCheck context="crime_isAuthority" target="$reactorData_key" saveVersion="2">
                          <Then canSkip="1">
                            <IfCondition failOnCondition="false" condition="($reactorData_reactionType == $enum:crime_reactionType.reactToCorpse | &#10; $reactorData_reactionType == $enum:crime_reactionType.watchTrespass | &#10; $reactorData_reactionType == $enum:crime_reactionType.blindInvestigate | &#10; $reactorData_reactionType == $enum:crime_reactionType.shooterInvestigate | &#10; $reactorData_reactionType == $enum:crime_reactionType.reactToUnconsciousBody | &#10; $reactorData_reactionType == $enum:crime_reactionType.warnOrFrisk | &#10; $reactorData_reactionType == $enum:crime_reactionType.investigate | &#10; $reactorData_reactionType == $enum:crime_reactionType.arrest) &amp; &#10;$reactorData_reactionType &gt; $authorityOnSceneReactionType">
                              <Expression expressions="$authorityOnSceneReactionType = $reactorData_reactionType" />
                            </IfCondition>
                          </Then>
                        </EntityContextCheck>
                      </Sequence>
                    </IfCondition>
                  </Sequence>
                </Else>
              </IfElseCondition>
            </Sequence>
          </ForEach>
          <PushToArray array="$reactors" value="$this.id" direction="Back" />
          <GetKnownInformationsFromGroup OutArray="$informations" Holders="$reactors" />
        </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="distance" comment="" />
        <Variable name="mates" comment="" />
        <Variable name="now" comment="" />
        <Variable name="reactorData" comment="" />
        <Variable name="reactorData_crimeLevel" comment="" />
        <Variable name="reactorData_key" comment="" />
        <Variable name="reactorData_reactionPos" comment="" />
        <Variable name="reactorData_reactionType" comment="" />
        <Variable name="reactorData_stimulusKind" comment="" />
        <Variable name="reactorData_value" comment="" />
        <Variable name="reactorWithinRelevantDistance" comment="" />
        <Variable name="reactors" comment="" />
        <Variable name="removeLink" comment="" />
        <Variable name="authorityOnSceneReactionType" comment="" />
        <Variable name="crimeLevel" comment="" />
        <Variable name="informations" comment="" />
        <Variable name="isNonAuthorityArrest" comment="" />
        <Variable name="pos" comment="" />
        <Variable name="reactorsCountByType" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="520" editorPosY="260" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Function_crime_getMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Function_crime_getMates>
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                    <LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkDataFilter>
                    <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </WUIDFilter>
                    <EvaLLyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                    </EvaLLyzer>
                  </GraphSearch>
                </Sequence>
              </Then>
              <Else>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                    <NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Child0>
                        <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </WUIDFilter>
                      </Child0>
                    </NegationOp>
                    <EvaLLyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                    </EvaLLyzer>
                  </GraphSearch>
                </Sequence>
              </Else>
            </IfElseCondition>
            <Expression hasInputBreakpoint="0" comment="TODO: can i not have to do this?" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetTime>
            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReinitVariable>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Success>
                          </Else>
                        </IsUnconsciousCheck>
                      </Else>
                    </IsDeadCheck>
                  </Else>
                </IfElseCondition>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </RemoveLink>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </Sequence>
                  </Then>
                  <Else>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </MeasureDistance>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <IfCondition hasInputBreakpoint="0" comment="if the reactor is doing something where he follows player around then also consider his current position" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetSpatialInfo>
                          <MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </MeasureDistance>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </IfCondition>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Function_crime_getReactorStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Function_crime_getReactorStimulusKind>
                          <GetCrimeLevelByStimulusKind hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetCrimeLevelByStimulusKind>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </IfCondition>
                          <PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </PushToArray>
                          <Function_crime_getReactionType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Function_crime_getReactionType>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </IfCondition>
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <IfCondition hasInputBreakpoint="0" comment="find the most escalated reactionType from already reacting guards" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </IfCondition>
                            </Then>
                          </EntityContextCheck>
                        </Sequence>
                      </IfCondition>
                    </Sequence>
                  </Else>
                </IfElseCondition>
              </Sequence>
            </ForEach>
            <PushToArray hasInputBreakpoint="0" comment="TODO: a little ugly maybe" breakpointFlags="0">
              <OutputBreakpoints />
            </PushToArray>
            <GetKnownInformationsFromGroup hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetKnownInformationsFromGroup>
          </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>