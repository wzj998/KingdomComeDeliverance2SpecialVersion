<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getHomeDoors" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="doors" type="_wuid" values="" isPersistent="0" form="array" requirementType="Out" />
      <Variable name="excludeStorageType" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="home" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$excludeStorageType" saveVersion="2">
          <Then canSkip="1">
            <GraphSearch Origin="$home" Borders="" depth="3" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;home_area,area_union_member,crime_door&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;crime_door&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
              <LinkDataFilter tag="&apos;crime_door&apos;" condition="$__link_crime_door.type == $enum:crime_doorKind.entrance |  &#10;$__link_crime_door.type == $enum:crime_doorKind.basic" prune="true" negprune="unknown" Parent="" Child="" Data="" />
              <Nodalyzer Quantifiers="ForAll" Parent="" Child="$doors" saveVersion="2" />
            </GraphSearch>
          </Then>
          <Else canSkip="1">
            <GraphSearch Origin="$home" Borders="" depth="3" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;home_area,area_union_member,crime_door&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;crime_door&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
              <Nodalyzer Quantifiers="ForAll" Parent="" Child="$doors" saveVersion="2" />
            </GraphSearch>
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doors" comment="" />
        <Variable name="excludeStorageType" comment="" />
        <Variable name="home" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
                <LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkDataFilter>
                <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                </Nodalyzer>
              </GraphSearch>
            </Then>
            <Else>
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
                <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                </Nodalyzer>
              </GraphSearch>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>