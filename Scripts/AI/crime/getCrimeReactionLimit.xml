<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_getCrimeReactionLimit" is_function="1">
		<Variables>
			<Variable name="crimeVictim" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="informations_value" type="information" values="" isPersistent="0" form="single" />
			<Variable name="informations_value_price" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="nonViolentScore" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="statusMultiplier" type="_float" values="1" isPersistent="0" form="single" />
			<Variable name="violentScore" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="informations" type="information" values="" isPersistent="0" form="array" requirementType="In" />
			<Variable name="reactionLimit" type="_float" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<ForEach startIndex="0" step="1" array="$informations" iterator="" value="$informations_value" break="">
						<IfCondition failOnCondition="false" condition="$data:crime[$informations_value.label].isCrime">
							<Sequence>
								<IfElseCondition failOnCondition="false" condition="$informations_value.label == &apos;theft&apos;" saveVersion="2">
									<Then canSkip="1">
										<LockDynamicInformationValues Information="$informations_value">
											<GetDynamicInformationValue Information="$informations_value" Tag="&apos;value&apos;" Out="$informations_value_price" />
										</LockDynamicInformationValues>
									</Then>
									<Else canSkip="1">
										<Expression expressions="$informations_value_price = $data:crime[$informations_value.label].fine" />
									</Else>
								</IfElseCondition>
								<VarOperation varName="$crimeVictim" targetVarName="" operation="Reinit" argument="" />
								<VarOperation varName="$statusMultiplier" targetVarName="" operation="Reinit" argument="" />
								<IfCondition failOnCondition="false" condition="$data:crime[$informations_value.label].scalingWithSocialClass">
									<Sequence>
										<DetermineCrimeVictim Information="$informations_value" Victim="$crimeVictim" />
										<IfCondition failOnCondition="false" condition="$crimeVictim ~= $__null">
											<GetStatusMultiplier Victim="$crimeVictim" Multiplier="$statusMultiplier" />
										</IfCondition>
									</Sequence>
								</IfCondition>
								<IfElseCondition failOnCondition="false" condition="$data:crime[$informations_value.label].isViolent" saveVersion="2">
									<Then canSkip="1">
										<IfElseCondition failOnCondition="false" condition="$informations_value.label == &apos;murder&apos;" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$violentScore += $statusMultiplier + 2" />
											</Then>
											<Else canSkip="1">
												<Expression expressions="$violentScore += $statusMultiplier" />
											</Else>
										</IfElseCondition>
									</Then>
									<Else canSkip="1">
										<Expression expressions="$nonViolentScore += (($informations_value_price * $statusMultiplier) / $data:script_param[&apos;crime_limits_additionalReactorPerFineValue&apos;].value) + 1" />
									</Else>
								</IfElseCondition>
							</Sequence>
						</IfCondition>
					</ForEach>
					<ExecuteLua code="data.reactionLimit = data.nonViolentScore + data.violentScore + (math.max(player.soul:GetDerivedStat(&apos;bad&apos;), 0.5) - 0.5) * 6" />
					<Clamp value="$reactionLimit" lowerBoundary="2.000000" upperBoundary="8.000000" result="$reactionLimit" />
					<NumericalOperation In1VariableName="reactionLimit" In2VariableName="" In3VariableName="" OutVariableName="$reactionLimit" Operation="round" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="crimeVictim" comment="" />
				<Variable name="informations_value" comment="" />
				<Variable name="informations_value_price" comment="" />
				<Variable name="nonViolentScore" comment="" />
				<Variable name="statusMultiplier" comment="" />
				<Variable name="violentScore" comment="" />
				<Variable name="informations" comment="" />
				<Variable name="reactionLimit" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetDynamicInformationValue>
											</LockDynamicInformationValues>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
									<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</VarOperation>
									<VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</VarOperation>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<DetermineCrimeVictim hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</DetermineCrimeVictim>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetStatusMultiplier hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetStatusMultiplier>
											</IfCondition>
										</Sequence>
									</IfCondition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="TODO: was initially * 3 but felt like too much" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Else>
											</IfElseCondition>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
								</Sequence>
							</IfCondition>
						</ForEach>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Clamp hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Clamp>
						<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</NumericalOperation>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>