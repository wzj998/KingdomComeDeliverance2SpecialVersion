<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_chooseReportDestination_security" is_function="1">
    <Variables>
      <Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="mates" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="mates_value" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Function is obsolete. Use its code successor.&apos;" />
      </Behavior>
    </Root>
    <ForestContainer>
        <Sequence>
        <GetMatesAliveAndWithinDistance Target="$this.id" Distance="$data:script_param[&apos;crime_maximumReportDistance_security&apos;].value" Mates="$mates" />
          <ForEach startIndex="0" step="1" array="$mates" iterator="" value="$mates_value" break="$break">
            <EntityContextCheck context="crime_isSecurity" target="$mates_value" saveVersion="2">
              <Then canSkip="1">
                <EntityContextCheck context="crime_interruptFlee" target="$mates_value" saveVersion="2">
                  <Else canSkip="1">
                    <EntityContextCheck context="crime_interruptMercy" target="$mates_value" saveVersion="2">
                      <Else canSkip="1">
                        <EntityContextCheck context="crime_sleeping" target="$mates_value" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$destination = $mates_value" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$destination = $mates_value &#10;$break = true" />
                          </Else>
                        </EntityContextCheck>
                      </Else>
                    </EntityContextCheck>
                  </Else>
                </EntityContextCheck>
              </Then>
            </EntityContextCheck>
          </ForEach>
        </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="break" comment="" />
        <Variable name="distance" comment="" />
        <Variable name="mates" comment="" />
        <Variable name="mates_value" comment="" />
        <Variable name="destination" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="280" editorPosY="270" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
          <GetMatesAliveAndWithinDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </GetMatesAliveAndWithinDistance>
            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Else>
                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Else>
                          <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </EntityContextCheck>
                        </Else>
                      </EntityContextCheck>
                    </Else>
                  </EntityContextCheck>
                </Then>
              </EntityContextCheck>
            </ForEach>
          </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>