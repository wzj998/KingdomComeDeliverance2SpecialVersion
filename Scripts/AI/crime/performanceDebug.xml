<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_performanceDebug" is_function="1">
		<Variables>
			<Variable name="data" type="crime:performanceDebug" values="" isPersistent="0" form="single" />
			<Variable name="delta" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="interrupt" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="prevReaction" type="enum:crime_reactionKind" values="" isPersistent="0" form="single" />
			<Variable name="prevString" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="interruptIn" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="type" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<SuppressFailure>
						<Sequence>
							<Switch>
								<IfCondition failOnCondition="false" condition="$interruptIn == $enum:crime_reactionKind.attack">
									<Expression expressions="$interrupt = &apos;ATTACK&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$interruptIn == $enum:crime_reactionKind.report">
									<Expression expressions="$interrupt = &apos;REPORT&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$interruptIn == $enum:crime_reactionKind.flee">
									<Expression expressions="$interrupt = &apos;FLEE&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$interruptIn == $enum:crime_reactionKind.watch">
									<Expression expressions="$interrupt = &apos;WATCH&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$interruptIn == $enum:crime_reactionKind.lookAround">
									<Expression expressions="$interrupt = &apos;LOOKAROUND&apos;" />
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$interruptIn == $enum:crime_reactionKind.check">
									<Expression expressions="$interrupt = &apos;CHECK&apos;" />
								</IfCondition>
								<DefaultBranch>
									<Expression expressions="$interrupt = &apos;OTHER&apos;" />
								</DefaultBranch>
							</Switch>
							<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
							<Switch>
								<IfCondition failOnCondition="false" condition="$type == 0">
									<Sequence>
										<GetReactionKindByContext Target="$this.id" ReactionKind="$prevReaction" />
										<Expression expressions="$data.time = $now &#10;$data.type = $type &#10;$data.previousReaction = $prevReaction" />
										<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_performanceDebug&apos;" Data="$data" LinkOpHandleMode="OverWrite" />
									</Sequence>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$type == 1">
									<Sequence>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;crime_performanceDebug&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$data" />
										</GraphSearch>
										<Expression expressions="$delta = $now - $data.time &#10;$data.time = $now &#10;$data.type = $type &#10;$prevReaction = $data.previousReaction" />
										<Switch>
											<IfCondition failOnCondition="false" condition="$prevReaction == $enum:crime_reactionKind.attack">
												<Expression expressions="$prevString = &apos;ATTACK&apos;" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$prevReaction == $enum:crime_reactionKind.report">
												<Expression expressions="$prevString = &apos;REPORT&apos;" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$prevReaction == $enum:crime_reactionKind.flee">
												<Expression expressions="$prevString = &apos;FLEE&apos;" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$prevReaction == $enum:crime_reactionKind.watch">
												<Expression expressions="$prevString = &apos;WATCH&apos;" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$prevReaction == $enum:crime_reactionKind.lookAround">
												<Expression expressions="$prevString = &apos;LOOKAROUND&apos;" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$prevReaction == $enum:crime_reactionKind.check">
												<Expression expressions="$prevString = &apos;CHECK&apos;" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$prevReaction ~= $enum:crime_reactionKind.unknown">
												<Expression expressions="$prevString = &apos;OTHER&apos;" />
											</IfCondition>
											<DefaultBranch>
												<Expression expressions="$prevString = &apos;NONE&apos;" />
											</DefaultBranch>
										</Switch>
										<LogToConsole LogLevel="Error" Message="&apos;PERFORMANCELOG-| $this.name || INTERRUPT |+| $delta |-| $interrupt |*| $prevString&apos;" />
										<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_performanceDebug&apos;" Data="$data" LinkOpHandleMode="OverWrite" />
									</Sequence>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$type == 2">
									<Sequence>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;crime_performanceDebug&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$data" />
										</GraphSearch>
										<Expression expressions="$delta = $now - $data.time &#10;$data.time = $now &#10;$data.type = $type" />
										<LogToConsole LogLevel="Error" Message="&apos;PERFORMANCELOG-| $this.name || ACTION |+| $delta |-| $interrupt&apos;" />
										<AddLink From="$this.id" To="$this.id" Tag="&apos;crime_performanceDebug&apos;" Data="$data" LinkOpHandleMode="OverWrite" />
									</Sequence>
								</IfCondition>
								<DefaultBranch>
									<Success />
								</DefaultBranch>
							</Switch>
						</Sequence>
					</SuppressFailure>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="data" comment="" />
				<Variable name="delta" comment="" />
				<Variable name="interrupt" comment="" />
				<Variable name="now" comment="" />
				<Variable name="prevReaction" comment="" />
				<Variable name="prevString" comment="" />
				<Variable name="interruptIn" comment="" />
				<Variable name="type" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
									<DefaultBranch>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</DefaultBranch>
								</Switch>
								<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetTime>
								<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetReactionKindByContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetReactionKindByContext>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
										</Sequence>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<DefaultBranch>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</DefaultBranch>
											</Switch>
											<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LogToConsole>
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
										</Sequence>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LogToConsole>
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
										</Sequence>
									</IfCondition>
									<DefaultBranch>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</DefaultBranch>
								</Switch>
							</Sequence>
						</SuppressFailure>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>