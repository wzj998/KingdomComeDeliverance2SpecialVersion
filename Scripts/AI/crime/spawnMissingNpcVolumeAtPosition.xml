<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_spawnMissingNpcVolumeAtPosition" is_function="1">
		<Variables>
			<Variable name="buddy" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="distanceToBuddy" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="distanceToNearbyNpc" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="missingNpcData" type="crime:missingNpcData" values="" isPersistent="0" form="single" />
			<Variable name="nearbyNpc" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="nearbyNpcs" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="volume" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="volumeParams" type="perceptibleParams" values="" isPersistent="0" form="single" />
			<Variable name="volumePosition" type="vec3" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="destination" type="vec3" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$volumeParams.visibility = 0.002 &#10;$volumeParams.conspicuousness = 1" />
					<Selector>
						<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;scheduler_currentBehaviorDestination&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$volumePosition" />
						</GraphSearch>
						<GetSpatialInfo In="$this.id" Out="$volumePosition" What="Position" />
					</Selector>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;crime_missingNpcReverse&apos;" prune="true" negprune="unknown" Parent="" Child="$volume" Data="" />
					</GraphSearch>
					<IfElseCondition failOnCondition="false" condition="$volume == $__null" saveVersion="2">
						<Then canSkip="1">
							<Sequence>
								<SpawnExpiringPerceptibleVolume Expiration="&apos;20m&apos;" TimerType="GameTime" Position="$volumePosition" Radius="1.000000" Height="1.000000" Label="&apos;crime_missingNpc&apos;" OnlyVisiblePointsFromCenter="true" PerceptibleParams="$volumeParams" OutWuid="$volume" />
								<IgnorePerception PerceptorObject="$this.id" PerceptibleObject="$volume" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
								<IgnorePerception PerceptorObject="$__player" PerceptibleObject="$volume" IgnoreFor="&apos;-1&apos;" TimerType="GameTime" Uninterruptible="false" Persistent="true" />
								<CircularSpatialQuery Radius="5.000000" Center="$this.id" ToFill="$nearbyNpcs" Precision="Exact" Filter="ConsciousHumanNPCsPlayerExcluded" />
								<ForEach startIndex="0" step="1" array="$nearbyNpcs" iterator="" value="$nearbyNpc" break="">
									<IfCondition failOnCondition="false" condition="$nearbyNpc ~= $this.id">
										<EntityContextCheck context="crime_reactToMissingNpcVolume" target="$nearbyNpc" saveVersion="2">
											<Then canSkip="1">
												<CheckRelationshipInterval_SoulToSoul TargetSoul="$nearbyNpcs" Soul="$this.id" Flag="friend" saveVersion="2">
													<Then canSkip="1">
														<Sequence>
															<MeasureDistance position1="$this.id" position2="$nearbyNpc" mode="TwoDimensions" result="$distanceToNearbyNpc" />
															<IfCondition failOnCondition="false" condition="$buddy == $__null | &#10;$distanceToBuddy &gt; $distanceToNearbyNpc">
																<Expression expressions="$buddy = $nearbyNpc &#10;$distanceToBuddy = $distanceToNearbyNpc" />
															</IfCondition>
														</Sequence>
													</Then>
													<Else canSkip="1">
														<Success />
													</Else>
												</CheckRelationshipInterval_SoulToSoul>
											</Then>
										</EntityContextCheck>
									</IfCondition>
								</ForEach>
								<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
								<Expression expressions="$missingNpcData.destination = $destination &#10;$missingNpcData.time = $now &#10;$missingNpcData.buddy = $buddy" />
								<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;crime_spawnMissingNpcVolume_smartObject&apos;" prune="true" negprune="unknown" Parent="" Child="$missingNpcData.smartObject" Data="" />
								</GraphSearch>
								<AddLink From="$volume" To="$this.id" Tag="&apos;crime_missingNpc&apos;" Data="$missingNpcData" LinkOpHandleMode="Error" />
							</Sequence>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<GraphSearch Origin="$volume" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;crime_missingNpc&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
									<Datalyzer Tag="&apos;crime_missingNpc&apos;" Quantifiers="Exists" Parent="" Child="" Data="$missingNpcData" saveVersion="2" />
								</GraphSearch>
								<Expression expressions="$missingNpcData.destination = $destination" />
								<AddLink From="$volume" To="$this.id" Tag="&apos;crime_missingNpc&apos;" Data="$missingNpcData" LinkOpHandleMode="OverWrite" />
							</Sequence>
						</Else>
					</IfElseCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="buddy" comment="" />
				<Variable name="distanceToBuddy" comment="" />
				<Variable name="distanceToNearbyNpc" comment="" />
				<Variable name="missingNpcData" comment="" />
				<Variable name="nearbyNpc" comment="" />
				<Variable name="nearbyNpcs" comment="" />
				<Variable name="now" comment="" />
				<Variable name="volume" comment="" />
				<Variable name="volumeParams" comment="" />
				<Variable name="volumePosition" comment="" />
				<Variable name="destination" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
							</GraphSearch>
							<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetSpatialInfo>
						</Selector>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SpawnExpiringPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SpawnExpiringPerceptibleVolume>
									<IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</IgnorePerception>
									<IgnorePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</IgnorePerception>
									<CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</CircularSpatialQuery>
									<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</MeasureDistance>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</IfCondition>
															</Sequence>
														</Then>
														<Else>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Else>
													</CheckRelationshipInterval_SoulToSoul>
												</Then>
											</EntityContextCheck>
										</IfCondition>
									</ForEach>
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AddLink>
								</Sequence>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
										<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WUIDFilter>
										<Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
										</Datalyzer>
									</GraphSearch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AddLink>
								</Sequence>
							</Else>
						</IfElseCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>