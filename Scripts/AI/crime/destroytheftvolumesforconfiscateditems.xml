<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_destroyTheftVolumesForConfiscatedItems" is_function="1">
		<Variables>
			<Variable name="stolenItems" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="stolenItems_value" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="stolenItems_value_isRelevant" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="stolenItems_value_owner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="theftVolume" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="theftVolumes" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="confiscationMethod" type="enum:confiscateItems" values="$enum:confiscateItems.none" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$confiscationMethod == $enum:confiscateItems.all | &#10;$confiscationMethod == $enum:confiscateItems.relevantOwnAndMates">
					<Sequence>
						<Function_crime_findStolenItems filterByInventory="" stolenItems="$stolenItems" nodeLabel="10013690" />
						<ForEach startIndex="0" step="1" array="$stolenItems" iterator="" value="$stolenItems_value" break="">
							<Sequence>
								<ReinitVariable variable="$stolenItems_value_isRelevant" />
								<GetOwner Object="$stolenItems_value" Owner="$stolenItems_value_owner" />
								<IfCondition failOnCondition="false" condition="$stolenItems_value_owner ~= $__null">
									<IfElseCondition failOnCondition="false" condition="$confiscationMethod == $enum:confiscateItems.all" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$stolenItems_value_isRelevant = true" />
										</Then>
										<Else canSkip="1">
											<IfElseCondition failOnCondition="false" condition="$stolenItems_value_owner == $this.id" saveVersion="2">
												<Then canSkip="1">
													<Expression expressions="$stolenItems_value_isRelevant = true" />
												</Then>
												<Else canSkip="1">
													<GetAreMates Npc1="$this.id" Npc2="$stolenItems_value_owner" AreMates="$stolenItems_value_isRelevant" />
												</Else>
											</IfElseCondition>
										</Else>
									</IfElseCondition>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$stolenItems_value_isRelevant">
									<Sequence>
										<GraphSearch Origin="$stolenItems_value_owner" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;stealDataReverse&apos;" prune="true" negprune="unknown" Parent="" Child="$theftVolume" Data="" />
											<ExistPath Origin="$theftVolume" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;stealData&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												<LinkDataFilter tag="&apos;stealData&apos;" condition="$__link_stealData.instance == $stolenItems[0].instance | &#10;($__link_stealData.instance == $__null &amp;  &#10;$__link_stealData.class == $stolenItems[0].class)" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</ExistPath>
											<Nodalyzer Quantifiers="ForAll" Parent="" Child="$theftVolumes" saveVersion="2" />
										</GraphSearch>
										<ForEach startIndex="0" step="1" array="$theftVolumes" iterator="" value="$theftVolume" break="">
											<DeSpawnPerceptibleVolume Wuid="$theftVolume" />
										</ForEach>
									</Sequence>
								</IfCondition>
							</Sequence>
						</ForEach>
					</Sequence>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="stolenItems" comment="" />
				<Variable name="stolenItems_value" comment="" />
				<Variable name="stolenItems_value_isRelevant" comment="" />
				<Variable name="stolenItems_value_owner" comment="" />
				<Variable name="theftVolume" comment="" />
				<Variable name="theftVolumes" comment="" />
				<Variable name="confiscationMethod" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_crime_findStolenItems hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_crime_findStolenItems>
							<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetOwner>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</Then>
													<Else>
														<GetAreMates hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetAreMates>
													</Else>
												</IfElseCondition>
											</Else>
										</IfElseCondition>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
												<ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
													<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkDataFilter>
												</ExistPath>
												<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
												</Nodalyzer>
											</GraphSearch>
											<ForEach hasInputBreakpoint="0" comment="there can be multiple for divisible items" breakpointFlags="0">
												<OutputBreakpoints />
												<DeSpawnPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</DeSpawnPerceptibleVolume>
											</ForEach>
										</Sequence>
									</IfCondition>
								</Sequence>
							</ForEach>
						</Sequence>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>