<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="crime_getReactionType" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="reactionKind" type="enum:crime_reactionKind" values="$enum:crime_reactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
      <Variable name="reactionType" type="enum:crime_reactionType" values="$enum:crime_reactionType.unknown" isPersistent="0" form="single" requirementType="Out" />
      <Variable name="stimulusKind" type="enum:crime_stimulusKind" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.arrest | &#10;$reactionKind == $enum:crime_reactionKind.attack | &#10;$reactionKind == $enum:crime_reactionKind.selfhelp">
            <Expression expressions="$reactionType = $enum:crime_reactionType.arrest" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="( &#10;$reactionKind == $enum:crime_reactionKind.lookAround | &#10;$reactionKind == $enum:crime_reactionKind.scan | &#10;$reactionKind == $enum:crime_reactionKind.check &#10;) &#10;&amp;  &#10;( &#10;$stimulusKind ~= $enum:crime_stimulusKind.corpse &amp; &#10;$stimulusKind ~= $enum:crime_stimulusKind.corpseMissing &amp; &#10;$stimulusKind ~= $enum:crime_stimulusKind.shooter &amp; &#10;$stimulusKind ~= $enum:crime_stimulusKind.sound &amp; &#10;$stimulusKind ~= $enum:crime_stimulusKind.trespass &#10;)">
            <Expression expressions="$reactionType = $enum:crime_reactionType.investigate" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="( &#10; $reactionKind == $enum:crime_reactionKind.report | &#10; $reactionKind == $enum:crime_reactionKind.returnWithHelp &#10;) &#10;&amp; &#10;$stimulusKind ~= $enum:crime_stimulusKind.corpse &#10;&amp; &#10;$stimulusKind ~= $enum:crime_stimulusKind.nonAttributedCrime">
            <Expression expressions="$reactionType = $enum:crime_reactionType.report" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.watchTrespass | &#10;$reactionKind == $enum:crime_reactionKind.watchCampTrespass">
            <Expression expressions="$reactionType = $enum:crime_reactionType.watchTrespass" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.lookAround &amp; &#10;$stimulusKind == $enum:crime_stimulusKind.shooter">
            <Expression expressions="$reactionType = $enum:crime_reactionType.shooterInvestigate" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.warnPlayer | &#10;$reactionKind == $enum:crime_reactionKind.frisk">
            <Expression expressions="$reactionType = $enum:crime_reactionType.warnOrFrisk" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.wakeUp">
            <Expression expressions="$reactionType = $enum:crime_reactionType.reactToUnconsciousBody" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.lookAround &amp; &#10;$stimulusKind == $enum:crime_stimulusKind.sound">
            <Expression expressions="$reactionType = $enum:crime_reactionType.blindInvestigate" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="($stimulusKind == $enum:crime_stimulusKind.corpse | &#10;$stimulusKind == $enum:crime_stimulusKind.lyingBody | &#10;$stimulusKind == $enum:crime_stimulusKind.corpseMissing) &amp; &#10;$reactionKind ~= $enum:crime_reactionKind.watch">
            <Expression expressions="$reactionType = $enum:crime_reactionType.reactToCorpse" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.report &amp; &#10;$stimulusKind == $enum:crime_stimulusKind.nonAttributedCrime">
            <Expression expressions="$reactionType = $enum:crime_reactionType.reportNonattributedCrime" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$reactionKind == $enum:crime_reactionKind.mindPlayer | &#10;$reactionKind == $enum:crime_reactionKind.watch | &#10;$reactionKind == $enum:crime_reactionKind.checkProperty">
            <Expression expressions="$reactionType = $enum:crime_reactionType.passive" />
          </IfCondition>
          <DefaultBranch>
            <Success />
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="reactionKind" comment="" />
        <Variable name="reactionType" comment="" />
        <Variable name="stimulusKind" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="TODO: maybe more stimuli?" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="TODO: more stuff needs to be filtered out, e. g. nonAttributed crimes etc." breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <DefaultBranch>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>