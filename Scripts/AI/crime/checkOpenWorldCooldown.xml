<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_checkOpenWorldCooldown" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="cooldownType" type="enum:openWorld_cooldownEventType" values="$enum:openWorld_cooldownEventType.dialogPlayerGreeting" isPersistent="0" form="single" requirementType="In" />
			<Variable name="crimeReactionKind" type="enum:crime_barkReactionKind" values="$enum:crime_barkReactionKind.unknown" isPersistent="0" form="single" requirementType="In" />
			<Variable name="crimeReactionPriority" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="npc" type="_wuid" values="$this.id" isPersistent="0" form="single" requirementType="In" />
			<Variable name="onCooldown" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Function_crime_checkOpenWorldCooldown_global cooldownType="$cooldownType" crimePriority="$crimeReactionPriority" crimeReactionKind="$crimeReactionKind" onCooldown="$onCooldown" nodeLabel="29257074" />
					<IfCondition failOnCondition="false" condition="~$onCooldown">
						<Function_crime_checkOpenWorldCooldown_npc cooldownType="$cooldownType" npc="$npc" onCooldown="$onCooldown" nodeLabel="86160282" />
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="cooldownType" comment="" />
				<Variable name="crimeReactionKind" comment="" />
				<Variable name="crimeReactionPriority" comment="" />
				<Variable name="npc" comment="" />
				<Variable name="onCooldown" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_crime_checkOpenWorldCooldown_global hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_checkOpenWorldCooldown_global>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Function_crime_checkOpenWorldCooldown_npc hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Function_crime_checkOpenWorldCooldown_npc>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="crime_checkOpenWorldCooldown_global" is_function="1">
		<Variables>
			<Variable name="cooldowns" type="crime:globalCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="crimeCooldownToken" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="cooldownType" type="enum:openWorld_cooldownEventType" values="$enum:openWorld_cooldownEventType.dialogPlayerGreeting" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="crimePriority" type="_int" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="crimeReactionKind" type="enum:crime_barkReactionKind" values="$enum:crime_barkReactionKind.unknown" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="onCooldown" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.playerGreeting">
						<SuppressFailure>
							<EntityContextCheck context="speech_playerWasRecentlyInNormalDialog" target="$__player" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$onCooldown = true" />
								</Then>
								<Else canSkip="1">
									<Sequence>
										<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_globalCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;crime_globalCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$cooldowns" />
										</GraphSearch>
										<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
										<Function_crime_barkReactionKindToString barkKind="$crimeReactionKind" string="$crimeCooldownToken" nodeLabel="70013663" />
										<Expression expressions="$onCooldown = $cooldowns.barkCooldownPriority &gt;= $crimePriority &amp; &#10;$data:script_param[&apos;crime_barkReactionCooldown_&apos; + $crimeCooldownToken].value + $cooldowns.lastBarkTimestamp &gt;= $now &amp; &#10;$cooldowns.lastBarkTimestamp &gt; 0" />
									</Sequence>
								</Else>
							</EntityContextCheck>
						</SuppressFailure>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.playerCrimeReaction | &#10;$cooldownType == $enum:openWorld_cooldownEventType.commentCompanionHorse  | &#10;$cooldownType == $enum:openWorld_cooldownEventType.commentCompanionDog">
						<SuppressFailure>
							<Sequence>
								<GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_globalCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;crime_globalCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$cooldowns" />
								</GraphSearch>
								<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
								<Function_crime_barkReactionKindToString barkKind="$crimeReactionKind" string="$crimeCooldownToken" nodeLabel="67749385" />
								<Expression expressions="$onCooldown = $cooldowns.barkCooldownPriority &gt;= $crimePriority &amp; &#10;$data:script_param[&apos;crime_barkReactionCooldown_&apos; + $crimeCooldownToken].value + $cooldowns.lastBarkTimestamp &gt;= $now &amp; &#10;$cooldowns.lastBarkTimestamp &gt; 0" />
							</Sequence>
						</SuppressFailure>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.situation_npcGreeting | &#10;$cooldownType == $enum:openWorld_cooldownEventType.situation_other | &#10;$cooldownType == $enum:openWorld_cooldownEventType.soliloquy | &#10;$cooldownType == $enum:openWorld_cooldownEventType.playerSoliloquy">
						<Success />
					</IfCondition>
					<DefaultBranch>
						<ErrorNode Message="&apos;Unhandled OWCD type!&apos;" />
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="cooldowns" comment="" />
				<Variable name="crimeCooldownToken" comment="" />
				<Variable name="now" comment="" />
				<Variable name="cooldownType" comment="" />
				<Variable name="crimePriority" comment="" />
				<Variable name="crimeReactionKind" comment="" />
				<Variable name="onCooldown" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SuppressFailure hasInputBreakpoint="0" comment="let GS fail if no link was found, no need to eval the rest" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetTime>
											<Function_crime_barkReactionKindToString hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_crime_barkReactionKindToString>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</SuppressFailure>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SuppressFailure hasInputBreakpoint="0" comment="let GS fail if no link was found, no need to eval the rest" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<Function_crime_barkReactionKindToString hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_crime_barkReactionKindToString>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</SuppressFailure>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</IfCondition>
						<DefaultBranch>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="crime_checkOpenWorldCooldown_npc" is_function="1">
		<Variables>
			<Variable name="cooldowns" type="crime:npcCooldowns" values="" isPersistent="0" form="single" />
			<Variable name="now" type="_int64" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="cooldownType" type="enum:openWorld_cooldownEventType" values="$enum:openWorld_cooldownEventType.dialogPlayerGreeting" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="npc" type="_wuid" values="$this.id" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="onCooldown" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.playerGreeting">
						<EntityContextCheck context="owcd_npc_playerGreeting" target="$npc" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$onCooldown = true" />
							</Then>
							<Else canSkip="1">
								<Sequence>
									<GraphSearch Origin="$npc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_npcCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;crime_npcCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$cooldowns" />
									</GraphSearch>
									<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
									<Expression expressions="$onCooldown = ($cooldowns.owcd_personal &gt; 0 &amp; $cooldowns.owcd_personal + $data:script_param[&apos;owcd_npc_personal&apos;].value &gt; $now) | &#10;($cooldowns.leavingCrimeInterrupt &gt; 0 &amp; $cooldowns.leavingCrimeInterrupt + $data:script_param[&apos;owcd_npc_postCrimeInterrupt&apos;].value * 2 &gt; $now)" />
								</Sequence>
							</Else>
						</EntityContextCheck>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.playerCrimeReaction">
						<Expression expressions="$onCooldown = $cooldowns.leavingCrimeInterrupt &gt; 0 &amp;  &#10;$cooldowns.leavingCrimeInterrupt + $data:script_param[&apos;owcd_npc_postCrimeInterrupt&apos;].value &gt; $now" />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.situation_npcGreeting">
						<Sequence>
							<GraphSearch Origin="$npc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_npcCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;crime_npcCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$cooldowns" />
							</GraphSearch>
							<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
							<Expression expressions="$onCooldown = ($cooldowns.owcd_personal &gt; 0 &amp; $cooldowns.owcd_personal + $data:script_param[&apos;owcd_npc_personal&apos;].value &gt; $now) | &#10;($cooldowns.owcd_npcGreeting &gt; 0 &amp; $cooldowns.owcd_npcGreeting + $data:script_param[&apos;owcd_npc_npcGreeting&apos;].value &gt; $now) | &#10;($cooldowns.leavingCrimeInterrupt &gt; 0 &amp; $cooldowns.leavingCrimeInterrupt + $data:script_param[&apos;owcd_npc_postCrimeInterrupt&apos;].value &gt; $now)" />
						</Sequence>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.soliloquy">
						<Sequence>
							<GraphSearch Origin="$npc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;crime_npcCooldowns&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;crime_npcCooldowns&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$cooldowns" />
							</GraphSearch>
							<GetTime TimeType="GameTime" OutVar="$now" Delta="" />
							<Expression expressions="$onCooldown = ($cooldowns.owcd_personal &gt; 0 &amp; $cooldowns.owcd_personal + $data:script_param[&apos;owcd_npc_personal&apos;].value &gt; $now) | &#10;($cooldowns.leavingCrimeInterrupt &gt; 0 &amp; $cooldowns.leavingCrimeInterrupt + $data:script_param[&apos;owcd_npc_postCrimeInterrupt&apos;].value &gt; $now)" />
						</Sequence>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.playerSoliloquy">
						<Success />
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$cooldownType == $enum:openWorld_cooldownEventType.commentCompanionHorse | &#10;$cooldownType == $enum:openWorld_cooldownEventType.commentCompanionDog">
						<Success />
					</IfCondition>
					<DefaultBranch>
						<ErrorNode Message="&apos;Unhandled OWCD type!&apos;" />
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="cooldowns" comment="" />
				<Variable name="now" comment="" />
				<Variable name="cooldownType" comment="" />
				<Variable name="npc" comment="" />
				<Variable name="onCooldown" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetTime>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
								</Else>
							</EntityContextCheck>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetTime>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetTime>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</IfCondition>
						<DefaultBranch>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>