<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="sendHitReactionNotification" is_function="1">
    <Variables>
      <Variable name="attackerToSend_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
      <Variable name="attackerType" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="hasWeaponDrawn" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="hitTypeToSend" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
      <Variable name="victim_soul" type="cast:wuid_soul" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="attacker" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="hitReactionType" type="enum:HitReactionType" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Expression expressions="$attackerToSend_soul.value = $attacker &#10;$victim_soul.value = $this.id" />
          <IfElseCondition failOnCondition="false" condition="$attacker == $__playerDog" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.dog" />
            </Then>
            <Else canSkip="1">
              <Switch>
                <IfCondition failOnCondition="false" condition="$hitReactionType == $enum:HitReactionType.Melee">
                  <Sequence>
                    <Function_crime_hasMeleeWeaponDrawn npc="$attacker" result="$hasWeaponDrawn" nodeLabel="80295974" />
                    <IfElseCondition failOnCondition="false" condition="$hasWeaponDrawn" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.armed" />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.unarmed" />
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$hitReactionType == $enum:HitReactionType.Bullet">
                  <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.missile" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$hitReactionType == $enum:HitReactionType.MeleeStealth">
                  <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.stealth" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$hitReactionType == $enum:HitReactionType.Collision">
                  <Sequence>
                    <GetType WUID="$attacker" OutString="$attackerType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
                    <IfElseCondition failOnCondition="false" condition="$attackerType == &apos;NHNPC&apos;" saveVersion="2">
                      <Then canSkip="1">
                        <SuppressFailure>
                          <Sequence>
                            <GraphSearch Origin="$attacker" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                              <LinkTagFilter tag="&apos;rider&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                              <WUIDFilter WUID="$__player" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                            </GraphSearch>
                            <Expression expressions="$attackerToSend_soul.value = $__player" />
                          </Sequence>
                        </SuppressFailure>
                      </Then>
                    </IfElseCondition>
                    <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.collision" />
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$hitReactionType == $enum:HitReactionType.Decoy">
                  <Expression expressions="$hitTypeToSend = $enum:crime_attackKind.pebble" />
                </IfCondition>
                <DefaultBranch>
                  <Success />
                </DefaultBranch>
              </Switch>
            </Else>
          </IfElseCondition>
          <SendAIConceptSignal_hitReactionNotification attacker="$attackerToSend_soul" victim="$victim_soul" hitType="$hitTypeToSend" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="attackerToSend_soul" comment="" />
        <Variable name="attackerType" comment="" />
        <Variable name="hasWeaponDrawn" comment="" />
        <Variable name="hitTypeToSend" comment="" />
        <Variable name="victim_soul" comment="" />
        <Variable name="attacker" comment="" />
        <Variable name="hitReactionType" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
              <Else>
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Function_crime_hasMeleeWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Function_crime_hasMeleeWeaponDrawn>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </GetType>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </LinkTagFilter>
                                <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </WUIDFilter>
                              </GraphSearch>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Sequence>
                          </SuppressFailure>
                        </Then>
                      </IfElseCondition>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <DefaultBranch>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </DefaultBranch>
                </Switch>
              </Else>
            </IfElseCondition>
            <SendAIConceptSignal_hitReactionNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </SendAIConceptSignal_hitReactionNotification>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>