<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_getResolveDialogContext" is_function="1">
		<Variables>
			<Variable name="animalAbuse_archetype" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="attackKind" type="enum:crime_attackKind" values="" isPersistent="0" form="single" />
			<Variable name="discountedFine" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="horseTheft_deadOrSprayed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="immediateTheft" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="informationTheftMethod" type="enum:crime_theftMethod" values="" isPersistent="0" form="single" />
			<Variable name="knownStolenItemsFound" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playerFreshlyBranded" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playersMoney" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="poaching_animalSpecies" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="poaching_attributedCrime" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="poaching_crimeType" type="_int" values="" isPersistent="0" form="associative" />
			<Variable name="primaryVictim" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="unknownStolenItemsFound" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="dialogContext" type="_float" values="" isPersistent="0" form="associative" requirementType="Out" />
			<Variable name="punishment" type="crime:punishment" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="punishmentType" type="enum:crime_punishmentType" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="resolutionDialogIntroKind" type="enum:crime_resolutionDialogIntroKind" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<DetermineCrimeVictim Information="$punishment.primary" Victim="$primaryVictim" />
					<Function_crime_getPlayersMoney balance="$playersMoney" nodeLabel="18114007" />
					<Expression expressions="$dialogContext[&apos;aggression&apos;] = 0 &#10;$dialogContext[&apos;assault_animal&apos;] = 0 &#10;$dialogContext[&apos;assault_armed&apos;] = 0 &#10;$dialogContext[&apos;assault_unarmed&apos;] = 0 &#10;$dialogContext[&apos;assault_missile&apos;] = 0 &#10;$dialogContext[&apos;assault_stealth&apos;] = 0 &#10;$dialogContext[&apos;assaultByDog&apos;] = 0 &#10;$dialogContext[&apos;corpse_violation&apos;] = 0 &#10;$dialogContext[&apos;disturbance&apos;] = 0 &#10;$dialogContext[&apos;drawnWeapon&apos;] = 0 &#10;$dialogContext[&apos;graveRobbing&apos;] = 0 &#10;$dialogContext[&apos;horseTheft&apos;] = 0 &#10;$dialogContext[&apos;horseTheft_deadOrSprayed&apos;] = 0 &#10;$dialogContext[&apos;kettleEating&apos;] = 0 &#10;$dialogContext[&apos;kettlePoisoning&apos;] = 0 &#10;$dialogContext[&apos;lockpick&apos;] = 0 &#10;$dialogContext[&apos;murder&apos;] = 0 &#10;$dialogContext[&apos;murderByDog&apos;] = 0 &#10;$dialogContext[&apos;murder_animal&apos;] = 0 &#10;$dialogContext[&apos;pickpocket&apos;] = 0 &#10;$dialogContext[&apos;pilloryBreak&apos;] = 0 &#10;$dialogContext[&apos;refuse_frisk&apos;] = 0 &#10;$dialogContext[&apos;theft&apos;] = 0 &#10;$dialogContext[&apos;theft_lootCorpse&apos;] = 0 &#10;$dialogContext[&apos;theft_lootUnconsciousBody&apos;] = 0 &#10;$dialogContext[&apos;theft_seenEquipped&apos;] = 0 &#10;$dialogContext[&apos;torch&apos;] = 0 &#10;$dialogContext[&apos;trespass&apos;] = 0 &#10;$dialogContext[&apos;weapon_drawn&apos;] = 0 &#10; &#10;$dialogContext[&apos;skillcheck&apos;] = 0 &#10;$dialogContext[&apos;players_money&apos;] = $playersMoney &#10;$dialogContext[&apos;violent&apos;] = $punishment.violent &#10;$dialogContext[&apos;crime_count&apos;] = $punishment.crimeCount &#10;$dialogContext[&apos;fine&apos;] = $punishment.fine &#10;$dialogContext[&apos;jail&apos;] = $punishment.jail &#10;$dialogContext[&apos;confiscation&apos;] = $punishment.confiscation &#10;$dialogContext[&apos;victimIsMan&apos;] = ~$punishment.victimIsWoman &#10;$dialogContext[&apos;victimIsGuard&apos;] = $primaryVictim == $this.id ? 1 : 0 &#10; &#10;$dialogContext[&apos;punishment_beating&apos;] = 0 &#10;$dialogContext[&apos;punishment_pillory&apos;] = 0 &#10;$dialogContext[&apos;punishment_branding&apos;] = 0 &#10; &#10;$dialogContext[&apos;poaching&apos;] = 0 &#10;$dialogContext[&apos;poaching_assault&apos;] = 0 &#10;$dialogContext[&apos;poaching_murder&apos;] = 0 &#10;$dialogContext[&apos;poaching_theft&apos;] = 0 &#10;$dialogContext[&apos;poaching_attributedCrime&apos;] = 0 &#10;$dialogContext[&apos;poaching_animal_mixed&apos;] = 0 &#10;$dialogContext[&apos;poaching_animal_boar&apos;] = 0 &#10;$dialogContext[&apos;poaching_animal_deerdoe&apos;] = 0 &#10;$dialogContext[&apos;poaching_animal_reddeer&apos;] = 0 &#10; &#10;$dialogContext[&apos;animalAbuse_animal_mixed&apos;] = 0 &#10; &#10;$dialogContext[&apos;isSecondArrest&apos;] = 0" />
					<GetCrimeData Fine="$discountedFine" FoundAnyUnknownStolenItem="$unknownStolenItemsFound" FoundAnyKnownStolenItem="$knownStolenItemsFound" />
					<Expression expressions="$dialogContext[&apos;fine&apos;] = $discountedFine &#10;$dialogContext[&apos;unknownStolenItemsFound&apos;] = $unknownStolenItemsFound ? 1 : 0 &#10;$dialogContext[&apos;knownStolenItemsFound&apos;] = $knownStolenItemsFound ? 1 : 0" />
					<Switch>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.unconscious">
							<Expression expressions="$dialogContext[&apos;unconscious&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.notResistingArrest_lookedFor">
							<Expression expressions="$dialogContext[&apos;notResistingArrest_lookedFor&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.notResistingArrest_foundAccidentally">
							<Expression expressions="$dialogContext[&apos;notResistingArrest_foundAccidentally&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.resistingArrest_violent">
							<Expression expressions="$dialogContext[&apos;resistingArrest_violent&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.resistingArrest_running">
							<Expression expressions="$dialogContext[&apos;resistingArrest_running&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.notResistingArrest_crimeSeenByGuard">
							<Expression expressions="$dialogContext[&apos;notResistingArrest_crimeSeenByGuard&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.resistingArrest_beaten">
							<Expression expressions="$dialogContext[&apos;resistingArrest_beaten&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$resolutionDialogIntroKind == $enum:crime_resolutionDialogIntroKind.resistingArrest_repeated">
							<Expression expressions="$dialogContext[&apos;resistingArrest_repeated&apos;] = 1" />
						</IfCondition>
					</Switch>
					<ExecuteLua code="data.dialogContext[&apos;skillcheckLevel&apos;] = Crime.GetSkillcheckLevelFromPrice(data.discountedFine)" />
					<Switch>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;aggression&apos;">
							<Expression expressions="$dialogContext[&apos;aggression&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;assault&apos;">
							<Sequence>
								<LockDynamicInformationValues Information="$punishment.primary">
									<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;kind&apos;" Out="$attackKind" />
								</LockDynamicInformationValues>
								<Switch>
									<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.armed">
										<Expression expressions="$dialogContext[&apos;assault_armed&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.unarmed">
										<Expression expressions="$dialogContext[&apos;assault_unarmed&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.missile">
										<Expression expressions="$dialogContext[&apos;assault_missile&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.stealth">
										<Expression expressions="$dialogContext[&apos;assault_stealth&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$attackKind == $enum:crime_attackKind.collision">
										<Expression expressions="$dialogContext[&apos;assault_collision_horse&apos;] = 1" />
									</IfCondition>
								</Switch>
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;corpseViolation&apos;">
							<Expression expressions="$dialogContext[&apos;corpse_violation&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;disturbance&apos;">
							<Expression expressions="$dialogContext[&apos;disturbance&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;drawnWeapon&apos;">
							<Expression expressions="$dialogContext[&apos;drawnWeapon&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;friskRefusal&apos;">
							<Expression expressions="$dialogContext[&apos;refuse_frisk&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;graveRobbing&apos;">
							<Expression expressions="$dialogContext[&apos;graveRobbing&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;kettlePoisoning&apos;">
							<Expression expressions="$dialogContext[&apos;kettlePoisoning&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;lockpick&apos;">
							<Expression expressions="$dialogContext[&apos;lockpick&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;murder&apos;">
							<Expression expressions="$dialogContext[&apos;murder&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;pickpocket&apos;">
							<Expression expressions="$dialogContext[&apos;pickpocket&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;pilloryBreak&apos;">
							<Expression expressions="$dialogContext[&apos;pilloryBreak&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;sneak&apos;">
							<Expression expressions="$dialogContext[&apos;torch&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;theft&apos;">
							<Sequence>
								<Expression expressions="$dialogContext[&apos;theft&apos;] = 1" />
								<LockDynamicInformationValues Information="$punishment.primary">
									<Sequence>
										<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;theftMethod&apos;" Out="$informationTheftMethod" />
										<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;immediate&apos;" Out="$immediateTheft" />
									</Sequence>
								</LockDynamicInformationValues>
								<Switch>
									<IfCondition failOnCondition="false" condition="$informationTheftMethod == $enum:crime_theftMethod.kettleEating">
										<Expression expressions="$dialogContext[&apos;kettleEating&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$informationTheftMethod == $enum:crime_theftMethod.lootCorpse">
										<Expression expressions="$dialogContext[&apos;theft_lootCorpse&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$informationTheftMethod == $enum:crime_theftMethod.lootUnconsciousBody">
										<Expression expressions="$dialogContext[&apos;theft_lootUnconsciousBody&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$informationTheftMethod == $enum:crime_theftMethod.seenEquipped">
										<Expression expressions="$dialogContext[&apos;theft_seenEquipped&apos;] = 1" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="($informationTheftMethod == $enum:crime_theftMethod.loot | &#10;$informationTheftMethod == $enum:crime_theftMethod.pick) &#10;&amp; ~$immediateTheft">
										<Expression expressions="$dialogContext[&apos;theft_attributed&apos;] = 1" />
									</IfCondition>
									<DefaultBranch>
										<Success />
									</DefaultBranch>
								</Switch>
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;horseTheft&apos;">
							<Sequence>
								<Expression expressions="$dialogContext[&apos;horseTheft&apos;] = 1" />
								<LockDynamicInformationValues Information="$punishment.primary">
									<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;deadOrSprayed&apos;" Out="$horseTheft_deadOrSprayed" />
								</LockDynamicInformationValues>
								<IfCondition failOnCondition="false" condition="$horseTheft_deadOrSprayed">
									<Expression expressions="$dialogContext[&apos;horseTheft_deadOrSprayed&apos;] = 1" />
								</IfCondition>
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;trespass&apos;">
							<Expression expressions="$dialogContext[&apos;trespass&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;assaultAnimal&apos; | &#10;$punishment.primary.label == &apos;murderAnimal&apos;">
							<Sequence>
								<IfElseCondition failOnCondition="false" condition="$punishment.animalAbuse_isMixedAnimal" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$dialogContext[&apos;animalAbuse_animal_mixed&apos;] = 1" />
									</Then>
									<Else canSkip="1">
										<Sequence>
											<LockDynamicInformationValues Information="$punishment.primary">
												<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;animalArchetype&apos;" Out="$animalAbuse_archetype" />
											</LockDynamicInformationValues>
											<Function_crime_getAnimalContextFromString animal_archetype="$animalAbuse_archetype" animal_archetype_float="$dialogContext[&apos;animalAbuse_species&apos;]" nodeLabel="94023494" />
										</Sequence>
									</Else>
								</IfElseCondition>
								<IfElseCondition failOnCondition="false" condition="$punishment.primary.label == &apos;assaultAnimal&apos;" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$dialogContext[&apos;assault_animal&apos;] = 1" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$dialogContext[&apos;murder_animal&apos;] = 1" />
									</Else>
								</IfElseCondition>
								<Expression expressions="$dialogContext[&apos;animalAbuse_animal_count&apos;] = $punishment.animalAbuse_animalCount" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;poaching&apos;">
							<Sequence>
								<Expression expressions="$dialogContext[&apos;poaching&apos;] = 1" />
								<LockDynamicInformationValues Information="$punishment.primary">
									<Sequence>
										<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;crimeType&apos;" Out="$poaching_crimeType" />
										<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;animalArchetype&apos;" Out="$poaching_animalSpecies" />
										<GetDynamicInformationValue Information="$punishment.primary" Tag="&apos;attributedCrime&apos;" Out="$poaching_attributedCrime" />
									</Sequence>
								</LockDynamicInformationValues>
								<IfElseCondition failOnCondition="false" condition="$punishment.poaching_isMixedAnimal" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$dialogContext[&apos;poaching_animal_mixed&apos;] = 1" />
									</Then>
									<Else canSkip="1">
										<Switch>
											<IfCondition failOnCondition="false" condition="$poaching_animalSpecies == &apos;Boar&apos;">
												<Expression expressions="$dialogContext[&apos;poaching_animal_boar&apos;] = 1" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$poaching_animalSpecies == &apos;RoeDeerBuck&apos; | &#10;$poaching_animalSpecies == &apos;RoeDeerHind&apos;">
												<Expression expressions="$dialogContext[&apos;poaching_animal_deerdoe&apos;] = 1" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$poaching_animalSpecies == &apos;RedDeerStag&apos; | &#10;$poaching_animalSpecies == &apos;RedDeerDoe&apos;">
												<Expression expressions="$dialogContext[&apos;poaching_animal_reddeer&apos;] = 1" />
											</IfCondition>
											<DefaultBranch>
												<ErrorNode Message="&apos;[$this.name;] unhandled animal species in dialog context&apos;" />
											</DefaultBranch>
										</Switch>
									</Else>
								</IfElseCondition>
								<Expression expressions="$dialogContext[&apos;poaching_assault&apos;] = $poaching_crimeType[&apos;assault&apos;] &#10;$dialogContext[&apos;poaching_murder&apos;] = $poaching_crimeType[&apos;murder&apos;] &#10;$dialogContext[&apos;poaching_theft&apos;] = $poaching_crimeType[&apos;theft&apos;] &#10; &#10;$dialogContext[&apos;poaching_attributedCrime&apos;] = $poaching_attributedCrime == true ? 1 : 0" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;assaultByDog&apos;">
							<Expression expressions="$dialogContext[&apos;assaultByDog&apos;] = 1" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$punishment.primary.label == &apos;murderByDog&apos;">
							<Expression expressions="$dialogContext[&apos;murderByDog&apos;] = 1" />
						</IfCondition>
						<DefaultBranch>
							<ErrorNode Message="&apos;unhandled crime for arrest dialog&apos;" />
						</DefaultBranch>
					</Switch>
					<IfElseCondition failOnCondition="false" condition="$punishment.murder == 1 |  &#10;$punishment.poaching == 1 | &#10;$discountedFine &gt; $data:script_param[&apos;crime_punishmentFineThresholdForBranding&apos;].value" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$dialogContext[&apos;punishment_beating&apos;] = 0 &#10;$dialogContext[&apos;punishment_pillory&apos;] = 0 &#10;$dialogContext[&apos;punishment_branding&apos;] = 1" />
						</Then>
						<Else canSkip="1">
							<IfElseCondition failOnCondition="false" condition="$punishment.violent == 1" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$dialogContext[&apos;punishment_beating&apos;] = 1 &#10;$dialogContext[&apos;punishment_pillory&apos;] = 0 &#10;$dialogContext[&apos;punishment_branding&apos;] = 0" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$dialogContext[&apos;punishment_beating&apos;] = 0 &#10;$dialogContext[&apos;punishment_pillory&apos;] = 1 &#10;$dialogContext[&apos;punishment_branding&apos;] = 0" />
								</Else>
							</IfElseCondition>
						</Else>
					</IfElseCondition>
					<IsPlayerFreshlyBranded IsBranded="$playerFreshlyBranded" />
					<IfElseCondition failOnCondition="false" condition="$playerFreshlyBranded" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$dialogContext[&apos;playerBranded&apos;] = 1" />
						</Then>
						<Else canSkip="1">
							<Expression expressions="$dialogContext[&apos;playerBranded&apos;] = 0" />
						</Else>
					</IfElseCondition>
					<Switch>
						<IfCondition failOnCondition="false" condition="$dialogContext[&apos;punishment_pillory&apos;] == 1.0">
							<Expression expressions="$punishmentType = $enum:crime_punishmentType.pillory" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$dialogContext[&apos;punishment_beating&apos;] == 1.0">
							<Expression expressions="$punishmentType = $enum:crime_punishmentType.beating" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$dialogContext[&apos;punishment_branding&apos;]  == 1.0 &amp; &#10;$dialogContext[&apos;playerBranded&apos;]  == 0.0">
							<Expression expressions="$punishmentType = $enum:crime_punishmentType.branding" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$dialogContext[&apos;punishment_branding&apos;]  == 1.0 &amp; &#10;$dialogContext[&apos;playerBranded&apos;]  == 1.0">
							<Expression expressions="$punishmentType = $enum:crime_punishmentType.execution" />
						</IfCondition>
						<DefaultBranch>
							<Expression expressions="$punishmentType = $enum:crime_punishmentType.unknown" />
						</DefaultBranch>
					</Switch>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animalAbuse_archetype" comment="" />
				<Variable name="attackKind" comment="" />
				<Variable name="discountedFine" comment="" />
				<Variable name="horseTheft_deadOrSprayed" comment="" />
				<Variable name="immediateTheft" comment="" />
				<Variable name="informationTheftMethod" comment="" />
				<Variable name="knownStolenItemsFound" comment="" />
				<Variable name="playerFreshlyBranded" comment="" />
				<Variable name="playersMoney" comment="" />
				<Variable name="poaching_animalSpecies" comment="" />
				<Variable name="poaching_attributedCrime" comment="" />
				<Variable name="poaching_crimeType" comment="" />
				<Variable name="primaryVictim" comment="" />
				<Variable name="unknownStolenItemsFound" comment="" />
				<Variable name="dialogContext" comment="" />
				<Variable name="punishment" comment="" />
				<Variable name="punishmentType" comment="" />
				<Variable name="resolutionDialogIntroKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-270" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DetermineCrimeVictim hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</DetermineCrimeVictim>
						<Function_crime_getPlayersMoney hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_crime_getPlayersMoney>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<GetCrimeData hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetCrimeData>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
						</Switch>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetDynamicInformationValue>
									</LockDynamicInformationValues>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Switch>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
										</Sequence>
									</LockDynamicInformationValues>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<DefaultBranch>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</DefaultBranch>
									</Switch>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetDynamicInformationValue>
									</LockDynamicInformationValues>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetDynamicInformationValue>
												</LockDynamicInformationValues>
												<Function_crime_getAnimalContextFromString hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_crime_getAnimalContextFromString>
											</Sequence>
										</Else>
									</IfElseCondition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
											<GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetDynamicInformationValue>
										</Sequence>
									</LockDynamicInformationValues>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</IfCondition>
												<DefaultBranch>
													<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ErrorNode>
												</DefaultBranch>
											</Switch>
										</Else>
									</IfElseCondition>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<DefaultBranch>
								<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ErrorNode>
							</DefaultBranch>
						</Switch>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="Branding or execution" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="Beating" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="Pillory" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
							</Else>
						</IfElseCondition>
						<IsPlayerFreshlyBranded hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</IsPlayerFreshlyBranded>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</IfElseCondition>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<DefaultBranch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</DefaultBranch>
						</Switch>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>