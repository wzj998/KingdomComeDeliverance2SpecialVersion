<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_isPlayerSuspicious" is_function="1">
		<Variables>
			<Variable name="trespassArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="trespassAreaSevereness" type="enum:trespassLevel" values="" isPersistent="0" form="single" />
			<Variable name="trespassReaction" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trespassReactionSuppressed" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="crimePosition" type="vec3" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="playerSuspicious" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="stimulusKind" type="enum:crime_stimulusKind" values="$enum:crime_stimulusKind.unknown" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<EntityContextCheck context="crime_isAuthority" target="" saveVersion="2">
						<Then canSkip="1">
							<PlayersCrimeInformationKnown Npc="$this.id" OnlyRelated="false" PlayersCrimeInformationKnown="$playerSuspicious" />
						</Then>
						<Else canSkip="1">
							<PlayersCrimeInformationKnown Npc="$this.id" OnlyRelated="true" PlayersCrimeInformationKnown="$playerSuspicious" />
						</Else>
					</EntityContextCheck>
					<IfCondition failOnCondition="false" condition="~$playerSuspicious">
						<Sequence>
							<DetermineTrespassReaction Observer="$this.id" Target="$__player" Position="" ForceSemipublicReaction="false" ShouldUseVec3Position="false" TrespassAreaSevereness="$trespassAreaSevereness" TrespassArea="$trespassArea" Reaction="$trespassReaction" ReactionSuppressed="$trespassReactionSuppressed" />
							<IfElseCondition failOnCondition="false" condition="$trespassReaction &amp; $trespassAreaSevereness &gt;= $enum:trespassLevel.personal" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$playerSuspicious = true" />
								</Then>
								<Else canSkip="1">
									<IsPlayerSuspicious CrimePosition="$crimePosition" StimulusKind="$stimulusKind" IsSuspicious="$playerSuspicious" />
								</Else>
							</IfElseCondition>
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
				<Then canSkip="1">
					<Expression expressions="$playerSuspicious = true" />
				</Then>
				<Else canSkip="1">
					<Sequence>
						<GetSpatialInfo In="$__player" Out="$playerPos" What="Position" />
						<MeasureDistance position1="$crimePosition" position2="$playerPos" mode="ThreeDimensions" result="$distanceToCrime" />
						<CircularSpatialQuery Radius="$distanceToCrime" Center="$playerPos" ToFill="$nearbyNpcs" Precision="Exact" Filter="LivingHumanNPCs" />
						<EraseFromArray array="$nearbyNpcs" condition="$__value == $__player" />
						<EraseFromArray array="$nearbyNpcs" condition="$__value == $this.id" />
						<For startIndex="-1" endIndex="-1" step="-1" array="$nearbyNpcs" iterator="" value="$nearbyNpcs_value" break="">
							<IsUnconsciousCheck SoulWUID="$nearbyNpcs_value" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<EraseFromArray array="$nearbyNpcs" condition="$__value == $nearbyNpcs_value" />
								</Then>
							</IsUnconsciousCheck>
						</For>
						<Switch>
							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="" Flag="exactly_5_great" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$reputation = 1.5" />
								</Then>
							</CheckRelationshipInterval_SoulToSoul>
							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="" Flag="exactly_4_high" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$reputation = 1" />
								</Then>
							</CheckRelationshipInterval_SoulToSoul>
							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="" Flag="exactly_3_normal" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$reputation = 0.5" />
								</Then>
							</CheckRelationshipInterval_SoulToSoul>
							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="" Flag="exactly_2_low" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$reputation = 0" />
								</Then>
							</CheckRelationshipInterval_SoulToSoul>
							<CheckRelationshipInterval_SoulToSoul TargetSoul="$__player" Soul="" Flag="enemy" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$reputation = -1" />
								</Then>
							</CheckRelationshipInterval_SoulToSoul>
							<DefaultBranch>
								<Expression expressions="$reputation = 0" />
							</DefaultBranch>
						</Switch>
						<ExecuteLua code="data.consp =  player.soul:GetDerivedStat(&apos;con&apos;) &#10;data.bloodiness =  player.soul:GetDerivedStat(&apos;bld&apos;) &#10;data.stealth = player.soul:GetSkillLevel(&apos;stealth&apos;)" />
						<Switch>
							<IfCondition failOnCondition="false" condition="$stimulusKind == $enum:crime_stimulusKind.shooter | &#10;$stimulusKind == $enum:crime_stimulusKind.unknownShooter | &#10;$stimulusKind == $enum:crime_stimulusKind.animalAbuse">
								<IsWeaponDrawn who="$__player" WeaponSet="Secondary" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$specialConditionByStimulusKind = 1" />
									</Then>
									<Else canSkip="1">
										<Success />
									</Else>
								</IsWeaponDrawn>
							</IfCondition>
							<DefaultBranch>
								<Success />
							</DefaultBranch>
						</Switch>
						<Expression expressions="$suspiciousness = ( &#10;$specialConditionByStimulusKind * 0.5  &#10;+ &#10;($distanceToCrime &lt;= 4 ? 0.5 : 0.5 - 0.0625 * $distanceToCrime) * 1 &#10;+  &#10;(1 - $reputation) * 0.25  &#10;+  &#10;(($consp + 1) / 2) * 0.25  &#10;+  &#10;(1 / 30 * $stealth) * -0.33 &#10;+  &#10;($bloodiness * 2 &lt; 1 ? $bloodiness * 2 : 1) * 0.5 &#10;+ &#10;(#nearbyNpcs &gt; 0 ? 1 / #nearbyNpcs * 0.5 : 1))" />
						<Expression expressions="$playerSuspicious = $suspiciousness &gt; 1" />
					</Sequence>
				</Else>
			</IsPublicEnemy>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="trespassArea" comment="" />
				<Variable name="trespassAreaSevereness" comment="" />
				<Variable name="trespassReaction" comment="" />
				<Variable name="trespassReactionSuppressed" comment="" />
				<Variable name="crimePosition" comment="" />
				<Variable name="playerSuspicious" comment="" />
				<Variable name="stimulusKind" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PlayersCrimeInformationKnown>
							</Then>
							<Else>
								<PlayersCrimeInformationKnown hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PlayersCrimeInformationKnown>
							</Else>
						</EntityContextCheck>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DetermineTrespassReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</DetermineTrespassReaction>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<IsPlayerSuspicious hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</IsPlayerSuspicious>
									</Else>
								</IfElseCondition>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<IsPublicEnemy editorPosX="1840" editorPosY="270" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Then>
					<Else>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetSpatialInfo>
							<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</MeasureDistance>
							<CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CircularSpatialQuery>
							<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</EraseFromArray>
							<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</EraseFromArray>
							<For hasInputBreakpoint="0" comment="TODO: ugly, can we have a spatial query filter instead please?" breakpointFlags="0">
								<OutputBreakpoints />
								<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</EraseFromArray>
									</Then>
								</IsUnconsciousCheck>
							</For>
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="very good rep even make it negative" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</CheckRelationshipInterval_SoulToSoul>
								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</CheckRelationshipInterval_SoulToSoul>
								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</CheckRelationshipInterval_SoulToSoul>
								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</CheckRelationshipInterval_SoulToSoul>
								<CheckRelationshipInterval_SoulToSoul hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
								</CheckRelationshipInterval_SoulToSoul>
								<DefaultBranch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</DefaultBranch>
							</Switch>
							<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ExecuteLua>
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IsWeaponDrawn hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Else>
									</IsWeaponDrawn>
								</IfCondition>
								<DefaultBranch>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</DefaultBranch>
							</Switch>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</Else>
				</IsPublicEnemy>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>