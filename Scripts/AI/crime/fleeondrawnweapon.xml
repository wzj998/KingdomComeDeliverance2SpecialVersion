<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="combat_fleeOnDrawnWeapon" is_function="1">
		<Variables>
			<Variable name="canReport" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isIndifferent" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="mostImportantInformation" type="information" values="" isPersistent="0" form="single" />
			<Variable name="reportDestination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="reportDestinationType" type="enum:crime_reportDestinationType" values="" isPersistent="0" form="single" />
			<Variable name="useless" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="attackData" type="switch:interruptData:attack" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<EntityContextCheck context="combat_fleeOnDrawnWeaponInUnarmedCombat" target="$this.id" saveVersion="2">
					<Then canSkip="1">
						<EntityContextCheck context="combat_fightInQuestSkirmish" target="$this.id" saveVersion="2">
							<Then canSkip="1">
								<Success />
							</Then>
							<Else canSkip="1">
								<EntityContextCheck context="combat_neverSurrenderOrFlee" target="$this.id" saveVersion="2">
									<Then canSkip="1">
										<Success />
									</Then>
									<Else canSkip="1">
										<EntityContextCheck context="combat_alwaysChooseMercy" target="$this.id" saveVersion="2">
											<Else canSkip="1">
												<IsPublicEnemy Soul="$this.id" FailOnSubtreeMissing="false" saveVersion="2">
													<Else canSkip="1">
														<Sequence>
															<IfElseCondition failOnCondition="false" condition="$data:crime[$attackData.information.label].isCrime" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$mostImportantInformation = $attackData.information" />
																</Then>
																<Else canSkip="1">
																	<GetMostImportantCrimeInformation Npc="$this.id" OnlyRelated="true" MostImportantInformation="$mostImportantInformation" />
																</Else>
															</IfElseCondition>
															<IfCondition failOnCondition="false" condition="$mostImportantInformation.label ~= &apos;&apos;">
																<Sequence>
																	<ChooseReportDestination Information="$mostImportantInformation" IsImportant="false" Destination="$reportDestination" DestinationType="$reportDestinationType" />
																	<IfCondition failOnCondition="false" condition="$reportDestinationType &gt; $enum:crime_reportDestinationType.none">
																		<CheckReactionLimit DesiredReactionType="$enum:crime_reactionType.report" Information="$mostImportantInformation" Position="" StimulusKind="$enum:crime_stimulusKind.unknown" ShouldReact="$canReport" ShouldWatch="$useless" />
																	</IfCondition>
																</Sequence>
															</IfCondition>
															<IfElseCondition failOnCondition="false" condition="$canReport" saveVersion="2">
																<Then canSkip="1">
																	<EntityContext context="combat_flee" target="">
																		<Function_callInterrupt_report assaultData="" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" disableDetectedIcon="true" disableEmitting="false" freshlyAttributedCrime="false" ignorePriority="true" information="$mostImportantInformation" initiator="$enum:switch_interruptInitiator.scheduler" movementSpeed="$enum:movementSpeed.sprint" previousReaction="$enum:crime_reactionKind.attack" reportDestination="$reportDestination" reportDestinationType="$reportDestinationType" source="$enum:crime_source.direct" stimulusKind="$attackData.stimulusKind" nodeLabel="21966052" />
																	</EntityContext>
																</Then>
																<Else canSkip="1">
																	<Sequence>
																		<IsIndifferent NPC="$this.id" saveVersion="2">
																			<Then canSkip="1">
																				<Expression expressions="$isIndifferent = true" />
																			</Then>
																		</IsIndifferent>
																		<Function_callInterrupt_flee assaultData="$attackData.assaultData" corpseState="$enum:corpseState.undiscovered" criminalFreshness="$enum:crime_criminalFreshness.unknown" freshlyAttributedCrime="false" ignorePriority="true" information="$mostImportantInformation" initiator="$enum:switch_interruptInitiator.scheduler" isIndifferent="$isIndifferent" leaveLevel="false" mercyDialogueResult="$enum:crime_mercyDialogueResult.unknown" previousReaction="$enum:crime_reactionKind.attack" priority="135" source="$enum:crime_source.direct" stimulusKind="$attackData.stimulusKind" target="$__player" nodeLabel="41962332" />
																	</Sequence>
																</Else>
															</IfElseCondition>
														</Sequence>
													</Else>
												</IsPublicEnemy>
											</Else>
										</EntityContextCheck>
									</Else>
								</EntityContextCheck>
							</Else>
						</EntityContextCheck>
					</Then>
					<Else canSkip="1">
						<Success />
					</Else>
				</EntityContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="canReport" comment="" />
				<Variable name="isIndifferent" comment="" />
				<Variable name="mostImportantInformation" comment="" />
				<Variable name="reportDestination" comment="" />
				<Variable name="reportDestinationType" comment="" />
				<Variable name="useless" comment="" />
				<Variable name="attackData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</Then>
								<Else>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Then>
										<Else>
											<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Else>
													<IsPublicEnemy hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Else>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																	<Else>
																		<GetMostImportantCrimeInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</GetMostImportantCrimeInformation>
																	</Else>
																</IfElseCondition>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<ChooseReportDestination hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</ChooseReportDestination>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<CheckReactionLimit hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</CheckReactionLimit>
																		</IfCondition>
																	</Sequence>
																</IfCondition>
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Function_callInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_callInterrupt_report>
																		</EntityContext>
																	</Then>
																	<Else>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IsIndifferent hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Expression>
																				</Then>
																			</IsIndifferent>
																			<Function_callInterrupt_flee hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Function_callInterrupt_flee>
																		</Sequence>
																	</Else>
																</IfElseCondition>
															</Sequence>
														</Else>
													</IsPublicEnemy>
												</Else>
											</EntityContextCheck>
										</Else>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
						</Then>
						<Else>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Else>
					</EntityContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>