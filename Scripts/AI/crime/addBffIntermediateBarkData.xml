<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="crime_addBffIntermediateBarkData" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="corpse" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="isCorpse" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isViolent" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="reactionIntermediateData" type="switch:reactionIntermediateData" values="" isPersistent="0" form="single" requirementType="Reference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Switch>
					<IfCondition failOnCondition="false" condition="$isCorpse">
						<IfCondition failOnCondition="false" condition="$reactionIntermediateData.barkData.priority &lt; $data:script_param[&apos;crime_barkReactionPriority_companionComment_corpse&apos;].value">
							<Sequence>
								<ReinitVariable variable="$reactionIntermediateData" />
								<Expression expressions="$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.companionComment &#10;$reactionIntermediateData.barkData.lookAt = $corpse &#10;$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_companionComment_violent&apos;].value &#10;$reactionIntermediateData.barkData.animationApproach = $enum:animationApproach.tryDialogAnimations" />
								<EntityContextCheck context="crime_bff_dontReactToPlayersCrimesJustBark" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;BFF_REAGUJE_NA_MRTVOLU&apos;" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;NPC_VIDI_MRTVOLU_(MRTVOLA__PRITEL__HLIDANA)&apos;" />
									</Else>
								</EntityContextCheck>
							</Sequence>
						</IfCondition>
					</IfCondition>
					<IfCondition failOnCondition="false" condition="$isViolent">
						<IfCondition failOnCondition="false" condition="$reactionIntermediateData.barkData.priority &lt; $data:script_param[&apos;crime_barkReactionPriority_companionComment_violent&apos;].value">
							<Sequence>
								<ReinitVariable variable="$reactionIntermediateData" />
								<Expression expressions="$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.companionComment &#10;$reactionIntermediateData.barkData.lookAt = $__player &#10;$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_companionComment_violent&apos;].value" />
								<EntityContextCheck context="crime_bff_dontReactToPlayersCrimesJustBark" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;COMPANION_KOMENTUJE_CRIME_NASILNY&apos;" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;HRAC_DELA_BORDEL_V_TRESPASSU&apos;" />
									</Else>
								</EntityContextCheck>
							</Sequence>
						</IfCondition>
					</IfCondition>
					<DefaultBranch>
						<IfCondition failOnCondition="false" condition="$reactionIntermediateData.barkData.priority &lt; $data:script_param[&apos;crime_barkReactionPriority_companionComment_nonviolent&apos;].value">
							<Sequence>
								<ReinitVariable variable="$reactionIntermediateData" />
								<Expression expressions="$reactionIntermediateData.barkData.barkKind = $enum:crime_barkReactionKind.companionComment &#10;$reactionIntermediateData.barkData.lookAt = $__player &#10;$reactionIntermediateData.barkData.priority = $data:script_param[&apos;crime_barkReactionPriority_companionComment_nonviolent&apos;].value" />
								<EntityContextCheck context="crime_bff_dontReactToPlayersCrimesJustBark" target="" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;COMPANION_KOMENTUJE_CRIME_NENASILNY&apos;" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$reactionIntermediateData.barkData.metarole = &apos;HRAC_DELA_BORDEL_V_TRESPASSU&apos;" />
									</Else>
								</EntityContextCheck>
							</Sequence>
						</IfCondition>
					</DefaultBranch>
				</Switch>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="corpse" comment="" />
				<Variable name="isCorpse" comment="" />
				<Variable name="isViolent" comment="" />
				<Variable name="reactionIntermediateData" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</EntityContextCheck>
								</Sequence>
							</IfCondition>
						</IfCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</EntityContextCheck>
								</Sequence>
							</IfCondition>
						</IfCondition>
						<DefaultBranch>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</EntityContextCheck>
								</Sequence>
							</IfCondition>
						</DefaultBranch>
					</Switch>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>