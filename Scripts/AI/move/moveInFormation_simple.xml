<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="moveInFormation_simple" is_function="0">
		<Variables>
			<Variable name="horse" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="context" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="followEnabled" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="formationType" type="enum:formationType" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="keepHandContent" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="pathOffset" type="_float" values="0.5" isPersistent="0" form="single" requirementType="In" />
			<Variable name="successDistance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkDataFilter tag="&apos;useHorse&apos;" condition="$__link_useHorse==$context" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<EntityClassFilter Class="NHNPC" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$horse" saveVersion="2" />
					</GraphSearch>
					<Switch>
						<IfCondition failOnCondition="false" condition="$formationType == $enum:formationType.KeepDistance">
							<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.KeepDistance" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$formationType == $enum:formationType.MoveHistory">
							<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.MoveHistory" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$formationType == $enum:formationType.KeepShape">
							<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.KeepShape" />
						</IfCondition>
						<DefaultBranch>
							<Expression expressions="$followFormationParams.formation.policy = $enum:formationMode.Relaxed" />
						</DefaultBranch>
					</Switch>
					<AnyDecorator preset="bothHands_changeEquipment" enabled="$keepHandContent">
						<IfElseCondition failOnCondition="false" condition="$horse ~= $__null" saveVersion="2">
							<Then canSkip="1">
								<StanceElement smartObject="$horse" stance="horse" allowAny="false" enabled="true">
									<Sequence>
										<WaitAction />
										<Function_moveInFormation_inFormation destination="$destination" followEnabled="$followEnabled" followFormationParams="$followFormationParams" pathOffset="$pathOffset" successDistance="$successDistance" nodeLabel="86268303" />
									</Sequence>
								</StanceElement>
							</Then>
							<Else canSkip="1">
								<Function_moveInFormation_inFormation destination="$destination" followEnabled="$followEnabled" followFormationParams="$followFormationParams" pathOffset="$pathOffset" successDistance="$successDistance" nodeLabel="21313431" />
							</Else>
						</IfElseCondition>
					</AnyDecorator>
					<Callback_empty EventName="&apos;OnFinished&apos;" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="formationSimple" EventSet="formationSimple">
			<Variables>
				<Variable name="horse" comment="" />
				<Variable name="context" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="followEnabled" comment="" />
				<Variable name="followFormationParams" comment="" />
				<Variable name="formationType" comment="" />
				<Variable name="keepHandContent" comment="" />
				<Variable name="pathOffset" comment="" />
				<Variable name="successDistance" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-70" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkDataFilter>
							<EntityClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</EntityClassFilter>
							<SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SoulIsAliveFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<DefaultBranch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</DefaultBranch>
						</Switch>
						<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<Function_moveInFormation_inFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_moveInFormation_inFormation>
										</Sequence>
									</StanceElement>
								</Then>
								<Else>
									<Function_moveInFormation_inFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_moveInFormation_inFormation>
								</Else>
							</IfElseCondition>
						</AnyDecorator>
						<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Callback_empty>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>