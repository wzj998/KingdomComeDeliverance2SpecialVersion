<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="distanceMove" is_function="1">
    <Variables>
      <Variable name="additionalMoveParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
      <Variable name="distanceTooShortForLight" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="minimalDistanceToUseLight" type="_int" values="30" isPersistent="0" form="single" />
      <Variable name="movementSpeed" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="outsidePoint" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="initialSpeed" type="_string" values="&apos;Walk&apos;" isPersistent="0" form="single" requirementType="In" />
      <Variable name="outsideAreaOnly" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="stopDistanceVariation" type="_float" values="0" isPersistent="0" form="single" requirementType="In" />
      <Variable name="stopWithinDistance" type="_float" values="0.5" isPersistent="0" form="single" requirementType="In" />
      <Variable name="target" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="useExactMove" type="_bool" values="false" isPersistent="0" form="single" requirementType="In" />
      <Variable name="useSituations" type="_bool" values="true" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Parallel successMode="Any" failureMode="Any">
          <Sequence>
            <Expression expressions="$additionalMoveParams.destChangedThreshold= &apos;2500&apos;&#10;$movementSpeed=$initialSpeed" />
            <DistanceCondition Origin="$this.id" ReferencePt="$target" Low="$minimalDistanceToUseLight" High="4000.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
              <Expression expressions="$distanceTooShortForLight=true" />
            </DistanceCondition>
            <Selector>
              <Function_moveOnHorse nodeLabel="16375263" />
              <IfElseCondition failOnCondition="false" condition="$useExactMove" saveVersion="2">
                <Then canSkip="1">
                  <ExactMove directionType="AlignWithEntity" directionSpecification="$target" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$target" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$additionalMoveParams" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                </Then>
                <Else canSkip="1">
                  <Move stopWithinDistance="$stopWithinDistance" stopDistanceVariation="$stopDistanceVariation" rayCasteFlee="false" successDistance="0.100000" changeNPCState="true" destinationSpecification="$target" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$additionalMoveParams" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                </Else>
              </IfElseCondition>
            </Selector>
          </Sequence>
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer>
      <Loop count="-1">
        <Sequence>
          <IsInsideAreaWithLabel Position="$this.id" Label="&apos;interior&apos;" Area="" FailSubtMissing="false" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$movementSpeed=$initialSpeed" />
            </Then>
            <Else canSkip="1">
              <Switch>
                <WeatherCondition failOnCondition="false" condition="$weather.rainIntensity&gt;0.5">
                  <IfCondition failOnCondition="false" condition="$initialSpeed==$enum:movementSpeed.relaxedWalk|&#10;$initialSpeed==$enum:movementSpeed.walk|&#10;$initialSpeed==$enum:movementSpeed.alertedWalk">
                    <Expression expressions="$movementSpeed=$enum:movementSpeed.run" />
                  </IfCondition>
                </WeatherCondition>
                <WeatherCondition failOnCondition="false" condition="$weather.rainIntensity&gt;0.1">
                  <IfCondition failOnCondition="false" condition="$initialSpeed==$enum:movementSpeed.relaxedWalk">
                    <Expression expressions="$movementSpeed=$enum:movementSpeed.alertedWalk" />
                  </IfCondition>
                </WeatherCondition>
                <DefaultBranch>
                  <Expression expressions="$movementSpeed=$initialSpeed" />
                </DefaultBranch>
              </Switch>
            </Else>
          </IsInsideAreaWithLabel>
          <Wait duration="&apos;20s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Loop>
      <LuaWrapper onEnter="if data.t_distanceMove_params.useLight and not data.distanceTooShortForLight then &#10;    Contexts.SetNonpersistentOption(entity, &apos;availableToUseLight&apos;, &apos;distanceMove&apos;) &#10;end" onExit="if data.t_distanceMove_params.useLight and not data.distanceTooShortForLight then &#10;    Contexts.ClearOption(entity, &apos;availableToUseLight&apos;, &apos;distanceMove&apos;) &#10;end" />
      <LuaWrapper onEnter="Contexts.SetNonpersistentPreset(entity, &apos;distanceMove&apos;, &apos;distanceMove&apos;)" onExit="Contexts.ClearPreset(entity, &apos;distanceMove&apos;, &apos;distanceMove&apos;)" />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="additionalMoveParams" comment="" />
        <Variable name="distanceTooShortForLight" comment="" />
        <Variable name="minimalDistanceToUseLight" comment="" />
        <Variable name="movementSpeed" comment="" />
        <Variable name="outsidePoint" comment="" />
        <Variable name="initialSpeed" comment="" />
        <Variable name="outsideAreaOnly" comment="" />
        <Variable name="stopDistanceVariation" comment="" />
        <Variable name="stopWithinDistance" comment="" />
        <Variable name="target" comment="" />
        <Variable name="useExactMove" comment="" />
        <Variable name="useSituations" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-270" editorPosY="-430" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </DistanceCondition>
              <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_moveOnHorse hasInputBreakpoint="0" comment="TODO" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_moveOnHorse>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </ExactMove>
                  </Then>
                  <Else>
                    <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Move>
                  </Else>
                </IfElseCondition>
              </Selector>
            </Sequence>
          </Parallel>
        </Behavior>
      </Root>
      <Forest>
        <Loop editorPosX="170" editorPosY="600" hasInputBreakpoint="0" comment="We could use gates but it actualy make sense design wise to use some kind o random element, the NPCs would be too synchronized otherwise." breakpointFlags="0">
          <OutputBreakpoints />
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
              <Else>
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <WeatherCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="only speed up" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                  </WeatherCondition>
                  <WeatherCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                  </WeatherCondition>
                  <DefaultBranch>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </DefaultBranch>
                </Switch>
              </Else>
            </IsInsideAreaWithLabel>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Loop>
        <LuaWrapper editorPosX="110" editorPosY="290" hasInputBreakpoint="0" comment="JAK A JESTLI BUDOU CONTEXTY" breakpointFlags="0">
          <OutputBreakpoints />
        </LuaWrapper>
        <LuaWrapper editorPosX="1110" editorPosY="330" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
        </LuaWrapper>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="walkInGroup" is_function="0">
    <Variables>
      <Variable name="formation" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="friends" type="wuid" values="" isPersistent="0" form="array" />
      <Variable name="stage" type="_int" values="" isPersistent="1" form="single" />
      <Variable name="t_distanceMove_params" type="distanceMove_params:wuid" values="" isPersistent="0" form="single" />
      <Variable name="t_leader" type="wuid" values="" isPersistent="1" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <IfCondition failOnCondition="false" condition="$stage&lt;10">
            <Synchronize SemaphoreCount="$t_walkInGroup_params.groupSize" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="true" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;30s&apos;" LockManagerType="Local" SemaphoreName="&apos;$t_walkInGroup_params.uniqueGroupName&apos;" RunLogic="KeepRunning">
              <Sequence>
                <GetLockParticipants OutArray="$friends" IncludeSelf="true" />
                <Expression expressions="$t_leader=$friends[0]" />
                <Expression expressions="$stage=10" />
              </Sequence>
            </Synchronize>
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$stage==10">
            <IfElseCondition failOnCondition="false" condition="$t_leader==$this.id" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <MakeFormation FormationName="$t_walkInGroup_params.formationName" HandleVariable="$formation" />
                  <SetExternalLock LockManagerType="Local" Locked="false" LockName="&apos;$t_walkInGroup_params.uniqueGroupName&apos;" />
                  <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                    <Child canSkip="1">
                      <Sequence>
                        <VarOperation varName="$t_walkInGroup_params.distanceMove_params" targetVarName="$t_distanceMove_params" operation="Copy" argument="" />
                        <IncludeTree File="&apos;move/moveutils.xml&apos;" Name="&apos;distanceMove&apos;" nodeLabel="99581011" />
                      </Sequence>
                    </Child>
                    <OnFail canSkip="1">
                      <EndFormation FormationHandle="$formation" />
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Then>
              <Else canSkip="1">
                <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$t_walkInGroup_params.uniqueGroupName&apos;" RunLogic="KeepRunning">
                  <IncludeTree File="&apos;move/moveutils.xml&apos;" Name="&apos;formation_follow&apos;" nodeLabel="89712394" />
                </ExternalLock>
              </Else>
            </IfElseCondition>
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="formation" comment="" />
        <Variable name="friends" comment="" />
        <Variable name="stage" comment="" />
        <Variable name="t_distanceMove_params" comment="" />
        <Variable name="t_leader" comment="" />
        <Variable name="t_walkInGroup_params" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_walkInGroup_params" type="" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetLockParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetLockParticipants>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </Synchronize>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <MakeFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </MakeFormation>
                    <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </SetExternalLock>
                    <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Child>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </VarOperation>
                          <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </IncludeTree>
                        </Sequence>
                      </Child>
                      <OnFail>
                        <EndFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </EndFormation>
                      </OnFail>
                    </FuseBox>
                  </Sequence>
                </Then>
                <Else>
                  <ExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </IncludeTree>
                  </ExternalLock>
                </Else>
              </IfElseCondition>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="formation_lead">
    <Variables>
      <Variable name="formation" type="wuid" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <MakeFormation FormationName="$t_formation_params.id" HandleVariable="$formation" />
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          <EndFormation FormationHandle="$formation" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="formation" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_formation_params" type="formation_params" values="" form="single" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="230" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="leader" breakpointFlags="0">
            <OutputBreakpoints />
            <MakeFormation editorPosX="360" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </MakeFormation>
            <Wait editorPosX="360" editorPosY="80" isCollapsed="0" hasInputBreakpoint="0" comment="neco" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
            <EndFormation editorPosX="360" editorPosY="190" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </EndFormation>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="formation_follow" is_function="0">
    <Variables>
      <Variable name="formation" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GetMemberFormation MemberWUID="$t_leader" FormationHandleOut="$formation" />
          <FormationFollower FormationHandle="$formation" PreferredPositions="" FormationMode="Relaxed" AllowRelocation="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="formation" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="follow" breakpointFlags="0">
            <OutputBreakpoints />
            <GetMemberFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetMemberFormation>
            <FormationFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </FormationFollower>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="distanceMove_checkHorse" is_function="0">
    <Variables>
      <Variable name="HORSE_EFFECTIVITY" type="_float" values="0.4" isPersistent="0" form="single" />
      <Variable name="MIN_RIDE_DIST" type="_float" values="80" isPersistent="0" form="single" />
      <Variable name="distFromHorseToDest" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="distToDest" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="distToHorse" type="_float" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Expected" saveVersion="2">
      <Behavior canSkip="1">
        <AtomicDecorator>
          <Sequence>
            <NumericalOperation In1VariableName="this.id" In2VariableName="t_horse" In3VariableName="" OutVariableName="$distToHorse" Operation="distance2dSq_wuid" />
            <NumericalOperation In1VariableName="t_horse" In2VariableName="t_destination" In3VariableName="" OutVariableName="$distFromHorseToDest" Operation="distance2dSq_wuid" />
            <NumericalOperation In1VariableName="this.id" In2VariableName="t_destination" In3VariableName="" OutVariableName="$distToDest" Operation="distance2dSq_wuid" />
            <NumericalOperation In1VariableName="distToHorse" In2VariableName="" In3VariableName="" OutVariableName="$distToHorse" Operation="sqrt" />
            <NumericalOperation In1VariableName="distFromHorseToDest" In2VariableName="" In3VariableName="" OutVariableName="$distFromHorseToDest" Operation="sqrt" />
            <NumericalOperation In1VariableName="distToDest" In2VariableName="" In3VariableName="" OutVariableName="$distToDest" Operation="sqrt" />
            <IfElseCondition failOnCondition="false" condition="$distToDest&gt;$MIN_RIDE_DIST&amp;$distFromHorseToDest&gt;$MIN_RIDE_DIST" saveVersion="2">
              <Then canSkip="1">
                <Success />
              </Then>
              <Else canSkip="1">
                <Fail />
              </Else>
            </IfElseCondition>
            <IfElseCondition failOnCondition="false" condition="$distToDest&gt;$distToHorse+$distFromHorseToDest*(1-$HORSE_EFFECTIVITY)" saveVersion="2">
              <Then canSkip="1">
                <Success />
              </Then>
              <Else canSkip="1">
                <Fail />
              </Else>
            </IfElseCondition>
          </Sequence>
        </AtomicDecorator>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="HORSE_EFFECTIVITY" comment="The bigger the value, the more likely horse will be used. Interval &lt;-1..1&gt;" />
        <Variable name="MIN_RIDE_DIST" comment="" />
        <Variable name="distFromHorseToDest" comment="" />
        <Variable name="distToDest" comment="" />
        <Variable name="distToHorse" comment="" />
        <Variable name="t_destination" comment="" />
        <Variable name="t_horse" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_destination" type="wuid" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
        <Variable name="t_horse" type="wuid" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NumericalOperation>
              <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NumericalOperation>
              <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NumericalOperation>
              <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NumericalOperation>
              <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NumericalOperation>
              <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NumericalOperation>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Then>
                <Else>
                  <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Fail>
                </Else>
              </IfElseCondition>
              <IfElseCondition hasInputBreakpoint="0" comment="Prefer the path with horse?" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Then>
                <Else>
                  <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Fail>
                </Else>
              </IfElseCondition>
            </Sequence>
          </AtomicDecorator>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="moveBase">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
    <ForestContainer />
    <EditorData>
      <Variables />
      <ForwardDeclarations />
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="formationMove" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ErrorNode Message="&apos;Tree obsolete!&apos;" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ErrorNode>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="followPlayer">
    <Variables>
      <Variable name="t_leader" type="wuid" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Expression expressions="$t_leader=$__player" />
          <IncludeTree File="&apos;final/questUtils.xml&apos;" Name="&apos;followNPC&apos;" nodeLabel="10016806" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="t_leader" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-40" editorPosY="-10" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="210" editorPosY="-10" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression editorPosX="370" editorPosY="-10" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <IncludeTree editorPosX="370" editorPosY="70" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </IncludeTree>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="followPlayerAlongPath" is_function="0">
    <Variables>
      <Variable name="addParams" type="additionalMoveParams" values="destChangedThreshold(400)" isPersistent="0" form="single" />
      <Variable name="destinationReached" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="distFollowerToEnd" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="distPlayerToEnd" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="distPlayerToPath" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="distSqFollowerSeePlayer" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="distSqFollowerToPlayer" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="doFollowPlayer" type="_bool" values="true" isPersistent="0" form="single" />
      <Variable name="doFollowPlayer_local" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="follower" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="maxDistSqFolowerToPlayer" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="minDistFollowerToEnd" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="minDistFollowerToEnd_tmp" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="path" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="pathInfo" type="pathInfo" values="" isPersistent="0" form="single" />
      <Variable name="pathParams" type="predefinedPathParams" values="" isPersistent="0" form="single" />
      <Variable name="playerLeftPath" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="speed" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="waitReason" type="_int" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;follower&apos;" prune="true" negprune="false" Parent="" Child="$follower" Data="" />
          </GraphSearch>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;followPath&apos;" prune="true" negprune="false" Parent="" Child="$path" Data="" />
          </GraphSearch>
          <NumericalOperation In1VariableName="t_pathFollowParams.registerPlayerDistSq" In2VariableName="" In3VariableName="" OutVariableName="$distSqFollowerSeePlayer" Operation="pow2" />
          <Expression expressions="$minDistFollowerToEnd=999999999" />
          <SetVariable variable="$pathParams" script="" values="reversePath(false),approachFirstNode(false)" />
          <Parallel successMode="Any" failureMode="Any">
            <ContinuousSwitch>
              <IfCondition failOnCondition="false" condition="$doFollowPlayer==true">
                <Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$__player" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="$addParams" pathFindingParams="" staminaPolicy="" pathInfo="&apos;pathInfo&apos;" AnimationToPlay="" AnimationContext="" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$doFollowPlayer==false">
                <Sequence>
                  <Turn target="$__player" align="false" />
                  <IfCondition failOnCondition="false" condition="$distSqFollowerToPlayer&lt;$distSqFollowerSeePlayer&amp;$maxDistSqFolowerToPlayer&lt;$distSqFollowerSeePlayer">
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$waitReason==$enum:followPlayerPath_reasonToWait.wrongWay">
                        <Sequence>
                          <Success />
                          <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        </Sequence>
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$waitReason==$enum:followPlayerPath_reasonToWait.awayFromPath">
                        <Sequence>
                          <Success />
                          <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        </Sequence>
                      </IfCondition>
                    </Switch>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$distSqFollowerToPlayer&lt;$distSqFollowerSeePlayer&amp;$maxDistSqFolowerToPlayer&gt;$distSqFollowerSeePlayer">
                    <Sequence>
                      <Success />
                      <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                    </Sequence>
                  </IfCondition>
                </Sequence>
              </IfCondition>
            </ContinuousSwitch>
            <While doFail="false" propagateChildFail="false" condition="$destinationReached == false">
              <Sequence>
                <IfElseCondition failOnCondition="false" condition="$pathInfo.distance&gt;5" saveVersion="2">
                  <Then canSkip="1">
                    <IfElseCondition failOnCondition="false" condition="$pathInfo.distance&gt;20" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$speed=&apos;Sprint&apos;" />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$speed=&apos;Run&apos;" />
                      </Else>
                    </IfElseCondition>
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$speed=&apos;Walk&apos;" />
                  </Else>
                </IfElseCondition>
                <NumericalOperation In1VariableName="this.id" In2VariableName="__player" In3VariableName="" OutVariableName="$distSqFollowerToPlayer" Operation="distance2dSq_wuid" />
                <IfCondition failOnCondition="false" condition="$maxDistSqFolowerToPlayer&lt;$distSqFollowerToPlayer">
                  <Expression expressions="$maxDistSqFolowerToPlayer=$distSqFollowerToPlayer" />
                </IfCondition>
                <GetPredefPathTraverseInfo PathWuid="$path" ObjectWuid="$__player" Out_DistToPath="$distPlayerToPath" Out_DistToEnd="$distPlayerToEnd" Out_ClosestPointOnPath="" />
                <GetPredefPathTraverseInfo PathWuid="$path" ObjectWuid="$this.id" Out_DistToPath="" Out_DistToEnd="$distFollowerToEnd" Out_ClosestPointOnPath="" />
                <IfCondition failOnCondition="false" condition="$minDistFollowerToEnd&gt;$distFollowerToEnd">
                  <Expression expressions="$minDistFollowerToEnd=$distFollowerToEnd" />
                </IfCondition>
                <IfElseCondition failOnCondition="false" condition="$doFollowPlayer==true" saveVersion="2">
                  <Then canSkip="1">
                    <Sequence>
                      <Expression expressions="$doFollowPlayer_local=true" />
                      <IfCondition failOnCondition="false" condition="$distPlayerToPath&gt;$t_pathFollowParams.maxNpcDistSqFromPath">
                        <Expression expressions="$doFollowPlayer_local=false,&#10;$waitReason=$enum:followPlayerPath_reasonToWait.awayFromPath" />
                      </IfCondition>
                    </Sequence>
                  </Then>
                  <Else canSkip="1">
                    <Sequence>
                      <Expression expressions="$doFollowPlayer_local=false" />
                      <IfCondition failOnCondition="false" condition="$distPlayerToPath&lt;$t_pathFollowParams.maxNpcDistSqFromPath">
                        <Expression expressions="$doFollowPlayer_local=true,&#10;$maxDistSqFolowerToPlayer=0" />
                      </IfCondition>
                    </Sequence>
                  </Else>
                </IfElseCondition>
                <Expression expressions="$minDistFollowerToEnd_tmp=$minDistFollowerToEnd+5.0" />
                <Sequence>
                  <IfCondition failOnCondition="false" condition="$t_pathFollowParams.followWrongWay==false&amp;$distPlayerToEnd&gt;$minDistFollowerToEnd_tmp&amp;$distPlayerToPath&lt;$t_pathFollowParams.maxNpcDistSqFromPath">
                    <Expression expressions="$doFollowPlayer_local=false,&#10;$waitReason=$enum:followPlayerPath_reasonToWait.wrongWay" />
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$t_pathFollowParams.doCutCorners==false&amp;$playerLeftPath==true">
                    <Expression expressions="$doFollowPlayer_local=false" />
                  </IfCondition>
                  <Expression expressions="$doFollowPlayer=$doFollowPlayer_local" />
                </Sequence>
                <IfCondition failOnCondition="false" condition="$distPlayerToPath&gt;$t_pathFollowParams.registerPlayerDistSq">
                  <Expression expressions="$playerLeftPath=true" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$distSqFollowerToPlayer&lt;$distSqFollowerSeePlayer">
                  <Expression expressions="$playerLeftPath=false" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$distFollowerToEnd&lt;5">
                  <Expression expressions="$destinationReached=true" />
                </IfCondition>
                <Wait duration="&apos;200ms&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Sequence>
            </While>
          </Parallel>
          <Success />
          <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="addParams" comment="" />
        <Variable name="destinationReached" comment="" />
        <Variable name="distFollowerToEnd" comment="" />
        <Variable name="distPlayerToEnd" comment="" />
        <Variable name="distPlayerToPath" comment="" />
        <Variable name="distSqFollowerSeePlayer" comment="" />
        <Variable name="distSqFollowerToPlayer" comment="" />
        <Variable name="doFollowPlayer" comment="" />
        <Variable name="doFollowPlayer_local" comment="" />
        <Variable name="follower" comment="" />
        <Variable name="maxDistSqFolowerToPlayer" comment="" />
        <Variable name="minDistFollowerToEnd" comment="" />
        <Variable name="minDistFollowerToEnd_tmp" comment="" />
        <Variable name="path" comment="" />
        <Variable name="pathInfo" comment="" />
        <Variable name="pathParams" comment="" />
        <Variable name="playerLeftPath" comment="" />
        <Variable name="speed" comment="" />
        <Variable name="waitReason" comment="$enum:followPlayerPath_reasonToWait" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="We distinguish three zones. 1st zone refers to the distance from the path which NPC is going to move from path if player leaves the path. 2nd zone refers to to distance from path in which NPC sees the player (barks, etc). 3rd zone is blank space and the NPC which is waiting on the path wont see the player" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </NumericalOperation>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <SetVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </SetVariable>
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Move>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Turn>
                    <IfCondition hasInputBreakpoint="0" comment="Case A: player is in 1st or 2nd zone and is going away." breakpointFlags="0">
                      <OutputBreakpoints />
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Success hasInputBreakpoint="0" comment="monolog" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Success>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Sequence>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Success hasInputBreakpoint="0" comment="monolog" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Success>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Sequence>
                        </IfCondition>
                      </Switch>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="Case A: player is in the 1st or 2nd zone and is returning. " breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Success hasInputBreakpoint="0" comment="monolog" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </Sequence>
                    </IfCondition>
                  </Sequence>
                </IfCondition>
              </ContinuousSwitch>
              <While hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </IfElseCondition>
                  <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </NumericalOperation>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <GetPredefPathTraverseInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetPredefPathTraverseInfo>
                  <GetPredefPathTraverseInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetPredefPathTraverseInfo>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfElseCondition hasInputBreakpoint="0" comment="Change state" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="Prevent using global variable in parallel branches" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                      </Sequence>
                    </Then>
                    <Else>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                      </Sequence>
                    </Else>
                  </IfElseCondition>
                  <Expression hasInputBreakpoint="0" comment="Tollerance" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Sequence hasInputBreakpoint="0" comment="Follow contstraints" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="Check players direction" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Sequence>
                  <IfCondition hasInputBreakpoint="0" comment="Case B. Player left the 2nd zone to the 3rd zone" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="Case B. Player returned from the 3rd to the NPC" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </While>
            </Parallel>
            <Success hasInputBreakpoint="0" comment="monolog" breakpointFlags="0">
              <OutputBreakpoints />
            </Success>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments>
        <Comment text="Handle_change_state_(follow_/_unfollow)" posX="1240" posY="1500" width="900" height="887" resizeBorderWidth="900" resizeBorderHeight="860" color="0.65,0.65,0.65" author="daniel.mikes" />
      </Comments>
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="followNpc" is_function="1">
    <Variables>
      <Variable name="addParams" type="additionalMoveParams" values="destChangedThreshold(&apos;500ms&apos;)" isPersistent="0" form="single" />
      <Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="pathInfo" type="pathInfo" values="" isPersistent="0" form="single" />
      <Variable name="pathfind_params" type="pathFindingParams" values="" isPersistent="0" form="single" />
      <Variable name="speed" type="enum:movementSpeed" values="$enum:movementSpeed.walk" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="leader" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="run2sprint" type="_float" values="30" isPersistent="0" form="single" requirementType="In" />
      <Variable name="run2walk" type="_float" values="10" isPersistent="0" form="single" requirementType="In" />
      <Variable name="sprint2run" type="_float" values="20" isPersistent="0" form="single" requirementType="In" />
      <Variable name="sprint2walk" type="_float" values="10" isPersistent="0" form="single" requirementType="In" />
      <Variable name="startDistance" type="_float" values="5" isPersistent="0" form="single" requirementType="In" />
      <Variable name="stopDistance" type="_float" values="2.5" isPersistent="0" form="single" requirementType="In" />
      <Variable name="walk2run" type="_float" values="20" isPersistent="0" form="single" requirementType="In" />
      <Variable name="walk2sprint" type="_float" values="30" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Expression expressions="$pathfind_params.useGeneratedNSO=true &#10;$addParams.destChangedThreshold= &apos;500&apos;" />
      </OnInit>
      <Behavior canSkip="1">
        <Parallel successMode="Any" failureMode="Any">
          <Loop count="-1">
            <Selector>
              <DistanceCondition Origin="$this.id" ReferencePt="$leader" Low="$startDistance" High="$startDistance" Negation="false" ValueOnMiddle="false" failOnCondition="true">
                <Sequence>
                  <Turn target="$leader" align="false" />
                  <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                </Sequence>
              </DistanceCondition>
              <Selector>
                <Sequence>
                  <Move stopWithinDistance="$stopDistance" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$leader" destinationSpecification2="" destinationSpecification3="" speed="$speed" additionalParams="$addParams" pathFindingParams="$pathfind_params" staminaPolicy="" pathInfo="&apos;pathInfo&apos;" AnimationToPlay="" AnimationContext="" />
                  <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                </Sequence>
                <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Selector>
            </Selector>
          </Loop>
          <Loop count="-1">
            <Sequence>
              <Expression expressions="$distance = $pathInfo.distance" />
              <AtomicDecorator>
                <Switch>
                  <IfCondition failOnCondition="false" condition="$speed== $enum:movementSpeed.walk">
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$distance&gt;$walk2run">
                        <Expression expressions="$speed=$enum:movementSpeed.run" />
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$distance&gt;$walk2sprint">
                        <Expression expressions="$speed=$enum:movementSpeed.sprint" />
                      </IfCondition>
                      <DefaultBranch>
                        <Success />
                      </DefaultBranch>
                    </Switch>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$speed==$enum:movementSpeed.run">
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$distance&lt;$run2walk">
                        <Expression expressions="$speed=$enum:movementSpeed.walk" />
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$distance&gt;$run2sprint">
                        <Expression expressions="$speed=$enum:movementSpeed.sprint" />
                      </IfCondition>
                      <DefaultBranch>
                        <Success />
                      </DefaultBranch>
                    </Switch>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$speed==$enum:movementSpeed.sprint">
                    <Switch>
                      <IfCondition failOnCondition="false" condition="$distance&lt;$sprint2walk">
                        <Expression expressions="$speed=$enum:movementSpeed.walk" />
                      </IfCondition>
                      <IfCondition failOnCondition="false" condition="$distance&lt;$sprint2run">
                        <Expression expressions="$speed=$enum:movementSpeed.run" />
                      </IfCondition>
                      <DefaultBranch>
                        <Success />
                      </DefaultBranch>
                    </Switch>
                  </IfCondition>
                  <DefaultBranch>
                    <Success />
                  </DefaultBranch>
                </Switch>
              </AtomicDecorator>
              <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </Loop>
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer>
      <DistanceGate Origin="$this.id" ReferencePt="$leader" Low="5.000000" High="5.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning" />
      <DisableMoveTransitions />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="addParams" comment="" />
        <Variable name="distance" comment="" />
        <Variable name="pathInfo" comment="" />
        <Variable name="pathfind_params" comment="" />
        <Variable name="speed" comment="" />
        <Variable name="leader" comment="" />
        <Variable name="run2sprint" comment="" />
        <Variable name="run2walk" comment="" />
        <Variable name="sprint2run" comment="" />
        <Variable name="sprint2walk" comment="" />
        <Variable name="startDistance" comment="" />
        <Variable name="stopDistance" comment="" />
        <Variable name="walk2run" comment="" />
        <Variable name="walk2sprint" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="150" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Expression>
        </OnInit>
        <Behavior>
          <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Turn>
                    <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                  </Sequence>
                </DistanceCondition>
                <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Move>
                    <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                  </Sequence>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Selector>
              </Selector>
            </Loop>
            <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="Walk" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <DefaultBranch>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </DefaultBranch>
                      </Switch>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="Run" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <DefaultBranch>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </DefaultBranch>
                      </Switch>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="Sprint" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </IfCondition>
                        <DefaultBranch>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </DefaultBranch>
                      </Switch>
                    </IfCondition>
                    <DefaultBranch>
                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Success>
                    </DefaultBranch>
                  </Switch>
                </AtomicDecorator>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Loop>
          </Parallel>
        </Behavior>
      </Root>
      <Forest>
        <DistanceGate editorPosX="880" editorPosY="-520" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
        </DistanceGate>
        <DisableMoveTransitions editorPosX="720" editorPosY="110" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
        </DisableMoveTransitions>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="followNpc_inFormation" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="followNpc_leader" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="followNpc_slave" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="getSpeedFromDistance" is_function="1">
    <Variables>
      <Variable name="floatIndex" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="intIndex" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="speedToEnum" type="_int,enum:movementSpeed" values="" isPersistent="0" form="custom_associative" />
    </Variables>
    <Parameters>
      <Variable name="distance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="speedEnumOut" type="enum:movementSpeed" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <AtomicDecorator>
          <Switch>
            <IfCondition failOnCondition="false" condition="$speed==&apos;Walk&apos;">
              <Switch>
                <IfCondition failOnCondition="false" condition="$distance&gt;$walk2run">
                  <Expression expressions="$speedOut=&apos;Run&apos;" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$distance&gt;$walk2sprint">
                  <Expression expressions="$speedOut=&apos;Sprint&apos;" />
                </IfCondition>
                <DefaultBranch>
                  <Success />
                </DefaultBranch>
              </Switch>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$speed==&apos;Run&apos;">
              <Switch>
                <IfCondition failOnCondition="false" condition="$distance&lt;$run2walk">
                  <Expression expressions="$speedOut=&apos;Walk&apos;" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$distance&gt;$run2sprint">
                  <Expression expressions="$speedOut=&apos;Sprint&apos;" />
                </IfCondition>
                <DefaultBranch>
                  <Success />
                </DefaultBranch>
              </Switch>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$speed==&apos;Sprint&apos;">
              <Switch>
                <IfCondition failOnCondition="false" condition="$distance&lt;$sprint2walk">
                  <Expression expressions="$speedOut=&apos;Walk&apos;" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$distance&lt;$sprint2run">
                  <Expression expressions="$speedOut=&apos;Run&apos;" />
                </IfCondition>
                <DefaultBranch>
                  <Success />
                </DefaultBranch>
              </Switch>
            </IfCondition>
            <DefaultBranch>
              <Success />
            </DefaultBranch>
          </Switch>
        </AtomicDecorator>
      </Behavior>
    </Root>
    <ForestContainer>
      <AtomicDecorator>
        <Sequence>
          <Expression expressions="$speedToEnum[0] = $enum:movementSpeed.relaxedWalk &#10;$speedToEnum[1] = $enum:movementSpeed.walk &#10;$speedToEnum[2] = $enum:movementSpeed.alertedWalk &#10;$speedToEnum[3] = $enum:movementSpeed.run &#10;$speedToEnum[4] = $enum:movementSpeed.fastRun &#10;$speedToEnum[5] = $enum:movementSpeed.slowDash &#10;$speedToEnum[6] = $enum:movementSpeed.dash &#10;$speedToEnum[7] = $enum:movementSpeed.sprint" />
          <ExecuteLua code="data.floatIndex = data.distance/2 &#10;data.intIndex = math.floor(data.floatIndex)" />
          <IfCondition failOnCondition="false" condition="$intIndex &gt; 7">
            <Expression expressions="$intIndex = 7" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$intIndex &lt; 0">
            <Expression expressions="$intIndex = 0" />
          </IfCondition>
          <Expression expressions="$speedEnumOut = $speedToEnum[$intIndex]" />
        </Sequence>
      </AtomicDecorator>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="floatIndex" comment="" />
        <Variable name="intIndex" comment="" />
        <Variable name="speedToEnum" comment="" />
        <Variable name="distance" comment="" />
        <Variable name="speedEnumOut" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="130" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="Walk" breakpointFlags="0">
                <OutputBreakpoints />
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <DefaultBranch>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </DefaultBranch>
                </Switch>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="Run" breakpointFlags="0">
                <OutputBreakpoints />
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <DefaultBranch>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </DefaultBranch>
                </Switch>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="Sprint" breakpointFlags="0">
                <OutputBreakpoints />
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <DefaultBranch>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </DefaultBranch>
                </Switch>
              </IfCondition>
              <DefaultBranch>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </DefaultBranch>
            </Switch>
          </AtomicDecorator>
        </Behavior>
      </Root>
      <Forest>
        <AtomicDecorator editorPosX="430" editorPosY="730" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
          </Sequence>
        </AtomicDecorator>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="tour" is_function="1">
    <Variables>
      <Variable name="aliasSmallTalk" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="approachDialogData" type="quest:tour:dialogData" values="" isPersistent="0" form="single" />
      <Variable name="arrivalDialogData" type="quest:tour:dialogData" values="" isPersistent="0" form="single" />
      <Variable name="closeBehaviorDueEndTour" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="closeBehaviorDueTimeout" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="currentTagPoint" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="mode" type="enum:questTourState" values="" isPersistent="0" form="single" />
      <Variable name="nextTagPoint" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="waitForPlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="waitForPlayerDistance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="waitForPlayerTimeout" type="_string" values="-1" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Parallel successMode="Any" failureMode="Any">
          <IfElseCondition failOnCondition="false" condition="$waitForPlayer == true" saveVersion="2">
            <Then canSkip="1">
              <Parallel successMode="Any" failureMode="Any">
                <Loop count="-1">
                  <DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$waitForPlayerDistance" High="$waitForPlayerDistance" Negation="true" OpenInMiddle="false" RunLogic="Halt">
                    <Sequence>
                      <Expression expressions="$mode = $enum:questTourState.wait" />
                      <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                    </Sequence>
                  </DistanceGate>
                </Loop>
                <Loop count="-1">
                  <DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$waitForPlayerDistance" High="$waitForPlayerDistance" Negation="false" OpenInMiddle="true" RunLogic="Halt">
                    <Sequence>
                      <Expression expressions="$mode = $enum:questTourState.move" />
                      <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                    </Sequence>
                  </DistanceGate>
                </Loop>
              </Parallel>
            </Then>
            <Else canSkip="1">
              <Sequence>
                <Expression expressions="$mode = $enum:questTourState.move" />
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Sequence>
            </Else>
          </IfElseCondition>
          <ContinuousSwitch>
            <IfCondition failOnCondition="false" condition="$mode == $enum:questTourState.wait">
              <Sequence>
                <Wait duration="$waitForPlayerTimeout" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                <Expression expressions="$mode = $enum:questTourState.timeout" />
              </Sequence>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$mode == $enum:questTourState.timeout">
              <AtomicDecorator>
                <Sequence>
                  <RemoveLink From="$this.id" To="$currentTagPoint" Tag="&apos;currentTagPoint&apos;" LinkOpHandleMode="Success" />
                  <Expression expressions="$closeBehaviorDueTimeout = true" />
                </Sequence>
              </AtomicDecorator>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$mode == $enum:questTourState.move">
              <Loop count="-1">
                <Sequence>
                  <AtomicDecorator>
                    <Sequence>
                      <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <LinkTagFilter tag="&apos;currentTagPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$currentTagPoint" Data="" />
                      </GraphSearch>
                      <GraphSearch Origin="$currentTagPoint" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <LinkTagFilter tag="&apos;nextTagPoint&apos;" prune="true" negprune="unknown" Parent="" Child="$nextTagPoint" Data="" />
                      </GraphSearch>
                      <VarOperation varName="$arrivalDialogData" targetVarName="" operation="Reinit" argument="" />
                      <GraphSearch Origin="$currentTagPoint" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;arrivalDialogData&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                        <Datalyzer Tag="&apos;arrivalDialogData&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$arrivalDialogData" saveVersion="2" />
                      </GraphSearch>
                      <VarOperation varName="$approachDialogData" targetVarName="" operation="Reinit" argument="" />
                      <GraphSearch Origin="$currentTagPoint" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;approachDialogData&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                        <Datalyzer Tag="&apos;approachDialogData&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$approachDialogData" saveVersion="2" />
                      </GraphSearch>
                      <IfElseCondition failOnCondition="false" condition="$approachDialogData.alias ~= &apos;&apos;" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$aliasSmallTalk = $approachDialogData.alias" />
                        </Then>
                        <Else canSkip="1">
                          <IfCondition failOnCondition="false" condition="$arrivalDialogData.alias ~= &apos;&apos;">
                            <Expression expressions="$aliasSmallTalk = $arrivalDialogData.alias" />
                          </IfCondition>
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </AtomicDecorator>
                  <Sequence>
                    <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$approachDialogData.distance" changeNPCState="true" destinationSpecification="$currentTagPoint" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                    <IfCondition failOnCondition="false" condition="$aliasSmallTalk ~= &apos;&apos;">
                      <IfElseCondition failOnCondition="false" condition="($arrivalDialogData.withPlayer == true) | &#10;($approachDialogData.withPlayer == true)" saveVersion="2">
                        <Then canSkip="1">
                          <Function_speech_dialogInitiator alias="$aliasSmallTalk" context="$__null" customParameters="$__null" metarole="" preset="$enum:dialogPreset.ingame" recipient="$__player" recipientMetaroles="" nodeLabel="60623850" />
                        </Then>
                        <Else canSkip="1">
                          <SendMessageToNPC target="$this.id" type="&apos;dialog:monologRequest&apos;" values="alias($aliasSmallTalk)" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="" />
                        </Else>
                      </IfElseCondition>
                    </IfCondition>
                    <AtomicDecorator>
                      <Sequence>
                        <RemoveLink From="$this.id" To="$currentTagPoint" Tag="&apos;currentTagPoint&apos;" LinkOpHandleMode="Error" />
                        <VarOperation varName="$aliasSmallTalk" targetVarName="" operation="Reinit" argument="" />
                        <IfElseCondition failOnCondition="false" condition="$nextTagPoint ~= $__null" saveVersion="2">
                          <Then canSkip="1">
                            <Sequence>
                              <AddLink From="$this.id" To="$nextTagPoint" Tag="&apos;currentTagPoint&apos;" Data="" LinkOpHandleMode="Error" />
                              <Expression expressions="$currentTagPoint = $nextTagPoint" />
                            </Sequence>
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$closeBehaviorDueEndTour = true" />
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </AtomicDecorator>
                  </Sequence>
                </Sequence>
              </Loop>
            </IfCondition>
          </ContinuousSwitch>
          <IfGate atomic="false" condition="$closeBehaviorDueEndTour == true" RunLogic="KeepRunning">
            <Success />
          </IfGate>
          <IfGate atomic="false" condition="$closeBehaviorDueTimeout == true" RunLogic="KeepRunning">
            <Success />
          </IfGate>
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer>
      <IfGate atomic="false" condition="$closeBehaviorDueTimeout == true" RunLogic="KeepRunning">
        <Fail />
      </IfGate>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="aliasSmallTalk" comment="" />
        <Variable name="approachDialogData" comment="" />
        <Variable name="arrivalDialogData" comment="" />
        <Variable name="closeBehaviorDueEndTour" comment="" />
        <Variable name="closeBehaviorDueTimeout" comment="" />
        <Variable name="currentTagPoint" comment="" />
        <Variable name="mode" comment="" />
        <Variable name="nextTagPoint" comment="" />
        <Variable name="waitForPlayer" comment="" />
        <Variable name="waitForPlayerDistance" comment="" />
        <Variable name="waitForPlayerTimeout" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-360" editorPosY="-950" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </Sequence>
                    </DistanceGate>
                  </Loop>
                  <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </Sequence>
                    </DistanceGate>
                  </Loop>
                </Parallel>
              </Then>
              <Else>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </Else>
            </IfElseCondition>
            <ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </RemoveLink>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Sequence>
                </AtomicDecorator>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </LinkTagFilter>
                        </GraphSearch>
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </LinkTagFilter>
                        </GraphSearch>
                        <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </VarOperation>
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </AnyLinkFilter>
                          <Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                          </Datalyzer>
                        </GraphSearch>
                        <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </VarOperation>
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </AnyLinkFilter>
                          <Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                          </Datalyzer>
                        </GraphSearch>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </IfCondition>
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </AtomicDecorator>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Move>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Function_speech_dialogInitiator>
                          </Then>
                          <Else>
                            <SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </SendMessageToNPC>
                          </Else>
                        </IfElseCondition>
                      </IfCondition>
                      <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </RemoveLink>
                          <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </VarOperation>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </AddLink>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </IfElseCondition>
                        </Sequence>
                      </AtomicDecorator>
                    </Sequence>
                  </Sequence>
                </Loop>
              </IfCondition>
            </ContinuousSwitch>
            <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </IfGate>
            <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </IfGate>
          </Parallel>
        </Behavior>
      </Root>
      <Forest>
        <IfGate editorPosX="630" editorPosY="-2170" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Fail>
        </IfGate>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="moveAndWait" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="data" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <ExactMove directionType="AlignWithEntity" directionSpecification="$data" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$data" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <Callback_empty EventName="&apos;OnFinished&apos;" />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData Signature="wuidData" EventSet="endNotification">
      <Variables>
        <Variable name="data" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExactMove>
            <Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Callback_empty>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="moveInFormation_inFormation" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="followEnabled" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="pathOffset" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="successDistance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$followFormationParams.formation.leader == $this.id" saveVersion="2">
          <Then canSkip="1">
            <Function_moveInFormation_leader changeNPCState="$changeNPCState" destination="$destination" followEnabled="$followEnabled" followFormationParams="$followFormationParams" pathOffset="$pathOffset" successDistance="$successDistance" nodeLabel="16996986" />
          </Then>
          <Else canSkip="1">
            <Function_moveInFormation_slave followFormationParams="$followFormationParams" nodeLabel="32787505" />
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="destination" comment="" />
        <Variable name="followEnabled" comment="" />
        <Variable name="followFormationParams" comment="" />
        <Variable name="pathOffset" comment="" />
        <Variable name="successDistance" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="Is leader?" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Function_moveInFormation_leader hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_moveInFormation_leader>
            </Then>
            <Else>
              <Function_moveInFormation_slave hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_moveInFormation_slave>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="moveInFormation_leader" is_function="1">
    <Variables>
      <Variable name="formationLock" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="formationWUID" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="followEnabled" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="pathOffset" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="successDistance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
          <Child canSkip="1">
            <Sequence>
              <Expression expressions="$pathFindingParams.pathOffset = $pathOffset" />
              <MakeFormation FormationName="$followFormationParams.formation.type" HandleVariable="$formationWUID" />
              <Parallel successMode="Any" failureMode="Any">
                <Sequence>
                  <Concatenation OutString="$formationLock" Pattern="&apos;followNPC_leader_$this.id&apos;" />
                  <SetExternalLock LockManagerType="Global" Locked="false" LockName="&apos;$formationLock&apos;" />
                  <IfElseCondition failOnCondition="false" condition="$followFormationParams.formation.speedLimit == $__null" saveVersion="2">
                    <Then canSkip="1">
                      <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$successDistance" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
                    </Then>
                    <Else canSkip="1">
                      <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$successDistance" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="$followFormationParams.formation.speedLimit" additionalParams="" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
                    </Else>
                  </IfElseCondition>
                </Sequence>
                <IfGate atomic="false" condition="$followEnabled" RunLogic="KeepRunning">
                  <EntityContext context="FollowableNPCCenter" target="$this.id">
                    <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </EntityContext>
                </IfGate>
              </Parallel>
            </Sequence>
          </Child>
          <OnSuccess canSkip="1">
            <Sequence>
              <EndFormation FormationHandle="$formationWUID" />
              <SetExternalLock LockManagerType="Global" Locked="true" LockName="&apos;$formationLock&apos;" />
            </Sequence>
          </OnSuccess>
        </FuseBox>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="formationLock" comment="" />
        <Variable name="formationWUID" comment="" />
        <Variable name="pathFindingParams" comment="" />
        <Variable name="destination" comment="" />
        <Variable name="followEnabled" comment="" />
        <Variable name="followFormationParams" comment="" />
        <Variable name="pathOffset" comment="" />
        <Variable name="successDistance" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Child>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <MakeFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </MakeFormation>
                <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Concatenation>
                    <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </SetExternalLock>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Move>
                      </Then>
                      <Else>
                        <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Move>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                  <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </EntityContext>
                  </IfGate>
                </Parallel>
              </Sequence>
            </Child>
            <OnSuccess>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <EndFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </EndFormation>
                <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SetExternalLock>
              </Sequence>
            </OnSuccess>
          </FuseBox>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="moveInFormation_slave" is_function="1">
    <Variables>
      <Variable name="formationLock" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="formationWUID" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="followFormationParams" type="followFormationParams" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Concatenation OutString="$formationLock" Pattern="&apos;followNPC_leader_$followFormationParams.formation.leader&apos;" />
      </OnInit>
      <Behavior canSkip="1">
        <ExternalLock atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;10m&apos;" LockManagerType="Global" SemaphoreName="&apos;$formationLock&apos;" RunLogic="KeepRunning">
          <Sequence>
            <GetMemberFormation MemberWUID="$followFormationParams.formation.leader" FormationHandleOut="$formationWUID" />
            <IfCondition failOnCondition="true" condition="$formationWUID~=$__null">
              <FormationFollower FormationHandle="$formationWUID" PreferredPositions="$followFormationParams.formation.preferedPosition" FormationMode="$followFormationParams.formation.policy" AllowRelocation="$followFormationParams.formation.allowRelocation" />
            </IfCondition>
          </Sequence>
        </ExternalLock>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="formationLock" comment="" />
        <Variable name="formationWUID" comment="" />
        <Variable name="followFormationParams" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Concatenation>
        </OnInit>
        <Behavior>
          <ExternalLock hasInputBreakpoint="0" comment="Waiting for leader to create formation" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GetMemberFormation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetMemberFormation>
              <IfCondition hasInputBreakpoint="0" comment="Formation already finished moving?" breakpointFlags="0">
                <OutputBreakpoints />
                <FormationFollower hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </FormationFollower>
              </IfCondition>
            </Sequence>
          </ExternalLock>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="move_waitForSynchronization" is_function="0">
    <Variables />
    <Parameters>
      <Variable name="lockCount" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="lockName" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="target" type="_wuid" values="$__null" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <IfCondition failOnCondition="false" condition="$target ~= $__null">
            <ExactMove directionType="AlignWithEntity" directionSpecification="$target" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$target" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          </IfCondition>
          <SuppressFailure>
            <Synchronize SemaphoreCount="$lockCount" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$lockName&apos;" RunLogic="KeepRunning">
              <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Synchronize>
          </SuppressFailure>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData Signature="moveAndSync" EventSet="">
      <Variables>
        <Variable name="lockCount" comment="" />
        <Variable name="lockName" comment="" />
        <Variable name="target" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ExactMove>
            </IfCondition>
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Synchronize>
            </SuppressFailure>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>