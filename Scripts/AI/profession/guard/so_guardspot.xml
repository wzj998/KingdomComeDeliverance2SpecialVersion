<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="use" is_function="0">
    <Variables>
      <Variable name="isImportant" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="t_target" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="t_waitTime" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <VariableExistsGate VarToTest="$__resource.id" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
            <Then canSkip="1">
              <IfElseCondition failOnCondition="false" condition="$__resource.id == $__null" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$t_target = $__object.id" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$t_target = $__resource.id" />
                </Else>
              </IfElseCondition>
            </Then>
            <Else canSkip="1">
              <Expression expressions="$t_target = $__object.id" />
            </Else>
          </VariableExistsGate>
          <ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.t_target) &#10;data.isImportant = EntityUtils.GetScriptProperty(soEntity, &apos;important&apos;) &#10;data.t_waitTime = EntityUtils.GetScriptProperty(soEntity, &apos;waitTime&apos;)" />
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$isImportant" saveVersion="2">
          <Then canSkip="1">
            <ChangeBehaviorStateElement smartEntity="$__resource.id" behavior="&apos;use_wait&apos;" state="Enabled" allowAnyState="false">
              <CallBehavior Target="$__object.id" BehaviorName="&apos;use_core&apos;" stopAfterFirstFound="true" ignoreDropUnloading="false" nodeLabel="43898160" />
            </ChangeBehaviorStateElement>
          </Then>
          <Else canSkip="1">
            <ChangeBehaviorStateElement smartEntity="$__object.id" behavior="&apos;use_follower&apos;" state="Enabled" allowAnyState="false">
              <CallBehavior Target="$__object.id" BehaviorName="&apos;use_core&apos;" stopAfterFirstFound="true" ignoreDropUnloading="false" nodeLabel="70129126" />
            </ChangeBehaviorStateElement>
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="isImportant" comment="" />
        <Variable name="t_target" comment="" />
        <Variable name="t_waitTime" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="10" editorPosY="-190" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </Then>
              <Else>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Else>
            </VariableExistsGate>
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
          </Sequence>
        </OnInit>
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </CallBehavior>
              </ChangeBehaviorStateElement>
            </Then>
            <Else>
              <ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </CallBehavior>
              </ChangeBehaviorStateElement>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_wait" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <ChangeBehaviorStateElement smartEntity="$__resource.id" behavior="&apos;use_wait&apos;" state="Enabled" allowAnyState="false">
          <Sequence>
            <WaitAction />
            <ExactMove directionType="AlignWithEntity" directionSpecification="$__object.id" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
            <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </Sequence>
        </ChangeBehaviorStateElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </WaitAction>
              <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ExactMove>
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </Sequence>
          </ChangeBehaviorStateElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_follower" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root editorPosX="0" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Wait editorPosX="250" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Wait>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_important" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root editorPosX="0" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_core" is_function="0">
    <Variables>
      <Variable name="target_leaningPlace" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="target_sitPlace" type="wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Selector>
            <Sequence>
              <GraphSearch Origin="$t_target" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <CategoryFilter categories="&apos;sitPlace&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                <Nodalyzer Quantifiers="Exists" Parent="" Child="$target_sitPlace" saveVersion="2" />
              </GraphSearch>
              <StanceElement smartObject="$target_sitPlace" stance="sitting" allowAny="false">
                <WaitAction />
              </StanceElement>
            </Sequence>
            <Sequence>
              <GraphSearch Origin="$t_target" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <CategoryFilter categories="&apos;leaningPlace&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                <Nodalyzer Quantifiers="Exists" Parent="" Child="$target_leaningPlace" saveVersion="2" />
              </GraphSearch>
              <StanceElement smartObject="$target_leaningPlace" stance="standing" allowAny="false">
                <WaitAction />
              </StanceElement>
            </Sequence>
            <Sequence>
              <WaitAction />
              <ExactMove directionType="AlignWithEntity" directionSpecification="$t_target" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$t_target" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
            </Sequence>
          </Selector>
          <Wait duration="$t_waitTime" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="target_leaningPlace" comment="" />
        <Variable name="target_sitPlace" comment="" />
        <Variable name="t_target" comment="" />
        <Variable name="t_waitTime" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_target" type="wuid" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
        <Variable name="t_waitTime" type="_string" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosY="150" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CategoryFilter>
                  <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                  </Nodalyzer>
                </GraphSearch>
                <StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WaitAction>
                </StanceElement>
              </Sequence>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CategoryFilter>
                  <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                  </Nodalyzer>
                </GraphSearch>
                <StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WaitAction>
                </StanceElement>
              </Sequence>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </WaitAction>
                <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ExactMove>
              </Sequence>
            </Selector>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>
