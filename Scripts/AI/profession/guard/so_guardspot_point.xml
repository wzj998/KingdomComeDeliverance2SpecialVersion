<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="use" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="0" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait editorPosX="260" editorPosY="-70" hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="use_wait" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="0" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Wait editorPosX="230" editorPosY="80" hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="arrive" is_function="0">
		<Variables>
			<Variable name="context" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="holders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="movementSpeed" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="reacted" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<GetBehaviorHolders area="$__object.id" behaviors="&apos;guard,guardOffDuty&apos;" targetVar="$holders" />
					<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.movementSpeed = soEntity.movementSpeed;" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<AnyDecorator preset="crime_keepConfiscatedItems" enabled="true">
					<IfElseCondition failOnCondition="false" condition="#holders&gt;0" saveVersion="2">
						<Then canSkip="1">
							<AddLinkElement from="$__object.id" to="$holders[0]" tag="&apos;guardOnPlace&apos;" data="" enabled="true">
								<Sequence>
									<WaitAction />
									<Move stopWithinDistance="1.500000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$holders[0]" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;10s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;guardKickLock_init&apos;" RunLogic="Halt">
										<Sequence>
											<Turn target="$holders[0]" align="false" />
											<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;guardKickLock_dialog&apos;" RunLogic="Halt">
												<Sequence>
													<Function_crime_npcReactedToCrime npc="$this.id" npcReacted="$reacted" nodeLabel="23186548" />
													<IfElseCondition failOnCondition="false" condition="$reacted" saveVersion="2">
														<Then canSkip="1">
															<Expression expressions="$context[&apos;npcResiloCrime&apos;] = 1" />
														</Then>
														<Else canSkip="1">
															<Expression expressions="$context[&apos;npcResiloCrime&apos;] = 0" />
														</Else>
													</IfElseCondition>
													<Function_speech_dialogInitiator alias="&apos;straze_vymenaStraziNaHlidce&apos;" animationApproach="$enum:animationApproach.tryDialogAnimations" context="$context" customParameters="" metarole="" preset="$enum:dialogPreset.ingame" recipient="$holders[0]" recipientMetaroles="" nodeLabel="87633829" />
												</Sequence>
											</Synchronize>
										</Sequence>
									</Synchronize>
								</Sequence>
							</AddLinkElement>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<WaitAction />
								<Move stopWithinDistance="1.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="3.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
							</Sequence>
						</Else>
					</IfElseCondition>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="context" comment="" />
				<Variable name="holders" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="reacted" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetBehaviorHolders>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
					</Sequence>
				</OnInit>
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Move>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Turn>
												<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Function_crime_npcReactedToCrime hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_crime_npcReactedToCrime>
														<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Then>
															<Else>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Else>
														</IfElseCondition>
														<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_speech_dialogInitiator>
													</Sequence>
												</Synchronize>
											</Sequence>
										</Synchronize>
									</Sequence>
								</AddLinkElement>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Move>
								</Sequence>
							</Else>
						</IfElseCondition>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="guard" is_function="0">
		<Variables>
			<Variable name="continualMovement" type="_bool" values="false" isPersistent="0" form="single" />
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="destinationVec" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="onImportantPoint" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="resources" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="spawnMissingNpcVolume" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;resources&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$resources" saveVersion="2" />
					</GraphSearch>
					<VariableExistsGate VarToTest="$notImportant" VarIndexMode="Parents" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$onImportantPoint = !$notImportant" />
						</Then>
					</VariableExistsGate>
					<VariableExistsGate VarToTest="$continual" VarIndexMode="Parents" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$continualMovement = $continual" />
						</Then>
					</VariableExistsGate>
					<IfElseCondition failOnCondition="false" condition="$resources == $__null" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$destination = $__object.id" />
						</Then>
						<Else canSkip="1">
							<Expression expressions="$destination = $resources" />
						</Else>
					</IfElseCondition>
					<IfCondition failOnCondition="false" condition="$onImportantPoint">
						<EntityContextCheck context="crime_spawnMissingNpcVolume" target="" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$spawnMissingNpcVolume = true" />
							</Then>
						</EntityContextCheck>
					</IfCondition>
					<GetSpatialInfo In="$destination" Out="$destinationVec" What="Position" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<EntityContext context="soliloquy_enable" target="">
					<EntityContextElement context="soliloquy_enable" enabled="true">
						<EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
							<AnyDecorator preset="crime_keepConfiscatedItems" enabled="true">
								<AddLinkElement from="$this.id" to="$__object.id" tag="&apos;crime_spawnMissingNpcVolume_smartObject&apos;" data="" enabled="true">
									<EntityContextElement context="crime_spawnMissingNpcVolume_behavior" enabled="$spawnMissingNpcVolume">
										<EntityContextPreset preset="crime_disableAllPostTrespassReactions" target="">
											<EntityContextPresetElement contextPreset="crime_disableAllPostTrespassReactions" enabled="true">
												<AddLinkElement from="$this.id" to="$destination" tag="&apos;scheduler_currentBehaviorDestination&apos;" data="$destinationVec" enabled="$spawnMissingNpcVolume">
													<IsDeadCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
														<Then canSkip="1">
															<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard_deadUnconscious&apos;" nodeLabel="36645334" />
														</Then>
														<Else canSkip="1">
															<IsUnconsciousCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
																<Then canSkip="1">
																	<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard_deadUnconscious&apos;" nodeLabel="15888824" />
																</Then>
																<Else canSkip="1">
																	<EntityContextCheck context="crime_isAuthority" target="$this.id" saveVersion="2">
																		<Then canSkip="1">
																			<EntityContext context="crime_canFriskPlayerBehavior" target="">
																				<EntityContext context="crime_isAuthorityOnDuty" target="">
																					<IfElseCondition failOnCondition="false" condition="$onImportantPoint" saveVersion="2">
																						<Then canSkip="1">
																							<EntityContext context="crime_isAuthorityOnStationaryDuty" target="">
																								<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard_postBehavior&apos;" nodeLabel="39751844" />
																							</EntityContext>
																						</Then>
																						<Else canSkip="1">
																							<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard_postBehavior&apos;" nodeLabel="44673002" />
																						</Else>
																					</IfElseCondition>
																				</EntityContext>
																			</EntityContext>
																		</Then>
																		<Else canSkip="1">
																			<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard_postBehavior&apos;" nodeLabel="87361333" />
																		</Else>
																	</EntityContextCheck>
																</Else>
															</IsUnconsciousCheck>
														</Else>
													</IsDeadCheck>
												</AddLinkElement>
											</EntityContextPresetElement>
										</EntityContextPreset>
									</EntityContextElement>
								</AddLinkElement>
							</AnyDecorator>
						</EntityContextElement>
					</EntityContextElement>
				</EntityContext>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="continualMovement" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="destinationVec" comment="" />
				<Variable name="onImportantPoint" comment="" />
				<Variable name="resources" comment="" />
				<Variable name="spawnMissingNpcVolume" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-460" editorPosY="190" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
						</VariableExistsGate>
						<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
						</VariableExistsGate>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</IfElseCondition>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
							</EntityContextCheck>
						</IfCondition>
						<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetSpatialInfo>
					</Sequence>
				</OnInit>
				<Behavior>
					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<EntityContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<EntityContextPresetElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</IncludeTree>
															</Then>
															<Else>
																<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</IncludeTree>
																	</Then>
																	<Else>
																		<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																			<OutputBreakpoints />
																			<Then>
																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																							<OutputBreakpoints />
																							<Then>
																								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</IncludeTree>
																								</EntityContext>
																							</Then>
																							<Else>
																								<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</IncludeTree>
																							</Else>
																						</IfElseCondition>
																					</EntityContext>
																				</EntityContext>
																			</Then>
																			<Else>
																				<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</IncludeTree>
																			</Else>
																		</EntityContextCheck>
																	</Else>
																</IsUnconsciousCheck>
															</Else>
														</IsDeadCheck>
													</AddLinkElement>
												</EntityContextPresetElement>
											</EntityContextPreset>
										</EntityContextElement>
									</AddLinkElement>
								</AnyDecorator>
							</EntityContextElement>
						</EntityContextElement>
					</EntityContext>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="kick" is_function="0">
		<Variables>
			<Variable name="holder" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;guardOnPlace&apos;" prune="true" negprune="unknown" Parent="" Child="$holder" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<AnyDecorator preset="crime_keepConfiscatedItems" enabled="true">
					<Sequence>
						<WaitAction />
						<IfCondition failOnCondition="false" condition="$holder ~= $__null">
							<IsDeadCheck SoulWUID="$holder" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<Success />
								</Then>
								<Else canSkip="1">
									<Parallel successMode="Any" failureMode="Any">
										<DistanceGate Origin="$__object.id" ReferencePt="$holder" Low="4.000000" High="4.000000" Negation="true" OpenInMiddle="false" RunLogic="KeepRunning">
											<Success />
										</DistanceGate>
										<Wait duration="&apos;30s&apos;" timeType="GameTime" doFail="false" variation="" />
									</Parallel>
								</Else>
							</IsDeadCheck>
						</IfCondition>
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_speech_dialogInitiator alias="&apos;straze_vymenaStraziNaHlidce&apos;" animationApproach="$enum:animationApproach.tryDialogAnimations" context="" customParameters="" metarole="" preset="$enum:dialogPreset.ingame" recipient="$holder" recipientMetaroles="" nodeLabel="80436328" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="holder" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Then>
									<Else>
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DistanceGate>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Parallel>
									</Else>
								</IsDeadCheck>
							</IfCondition>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest>
				<Function_speech_dialogInitiator editorPosX="550" editorPosY="-410" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_speech_dialogInitiator>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="guardNonImportant" is_function="0">
		<Variables>
			<Variable name="notImportant" type="_bool" values="true" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard&apos;" nodeLabel="28152684" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="notImportant" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</IncludeTree>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="guard_postBehavior" is_function="0">
		<Variables>
			<Variable name="additionalMoveParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="crossbowBolt" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="dialogSyncHolders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="itemType" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="movementSpeed" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="playerAngleCheckValue" type="_float" values="0" isPersistent="0" form="single" />
			<Variable name="playerDistanceCheckValue" type="_int" values="0" isPersistent="0" form="single" />
			<Variable name="playerVecPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="setWeapons" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="shouldUseCrossbow" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="sourceVecDirection" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="sourceVecPosition" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="successDistance" type="_float" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.movementSpeed = soEntity.movementSpeed; &#10;data.successDistance = soEntity.Properties.MovementDetails.fContinualSuccessDistance; &#10; &#10;data.shouldUseCrossbow = EntityUtils.GetScriptProperty(soEntity,&apos;shouldUseCrossbow&apos;)" />
					<Expression expressions="$additionalMoveParams.continueWhenHalting = true" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Selector>
					<IfCondition failOnCondition="true" condition="$resources ~= $__null">
						<CallBehavior Target="$resources" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="62367843" />
					</IfCondition>
					<IfElseCondition failOnCondition="false" condition="$continualMovement" saveVersion="2">
						<Then canSkip="1">
							<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$successDistance" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$additionalMoveParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
						</Then>
						<Else canSkip="1">
							<Sequence>
								<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$setWeapons[0]" RightHand="$setWeapons[1]" UseTorchWhenAppropriate="true" />
								<Selector>
									<IfCondition failOnCondition="true" condition="$setWeapons[0] ~= $__null">
										<Sequence>
											<GetItemType WUID="$setWeapons[0]" OutCategory="" OutType="$itemType" OutSubType="" />
											<IfCondition failOnCondition="true" condition="$itemType == &apos;crossbow_light&apos; | $itemType == &apos;crossbow_medium&apos; | $itemType == &apos;crossbow_heavy&apos;">
												<Success />
											</IfCondition>
										</Sequence>
									</IfCondition>
									<Sequence>
										<DistanceCondition Origin="$__object.id" ReferencePt="$this.id" Low="0.500000" High="0.500000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
											<Move stopWithinDistance="2.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="5.000000" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$additionalMoveParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
										</DistanceCondition>
										<GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$setWeapons[0]" RightHand="$setWeapons[1]" UseTorchWhenAppropriate="true" />
									</Sequence>
								</Selector>
								<IfCondition failOnCondition="false" condition="$setWeapons[0] ~= $__null">
									<Sequence>
										<GraphSearch Origin="$this.id" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<ItemClassFilter ClassId="" Category="&apos;ammo.Bolt.*&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
											<Nodalyzer Quantifiers="Exists" Parent="" Child="$crossbowBolt" saveVersion="2" />
										</GraphSearch>
										<IfCondition failOnCondition="false" condition="$crossbowBolt == $__null">
											<Expression expressions="$setWeapons[0] = $__null, &#10;$itemType = &apos;&apos;" />
										</IfCondition>
									</Sequence>
								</IfCondition>
								<IfCondition failOnCondition="false" condition="$shouldUseCrossbow &amp; $setWeapons[0] ~= $__null">
									<Sequence>
										<GetItemType WUID="$setWeapons[0]" OutCategory="" OutType="$itemType" OutSubType="" />
										<IfCondition failOnCondition="false" condition="$itemType == &apos;crossbow_light&apos; | $itemType == &apos;crossbow_medium&apos; | $itemType == &apos;crossbow_heavy&apos;">
											<IsWeaponLoaded failOnCondition="false" saveVersion="2">
												<Else canSkip="1">
													<HandContentElement hand="Left" item="$setWeapons[0]" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="guard_crossbow" useDecision="true" enabled="true" saveVersion="2">
														<Search canSkip="1">
															<Success />
														</Search>
														<Exec canSkip="1">
															<LoadWeaponAction />
														</Exec>
													</HandContentElement>
												</Else>
											</IsWeaponLoaded>
										</IfCondition>
									</Sequence>
								</IfCondition>
								<IfElseCondition failOnCondition="false" condition="$shouldUseCrossbow &amp; ($itemType == &apos;crossbow_light&apos; | $itemType == &apos;crossbow_medium&apos; | $itemType == &apos;crossbow_heavy&apos;)" saveVersion="2">
									<Then canSkip="1">
										<HandContentElement hand="Left" item="$setWeapons[0]" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="guard_crossbow" useDecision="true" enabled="true" saveVersion="2">
											<Search canSkip="1">
												<Success />
											</Search>
											<Exec canSkip="1">
												<ExactMove directionType="AlignWithEntity" directionSpecification="$__object.id" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="true" destinationSpecification="$__object.id" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$additionalMoveParams" pathFindingParams="" staminaPolicy="" pathInfo="" />
											</Exec>
										</HandContentElement>
									</Then>
									<Else canSkip="1">
										<EntityContextElement context="situation_gossipDuringActivity" enabled="true">
											<MoveParamsDecorator speed="$movementSpeed" pathFindingParams="" doorClosingPolicy="Automatic">
												<UnstanceAction unstance="guard" locationObject="$__object.id" slaveObject="" />
											</MoveParamsDecorator>
										</EntityContextElement>
									</Else>
								</IfElseCondition>
								<Parallel successMode="Any" failureMode="Any">
									<Sequence>
										<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
										<IfCondition failOnCondition="false" condition="#dialogSyncHolders &gt; 0">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</IfCondition>
										<Sequence>
											<Expression expressions="$playerAngleCheckValue = $data:script_param[&apos;guardBehavior_playerAngleCheck&apos;].value, &#10;$playerDistanceCheckValue = $data:script_param[&apos;guardBehavior_playerDistanceCheck&apos;].value" />
											<GetSpatialInfo In="$this.id" Out="$sourceVecPosition" What="Position" />
											<GetSpatialInfo In="$this.id" Out="$sourceVecDirection" What="Orientation" />
											<GetSpatialInfo In="$__player" Out="$playerVecPosition" What="Position" />
											<LuaGate code="local distance = VectorUtils.Distance(data.sourceVecPosition,data.playerVecPosition) &lt; data.playerDistanceCheckValue; &#10;local angle = VectorUtils.DotProduct2D(VectorUtils.Rotate2D(data.sourceVecDirection, math.rad(0)), VectorUtils.GetDirection(data.sourceVecPosition, data.playerVecPosition)) &lt; data.playerAngleCheckValue; &#10;return angle and distance;" saveVersion="2">
												<Then canSkip="1">
													<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
												</Then>
												<Else canSkip="1">
													<Success />
												</Else>
											</LuaGate>
										</Sequence>
									</Sequence>
									<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;guardKickLock_init&apos;" RunLogic="Halt">
										<UrgencyDecorator Urgency="Slow">
											<Sequence>
												<GetLockParticipants OutArray="$dialogSyncHolders" IncludeSelf="false" />
												<WaitAction />
												<Turn target="$dialogSyncHolders[0]" align="false" />
												<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;guardKickLock_dialog&apos;" RunLogic="Halt">
													<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
												</Synchronize>
											</Sequence>
										</UrgencyDecorator>
									</Synchronize>
								</Parallel>
							</Sequence>
						</Else>
					</IfElseCondition>
				</Selector>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="additionalMoveParams" comment="" />
				<Variable name="crossbowBolt" comment="" />
				<Variable name="dialogSyncHolders" comment="" />
				<Variable name="itemType" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="playerAngleCheckValue" comment="" />
				<Variable name="playerDistanceCheckValue" comment="" />
				<Variable name="playerVecPosition" comment="" />
				<Variable name="setWeapons" comment="" />
				<Variable name="shouldUseCrossbow" comment="" />
				<Variable name="sourceVecDirection" comment="" />
				<Variable name="sourceVecPosition" comment="" />
				<Variable name="successDistance" comment="" />
				<Variable name="continualMovement" comment="" />
			</Variables>
			<ForwardDeclarations>
				<Variable name="continualMovement" type="_bool" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
			</ForwardDeclarations>
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Sequence>
				</OnInit>
				<Behavior>
					<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</CallBehavior>
						</IfCondition>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Move>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetWeaponsFromWeaponSet>
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetItemType>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</IfCondition>
											</Sequence>
										</IfCondition>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Move>
											</DistanceCondition>
											<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetWeaponsFromWeaponSet>
										</Sequence>
									</Selector>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ItemClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ItemClassFilter>
												<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
												</Nodalyzer>
											</GraphSearch>
											<IfCondition hasInputBreakpoint="0" comment="if there are no bolts, we want to act like there is no crossbow" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
										</Sequence>
									</IfCondition>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetItemType hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetItemType>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IsWeaponLoaded hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Else>
														<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Search>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Search>
															<Exec>
																<LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LoadWeaponAction>
															</Exec>
														</HandContentElement>
													</Else>
												</IsWeaponLoaded>
											</IfCondition>
										</Sequence>
									</IfCondition>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Search>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Search>
												<Exec>
													<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</ExactMove>
												</Exec>
											</HandContentElement>
										</Then>
										<Else>
											<EntityContextElement hasInputBreakpoint="0" comment="GossipDuringActivity only when guarding on spot" breakpointFlags="0">
												<OutputBreakpoints />
												<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</UnstanceAction>
												</MoveParamsDecorator>
											</EntityContextElement>
										</Else>
									</IfElseCondition>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</IfCondition>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetSpatialInfo>
												<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetSpatialInfo>
												<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetSpatialInfo>
												<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Then>
													<Else>
														<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Success>
													</Else>
												</LuaGate>
											</Sequence>
										</Sequence>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GetLockParticipants hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</GetLockParticipants>
													<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</WaitAction>
													<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Turn>
													<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Wait>
													</Synchronize>
												</Sequence>
											</UrgencyDecorator>
										</Synchronize>
									</Parallel>
								</Sequence>
							</Else>
						</IfElseCondition>
					</Selector>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="guardNonImportantContinual" is_function="0">
		<Variables>
			<Variable name="continual" type="_bool" values="true" isPersistent="0" form="single" />
			<Variable name="notImportant" type="_bool" values="true" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IncludeTree File="&apos;profession/guard/so_guardspot_point.xml&apos;" Name="&apos;guard&apos;" nodeLabel="37457014" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="continual" comment="" />
				<Variable name="notImportant" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</IncludeTree>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="guard_deadUnconscious" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="crime_keepItems">
					<Sequence>
						<WaitAction />
						<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="kickInterrupt" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="crime_keepConfiscatedItems" enabled="true">
					<Function_callFollowUpBehavior previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="85698687" />
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="guardSpotKick" EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Function_callFollowUpBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Function_callFollowUpBehavior>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>