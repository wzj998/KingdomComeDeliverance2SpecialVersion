<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="use_mining" is_function="0">
    <Variables>
      <Variable name="isSoftMaterial" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="pickaxe" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isSoftMaterial = EntityUtils.GetScriptProperty(soEntity,&apos;softMaterial&apos;);" />
      </OnInit>
      <Behavior canSkip="1">
        <HandContentElement hand="Right" item="$pickaxe" allowAny="false" decisionLabel="miner_pickaxe" useDecision="true" enabled="true" saveVersion="2">
          <Search canSkip="1">
            <ErrorNode Message="&apos;trying to use search in mining HCE&apos;" />
          </Search>
          <Exec canSkip="1">
            <Parallel successMode="Any" failureMode="Any">
              <Loop count="-1">
                <SuppressFailure>
                  <Sequence>
                    <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
                    <Selector>
                      <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;HORNIK_SAMOMLUVA&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="80620543" />
                      <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;REMESLNIK_SAMOMLUVA&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="87638579" />
                    </Selector>
                  </Sequence>
                </SuppressFailure>
              </Loop>
              <Sequence>
                <IfElseCondition failOnCondition="false" condition="$isSoftMaterial" saveVersion="2">
                  <Then canSkip="1">
                    <UnstanceAction unstance="stoneMining_soft" locationObject="$__object.id" slaveObject="" />
                  </Then>
                  <Else canSkip="1">
                    <UnstanceAction unstance="stoneMining" locationObject="$__object.id" slaveObject="" />
                  </Else>
                </IfElseCondition>
                <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
              </Sequence>
            </Parallel>
          </Exec>
        </HandContentElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="isSoftMaterial" comment="" />
        <Variable name="pickaxe" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </ExecuteLua>
        </OnInit>
        <Behavior>
          <HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Search>
              <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ErrorNode>
            </Search>
            <Exec>
              <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                      <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Function_speech_schedulerMonolog>
                        <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Function_speech_schedulerMonolog>
                      </Selector>
                    </Sequence>
                  </SuppressFailure>
                </Loop>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </UnstanceAction>
                    </Then>
                    <Else>
                      <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </UnstanceAction>
                    </Else>
                  </IfElseCondition>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </Parallel>
            </Exec>
          </HandContentElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>