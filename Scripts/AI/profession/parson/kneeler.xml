<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="use" is_function="0">
		<Variables>
			<Variable name="randomNum" type="_float" values="" isPersistent="0" form="single" />
		</Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
				<EntityContextElement context="praying_inPrayingUnstance" enabled="true">
        <Sequence>
          <UnstanceAction unstance="PrayKneelingDesk" locationObject="$__object.id" slaveObject="" />
						<EntityContextCheck context="praying_forcePrayer" target="$this.id" saveVersion="2">
							<Then canSkip="1">
								<Expression expressions="$randomNum = 0.0" />
							</Then>
							<Else canSkip="1">
								<EntityContextCheck context="praying_suppressPrayer" target="$this.id" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$randomNum = 1.0" />
									</Then>
									<Else canSkip="1">
										<GenerateRandomFloat result="$randomNum" />
									</Else>
								</EntityContextCheck>
							</Else>
						</EntityContextCheck>
						<Selector>
							<IfElseCondition failOnCondition="false" condition="$randomNum &lt;= $data:script_param[&apos;professions_praying_chanceOfPrayingOutLoud&apos;].value" saveVersion="2">
								<Then canSkip="1">
									<EntityContextBarrier context="praying_suppressPrayer" target="$this.id" Negation="true" RunLogic="Halt">
										<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;NPC_SE_MODLI&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="93424694" />
									</EntityContextBarrier>
								</Then>
								<Else canSkip="1">
									<Fail />
								</Else>
							</IfElseCondition>
							<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
						</Selector>
        </Sequence>
				</EntityContextElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
			<Variables>
				<Variable name="randomNum" comment="" />
			</Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
							</UnstanceAction>
							<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
								<Then>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Then>
								<Else>
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<GenerateRandomFloat hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GenerateRandomFloat>
										</Else>
									</EntityContextCheck>
								</Else>
							</EntityContextCheck>
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Function_speech_schedulerMonolog>
										</EntityContextBarrier>
									</Then>
									<Else>
										<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Fail>
									</Else>
								</IfElseCondition>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
							</Selector>
          </Sequence>
					</EntityContextElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>