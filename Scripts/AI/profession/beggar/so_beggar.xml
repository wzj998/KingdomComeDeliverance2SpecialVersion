<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="useKneeling" is_function="0">
    <Variables>
      <Variable name="beggarData" type="beggarData" values="" isPersistent="0" form="single" />
      <Variable name="mode" type="_string" values="&apos;situation&apos;" isPersistent="0" form="single" />
      <Variable name="parson" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <Expression expressions="$beggarData.type = $enum:situation_beggarStyle.kneeling &#10;$beggarData.spot = $__object.id" />
          <AddLink From="$this.id" To="$this.id" Tag="&apos;situation_beggarData&apos;" Data="$beggarData" LinkOpHandleMode="OverWrite" />
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <UrgencyDecorator Urgency="Slow">
          <Parallel successMode="Any" failureMode="Any">
            <EntityContextBarrier context="beggar_enableSwitchDialog" target="$this.id" Negation="false" RunLogic="KeepRunning">
              <Sequence>
                <Expression expressions="$mode = &apos;switchDialog&apos;" />
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Sequence>
            </EntityContextBarrier>
            <LinkGate from="$this.id" to="" tag="&apos;parsonHasBehavior&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
              <Sequence>
                <Expression expressions="$mode = &apos;parson&apos;" />
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Sequence>
            </LinkGate>
            <UnstanceElement unstance="BeggarKneeling" locationObject="$__object.id" slaveObject="">
              <Sequence>
                <WaitAction />
                <ContinuousSwitch>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;parson&apos;">
                    <Sequence>
                      <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <LinkTagFilter tag="&apos;parsonHasBehavior&apos;" prune="true" negprune="unknown" Parent="" Child="$parson" Data="" />
                      </GraphSearch>
                      <DeadUnconsciousGate Who="$parson" State="Dead" Negation="true" RunLogic="Halt">
                        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                          <Child canSkip="1">
                            <Sequence>
                              <JoinedAnimationAction requiresMovement="false" lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;BeggarTakePriest&apos;" tags="&apos;beggarKneel&apos;" eventReferenceObject="$__object.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                              <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;ZEBRAK_DEKUJE_ZA_ALMUZNU&apos;" subtitlesDown="false" nodeLabel="14733304" />
                            </Sequence>
                          </Child>
                          <OnSuccess canSkip="1">
                            <Sequence>
                              <RemoveLink From="$this.id" To="$parson" Tag="&apos;parsonHasBehavior&apos;" LinkOpHandleMode="Success" />
                              <Expression expressions="$mode = &apos;endBehavior&apos;" />
                            </Sequence>
                          </OnSuccess>
                        </FuseBox>
                      </DeadUnconsciousGate>
                    </Sequence>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;situation&apos;">
                    <EntityContextElement context="speech_readyForSwitchDialog">
                      <EntityContext context="situation_beggar" target="">
                        <Sequence>
                          <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                          <DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
                            <SuppressFailure>
                              <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;ZEBRAK_ZEBRA_O_ALMUZNU&apos;" subtitlesDown="false" nodeLabel="82448252" />
                            </SuppressFailure>
                          </DistanceCondition>
                          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                          <Expression expressions="$mode = &apos;endBehavior&apos;" />
                        </Sequence>
                      </EntityContext>
                    </EntityContextElement>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;switchDialog&apos;">
                    <EntityContextElement context="speech_readyForSwitchDialog">
                      <Sequence>
                        <WaitAction />
                        <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        <Expression expressions="$mode = &apos;endBehavior&apos;" />
                      </Sequence>
                    </EntityContextElement>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;endBehavior&apos;">
                    <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </IfCondition>
                </ContinuousSwitch>
              </Sequence>
            </UnstanceElement>
            <IfGate atomic="false" condition="$mode == &apos;endBehavior&apos;" RunLogic="Halt">
              <Success />
            </IfGate>
          </Parallel>
        </UrgencyDecorator>
      </Behavior>
    </Root>
    <ForestContainer>
      <Parallel successMode="Any" failureMode="Any">
        <LinkGate from="$this.id" to="" tag="&apos;situation_beggarRequest&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
          <LinkGate from="$this.id" to="" tag="&apos;situation_beggarRequest&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
            <EntityContext context="CarryLivingActor" target="$this.id">
              <Sequence>
                <SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;beggarInSituation&apos;" />
                <Sequence>
                  <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;situation_beggarRequest&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;situation_beggarRequest&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="$animLockName" />
                  </GraphSearch>
                  <LogToConsole LogLevel="Error" Message="&apos;[$this.id;] received request $animLockName&apos;" />
                  <IfElseCondition failOnCondition="false" condition="$beggarData.type == &apos;Kneeling&apos;" saveVersion="2">
                    <Then canSkip="1">
                      <SuppressFailure>
                        <UnstanceElement unstance="BeggarKneeling" locationObject="$beggarData.spot" slaveObject="">
                          <JoinedAnimationAction requiresMovement="false" lockContext="" lockName="$animLockName" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;BeggarTake&apos;" tags="&apos;beggarKneel&apos;" eventReferenceObject="" alignObject="$beggarData.spot" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                        </UnstanceElement>
                      </SuppressFailure>
                    </Then>
                    <Else canSkip="1">
                      <IfCondition failOnCondition="false" condition="$beggarData.type == &apos;Laying&apos;">
                        <UnstanceElement unstance="BeggarLaying" locationObject="$beggarData.spot" slaveObject="">
                          <JoinedAnimationAction requiresMovement="false" lockContext="" lockName="$animLockName" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;BeggarTake&apos;" tags="&apos;beggar&apos;" eventReferenceObject="" alignObject="$beggarData.spot" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                        </UnstanceElement>
                      </IfCondition>
                    </Else>
                  </IfElseCondition>
                </Sequence>
                <SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;beggarInSituation&apos;" />
              </Sequence>
            </EntityContext>
          </LinkGate>
        </LinkGate>
        <Sequence>
          <UnstanceAction unstance="BeggarKneeling" locationObject="$__object.id" slaveObject="" />
          <AddLink From="$this.id" To="$this.id" Tag="&apos;beggar&apos;" Data="" LinkOpHandleMode="OverWrite" />
          <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          <ExternalLock atomic="true" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;beggarInSituation&apos;" RunLogic="KeepRunning">
            <Success />
          </ExternalLock>
        </Sequence>
      </Parallel>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="beggarData" comment="" />
        <Variable name="mode" comment="" />
        <Variable name="parson" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-40" editorPosY="70" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="Add data for sync, beggar always has the latest beggar spot" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </AddLink>
          </Sequence>
        </OnInit>
        <Behavior>
          <UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </EntityContextBarrier>
              <LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </LinkGate>
              <UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WaitAction>
                  <ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </LinkTagFilter>
                        </GraphSearch>
                        <DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Child>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </JoinedAnimationAction>
                                <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Function_speech_schedulerMonolog>
                              </Sequence>
                            </Child>
                            <OnSuccess>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </RemoveLink>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </OnSuccess>
                          </FuseBox>
                        </DeadUnconsciousGate>
                      </Sequence>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <EntityContext hasInputBreakpoint="0" comment="This context is a role condition in beggar-situation" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                            <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <SuppressFailure hasInputBreakpoint="0" comment="In case of no usabe barks (cooldowns)" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Function_speech_schedulerMonolog>
                              </SuppressFailure>
                            </DistanceCondition>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Sequence>
                        </EntityContext>
                      </EntityContextElement>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </WaitAction>
                          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Wait>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </EntityContextElement>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </IfCondition>
                  </ContinuousSwitch>
                </Sequence>
              </UnstanceElement>
              <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </IfGate>
            </Parallel>
          </UrgencyDecorator>
        </Behavior>
      </Root>
      <Forest>
        <Parallel editorPosX="1380" editorPosY="-950" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SetExternalLock>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                    </GraphSearch>
                    <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LogToConsole>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <SuppressFailure hasInputBreakpoint="0" comment="Because of JoinedAnimation failing" breakpointFlags="0">
                          <OutputBreakpoints />
                          <UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </JoinedAnimationAction>
                          </UnstanceElement>
                        </SuppressFailure>
                      </Then>
                      <Else>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </JoinedAnimationAction>
                          </UnstanceElement>
                        </IfCondition>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                  <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SetExternalLock>
                </Sequence>
              </EntityContext>
            </LinkGate>
          </LinkGate>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </UnstanceAction>
            <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </AddLink>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
            <ExternalLock hasInputBreakpoint="0" comment="Only escape this behavior if there&apos;s not a situation happening RIGHT NOW" breakpointFlags="0">
              <OutputBreakpoints />
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </ExternalLock>
          </Sequence>
        </Parallel>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="useLaying" is_function="0">
    <Variables>
      <Variable name="beggarData" type="beggarData" values="" isPersistent="0" form="single" />
      <Variable name="linkedParson" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="mode" type="_string" values="&apos;situation&apos;" isPersistent="0" form="single" />
      <Variable name="parson" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="parsons" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="size" type="_int" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <Expression expressions="$beggarData.type = $enum:situation_beggarStyle.laying &#10;$beggarData.spot = $__object.id" />
          <AddLink From="$this.id" To="$this.id" Tag="&apos;situation_beggarData&apos;" Data="$beggarData" LinkOpHandleMode="OverWrite" />
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <UrgencyDecorator Urgency="Slow">
          <Parallel successMode="Any" failureMode="Any">
            <EntityContextBarrier context="beggar_enableSwitchDialog" target="$this.id" Negation="false" RunLogic="KeepRunning">
              <Sequence>
                <Expression expressions="$mode = &apos;switchDialog&apos;" />
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Sequence>
            </EntityContextBarrier>
            <LinkGate from="$this.id" to="" tag="&apos;parsonHasBehavior&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
              <Sequence>
                <Expression expressions="$mode = &apos;parson&apos;" />
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Sequence>
            </LinkGate>
            <UnstanceElement unstance="BeggarLaying" locationObject="$__object.id" slaveObject="">
              <Sequence>
                <WaitAction />
                <ContinuousSwitch>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;parson&apos;">
                    <Sequence>
                      <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                        <LinkTagFilter tag="&apos;parsonHasBehavior&apos;" prune="true" negprune="unknown" Parent="" Child="$parson" Data="" />
                      </GraphSearch>
                      <DeadUnconsciousGate Who="$parson" State="Dead" Negation="true" RunLogic="Halt">
                        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                          <Child canSkip="1">
                            <Sequence>
                              <JoinedAnimationAction requiresMovement="false" lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;BeggarTakePriest&apos;" tags="&apos;beggar&apos;" eventReferenceObject="$__object.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                              <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;ZEBRAK_DEKUJE_ZA_ALMUZNU&apos;" subtitlesDown="false" nodeLabel="29137137" />
                            </Sequence>
                          </Child>
                          <OnSuccess canSkip="1">
                            <Sequence>
                              <RemoveLink From="$this.id" To="$parson" Tag="&apos;parsonHasBehavior&apos;" LinkOpHandleMode="Success" />
                              <Expression expressions="$mode = &apos;endBehavior&apos;" />
                            </Sequence>
                          </OnSuccess>
                        </FuseBox>
                      </DeadUnconsciousGate>
                    </Sequence>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;situation&apos;">
                    <EntityContextElement context="speech_readyForSwitchDialog">
                      <EntityContext context="situation_beggar" target="">
                        <Sequence>
                          <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                          <DistanceCondition Origin="$this.id" ReferencePt="$__player" Low="10.000000" High="10.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
                            <SuppressFailure>
                              <Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" metarole="&apos;ZEBRAK_ZEBRA_O_ALMUZNU&apos;" subtitlesDown="false" nodeLabel="77509597" />
                            </SuppressFailure>
                          </DistanceCondition>
                          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                          <Expression expressions="$mode = &apos;endBehavior&apos;" />
                        </Sequence>
                      </EntityContext>
                    </EntityContextElement>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;switchDialog&apos;">
                    <EntityContextElement context="speech_readyForSwitchDialog">
                      <Sequence>
                        <WaitAction />
                        <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        <Expression expressions="$mode = &apos;endBehavior&apos;" />
                      </Sequence>
                    </EntityContextElement>
                  </IfCondition>
                  <IfCondition failOnCondition="false" condition="$mode == &apos;endBehavior&apos;">
                    <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </IfCondition>
                </ContinuousSwitch>
              </Sequence>
            </UnstanceElement>
            <IfGate atomic="false" condition="$mode == &apos;endBehavior&apos;" RunLogic="Halt">
              <Success />
            </IfGate>
          </Parallel>
        </UrgencyDecorator>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="beggarData" comment="" />
        <Variable name="linkedParson" comment="" />
        <Variable name="mode" comment="" />
        <Variable name="parson" comment="" />
        <Variable name="parsons" comment="" />
        <Variable name="size" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="60" editorPosY="460" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="Add data for sync, beggar always has the latest beggar spot" breakpointFlags="0">
            <OutputBreakpoints />
            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </AddLink>
          </Sequence>
        </OnInit>
        <Behavior>
          <UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </EntityContextBarrier>
              <LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Sequence>
              </LinkGate>
              <UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WaitAction>
                  <ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </LinkTagFilter>
                        </GraphSearch>
                        <DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Child>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </JoinedAnimationAction>
                                <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Function_speech_schedulerMonolog>
                              </Sequence>
                            </Child>
                            <OnSuccess>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </RemoveLink>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </OnSuccess>
                          </FuseBox>
                        </DeadUnconsciousGate>
                      </Sequence>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <EntityContext hasInputBreakpoint="0" comment="This context is a role condition in beggar-situation" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                            <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <SuppressFailure hasInputBreakpoint="0" comment="In case of no usabe barks (cooldowns)" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Function_speech_schedulerMonolog>
                              </SuppressFailure>
                            </DistanceCondition>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Sequence>
                        </EntityContext>
                      </EntityContextElement>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </WaitAction>
                          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Wait>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Sequence>
                      </EntityContextElement>
                    </IfCondition>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </IfCondition>
                  </ContinuousSwitch>
                </Sequence>
              </UnstanceElement>
              <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </IfGate>
            </Parallel>
          </UrgencyDecorator>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="parson_use" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Wait>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_almsFromParson" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <UnstanceElement unstance="BeggarLaying" locationObject="$__object.id" slaveObject="">
          <Sequence>
            <WaitAction />
            <JoinedAnimationAction requiresMovement="false" lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" fragment="&apos;BeggarTakePriest&apos;" tags="&apos;beggar&apos;" eventReferenceObject="" alignObject="$__object.id" slaveObject="" />
          </Sequence>
        </UnstanceElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </WaitAction>
              <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <OutputBreakpoints />
              </JoinedAnimationAction>
            </Sequence>
          </UnstanceElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="parson_giveAlms" is_function="0">
    <Variables>
      <Variable name="kneelingBeggars" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="lyingBeggars" type="_wuid" values="" isPersistent="0" form="array" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GetBehaviorHolders area="$__object.id" behaviors="&apos;useLaying&apos;" targetVar="$lyingBeggars" />
          <GetBehaviorHolders area="$__object.id" behaviors="&apos;useKneeling&apos;" targetVar="$kneelingBeggars" />
          <VariableExistsGate VarToTest="$lyingBeggars[0]" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
            <Then canSkip="1">
              <DeadUnconsciousGate Who="$lyingBeggars[0]" State="Dead" Negation="true" RunLogic="Halt">
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <AddLink From="$lyingBeggars[0]" To="$this.id" Tag="&apos;parsonHasBehavior&apos;" Data="" LinkOpHandleMode="Fail" />
                      <HasGenderCheck Gender="Male" SoulWUID="$lyingBeggars[0]" FailSubtMissing="false" saveVersion="2">
                        <Then canSkip="1">
                          <JoinedUnstanceAction lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" unstance="ParsonGiveAlmsToLyingBeggarMale" locationObject="$__object.id" slaveObject="" />
                        </Then>
                        <Else canSkip="1">
                          <JoinedUnstanceAction lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" unstance="ParsonGiveAlmsToLyingBeggarFemale" locationObject="$__object.id" slaveObject="" />
                        </Else>
                      </HasGenderCheck>
                      <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                      <WaitAction />
                    </Sequence>
                  </Child>
                  <OnSuccess canSkip="1">
                    <RemoveLink From="$lyingBeggars[0]" To="$this.id" Tag="&apos;parsonHasBehavior&apos;" LinkOpHandleMode="Success" />
                  </OnSuccess>
                </FuseBox>
              </DeadUnconsciousGate>
            </Then>
            <Else canSkip="1">
              <VariableExistsGate VarToTest="$kneelingBeggars[0]" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
                <Then canSkip="1">
                  <DeadUnconsciousGate Who="$kneelingBeggars[0]" State="Dead" Negation="true" RunLogic="Halt">
                    <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                      <Child canSkip="1">
                        <Sequence>
                          <AddLink From="$kneelingBeggars[0]" To="$this.id" Tag="&apos;parsonHasBehavior&apos;" Data="" LinkOpHandleMode="Fail" />
                          <HasGenderCheck Gender="Male" SoulWUID="$kneelingBeggars[0]" FailSubtMissing="false" saveVersion="2">
                            <Then canSkip="1">
                              <JoinedAnimationAction requiresMovement="true" lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;PriestBeggarKneelIn&apos;" tags="" eventReferenceObject="$__object.id" alignObject="$__object.id" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                            </Then>
                            <Else canSkip="1">
                              <JoinedAnimationAction requiresMovement="true" lockContext="$__object.id" lockName="&apos;giveAlms&apos;" lockCount="2" timeout="&apos;-1&apos;" ignoreOthersLeaving="false" fragment="&apos;PriestBeggarKneelIn&apos;" tags="&apos;femaleOpponent&apos;" eventReferenceObject="$__object.id" alignObject="$__object.id" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
                            </Else>
                          </HasGenderCheck>
                          <WaitAction />
                        </Sequence>
                      </Child>
                      <OnSuccess canSkip="1">
                        <RemoveLink From="$kneelingBeggars[0]" To="$this.id" Tag="&apos;parsonHasBehavior&apos;" LinkOpHandleMode="Success" />
                      </OnSuccess>
                    </FuseBox>
                  </DeadUnconsciousGate>
                </Then>
                <Else canSkip="1">
                  <Success />
                </Else>
              </VariableExistsGate>
            </Else>
          </VariableExistsGate>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="kneelingBeggars" comment="" />
        <Variable name="lyingBeggars" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetBehaviorHolders>
            <GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetBehaviorHolders>
            <VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddLink>
                        <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <JoinedUnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </JoinedUnstanceAction>
                          </Then>
                          <Else>
                            <JoinedUnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </JoinedUnstanceAction>
                          </Else>
                        </HasGenderCheck>
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                        <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </WaitAction>
                      </Sequence>
                    </Child>
                    <OnSuccess>
                      <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </RemoveLink>
                    </OnSuccess>
                  </FuseBox>
                </DeadUnconsciousGate>
              </Then>
              <Else>
                <VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <DeadUnconsciousGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Child>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </AddLink>
                            <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </JoinedAnimationAction>
                              </Then>
                              <Else>
                                <JoinedAnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </JoinedAnimationAction>
                              </Else>
                            </HasGenderCheck>
                            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </WaitAction>
                          </Sequence>
                        </Child>
                        <OnSuccess>
                          <RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </RemoveLink>
                        </OnSuccess>
                      </FuseBox>
                    </DeadUnconsciousGate>
                  </Then>
                  <Else>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </Else>
                </VariableExistsGate>
              </Else>
            </VariableExistsGate>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>