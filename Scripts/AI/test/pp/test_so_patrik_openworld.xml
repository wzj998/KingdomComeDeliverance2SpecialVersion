<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="pp_wait" is_function="0">
    <Variables>
      <Variable name="obj" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="out" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <SuppressFailure>
            <Sequence>
              <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <LinkTagFilter tag="&apos;test_object&apos;" prune="true" negprune="unknown" Parent="" Child="$obj" Data="" />
              </GraphSearch>
              <GetType WUID="$obj" OutString="$out" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
              <LogToConsole LogLevel="Error" Message="&apos;$out&apos;" />
            </Sequence>
          </SuppressFailure>
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="obj" comment="" />
        <Variable name="out" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </LinkTagFilter>
                </GraphSearch>
                <GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetType>
                <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LogToConsole>
              </Sequence>
            </SuppressFailure>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_searchForGuard" is_function="0">
    <Variables>
      <Variable name="availableGuards" type="_wuid" values="" isPersistent="0" form="array" />
    </Variables>
    <Parameters>
      <Variable name="reportData" type="switch:interruptData:report" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfCondition failOnCondition="false" condition="$reportData ~= $__null">
          <Sequence>
            <IfCondition failOnCondition="false" condition="$reportData.information ~= $__null">
              <InformationEmittingStart Information="$reportData.information" Periodicity="&apos;5s&apos;" TimerType="GameTime" Radius="5.000000" />
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$reportData.destination ~= $__null">
              <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$reportData.destination" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
            </IfCondition>
          </Sequence>
        </IfCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="availableGuards" comment="" />
        <Variable name="reportData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <InformationEmittingStart hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </InformationEmittingStart>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Move>
              </IfCondition>
            </Sequence>
          </IfCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_searchForGuard_func" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2" />
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_reportToGuard" is_function="0">
    <Variables>
      <Variable name="closestGuard" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="stealData" type="stealData" values="" isPersistent="0" form="single" />
      <Variable name="stolenPrice" type="_int" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="reportData" type="switch:interruptData:report" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfCondition failOnCondition="false" condition="$reportData ~= $__null">
          <Sequence>
            <IfCondition failOnCondition="false" condition="$reportData.information ~= $__null">
              <Sequence>
                <IfCondition failOnCondition="false" condition="$reportData.information.perceivedWuid ~= $__null">
                  <GraphSearch Origin="$reportData.information.perceivedWuid" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;stealData&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                    <Datalyzer Tag="&apos;stealData&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$stealData" saveVersion="2" />
                  </GraphSearch>
                </IfCondition>
                <LockDynamicInformationValues Information="$reportData.information">
                  <Sequence>
                    <IfCondition failOnCondition="false" condition="$stealData ~= $__null">
                      <Sequence>
                        <GetItemProperty itemId="$stealData.instance" property="Price" result="$stolenPrice" />
                        <SetDynamicInformationValue Information="$reportData.information" Tag="&apos;stolenPrice&apos;" Variable="$stolenPrice" Type="" Value="" />
                      </Sequence>
                    </IfCondition>
                    <SetDynamicInformationValue Information="$reportData.information" Tag="&apos;destination&apos;" Variable="$reportData.information.position" Type="" Value="" />
                  </Sequence>
                </LockDynamicInformationValues>
                <InformationEmittingStart Information="$reportData.information" Periodicity="&apos;5s&apos;" TimerType="GameTime" Radius="5.000000" />
              </Sequence>
            </IfCondition>
            <Sequence>
              <Function_pp_getClosestGuard guard="$closestGuard" nodeLabel="47765683" />
              <Move stopWithinDistance="1.000000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$closestGuard" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
            </Sequence>
          </Sequence>
        </IfCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="closestGuard" comment="" />
        <Variable name="stealData" comment="" />
        <Variable name="stolenPrice" comment="" />
        <Variable name="reportData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                      <Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                      </Datalyzer>
                    </GraphSearch>
                  </IfCondition>
                  <LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetItemProperty>
                          <SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </SetDynamicInformationValue>
                        </Sequence>
                      </IfCondition>
                      <SetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SetDynamicInformationValue>
                    </Sequence>
                  </LockDynamicInformationValues>
                  <InformationEmittingStart hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InformationEmittingStart>
                </Sequence>
              </IfCondition>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_pp_getClosestGuard hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_pp_getClosestGuard>
                <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Move>
              </Sequence>
            </Sequence>
          </IfCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_getClosestGuard" is_function="1">
    <Variables>
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="availableGuards" type="_wuid" values="" isPersistent="0" form="array" />
    </Variables>
    <Parameters>
      <Variable name="guard" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Sequence>
            <Function_pp_getAuthorityHub authorityHub="$authorityHub" nodeLabel="77838752" />
            <GraphSearch Origin="$authorityHub" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;guard&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
              <Nodalyzer Quantifiers="ForAll" Parent="" Child="$availableGuards" saveVersion="2">
                <Child0 canSkip="1">
                  <RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
                </Child0>
              </Nodalyzer>
            </GraphSearch>
          </Sequence>
          <IfCondition failOnCondition="false" condition="#availableGuards &gt; 0">
            <Expression expressions="$guard = $availableGuards[0]" />
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="authorityHub" comment="" />
        <Variable name="availableGuards" comment="" />
        <Variable name="guard" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Function_pp_getAuthorityHub hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_pp_getAuthorityHub>
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
                <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Child0>
                    <RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </RangeSorter>
                  </Child0>
                </Nodalyzer>
              </GraphSearch>
            </Sequence>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_investigateReport" is_function="0">
    <Variables>
      <Variable name="arrestData" type="switch:interruptData:arrest" values="" isPersistent="0" form="single" />
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="destination" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="stolenPrice" type="_int" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="reportData" type="switch:interruptData:report" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <LockDynamicInformationValues Information="$reportData.information">
            <Sequence>
              <GetDynamicInformationValue Information="$reportData.information" Tag="&apos;destination&apos;" Out="$destination" />
              <GetDynamicInformationValue Information="$reportData.information" Tag="&apos;stolenPrice&apos;" Out="$stolenPrice" />
              <LogToConsole LogLevel="Error" Message="&apos;[;$this.id;] knows player stole something worth $stolenPrice;&apos;" />
            </Sequence>
          </LockDynamicInformationValues>
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="Run" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <LogToConsole LogLevel="Error" Message="&apos;[;$this.id;] looking for player&apos;" />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="arrestData" comment="" />
        <Variable name="authorityHub" comment="" />
        <Variable name="destination" comment="" />
        <Variable name="stolenPrice" comment="" />
        <Variable name="reportData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetDynamicInformationValue>
                <GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetDynamicInformationValue>
                <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LogToConsole>
              </Sequence>
            </LockDynamicInformationValues>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LogToConsole>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_tryToArrestPlayer" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Wait>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_handlePerception" is_function="1">
    <Variables>
      <Variable name="amIGuard" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="informationToEmit" type="information" values="" isPersistent="0" form="single" />
      <Variable name="perceptionType" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="reportData" type="switch:interruptData:report" values="" isPersistent="0" form="single" />
      <Variable name="stealData" type="stealData" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="perception" type="perceptionInfo" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfCondition failOnCondition="false" condition="$perception ~= $__null &amp; $perception.threshold == 1">
          <Sequence>
            <Function_pp_getAuthorityHub authorityHub="$authorityHub" nodeLabel="14168904" />
            <Function_pp_amIGuard amIGuard="$amIGuard" nodeLabel="93214336" />
            <GetType WUID="$perception.perceptible" OutString="$perceptionType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
            <Switch>
              <IfCondition failOnCondition="false" condition="$perceptionType == &apos;NPC&apos;">
                <Sequence>
                  <IfCondition failOnCondition="false" condition="$perception.perceptible == $__player">
                    <Sequence>
                      <IfCondition failOnCondition="false" condition="$amIGuard">
                        <Function_pp_handleGuardSeePlayer nodeLabel="85564857" />
                      </IfCondition>
                    </Sequence>
                  </IfCondition>
                </Sequence>
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$perceptionType == &apos;UNK&apos;">
                <Sequence>
                  <GraphSearch Origin="$perception.perceptible" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;stealData&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                    <Datalyzer Tag="&apos;stealData&apos;" Quantifiers="ForAll" Parent="" Child="" Data="$stealData" saveVersion="2" />
                  </GraphSearch>
                  <IfCondition failOnCondition="false" condition="$stealData.owner == $this.id">
                    <Sequence>
                      <CreateInformation PerceivedWuid="$perception.perceptible" label="&apos;theft&apos;" position="" ToWhom="" OutVariable="$informationToEmit" />
                      <Expression expressions="$reportData.information = $informationToEmit" />
                      <AddInterrupt_report reportData="$reportData" Target="$this.id" Host="$authorityHub" Behavior="&apos;pp_reportToGuard&apos;" Priority="1" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" />
                    </Sequence>
                  </IfCondition>
                </Sequence>
              </IfCondition>
              <DefaultBranch>
                <Success />
              </DefaultBranch>
            </Switch>
          </Sequence>
        </IfCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="amIGuard" comment="" />
        <Variable name="authorityHub" comment="" />
        <Variable name="informationToEmit" comment="" />
        <Variable name="perceptionType" comment="" />
        <Variable name="reportData" comment="" />
        <Variable name="stealData" comment="" />
        <Variable name="perception" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Function_pp_getAuthorityHub hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_pp_getAuthorityHub>
              <Function_pp_amIGuard hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_pp_amIGuard>
              <GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetType>
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Function_pp_handleGuardSeePlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Function_pp_handleGuardSeePlayer>
                        </IfCondition>
                      </Sequence>
                    </IfCondition>
                  </Sequence>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                      <Datalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                      </Datalyzer>
                    </GraphSearch>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <CreateInformation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CreateInformation>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <AddInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddInterrupt_report>
                      </Sequence>
                    </IfCondition>
                  </Sequence>
                </IfCondition>
                <DefaultBranch>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </DefaultBranch>
              </Switch>
            </Sequence>
          </IfCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_amIGuard" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="amIGuard" type="_bool" values="false" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <SuppressFailure>
          <Sequence>
            <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;imAGuard&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;imAGuard&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
            </GraphSearch>
            <Expression expressions="$amIGuard = true" />
          </Sequence>
        </SuppressFailure>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="amIGuard" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
              </GraphSearch>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Sequence>
          </SuppressFailure>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_getAuthorityHub" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
          <LinkTagFilter tag="&apos;authorityHub&apos;" prune="true" negprune="unknown" Parent="" Child="$authorityHub" Data="" />
        </GraphSearch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="authorityHub" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LinkTagFilter>
          </GraphSearch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_handleInformation" is_function="1">
    <Variables>
      <Variable name="amIGuard" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="destination" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="reportData" type="switch:interruptData:report" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="information" type="informationDiff" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Function_pp_amIGuard amIGuard="$amIGuard" nodeLabel="79327752" />
          <Function_pp_getAuthorityHub authorityHub="$authorityHub" nodeLabel="60580818" />
          <IfCondition failOnCondition="false" condition="$amIGuard &amp; $information.information.label == &apos;theft&apos; &amp; $information.status == &apos;NEW&apos;">
            <Sequence>
              <Expression expressions="$reportData.information = $information.information" />
              <AddInterrupt_report reportData="$reportData" Target="$this.id" Host="$authorityHub" Behavior="&apos;pp_investigateReport&apos;" Priority="1" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" />
            </Sequence>
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="amIGuard" comment="" />
        <Variable name="authorityHub" comment="" />
        <Variable name="destination" comment="" />
        <Variable name="reportData" comment="" />
        <Variable name="information" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Function_pp_amIGuard hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Function_pp_amIGuard>
            <Function_pp_getAuthorityHub hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Function_pp_getAuthorityHub>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <AddInterrupt_report hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </AddInterrupt_report>
              </Sequence>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_standOnPoint" is_function="0">
    <Variables>
      <Variable name="point" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;pnt&apos;" prune="true" negprune="unknown" Parent="" Child="$point" Data="" />
          </GraphSearch>
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$point" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="point" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_handleGuardSeePlayer" is_function="1">
    <Variables>
      <Variable name="arrestData" type="switch:interruptData:arrest" values="" isPersistent="0" form="single" />
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="foundCrime" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="information" type="information" values="" isPersistent="0" form="single" />
      <Variable name="knownInformation" type="information" values="" isPersistent="0" form="array" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Function_pp_getAuthorityHub authorityHub="$authorityHub" nodeLabel="38073132" />
          <GetKnownInformations OutArray="$knownInformation" Holder="$this.id" />
          <ForEach startIndex="0" step="1" array="$knownInformation" iterator="" value="$information" break="$foundCrime">
            <IfCondition failOnCondition="false" condition="$information.label == &apos;theft&apos;">
              <Sequence>
                <LogToConsole LogLevel="Error" Message="&apos;[;$this.id;] I see the player and have THEFT information&apos;" />
                <AddInterrupt_arrest arrestData="$arrestData" Target="$this.id" Host="$authorityHub" Behavior="&apos;pp_arrestPlayer&apos;" Priority="30" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" />
                <Expression expressions="$foundCrime = true" />
              </Sequence>
            </IfCondition>
          </ForEach>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="arrestData" comment="" />
        <Variable name="authorityHub" comment="" />
        <Variable name="foundCrime" comment="" />
        <Variable name="information" comment="" />
        <Variable name="knownInformation" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Function_pp_getAuthorityHub hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Function_pp_getAuthorityHub>
            <GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetKnownInformations>
            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </LogToConsole>
                  <AddInterrupt_arrest hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </AddInterrupt_arrest>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </IfCondition>
            </ForEach>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_arestPlayer" is_function="1">
    <Variables />
    <Parameters>
      <Variable name="arrestData" type="switch:interruptData:arrest" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <LogToConsole LogLevel="Error" Message="&apos;ARRESTING&apos;" />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="arrestData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LogToConsole>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_arrestPlayer" is_function="1">
    <Variables>
      <Variable name="information" type="information" values="" isPersistent="0" form="single" />
      <Variable name="informationArr" type="information" values="" isPersistent="0" form="array" />
      <Variable name="itemValue" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="playerInventory" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="stolenItem" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="stolenItems" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="totalStolenValue" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="totalStolenValueInf" type="_int" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="arrestData" type="switch:interruptData:arrest" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GetKnownInformations OutArray="$informationArr" Holder="$this.id" />
          <LogToConsole LogLevel="Error" Message="&apos;[;$this.id;] ARRESTING&apos;" />
          <ForEach startIndex="0" step="1" array="$informationArr" iterator="" value="$information" break="">
            <Sequence>
              <LockDynamicInformationValues Information="$information">
                <GetDynamicInformationValue Information="$information" Tag="&apos;stolenPrice&apos;" Out="$itemValue" />
              </LockDynamicInformationValues>
              <Expression expressions="$totalStolenValueInf += $itemValue" />
            </Sequence>
          </ForEach>
          <LogToConsole LogLevel="Error" Message="&apos;Total stolen price: $totalStolenValueInf (from knownInformation)&apos;" />
          <Sequence>
            <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;inventory&apos;" prune="true" negprune="false" Parent="" Child="$playerInventory" Data="" />
            </GraphSearch>
            <GraphSearch Origin="$playerInventory" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <ItemParamFilter Param="Stolen" owner="$__player" Source="Child" prune="true" negprune="false" Parent="" Child="" />
              <Nodalyzer Quantifiers="ForAll" Parent="" Child="$stolenItems" saveVersion="2" />
            </GraphSearch>
            <ForEach startIndex="0" step="1" array="$stolenItems" iterator="" value="$stolenItem" break="">
              <Sequence>
                <GetItemProperty itemId="$stolenItem" property="Price" result="$itemValue" />
                <Expression expressions="$totalStolenValue += $itemValue" />
              </Sequence>
            </ForEach>
          </Sequence>
          <LogToConsole LogLevel="Error" Message="&apos;Total stolen price: $totalStolenValue (from inventory)&apos;" />
          <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="information" comment="" />
        <Variable name="informationArr" comment="" />
        <Variable name="itemValue" comment="" />
        <Variable name="playerInventory" comment="" />
        <Variable name="stolenItem" comment="" />
        <Variable name="stolenItems" comment="" />
        <Variable name="totalStolenValue" comment="" />
        <Variable name="totalStolenValueInf" comment="" />
        <Variable name="arrestData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetKnownInformations hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetKnownInformations>
            <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LogToConsole>
            <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LockDynamicInformationValues hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetDynamicInformationValue hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetDynamicInformationValue>
                </LockDynamicInformationValues>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Sequence>
            </ForEach>
            <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LogToConsole>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
              </GraphSearch>
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ItemParamFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ItemParamFilter>
                <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                </Nodalyzer>
              </GraphSearch>
              <ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetItemProperty>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </ForEach>
            </Sequence>
            <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LogToConsole>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_followMovementSound" is_function="0">
    <Variables />
    <Parameters>
      <Variable name="lookAroundData" type="switch:interruptData:lookAround" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$lookAroundData.position" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="lookAroundData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="10" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Move>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="pp_handleHearing" is_function="1">
    <Variables>
      <Variable name="authorityHub" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="lookAround" type="switch:interruptData:lookAround" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="hearingInfo" type="hearingInfo" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Function_pp_getAuthorityHub authorityHub="$authorityHub" nodeLabel="89769595" />
          <Switch>
            <IfCondition failOnCondition="false" condition="$hearingInfo.soundId == $enum:sound.movement">
              <Sequence>
                <Expression expressions="$lookAround.position = $hearingInfo.position" />
                <AddInterrupt_lookAround lookAroundData="$lookAround" Target="$this.id" Host="$authorityHub" Behavior="&apos;pp_followMovementSound&apos;" Priority="1" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" />
              </Sequence>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$hearingInfo.soundId == $enum:sound.combat">
              <LogToConsole LogLevel="Error" Message="&apos;[;$this.id;] heard combat&apos;" />
            </IfCondition>
            <DefaultBranch>
              <Success />
            </DefaultBranch>
          </Switch>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="authorityHub" comment="" />
        <Variable name="lookAround" comment="" />
        <Variable name="hearingInfo" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-70" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Function_pp_getAuthorityHub hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Function_pp_getAuthorityHub>
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <AddInterrupt_lookAround hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </AddInterrupt_lookAround>
                </Sequence>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LogToConsole>
              </IfCondition>
              <DefaultBranch>
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </DefaultBranch>
            </Switch>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>
