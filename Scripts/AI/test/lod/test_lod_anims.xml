<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="onUpdate" is_function="0">
    <Variables>
      <Variable name="killNpc" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="message" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;kill&apos;" prune="true" negprune="unknown" Parent="" Child="$killNpc" Data="" />
          </GraphSearch>
          <DisablePerception Perceptor="true" Perceptible="true" ToWhom="$killNpc" />
          <ExecuteLua code="local ent = XGenAIModule.GetEntityByWUID(data.killNpc) &#10;ent.soul:DealDamage(110, 100, data.killNpc, false)" />
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <While doFail="false" propagateChildFail="false" condition="true">
          <ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$message" senderInfo="" inbox="&apos;so_test_lod_anims_mb&apos;" condition="" answerVar="">
            <Sequence>
              <SmartObjSetBehaviorState behaviors="&apos;use_horse&apos;" state="Disabled" />
              <SmartObjSetBehaviorState behaviors="&apos;use_ladder&apos;" state="Disabled" />
              <SmartObjSetBehaviorState behaviors="&apos;use_sit&apos;" state="Disabled" />
              <SmartObjSetBehaviorState behaviors="&apos;use_sleep&apos;" state="Disabled" />
              <SmartObjSetBehaviorState behaviors="&apos;use_ledge&apos;" state="Disabled" />
              <SmartObjSetBehaviorState behaviors="&apos;use_deadBody&apos;" state="Disabled" />
              <Switch>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_Idle&apos;">
                  <TestInfo info="&apos;NPC is going to stand&apos;" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_SitBench&apos;">
                  <Sequence>
                    <SmartObjSetBehaviorState behaviors="&apos;use_sit&apos;" state="Enabled" />
                    <TestInfo info="&apos;NPC is going to sit&apos;" />
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_SleepBed&apos;">
                  <Sequence>
                    <SmartObjSetBehaviorState behaviors="&apos;use_sleep&apos;" state="Enabled" />
                    <TestInfo info="&apos;NPC is going to sleep&apos;" />
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_Ledge&apos;">
                  <Sequence>
                    <SmartObjSetBehaviorState behaviors="&apos;use_ledge&apos;" state="Enabled" />
                    <TestInfo info="&apos;NPC is going to jump over ledge&apos;" />
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_Ladder&apos;">
                  <Sequence>
                    <SmartObjSetBehaviorState behaviors="&apos;use_ladder&apos;" state="Enabled" />
                    <TestInfo info="&apos;NPC is going to climb&apos;" />
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_Horse&apos;">
                  <Sequence>
                    <SmartObjSetBehaviorState behaviors="&apos;use_horse&apos;" state="Enabled" />
                    <TestInfo info="&apos;NPC is going to ride a horse&apos;" />
                  </Sequence>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$message == &apos;StartTest_DeadBody&apos;">
                  <Sequence>
                    <SmartObjSetBehaviorState behaviors="&apos;use_deadBody&apos;" state="Enabled" />
                    <TestInfo info="&apos;NPC is going to carry corpse&apos;" />
                  </Sequence>
                </IfCondition>
                <DefaultBranch>
                  <Success />
                </DefaultBranch>
              </Switch>
            </Sequence>
          </ProcessMessage>
        </While>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="killNpc" comment="" />
        <Variable name="message" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <DisablePerception hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </DisablePerception>
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
          </Sequence>
        </OnInit>
        <Behavior>
          <While hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SmartObjSetBehaviorState>
                <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SmartObjSetBehaviorState>
                <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SmartObjSetBehaviorState>
                <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SmartObjSetBehaviorState>
                <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SmartObjSetBehaviorState>
                <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SmartObjSetBehaviorState>
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="1">
                  <OutputBreakpoints>
                    <Breakpoint PortIndex="1" />
                  </OutputBreakpoints>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </TestInfo>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SmartObjSetBehaviorState>
                      <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </TestInfo>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SmartObjSetBehaviorState>
                      <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </TestInfo>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SmartObjSetBehaviorState>
                      <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </TestInfo>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SmartObjSetBehaviorState>
                      <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </TestInfo>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SmartObjSetBehaviorState>
                      <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </TestInfo>
                    </Sequence>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SmartObjSetBehaviorState>
                      <TestInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </TestInfo>
                    </Sequence>
                  </IfCondition>
                  <DefaultBranch>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </DefaultBranch>
                </Switch>
              </Sequence>
            </ProcessMessage>
          </While>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_sit" is_function="0">
    <Variables>
      <Variable name="bench" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false">
          <Sequence>
            <WaitAction />
            <TestCheckPoint name="&apos;TestAnimLod_Sit&apos;" />
            <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </Sequence>
        </StanceElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="bench" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </WaitAction>
              <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </TestCheckPoint>
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </Sequence>
          </StanceElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_sleep" is_function="0">
    <Variables>
      <Variable name="anim" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="postel" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <StanceElement smartObject="$__resource.id" stance="lying" allowAny="false">
          <Sequence>
            <WaitAction />
            <TestCheckPoint name="&apos;TestAnimLod_Sleep&apos;" />
            <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </Sequence>
        </StanceElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="anim" comment="" />
        <Variable name="postel" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </WaitAction>
              <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </TestCheckPoint>
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </Sequence>
          </StanceElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_none" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <WaitAction />
          <TestCheckPoint name="&apos;TestAnimLod_Idle&apos;" />
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </TestCheckPoint>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_ledge" is_function="0">
    <Variables>
      <Variable name="t1" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="t2" type="wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;ledge1&apos;" prune="true" negprune="unknown" Parent="" Child="$t1" Data="" />
          </GraphSearch>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;ledge2&apos;" prune="true" negprune="unknown" Parent="" Child="$t2" Data="" />
          </GraphSearch>
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <Sequence>
          <WaitAction />
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$t1" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$t2" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <TestCheckPoint name="&apos;TestAnimLod_Ledge&apos;" />
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="t1" comment="" />
        <Variable name="t2" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
          </Sequence>
        </OnInit>
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="1">
            <OutputBreakpoints>
              <Breakpoint PortIndex="2" />
            </OutputBreakpoints>
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </TestCheckPoint>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_horse" is_function="0">
    <Variables>
      <Variable name="horse" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="mountDirection" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="mountPosition" type="vec3" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
          <LinkTagFilter tag="&apos;horse&apos;" prune="true" negprune="unknown" Parent="" Child="$horse" Data="" />
        </GraphSearch>
      </OnInit>
      <Behavior canSkip="1">
        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
          <Child canSkip="1">
            <Sequence>
              <ExecuteLua code="local horse = XGenAIModule.GetEntityByWUID(data.horse); &#10;local rider = XGenAIModule.GetEntityByWUID(entity.this.id); &#10;data.mountPosition, data.mountDirection = rider.human:GetHorseMountPoint(horse.id);" />
              <ExactMove directionType="FromVariable" directionSpecification="$mountDirection" animationTriggerDist="0.150000" precise="false" changeNPCState="true" destinationSpecification="$mountPosition" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
              <ExecuteLua code="local horse = XGenAIModule.GetEntityByWUID(data.horse); &#10;local rider = XGenAIModule.GetEntityByWUID(entity.this.id);   &#10;rider.human:Mount(horse.id);" />
              <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;move&apos;" RunLogic="KeepRunning">
                <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;stop&apos;" RunLogic="KeepRunning">
                  <Success />
                </Synchronize>
              </Synchronize>
              <ExecuteLua code="local rider = XGenAIModule.GetEntityByWUID(entity.this.id);   &#10;rider.human:Dismount();" />
              <TestCheckPoint name="&apos;TestAnimLod_Horse&apos;" />
              <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </Child>
          <OnFail canSkip="1">
            <LuaGate code="return entity.human:IsMounted()" saveVersion="2">
              <Then canSkip="1">
                <ExecuteLua code="local rider = XGenAIModule.GetEntityByWUID(entity.this.id);   &#10;rider.human:ForceDismount();" />
              </Then>
              <Else canSkip="1">
                <Success />
              </Else>
            </LuaGate>
          </OnFail>
        </FuseBox>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="horse" comment="" />
        <Variable name="mountDirection" comment="" />
        <Variable name="mountPosition" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LinkTagFilter>
          </GraphSearch>
        </OnInit>
        <Behavior>
          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Child>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ExecuteLua>
                <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ExactMove>
                <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ExecuteLua>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
                <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </Synchronize>
                </Synchronize>
                <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ExecuteLua>
                <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </TestCheckPoint>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Child>
            <OnFail>
              <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ExecuteLua>
                </Then>
                <Else>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Else>
              </LuaGate>
            </OnFail>
          </FuseBox>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_ladder" is_function="0">
    <Variables>
      <Variable name="t1" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="t2" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;ladder1&apos;" prune="true" negprune="unknown" Parent="" Child="$t1" Data="" />
          </GraphSearch>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;ladder2&apos;" prune="true" negprune="unknown" Parent="" Child="$t2" Data="" />
          </GraphSearch>
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <Sequence>
          <WaitAction />
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$t1" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$t2" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
          <TestCheckPoint name="&apos;TestAnimLod_Ladder&apos;" />
          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="t1" comment="" />
        <Variable name="t2" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
          </Sequence>
        </OnInit>
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </TestCheckPoint>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_deadBody" is_function="0">
    <Variables>
      <Variable name="killNpc" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="t1" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="t2" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;kill&apos;" prune="true" negprune="unknown" Parent="" Child="$killNpc" Data="" />
          </GraphSearch>
          <GraphSearch Origin="$killNpc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;t1&apos;" prune="true" negprune="unknown" Parent="" Child="$t1" Data="" />
          </GraphSearch>
          <GraphSearch Origin="$killNpc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;t2&apos;" prune="true" negprune="unknown" Parent="" Child="$t2" Data="" />
          </GraphSearch>
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
          <Child canSkip="1">
            <Sequence>
              <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$killNpc" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
              <PickUpBody Target="$killNpc" />
              <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$t2" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
              <ExecuteLua code="local target = XGenAIModule.GetEntityByWUID(data.t1); &#10;local entity = XGenAIModule.GetEntityByWUID(data.this.id); &#10; &#10;entity:SetPos(target:GetPos())" />
              <PlaceBody />
              <TestCheckPoint name="&apos;TestAnimLod_DeadBody&apos;" />
              <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </Child>
          <OnFail canSkip="1">
            <SuppressFailure>
              <InstantPlaceBody />
            </SuppressFailure>
          </OnFail>
        </FuseBox>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="killNpc" comment="" />
        <Variable name="t1" comment="" />
        <Variable name="t2" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
          </Sequence>
        </OnInit>
        <Behavior>
          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Child>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Move>
                <PickUpBody hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </PickUpBody>
                <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Move>
                <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ExecuteLua>
                <PlaceBody hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </PlaceBody>
                <TestCheckPoint hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </TestCheckPoint>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Child>
            <OnFail>
              <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <InstantPlaceBody hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </InstantPlaceBody>
              </SuppressFailure>
            </OnFail>
          </FuseBox>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_wait" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Wait>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>