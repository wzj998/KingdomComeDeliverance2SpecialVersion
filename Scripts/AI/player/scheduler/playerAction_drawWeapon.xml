<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="player_playerAction_drawWeapon" is_function="0">
    <Variables>
      <Variable name="ammo" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="hand" type="enum:handType" values="" isPersistent="0" form="single" />
      <Variable name="hand_left" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="hand_right" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="hasWeapon_oversized" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="hasWeapon_primary" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="hasWeapon_secondary" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="validWeaponSet" type="_bool" values="true" isPersistent="0" form="single" />
      <Variable name="weapon" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="weaponSet" type="enum:weaponSet" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="allowDifferentWeaponSet" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="concept_weaponSet" type="enum:concept_weaponSet" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="loadSecondaryWeapon" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="useSelectedWeaponSet" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$hand_left" RightHand="$hand_right" UseTorchWhenAppropriate="false" />
          <IfCondition failOnCondition="false" condition="$hand_right ~= $__null">
            <Expression expressions="$hasWeapon_primary = true" />
          </IfCondition>
          <GetWeaponsFromWeaponSet WeaponSet="Secondary" LeftHand="$hand_left" RightHand="$hand_right" UseTorchWhenAppropriate="false" />
          <IfCondition failOnCondition="false" condition="$hand_left ~= $__null | $hand_right ~= $__null">
            <Expression expressions="$hasWeapon_secondary = true" />
          </IfCondition>
          <GetWeaponsFromWeaponSet WeaponSet="Oversized" LeftHand="$hand_left" RightHand="$hand_right" UseTorchWhenAppropriate="false" />
          <IfCondition failOnCondition="false" condition="$hand_right ~= $__null">
            <Expression expressions="$hasWeapon_oversized = true" />
          </IfCondition>
          <IfElseCondition failOnCondition="false" condition="$useSelectedWeaponSet" saveVersion="2">
            <Then canSkip="1">
              <IfCondition failOnCondition="false" condition="!$hasWeapon_primary &amp; !$hasWeapon_secondary &amp; !$hasWeapon_oversized">
                <Expression expressions="$validWeaponSet = false" />
              </IfCondition>
            </Then>
            <Else canSkip="1">
              <Switch>
                <IfCondition failOnCondition="false" condition="$concept_weaponSet == $enum:concept_weaponSet.primary">
                  <IfElseCondition failOnCondition="false" condition="$hasWeapon_primary" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$weaponSet = $enum:weaponSet.primary" />
                    </Then>
                    <Else canSkip="1">
                      <IfElseCondition failOnCondition="false" condition="$allowDifferentWeaponSet &amp; $hasWeapon_oversized" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$weaponSet = $enum:weaponSet.oversized" />
                        </Then>
                        <Else canSkip="1">
                          <IfElseCondition failOnCondition="false" condition="$allowDifferentWeaponSet &amp; $hasWeapon_secondary" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$weaponSet = $enum:weaponSet.secondary" />
                            </Then>
                            <Else canSkip="1">
                              <Expression expressions="$validWeaponSet = false" />
                            </Else>
                          </IfElseCondition>
                        </Else>
                      </IfElseCondition>
                    </Else>
                  </IfElseCondition>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$concept_weaponSet == $enum:concept_weaponSet.secondary">
                  <IfElseCondition failOnCondition="false" condition="$hasWeapon_secondary" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$weaponSet = $enum:weaponSet.secondary" />
                    </Then>
                    <Else canSkip="1">
                      <IfElseCondition failOnCondition="false" condition="$allowDifferentWeaponSet &amp; $hasWeapon_primary" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$weaponSet = $enum:weaponSet.primary" />
                        </Then>
                        <Else canSkip="1">
                          <IfElseCondition failOnCondition="false" condition="$allowDifferentWeaponSet &amp; $hasWeapon_oversized" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$weaponSet = $enum:weaponSet.oversized" />
                            </Then>
                            <Else canSkip="1">
                              <Expression expressions="$validWeaponSet = false" />
                            </Else>
                          </IfElseCondition>
                        </Else>
                      </IfElseCondition>
                    </Else>
                  </IfElseCondition>
                </IfCondition>
                <DefaultBranch>
                  <IfElseCondition failOnCondition="false" condition="$hasWeapon_oversized" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$weaponSet = $enum:weaponSet.oversized" />
                    </Then>
                    <Else canSkip="1">
                      <IfElseCondition failOnCondition="false" condition="$allowDifferentWeaponSet &amp; $hasWeapon_primary" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$weaponSet = $enum:weaponSet.primary" />
                        </Then>
                        <Else canSkip="1">
                          <IfElseCondition failOnCondition="false" condition="$allowDifferentWeaponSet &amp; $hasWeapon_secondary" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$weaponSet = $enum:weaponSet.secondary" />
                            </Then>
                            <Else canSkip="1">
                              <Expression expressions="$validWeaponSet = false" />
                            </Else>
                          </IfElseCondition>
                        </Else>
                      </IfElseCondition>
                    </Else>
                  </IfElseCondition>
                </DefaultBranch>
              </Switch>
            </Else>
          </IfElseCondition>
          <GraphSearch Origin="" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <ItemClassFilter ClassId="" Category="&apos;ammo.*.*&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
            <ItemParamFilter Param="Equip" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$ammo" saveVersion="2" />
          </GraphSearch>
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$loadSecondaryWeapon &amp; $hasWeapon_secondary &amp; #ammo &gt; 0" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <Function_item_getSecondaryWeapon hand="$hand" weapon="$weapon" nodeLabel="42728860" />
              <HandContentElement hand="$hand" item="$weapon" allowAny="false" decisionLabel="Label1" useDecision="false" enabled="true" saveVersion="2">
                <Search canSkip="1">
                  <Success />
                </Search>
                <Exec canSkip="1">
                  <LoadWeaponAction />
                </Exec>
              </HandContentElement>
            </Sequence>
          </Then>
          <Else canSkip="1">
            <IfElseCondition failOnCondition="false" condition="$validWeaponSet" saveVersion="2">
              <Then canSkip="1">
                <DrawAction WeaponSet="$weaponSet" fullBody="false" tags="" useSelectedWeaponSet="$useSelectedWeaponSet" />
              </Then>
              <Else canSkip="1">
                <WaitAction />
              </Else>
            </IfElseCondition>
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData Signature="drawWeapon" EventSet="">
      <Variables>
        <Variable name="ammo" comment="" />
        <Variable name="hand" comment="" />
        <Variable name="hand_left" comment="" />
        <Variable name="hand_right" comment="" />
        <Variable name="hasWeapon_oversized" comment="" />
        <Variable name="hasWeapon_primary" comment="" />
        <Variable name="hasWeapon_secondary" comment="" />
        <Variable name="validWeaponSet" comment="" />
        <Variable name="weapon" comment="" />
        <Variable name="weaponSet" comment="" />
        <Variable name="allowDifferentWeaponSet" comment="" />
        <Variable name="concept_weaponSet" comment="" />
        <Variable name="loadSecondaryWeapon" comment="" />
        <Variable name="useSelectedWeaponSet" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetWeaponsFromWeaponSet>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetWeaponsFromWeaponSet>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetWeaponsFromWeaponSet>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </IfCondition>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </IfCondition>
              </Then>
              <Else>
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Else>
                            </IfElseCondition>
                          </Else>
                        </IfElseCondition>
                      </Else>
                    </IfElseCondition>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Else>
                            </IfElseCondition>
                          </Else>
                        </IfElseCondition>
                      </Else>
                    </IfElseCondition>
                  </IfCondition>
                  <DefaultBranch>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Else>
                            </IfElseCondition>
                          </Else>
                        </IfElseCondition>
                      </Else>
                    </IfElseCondition>
                  </DefaultBranch>
                </Switch>
              </Else>
            </IfElseCondition>
            <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ItemClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ItemClassFilter>
              <ItemParamFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ItemParamFilter>
              <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
            </GraphSearch>
          </Sequence>
        </OnInit>
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Function_item_getSecondaryWeapon hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Function_item_getSecondaryWeapon>
                <HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Search>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </Search>
                  <Exec>
                    <LoadWeaponAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LoadWeaponAction>
                  </Exec>
                </HandContentElement>
              </Sequence>
            </Then>
            <Else>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <DrawAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </DrawAction>
                </Then>
                <Else>
                  <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WaitAction>
                </Else>
              </IfElseCondition>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>