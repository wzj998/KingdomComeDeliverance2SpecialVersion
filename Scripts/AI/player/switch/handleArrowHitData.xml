<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="player_handleArrowHitData" is_function="1">
    <Variables>
      <Variable name="assaultVolume" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="assaultVolumeParams" type="perceptibleParams" values="" isPersistent="0" form="single" />
      <Variable name="data" type="switch:arrowTouchdownData" values="" isPersistent="0" form="single" />
      <Variable name="distance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="nearestDistance" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="nearestEntity" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="vicinity" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="vicinity_value" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="vicinity_value_pos" type="vec3" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="hitData" type="hitData" values="" isPersistent="0" form="single" requirementType="ConstReference" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Function_switch_forwardHitData hitData="$hitData" sender="$__player" nodeLabel="65195786" />
          <IfCondition failOnCondition="false" condition="$hitData.target == $__null">
            <Sequence>
              <ProduceSound Sound="combatScript" Position="$__player" Multiplier="1.000000" />
              <CircularSpatialQuery Radius="2.500000" Center="$hitData.offset" ToFill="$vicinity" Precision="Exact" Filter="HumanNPCsPlayerExcluded" />
              <Expression expressions="$nearestEntity = $__null, &#10;$nearestDistance = -1" />
              <For startIndex="0" endIndex="-1" step="1" array="$vicinity" iterator="" value="$vicinity_value" break="">
                <Sequence>
                  <GetSpatialInfo In="$vicinity_value" Out="$vicinity_value_pos" What="Position" />
                  <NumericalOperation In1VariableName="vicinity_value_pos" In2VariableName="hitData.offset" In3VariableName="" OutVariableName="$distance" Operation="distance2dSq" />
                  <IfCondition failOnCondition="false" condition="$distance &lt; $nearestDistance | $nearestDistance &lt; 0">
                    <Expression expressions="$nearestDistance = $distance, &#10;$nearestEntity = $vicinity_value" />
                  </IfCondition>
                </Sequence>
              </For>
              <IfCondition failOnCondition="false" condition="$nearestEntity ~= $__null">
                <AtomicDecorator>
                  <Sequence>
                    <Expression expressions="$assaultVolumeParams.visibility = 0.005, &#10;$assaultVolumeParams.conspicuousness = 1" />
                    <SpawnExpiringPerceptibleVolume Expiration="&apos;4s&apos;" TimerType="GameTime" Position="$hitData.offset" Radius="0.500000" Height="0.250000" Label="&apos;switch_arrowTouchdown&apos;" OnlyVisiblePointsFromCenter="false" PerceptibleParams="$assaultVolumeParams" OutWuid="$assaultVolume" />
                    <Expression expressions="$data.position =$hitData.offset &#10;$data.shooter = $__player &#10;$data.target = $nearestEntity" />
                    <AddLink From="$assaultVolume" To="$assaultVolume" Tag="&apos;switch_arrowTouchdownData&apos;" Data="$data" LinkOpHandleMode="Error" />
                  </Sequence>
                </AtomicDecorator>
              </IfCondition>
            </Sequence>
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer>
      <Sequence>
        <GetType WUID="$arrowTouchdownVicinity_value" OutString="$arrowTouchdownVicinity_value_type" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
        <IfCondition failOnCondition="false" condition="$arrowTouchdownVicinity_value_type == &apos;NPC&apos; | $arrowTouchdownVicinity_value_type == &apos;NPC_Female&apos;" />
      </Sequence>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="assaultVolume" comment="" />
        <Variable name="assaultVolumeParams" comment="" />
        <Variable name="data" comment="" />
        <Variable name="distance" comment="" />
        <Variable name="nearestDistance" comment="" />
        <Variable name="nearestEntity" comment="" />
        <Variable name="vicinity" comment="" />
        <Variable name="vicinity_value" comment="" />
        <Variable name="vicinity_value_pos" comment="" />
        <Variable name="hitData" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="520" editorPosY="-160" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Function_switch_forwardHitData hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Function_switch_forwardHitData>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ProduceSound hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ProduceSound>
                <CircularSpatialQuery hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </CircularSpatialQuery>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <For hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetSpatialInfo>
                    <NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </NumericalOperation>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                  </Sequence>
                </For>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <SpawnExpiringPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SpawnExpiringPerceptibleVolume>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </AddLink>
                    </Sequence>
                  </AtomicDecorator>
                </IfCondition>
              </Sequence>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest>
        <Sequence editorPosX="1400" editorPosY="-600" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </GetType>
          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IfCondition>
        </Sequence>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>