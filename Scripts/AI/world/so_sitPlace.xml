<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="use" is_function="0">
    <Variables>
      <Variable name="shouldFallAsleep" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="synchronize_keepInBehavior" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="synchronize_successKey" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="time" type="_int64" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <SuppressFailure>
            <LuaGate code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;local isGroundPlace = EntityUtils.GetScriptProperty(soEntity,&apos;isGroundPlace&apos;); &#10;return isGroundPlace == true" saveVersion="2">
              <Then canSkip="1">
                <Success />
              </Then>
              <Else canSkip="1">
                <HasGenderCheck Gender="Male" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
                  <Then canSkip="1">
                    <EntityContextCheck context="bench_disableSnooze" target="$this.id" saveVersion="2">
                      <Then canSkip="1">
                        <Success />
                      </Then>
                      <Else canSkip="1">
                        <RandomGate opensWithChance="0.016000" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$shouldFallAsleep = true" />
                          </Then>
                        </RandomGate>
                      </Else>
                    </EntityContextCheck>
                  </Then>
                </HasGenderCheck>
              </Else>
            </LuaGate>
          </SuppressFailure>
          <Concatenation OutString="$synchronize_successKey" Pattern="&apos;$this.id;_behSuccess&apos;" />
          <Concatenation OutString="$synchronize_keepInBehavior" Pattern="&apos;$this.id;_keepInBehavior&apos;" />
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <AnyDecorator preset="crime_keepConfiscatedItems" enabled="true">
          <AddLinkElement from="$__object.id" to="$this.id" tag="&apos;benchOccupant&apos;" data="" enabled="true">
            <AddLinkElement from="$this.id" to="$__object.id" tag="&apos;bench&apos;" data="" enabled="true">
              <StanceElement smartObject="$__object.id" stance="sitting" allowAny="false" enabled="true">
                <Sequence>
                  <Parallel successMode="Any" failureMode="Any">
                    <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$synchronize_successKey&apos;" RunLogic="KeepRunning">
                      <Success />
                    </Synchronize>
                    <Sequence>
                      <IfElseCondition failOnCondition="false" condition="$shouldFallAsleep" saveVersion="2">
                        <Then canSkip="1">
                          <UnstanceAction unstance="camper_snooze" locationObject="$__object.id" slaveObject="" />
                        </Then>
                        <Else canSkip="1">
                          <EntityContextElement context="speech_readyForIngamePolylog" enabled="true">
                            <EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
                              <EntityContextElement context="soliloquy_enable" enabled="true">
                                <WaitAction />
                              </EntityContextElement>
                            </EntityContextElement>
                          </EntityContextElement>
                        </Else>
                      </IfElseCondition>
                      <EntityContextCheck context="activity_disableSchedulerLooping" target="" saveVersion="2">
                        <Then canSkip="1">
                          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
                        </Then>
                        <Else canSkip="1">
                          <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
                        </Else>
                      </EntityContextCheck>
                      <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$synchronize_successKey&apos;" RunLogic="KeepRunning">
                        <Success />
                      </Synchronize>
                    </Sequence>
                  </Parallel>
                  <SuppressFailure>
                    <InstantSynchronize SemaphoreCount="2" LockManagerType="Global" SemaphoreName="&apos;$synchronize_keepInBehavior&apos;" RunLogic="Halt">
                      <UrgencyDecorator Urgency="Slow">
                        <Sequence>
                          <WaitAction />
                          <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
                        </Sequence>
                      </UrgencyDecorator>
                    </InstantSynchronize>
                  </SuppressFailure>
                </Sequence>
              </StanceElement>
            </AddLinkElement>
          </AddLinkElement>
        </AnyDecorator>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="shouldFallAsleep" comment="" />
        <Variable name="synchronize_keepInBehavior" comment="" />
        <Variable name="synchronize_successKey" comment="" />
        <Variable name="time" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Then>
                <Else>
                  <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </Then>
                        <Else>
                          <RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                          </RandomGate>
                        </Else>
                      </EntityContextCheck>
                    </Then>
                  </HasGenderCheck>
                </Else>
              </LuaGate>
            </SuppressFailure>
            <Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Concatenation>
            <Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Concatenation>
          </Sequence>
        </OnInit>
        <Behavior>
          <AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </Synchronize>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </UnstanceAction>
                          </Then>
                          <Else>
                            <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </WaitAction>
                                </EntityContextElement>
                              </EntityContextElement>
                            </EntityContextElement>
                          </Else>
                        </IfElseCondition>
                        <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Then>
                          <Else>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Else>
                        </EntityContextCheck>
                        <Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Success>
                        </Synchronize>
                      </Sequence>
                    </Parallel>
                    <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </WaitAction>
                            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Wait>
                          </Sequence>
                        </UrgencyDecorator>
                      </InstantSynchronize>
                    </SuppressFailure>
                  </Sequence>
                </StanceElement>
              </AddLinkElement>
            </AddLinkElement>
          </AnyDecorator>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_nextBehavior" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <StanceElement smartObject="$__object.id" stance="sitting" allowAny="false" enabled="true">
          <Sequence>
            <WaitAction />
            <SubtreeDecorator saveVersion="2">
              <Init canSkip="1">
                <SetExternalLock LockManagerType="Intellect" Locked="false" LockName="&apos;nextBehavior&apos;" />
              </Init>
              <Subtree canSkip="1">
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </Subtree>
              <Cleanup canSkip="1">
                <SetExternalLock LockManagerType="Intellect" Locked="true" LockName="&apos;nextBehavior&apos;" />
              </Cleanup>
            </SubtreeDecorator>
          </Sequence>
        </StanceElement>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </WaitAction>
              <SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Init>
                  <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SetExternalLock>
                </Init>
                <Subtree>
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Subtree>
                <Cleanup>
                  <SetExternalLock hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SetExternalLock>
                </Cleanup>
              </SubtreeDecorator>
            </Sequence>
          </StanceElement>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>