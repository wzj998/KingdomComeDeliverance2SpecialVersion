<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree lastNodeId="9" name="player_enter">
    <Variables>
      <Variable name="targetDoor" type="wuid" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" saveVersion="2">
      <Behavior>
        <IfElseCondition condition="$__bodyInfo.id==$__player" failOnCondition="true" id="1" saveVersion="2">
          <Then>
            <Sequence id="2">
              <GraphSearch Origin="" Borders="" depth="-1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" includeOrigin="false" id="3">
                <EntityClassFilter Source="Child" prune="true" negprune="false" Class="SmartObject" id="4" Child="" Parent="" />
                <CategoryFilter Source="Child" prune="true" negprune="false" categories="&apos;Door&apos;" id="5" Child="" Parent="" />
                <Nodalyzer Quantifiers="Exists" id="6" Child="$targetDoor" Parent="" />
              </GraphSearch>
              <InstantSendMessageToNPC target="$targetDoor" type="&apos;door:player&apos;" values="inside(true)" id="7" />
            </Sequence>
          </Then>
          <Else>
            <Success id="8" />
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="targetDoor" comment="" />
      </Variables>
      <Root editorPosX="20" editorPosY="-30" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfElseCondition editorPosX="220" editorPosY="-30" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence editorPosX="420" editorPosY="-30" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch editorPosX="560" editorPosY="-110" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <EntityClassFilter editorPosX="850" editorPosY="-220" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </EntityClassFilter>
                  <CategoryFilter editorPosX="850" editorPosY="-80" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CategoryFilter>
                  <Nodalyzer editorPosX="850" editorPosY="50" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Nodalyzer>
                </GraphSearch>
                <InstantSendMessageToNPC editorPosX="540" editorPosY="70" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </InstantSendMessageToNPC>
              </Sequence>
            </Then>
            <Else>
              <Success editorPosX="420" editorPosY="70" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree lastNodeId="9" name="player_leave">
    <Variables>
      <Variable name="targetDoor" type="wuid" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" saveVersion="2">
      <Behavior>
        <IfElseCondition condition="$__bodyInfo.id==$__player" failOnCondition="true" id="1" saveVersion="2">
          <Then>
            <Sequence id="2">
              <GraphSearch Origin="" Borders="" depth="-1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" includeOrigin="false" id="3">
                <EntityClassFilter Source="Child" prune="true" negprune="false" Class="SmartObject" id="4" Child="" Parent="" />
                <CategoryFilter Source="Child" prune="true" negprune="false" categories="&apos;Door&apos;" id="5" Child="" Parent="" />
                <Nodalyzer Quantifiers="Exists" id="6" Child="$targetDoor" Parent="" />
              </GraphSearch>
              <InstantSendMessageToNPC target="$targetDoor" type="&apos;door:player&apos;" values="inside(false)" id="7" />
            </Sequence>
          </Then>
          <Else>
            <Success id="8" />
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="targetDoor" comment="" />
      </Variables>
      <Root editorPosX="0" editorPosY="0" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfElseCondition editorPosX="200" editorPosY="0" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence editorPosX="400" editorPosY="0" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch editorPosX="530" editorPosY="-60" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <EntityClassFilter editorPosX="820" editorPosY="-170" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </EntityClassFilter>
                  <CategoryFilter editorPosX="820" editorPosY="-30" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CategoryFilter>
                  <Nodalyzer editorPosX="820" editorPosY="100" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Nodalyzer>
                </GraphSearch>
                <InstantSendMessageToNPC editorPosX="520" editorPosY="100" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </InstantSendMessageToNPC>
              </Sequence>
            </Then>
            <Else>
              <Success editorPosX="400" editorPosY="100" isHidingChildren="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="door_on_update" is_function="0">
    <Variables>
      <Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="doorSA" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="entry" type="door:entry" values="" isPersistent="0" form="single" />
      <Variable name="failPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="index" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="iterator" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="lockDifficulty" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="lockDifficulty_generated" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="lockEvent" type="door:onLock" values="" isPersistent="0" form="single" />
      <Variable name="newQueue" type="door:queue" values="" isPersistent="0" form="single" />
      <Variable name="playerIntrusion" type="door:player" values="inside(false)" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="array" />
      <Variable name="queueChange" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="queuePosIn" type="_int" values="-1" isPersistent="0" form="single" />
      <Variable name="queuePosOut" type="_int" values="-1" isPersistent="0" form="single" />
      <Variable name="queuePriority" type="door:queue" values="" isPersistent="0" form="array" />
      <Variable name="skipQueue" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="true" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Sequence>
          <IfCondition failOnCondition="false" condition="$__version.loaded&lt;$enum:gameVersion.Ver_01_08">
            <LuaGate code="return entity:IsLocked() and entity:IsOpen()" saveVersion="2">
              <Then canSkip="1">
                <ExecuteLua code="entity:Close()" />
              </Then>
              <Else canSkip="1">
                <Success />
              </Else>
            </LuaGate>
          </IfCondition>
          <ExecuteLua code="data.info.type = entity.Properties.Lock.esLockTypes &#10;data.info.reverse = entity.Properties.Lock.bLockReversed &#10; &#10;if data.info.type == &quot;manual/key&quot; or data.info.type == &quot;key/key&quot; then &#10;    data.info.key = entity.Properties.Lock.guidItemClassId &#10;end &#10; &#10; &#10;data.lockDifficulty = entity:GetLockDifficulty() &#10;data.lockDifficulty_generated = entity:GenerateLockDifficulty()" />
          <ClearInbox inbox="&apos;door_communication&apos;" type="" condition="" />
        </Sequence>
      </OnInit>
      <Behavior canSkip="1">
        <LogToLabel Name="&apos;lock&apos;" Wuid="" Message="&apos;$this.id &#10;Lock difficulty template: $lockDifficulty_generated &#10;Lock difficulty:         $lockDifficulty&apos;">
          <Parallel successMode="Any" failureMode="Any">
            <While doFail="false" propagateChildFail="false" condition="true">
              <ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$newQueue" senderInfo="" inbox="&apos;door_communication&apos;" condition="" answerVar="">
                <IfElseCondition failOnCondition="false" condition="$newQueue.leaving" saveVersion="2">
                  <Then canSkip="1">
                    <Sequence>
                      <Expression expressions="$queuePosOut=-1" />
                      <Expression expressions="$queuePosIn=-1" />
                      <For startIndex="0" endIndex="-1" step="1" array="$queue" iterator="$iterator" value="" break="$break">
                        <IfElseCondition failOnCondition="true" condition="$newQueue.id==$queue[$iterator].id" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$break=true" />
                          </Then>
                          <Else canSkip="1">
                            <IfElseCondition failOnCondition="true" condition="$iterator==0" saveVersion="2">
                              <Then canSkip="1">
                                <Expression expressions="$queuePosIn+=1,&#10;$queuePosOut+=1," />
                              </Then>
                              <Else canSkip="1">
                                <IfElseCondition failOnCondition="true" condition="$queue[$iterator].inside==true" saveVersion="2">
                                  <Then canSkip="1">
                                    <Expression expressions="$queuePosIn+=1" />
                                  </Then>
                                  <Else canSkip="1">
                                    <Expression expressions="$queuePosOut+=1" />
                                  </Else>
                                </IfElseCondition>
                              </Else>
                            </IfElseCondition>
                          </Else>
                        </IfElseCondition>
                      </For>
                      <IfCondition failOnCondition="false" condition="$break==true">
                        <Sequence>
                          <VarOperation varName="$queue" targetVarName="" operation="Erase" argument="$iterator" />
                          <For startIndex="$iterator" endIndex="-1" step="1" array="$queue" iterator="$iterator" value="" break="">
                            <IfElseCondition failOnCondition="true" condition="$iterator==0" saveVersion="2">
                              <Then canSkip="1">
                                <Sequence>
                                  <InstantSendMessageToNPC target="$queue[$iterator].id" type="&apos;door:wait&apos;" values="place($iterator)" />
                                  <Expression expressions="$queuePosIn+=1" />
                                  <Expression expressions="$queuePosOut+=1" />
                                </Sequence>
                              </Then>
                              <Else canSkip="1">
                                <IfElseCondition failOnCondition="true" condition="$queue[$iterator].inside==true" saveVersion="2">
                                  <Then canSkip="1">
                                    <Sequence>
                                      <Expression expressions="$queuePosIn+=1" />
                                      <InstantSendMessageToNPC target="$queue[$iterator].id" type="&apos;door:wait&apos;" values="place($queuePosIn)" />
                                    </Sequence>
                                  </Then>
                                  <Else canSkip="1">
                                    <Sequence>
                                      <Expression expressions="$queuePosOut+=1" />
                                      <InstantSendMessageToNPC target="$queue[$iterator].id" type="&apos;door:wait&apos;" values="place($queuePosOut)" />
                                    </Sequence>
                                  </Else>
                                </IfElseCondition>
                              </Else>
                            </IfElseCondition>
                          </For>
                        </Sequence>
                      </IfCondition>
                    </Sequence>
                  </Then>
                  <Else canSkip="1">
                    <Sequence>
                      <VarOperation varName="$queue" targetVarName="$index" operation="Find" argument="$newQueue" />
                      <IfCondition failOnCondition="false" condition="$index&gt;=0">
                        <Sequence>
                          <InstantSendMessageToNPC target="$newQueue.id" type="&apos;door:wait&apos;" values="place(0)" />
                          <GetSpatialInfo In="$this.id" Out="$failPos" What="Position" />
                          <ErrorNode Message="&apos;Door queue fail at $failPos duplicate in queue detected: $newQueue.id&apos;" />
                        </Sequence>
                      </IfCondition>
                      <Sequence>
                        <VarOperation varName="$queue" targetVarName="" operation="PushBack" argument="($newQueue)" />
                        <IfElseCondition failOnCondition="true" condition="$newQueue.inside==true" saveVersion="2">
                          <Then canSkip="1">
                            <Sequence>
                              <Expression expressions="$queuePosIn+=1" />
                              <IfCondition failOnCondition="false" condition="$queuePosOut==-1">
                                <Expression expressions="$queuePosOut=0" />
                              </IfCondition>
                              <InstantSendMessageToNPC target="$newQueue.id" type="&apos;door:wait&apos;" values="place($queuePosIn)" />
                            </Sequence>
                          </Then>
                          <Else canSkip="1">
                            <Sequence>
                              <Expression expressions="$queuePosOut+=1" />
                              <IfCondition failOnCondition="false" condition="$queuePosIn==-1">
                                <Expression expressions="$queuePosIn=0" />
                              </IfCondition>
                              <InstantSendMessageToNPC target="$newQueue.id" type="&apos;door:wait&apos;" values="place($queuePosOut)" />
                            </Sequence>
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </Sequence>
                  </Else>
                </IfElseCondition>
              </ProcessMessage>
            </While>
          </Parallel>
        </LogToLabel>
      </Behavior>
    </Root>
    <ForestContainer>
      <IncludeTree File="&apos;world/so_lockpicking.xml&apos;" Name="&apos;handleDoorEvents&apos;" nodeLabel="10016806" />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="break" comment="" />
        <Variable name="doorSA" comment="" />
        <Variable name="entry" comment="" />
        <Variable name="failPos" comment="" />
        <Variable name="index" comment="" />
        <Variable name="info" comment="" />
        <Variable name="iterator" comment="" />
        <Variable name="lockDifficulty" comment="" />
        <Variable name="lockDifficulty_generated" comment="" />
        <Variable name="lockEvent" comment="" />
        <Variable name="newQueue" comment="" />
        <Variable name="playerIntrusion" comment="" />
        <Variable name="queue" comment="" />
        <Variable name="queueChange" comment="" />
        <Variable name="queuePosIn" comment="" />
        <Variable name="queuePosOut" comment="" />
        <Variable name="queuePriority" comment="" />
        <Variable name="skipQueue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-750" editorPosY="-70" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ExecuteLua>
                </Then>
                <Else>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Else>
              </LuaGate>
            </IfCondition>
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
            <ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ClearInbox>
          </Sequence>
        </OnInit>
        <Behavior>
          <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <While hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Sequence hasInputBreakpoint="0" comment="Reset counter after somebody left" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <For hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <IfElseCondition hasInputBreakpoint="0" comment="The first one to go can be on either side" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Then>
                                <Else>
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Then>
                                    <Else>
                                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Expression>
                                    </Else>
                                  </IfElseCondition>
                                </Else>
                              </IfElseCondition>
                            </Else>
                          </IfElseCondition>
                        </For>
                        <IfCondition hasInputBreakpoint="0" comment="Handle succesors after the one who left" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </VarOperation>
                            <For hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </InstantSendMessageToNPC>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Sequence>
                                </Then>
                                <Else>
                                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Expression>
                                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </InstantSendMessageToNPC>
                                      </Sequence>
                                    </Then>
                                    <Else>
                                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </Expression>
                                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                          <OutputBreakpoints />
                                        </InstantSendMessageToNPC>
                                      </Sequence>
                                    </Else>
                                  </IfElseCondition>
                                </Else>
                              </IfElseCondition>
                            </For>
                          </Sequence>
                        </IfCondition>
                      </Sequence>
                    </Then>
                    <Else>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </VarOperation>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </InstantSendMessageToNPC>
                            <GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </GetSpatialInfo>
                            <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ErrorNode>
                          </Sequence>
                        </IfCondition>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </VarOperation>
                          <IfElseCondition hasInputBreakpoint="0" comment="keep balance in distances on the In and Out side of the door" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </IfCondition>
                                <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </InstantSendMessageToNPC>
                              </Sequence>
                            </Then>
                            <Else>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </IfCondition>
                                <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </InstantSendMessageToNPC>
                              </Sequence>
                            </Else>
                          </IfElseCondition>
                        </Sequence>
                      </Sequence>
                    </Else>
                  </IfElseCondition>
                </ProcessMessage>
              </While>
            </Parallel>
          </LogToLabel>
        </Behavior>
      </Root>
      <Forest>
        <IncludeTree editorPosX="-90" editorPosY="240" hasInputBreakpoint="0" comment="Event notifiacation" breakpointFlags="0">
          <OutputBreakpoints />
        </IncludeTree>
      </Forest>
      <Comments>
        <Comment text="It&apos;s_possible_we_won&apos;t_need_this,_but_if_we_do,_it&apos;s_suppoed_to_go_into_the_parallel" posX="-130" posY="180" width="737" height="147" resizeBorderWidth="300" resizeBorderHeight="120" color="0.65,0.65,0.65" author="jan.vegricht" />
      </Comments>
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="door_on_request" is_function="0">
    <Variables>
      <Variable name="skipQueue" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfCondition failOnCondition="false" condition="$__behaviorName==&apos;traverse&apos;|$__behaviorName==&apos;LockIn&apos;|$__behaviorName==&apos;LockOut&apos;|$__behaviorName==&apos;UnlockIn&apos;|$__behaviorName==&apos;UnlockOut&apos;|$__behaviorName==&apos;lockpickIn&apos;|$__behaviorName==&apos;lockpickOut&apos;|$__behaviorName==&apos;CloseIn&apos;|$__behaviorName==&apos;CloseOut&apos;|$__behaviorName==&apos;rattleDoor_in&apos;|$__behaviorName==&apos;rattleDoor_out&apos;">
          <SuppressFailure>
            <InstantSendMessageToNPC target="$__bodyInfo.id" variable="$info" />
          </SuppressFailure>
        </IfCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="skipQueue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-80" editorPosY="30" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfCondition hasInputBreakpoint="0" comment="seznam stromu co chteji info o nastaveni dveri" breakpointFlags="0">
            <OutputBreakpoints />
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <InstantSendMessageToNPC hasInputBreakpoint="0" comment="TODO: move to behavior?" breakpointFlags="0">
                <OutputBreakpoints />
              </InstantSendMessageToNPC>
            </SuppressFailure>
          </IfCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="door_on_release" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Success />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Success>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="Traverse" is_function="0">
    <Variables>
      <Variable name="addParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
      <Variable name="myPlace" type="door:wait" values="" isPersistent="0" form="single" />
      <Variable name="myPosFloat" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="pathParams_noTraverse" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="place" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="wait" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$myPlace" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
          <ExecuteLua code="data.wait = tostring(data.myPlace.place * 300)..&quot;ms&quot; &#10;data.myPosFloat = data.myPlace.place * 0.8 + 1.4" />
          <IfCondition failOnCondition="false" condition="$myPlace.place&gt;0">
            <Sequence>
              <Move stopWithinDistance="$myPosFloat" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$entry" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$addParams" pathFindingParams="$pathParams_noTraverse" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
              <Parallel successMode="Any" failureMode="Any">
                <LoopUntil until="Fail" attemptCount="0">
                  <Sequence>
                    <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$myPlace" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
                    <IfCondition failOnCondition="true" condition="$myPlace.place~=0">
                      <ExecuteLua code="data.wait = tostring(data.myPlace.place * 300)..&quot;ms&quot; &#10;data.myPosFloat = data.myPlace.place * 0.8 + 1.8" />
                    </IfCondition>
                  </Sequence>
                </LoopUntil>
                <LoopUntil until="Fail" attemptCount="0">
                  <IfCondition failOnCondition="true" condition="$myPlace.place&gt;0">
                    <Sequence>
                      <Wait duration="$wait" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                      <Move stopWithinDistance="$myPosFloat" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$entry" destinationSpecification2="" destinationSpecification3="" speed="$__navInfo.speed" additionalParams="$addParams" pathFindingParams="$pathParams_noTraverse" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                    </Sequence>
                  </IfCondition>
                </LoopUntil>
              </Parallel>
            </Sequence>
          </IfCondition>
          <Sequence>
            <Sequence>
              <Success />
            </Sequence>
            <LuaWrapper onEnter="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door.inUse = 1" onExit="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door.inUse = 0">
              <Switch>
                <IfCondition failOnCondition="false" condition="$doorMode==&apos;traverse&apos;">
                  <Success />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$doorMode==&apos;lockpickOut&apos;|$doorMode==&apos;lockpickIn&apos;">
                  <Success />
                </IfCondition>
                <DefaultBranch>
                  <Success />
                </DefaultBranch>
              </Switch>
            </LuaWrapper>
          </Sequence>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="addParams" comment="" />
        <Variable name="myPlace" comment="" />
        <Variable name="myPosFloat" comment="" />
        <Variable name="pathParams_noTraverse" comment="" />
        <Variable name="place" comment="" />
        <Variable name="wait" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="1090" editorPosY="-340" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ReadMessage>
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="5">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Move hasInputBreakpoint="0" comment="Periodically change " breakpointFlags="5">
                  <OutputBreakpoints />
                </Move>
                <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </ReadMessage>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <ExecuteLua hasInputBreakpoint="0" comment="Duplicit code with node id 4" breakpointFlags="0">
                          <OutputBreakpoints />
                        </ExecuteLua>
                      </IfCondition>
                    </Sequence>
                  </LoopUntil>
                  <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                        <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Move>
                      </Sequence>
                    </IfCondition>
                  </LoopUntil>
                </Parallel>
              </Sequence>
            </IfCondition>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="Success if door are empty" breakpointFlags="0">
                <OutputBreakpoints />
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </Sequence>
              <LuaWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </IfCondition>
                  <DefaultBranch>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </DefaultBranch>
                </Switch>
              </LuaWrapper>
            </Sequence>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments>
        <Comment text="TODO:_possible_race_condition._atomic???" posX="1600" posY="70" width="900" height="447" resizeBorderWidth="900" resizeBorderHeight="420" color="0.65,0.65,0.65" author="daniel.mikes" />
      </Comments>
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="CheckPlayer">
    <Variables>
      <Variable name="pathFindParams" type="pathFindingParams" values="useSmartObjects(false)" form="single" />
      <Variable name="playerIntrusion" type="door:player" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Selector>
          <LoopUntil until="Success" attemptCount="25">
            <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsInUse()" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <Move stopWithinDistance="1.200000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$entry" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="$pathFindParams" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                  <Wait duration="&apos;300ms&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  <Fail />
                </Sequence>
              </Then>
              <Else canSkip="1">
                <Success />
              </Else>
            </LuaGate>
          </LoopUntil>
          <LogToConsole Message="&apos;$this.id failed to wait for inUse in $__object.id - will force entry now&apos;" LogLevel="Warning" />
        </Selector>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="pathFindParams" comment="" />
        <Variable name="playerIntrusion" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="160" editorPosY="220" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Selector editorPosX="390" editorPosY="220" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LoopUntil editorPosX="550" editorPosY="220" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LuaGate editorPosX="730" editorPosY="220" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence editorPosX="950" editorPosY="220" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Move editorPosX="1070" editorPosY="220" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Move>
                    <Wait editorPosX="1070" editorPosY="450" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                    <Fail editorPosX="1070" editorPosY="560" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Fail>
                  </Sequence>
                </Then>
                <Else>
                  <Success editorPosX="950" editorPosY="310" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Else>
              </LuaGate>
            </LoopUntil>
            <LogToConsole editorPosX="550" editorPosY="330" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </LogToConsole>
          </Selector>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="Use" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;traverse&apos;" isPersistent="0" form="single" />
      <Variable name="entry" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="entryID" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="fakeWuid" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="pathParams" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <IfElseCondition failOnCondition="true" condition="$__startToEnd==true" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <GetHelper smartObjectName="$__object.id" helperName="&apos;Front&apos;" categoryName="" targetVar="$entryID" policy="Name" />
              <GetHelperData smartObjectName="$__object.id" helperID="$entryID" positionTargetVar="$entry" orientationTargetVar="" transformTargetVar="" fragmentTargetVar="" tagsTargetVar="" />
              <Expression expressions="$queue.inside=true" />
            </Sequence>
          </Then>
          <Else canSkip="1">
            <Sequence>
              <GetHelper smartObjectName="$__object.id" helperName="&apos;Back&apos;" categoryName="" targetVar="$entryID" policy="Name" />
              <GetHelperData smartObjectName="$__object.id" helperID="$entryID" positionTargetVar="$entry" orientationTargetVar="" transformTargetVar="" fragmentTargetVar="" tagsTargetVar="" />
              <Expression expressions="$queue.inside=false" />
            </Sequence>
          </Else>
        </IfElseCondition>
      </OnInit>
      <Behavior canSkip="1">
        <DisableMoveTransitions>
          <Sequence>
            <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
            <VarOperation varName="$this.id" targetVarName="$queue.id" operation="Copy" argument="" />
            <Expression expressions="$queue.key=true" />
            <Expression expressions="$queue.type=$doorMode" />
            <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
              <Child canSkip="1">
                <Sequence>
                  <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                  <Success />
                </Sequence>
              </Child>
              <OnFail canSkip="1">
                <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
              </OnFail>
            </FuseBox>
          </Sequence>
        </DisableMoveTransitions>
      </Behavior>
    </Root>
    <ForestContainer>
      <IfElseCondition failOnCondition="true" condition="$__startToEnd==true" saveVersion="2">
        <Then canSkip="1">
          <IfElseCondition failOnCondition="true" condition="&apos;manual/key&apos;==$info.type" saveVersion="2">
            <Then canSkip="1">
              <IfElseCondition failOnCondition="true" condition="$info.reverse==1" saveVersion="2">
                <Then canSkip="1">
                  <LuaGate code="local id = entity.inventory:FindItem(data.info.key) &#10;if id == nil then  &#10;    return false &#10;else  &#10;    return true &#10;end" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$queue.key=true" />
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$queue.key=false" />
                    </Else>
                  </LuaGate>
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$queue.key=true" />
                </Else>
              </IfElseCondition>
            </Then>
            <Else canSkip="1">
              <IfElseCondition failOnCondition="true" condition="&apos;manual/none&apos;==$info.type" saveVersion="2">
                <Then canSkip="1">
                  <IfElseCondition failOnCondition="true" condition="$info.reverse==1" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$queue.key=false" />
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$queue.key=true" />
                    </Else>
                  </IfElseCondition>
                </Then>
                <Else canSkip="1">
                  <IfElseCondition failOnCondition="false" condition="&apos;key/key&apos;==$info.type" saveVersion="2">
                    <Then canSkip="1">
                      <LuaGate code="local id = entity.inventory:FindItem(data.info.key) &#10;if id == nil then  &#10;    return false &#10;else  &#10;    return true &#10;end" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$queue.key=true" />
                        </Then>
                        <Else canSkip="1">
                          <Expression expressions="$queue.key=false" />
                        </Else>
                      </LuaGate>
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$queue.key=false" />
                    </Else>
                  </IfElseCondition>
                </Else>
              </IfElseCondition>
            </Else>
          </IfElseCondition>
        </Then>
        <Else canSkip="1">
          <IfElseCondition failOnCondition="true" condition="&apos;manual/key&apos;==$info.type" saveVersion="2">
            <Then canSkip="1">
              <IfElseCondition failOnCondition="true" condition="$info.reverse==1" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$queue.key=true" />
                </Then>
                <Else canSkip="1">
                  <LuaGate code="local id = entity.inventory:FindItem(data.info.key) &#10;if id == nil then  &#10;    return false &#10;else  &#10;    return true &#10;end" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$queue.key=true" />
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$queue.key=false" />
                    </Else>
                  </LuaGate>
                </Else>
              </IfElseCondition>
            </Then>
            <Else canSkip="1">
              <IfElseCondition failOnCondition="true" condition="&apos;manual/none&apos;==$info.type" saveVersion="2">
                <Then canSkip="1">
                  <IfElseCondition failOnCondition="true" condition="$info.reverse==1" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$queue.key=true" />
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$queue.key=false" />
                    </Else>
                  </IfElseCondition>
                </Then>
                <Else canSkip="1">
                  <IfElseCondition failOnCondition="false" condition="&apos;key/key&apos;==$info.type" saveVersion="2">
                    <Then canSkip="1">
                      <LuaGate code="local id = entity.inventory:FindItem(data.info.key) &#10;if id == nil then  &#10;    return false &#10;else  &#10;    return true &#10;end" saveVersion="2">
                        <Then canSkip="1">
                          <Expression expressions="$queue.key=true" />
                        </Then>
                        <Else canSkip="1">
                          <Expression expressions="$queue.key=false" />
                        </Else>
                      </LuaGate>
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$queue.key=false" />
                    </Else>
                  </IfElseCondition>
                </Else>
              </IfElseCondition>
            </Else>
          </IfElseCondition>
        </Else>
      </IfElseCondition>
      <IfElseCondition failOnCondition="false" condition="$queue.key==true" saveVersion="2">
        <Then canSkip="1">
          <SetSpatialInfo In="$this.id" Val="$__navInfo.throughMoveTarget" What="Position" />
        </Then>
        <Else canSkip="1">
          <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door.bLocked" saveVersion="2">
            <Then canSkip="1">
              <Sequence>
                <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;home&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;Home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
                </GraphSearch>
                <GraphSearch Origin="$home" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <WUIDFilter WUID="$__object.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="$fakeWuid" />
                </GraphSearch>
                <SetSpatialInfo In="$this.id" Val="$__navInfo.throughMoveTarget" What="Position" />
              </Sequence>
            </Then>
            <Else canSkip="1">
              <SetSpatialInfo In="$this.id" Val="$__navInfo.throughMoveTarget" What="Position" />
            </Else>
          </LuaGate>
        </Else>
      </IfElseCondition>
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="entry" comment="" />
        <Variable name="entryID" comment="" />
        <Variable name="fakeWuid" comment="" />
        <Variable name="home" comment="" />
        <Variable name="info" comment="" />
        <Variable name="pathParams" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="40" editorPosY="-260" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetHelper>
                <GetHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetHelperData>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Sequence>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetHelper>
                <GetHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetHelperData>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Sequence>
            </Else>
          </IfElseCondition>
        </OnInit>
        <Behavior>
          <DisableMoveTransitions hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ReadMessage>
              <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </VarOperation>
              <Expression hasInputBreakpoint="0" comment="Every NPC can go through every door" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Child>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </InstantSendMessageToNPC>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </Sequence>
                </Child>
                <OnFail>
                  <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantSendMessageToNPC>
                </OnFail>
              </FuseBox>
            </Sequence>
          </DisableMoveTransitions>
        </Behavior>
      </Root>
      <Forest>
        <IfElseCondition editorPosX="1850" editorPosY="-20" hasInputBreakpoint="0" comment="Has key?" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
          <Then>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </LuaGate>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </Then>
              <Else>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </IfElseCondition>
                  </Then>
                  <Else>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Else>
                        </LuaGate>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </IfElseCondition>
                  </Else>
                </IfElseCondition>
              </Else>
            </IfElseCondition>
          </Then>
          <Else>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </LuaGate>
                  </Else>
                </IfElseCondition>
              </Then>
              <Else>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </IfElseCondition>
                  </Then>
                  <Else>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Then>
                          <Else>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                          </Else>
                        </LuaGate>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </IfElseCondition>
                  </Else>
                </IfElseCondition>
              </Else>
            </IfElseCondition>
          </Else>
        </IfElseCondition>
        <IfElseCondition editorPosX="670" editorPosY="650" hasInputBreakpoint="0" comment="TODO: Do not LOD it here. Action behavior handles locking and closing the door" breakpointFlags="0" saveVersion="2">
          <OutputBreakpoints />
          <Then>
            <SetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </SetSpatialInfo>
          </Then>
          <Else>
            <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                  </GraphSearch>
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </WUIDFilter>
                  </GraphSearch>
                  <SetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SetSpatialInfo>
                </Sequence>
              </Then>
              <Else>
                <SetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </SetSpatialInfo>
              </Else>
            </LuaGate>
          </Else>
        </IfElseCondition>
      </Forest>
      <Comments>
        <Comment text="this_used_to_be_in_LOD_(no_detail)" posX="610" posY="440" width="1030" height="479" resizeBorderWidth="1030" resizeBorderHeight="450" color="0.65,0.65,0.65" author="jan.vegricht" />
      </Comments>
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="LockOut" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;lockOut&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsLocked()" saveVersion="2">
          <Then canSkip="1">
            <Success />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=false,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id&#10;$queue.key=true" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-180" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="UnlockOut" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;unlockOut&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsLocked()" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=false,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id&#10;$queue.key=true" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Then>
          <Else canSkip="1">
            <Success />
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-180" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Then>
            <Else>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="lockpickOut" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;lockpickOut&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsLocked()" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=false,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id&#10;$queue.key=true" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Then>
          <Else canSkip="1">
            <Success />
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
        <Variable name="t_lockpickSuccess" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_lockpickSuccess" type="_bool" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="90" editorPosY="530" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Then>
            <Else>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="lockpickIn" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;lockpickIn&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsLocked()" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=true,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id&#10;$queue.key=true" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Then>
          <Else canSkip="1">
            <Success />
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
        <Variable name="t_lockpickSuccess" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_lockpickSuccess" type="_bool" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Then>
            <Else>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="CloseOut" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;closeOut&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return not door:IsOpen()" saveVersion="2">
          <Then canSkip="1">
            <Success />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=false,&#10;$queue.type=&apos;closeOut&apos;&#10;$queue.id=$this.id" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="95594144" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="CloseIn" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;closeIn&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return not door:IsOpen()" saveVersion="2">
          <Then canSkip="1">
            <Success />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=true,&#10;$queue.type=&apos;closeIn&apos;&#10;$queue.id=$this.id" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="95594144" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="LockIn" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;lockIn&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsLocked()" saveVersion="2">
          <Then canSkip="1">
            <Success />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=true,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id&#10;$queue.key=true" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-20" editorPosY="160" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="UnlockIn" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;unlockIn&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsLocked()" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=true,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id&#10;$queue.key=true" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Then>
          <Else canSkip="1">
            <Success />
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-30" editorPosY="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Then>
            <Else>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="action_default" is_function="0">
    <Variables>
      <Variable name="AnimPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="AnimRot" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="animation" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="animationTags" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="doclose" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="entryID" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="lock" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="luaAnim" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="right" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="tags" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;data.doclose = door:IsOpen() &#10;data.right   = door:IsRightDoor()" />
          <Switch>
            <IfCondition failOnCondition="true" condition="&apos;lockIn&apos;==$doorMode">
              <IfElseCondition failOnCondition="false" condition="$doclose==true" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animation=&apos;Door_CloseLock&apos;,&#10;$tags=&apos;doorDirFront&apos;,&#10;$lock=true,&#10;$luaAnim=&apos;f_o_lock_close_&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$animation=&apos;Door_LockUnlock&apos;,&#10;$tags=&apos;doorDirFront&apos;,&#10;$lock=true" />
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="true" condition="&apos;lockOut&apos;==$doorMode">
              <IfElseCondition failOnCondition="false" condition="$doclose==true" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animation=&apos;Door_CloseLock&apos;,&#10;$tags=&apos;doorDirBack&apos;,&#10;$lock=true,&#10;$luaAnim=&apos;b_o_lock_close_&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$animation=&apos;Door_LockUnlock&apos;,&#10;$tags=&apos;doorDirBack&apos;,&#10;$lock=true" />
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="true" condition="&apos;closeIn&apos;==$doorMode">
              <IfElseCondition failOnCondition="false" condition="$doclose==true" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animation=&apos;Door_CloseLock&apos;,&#10;$tags=&apos;doorDirFront&apos;,&#10;$luaAnim=&apos;f_o_lock_close_&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$animation=&apos;Door_LockUnlock&apos;,&#10;$tags=&apos;doorDirFront&apos;" />
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="true" condition="&apos;closeOut&apos;==$doorMode">
              <IfElseCondition failOnCondition="false" condition="$doclose==true" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$animation=&apos;Door_CloseLock&apos;,&#10;$tags=&apos;doorDirBack&apos;,&#10;$luaAnim=&apos;b_o_lock_close_&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$animation=&apos;Door_LockUnlock&apos;,&#10;$tags=&apos;doorDirBack&apos;" />
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="true" condition="&apos;unlockIn&apos;==$doorMode">
              <Expression expressions="$animation=&apos;Door_LockUnlock&apos;,&#10;$tags=&apos;doorDirFront&apos;,&#10;$lock=false" />
            </IfCondition>
            <IfCondition failOnCondition="true" condition="&apos;unlockOut&apos;==$doorMode">
              <Expression expressions="$animation=&apos;Door_LockUnlock&apos;,&#10;$tags=&apos;doorDirBack&apos;,&#10;$lock=false" />
            </IfCondition>
            <DefaultBranch>
              <ErrorNode Message="&apos;$this.id using door $__object.id : Unrecognized behavior $doorMode&apos;" />
            </DefaultBranch>
          </Switch>
          <IfElseCondition failOnCondition="true" condition="$right==true" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$tags=&apos;doorTypeRight,&apos;+$tags,&#10;$luaAnim=&apos;door_01_relaxed_walk_r_&apos;+$luaAnim" />
            </Then>
            <Else canSkip="1">
              <Expression expressions="$tags=&apos;doorTypeLeft,&apos;+$tags,&#10;$luaAnim=&apos;door_01_relaxed_walk_l_&apos;+$luaAnim" />
            </Else>
          </IfElseCondition>
          <Sequence>
            <GetHelper smartObjectName="$__object.id" helperName="&apos;AnimBone&apos;" categoryName="" targetVar="$entryID" policy="Name" />
            <GetAnimationHelperData smartObject="$__object.id" helperID="$entryID" fragment="$animation" tags="$tags" positionTargetVar="$AnimPos" orientationTargetVar="$AnimRot" transformTargetVar="" />
            <Expression expressions="$animationTags=$animation+&apos;(&apos;+$tags+&apos;)&apos;" />
            <ExactMove directionType="FromVariable" directionSpecification="$AnimRot" animationTriggerDist="0.120000" precise="false" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="$entryID" destinationSpecification3="$animationTags" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="">
              <Animation>
                <Sequence>
                  <IfCondition failOnCondition="false" condition="$doclose==true">
                    <IfElseCondition failOnCondition="false" condition="$b_soul.gender==$enum:humanGender.male" saveVersion="2">
                      <Then canSkip="1">
                        <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door:DoPlayAnimation(-1,0,0,data.luaAnim..&quot;male&quot;)" />
                      </Then>
                      <Else canSkip="1">
                        <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door:DoPlayAnimation(-1,0,0,data.luaAnim..&quot;female&quot;)" />
                      </Else>
                    </IfElseCondition>
                  </IfCondition>
                  <Sequence>
                    <Success />
                    <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </Sequence>
                  <IfElseCondition failOnCondition="true" condition="$lock==true" saveVersion="2">
                    <Then canSkip="1">
                      <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:Lock(true)" />
                    </Then>
                    <Else canSkip="1">
                      <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:Unlock()" />
                    </Else>
                  </IfElseCondition>
                </Sequence>
              </Animation>
            </ExactMove>
          </Sequence>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="AnimPos" comment="" />
        <Variable name="AnimRot" comment="" />
        <Variable name="animation" comment="" />
        <Variable name="animationTags" comment="" />
        <Variable name="doclose" comment="" />
        <Variable name="entryID" comment="" />
        <Variable name="lock" comment="" />
        <Variable name="luaAnim" comment="" />
        <Variable name="right" comment="" />
        <Variable name="tags" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <DefaultBranch>
                <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ErrorNode>
              </DefaultBranch>
            </Switch>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
              <Else>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Else>
            </IfElseCondition>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetHelper>
              <GetAnimationHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetAnimationHelperData>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <ExactMove hasInputBreakpoint="0" comment="Dont use noTraverse since this branch is not using Traverse behavior" breakpointFlags="0">
                <OutputBreakpoints />
                <Animation>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                        </Then>
                        <Else>
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                        </Else>
                      </IfElseCondition>
                    </IfCondition>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Success>
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </Sequence>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </ExecuteLua>
                      </Then>
                      <Else>
                        <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </ExecuteLua>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </Animation>
              </ExactMove>
            </Sequence>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="action_traverse" is_function="0">
    <Variables>
      <Variable name="AnimPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="AnimRot" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="actionParams" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="animEnd" type="door:endAnim" values="" isPersistent="0" form="single" />
      <Variable name="animation" type="_string" values="(&apos;Door&apos;)" isPersistent="0" form="single" />
      <Variable name="animationTags" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="corpse" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="doClose" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="doLock" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="doLockIn" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="doLockOut" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="doOpen" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="doorUsers" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="entryID" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="gender" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="hiddenPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="homeNotFound" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="isLockpicked" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="luaAnim" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="luaDir" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="neverLock" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="playerLockpickedLock" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="right" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="tags" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="timeToKeepOpen" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
          <Child canSkip="1">
            <LuaWrapper onEnter="entity.soul:RestrictDialog(true)" onExit="entity.soul:RestrictDialog(false)">
              <Sequence>
                <GetBehaviorHolders area="$__object.id" behaviors="&apos;use&apos;" targetVar="$doorUsers" />
                <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;-- open only if closed before &#10;data.doOpen  = not door:IsOpen() &#10;data.right   = door:IsRightDoor() &#10; &#10;data.doClose = door:ShouldBeClosed() &#10;data.doLock  = door:ShouldBeLocked(not data.queue.inside) &#10; &#10;data.neverLock = door:HasNeverLock() &#10; &#10;door:Unlock()" />
                <IfCondition failOnCondition="false" condition="$queue.inside">
                  <LuaGate code="return XGenAIModule.GetEntityByWUID(data.__object.id):GetInteriorType() == enum_interiorType.home" saveVersion="2">
                    <Then canSkip="1">
                      <SuppressFailure>
                        <Sequence>
                          <Selector>
                            <LuaGate code="return XGenAIModule.GetEntityByWUID(data.__object.id):IsDaytime()" saveVersion="2">
                              <Then canSkip="1">
                                <Fail />
                              </Then>
                              <Else canSkip="1">
                                <Success />
                              </Else>
                            </LuaGate>
                            <TryCatch atomicCatch="false">
                              <BehaviorTagCatch Reason="NotFound" ConsumeInnerEvents="true">
                                <Expression expressions="$homeNotFound=true" />
                              </BehaviorTagCatch>
                              <Subtree canSkip="1">
                                <Success />
                              </Subtree>
                            </TryCatch>
                            <IfElseCondition failOnCondition="false" condition="$homeNotFound" saveVersion="2">
                              <Then canSkip="1">
                                <LuaGate code="return XGenAIModule.GetEntityByWUID(data.__object.id):DoLockOnMissingHomeArea()" saveVersion="2">
                                  <Then canSkip="1">
                                    <Success />
                                  </Then>
                                  <Else canSkip="1">
                                    <Fail />
                                  </Else>
                                </LuaGate>
                              </Then>
                              <Else canSkip="1">
                                <Fail />
                              </Else>
                            </IfElseCondition>
                          </Selector>
                          <Expression expressions="$doClose=true" />
                          <IsInsideAreaWithLabel Position="$this.id" Label="&apos;city&apos;" Area="" FailSubtMissing="false" saveVersion="2">
                            <Then canSkip="1">
                              <Success />
                            </Then>
                            <Else canSkip="1">
                              <RandomGate opensWithChance="0.750000" saveVersion="2">
                                <Then canSkip="1">
                                  <Success />
                                </Then>
                                <Else canSkip="1">
                                  <Fail />
                                </Else>
                              </RandomGate>
                            </Else>
                          </IsInsideAreaWithLabel>
                          <IfCondition failOnCondition="false" condition="!$b_context[&apos;suppressLockDoorWhileNearHome&apos;]">
                            <Expression expressions="$doLock=true" />
                          </IfCondition>
                        </Sequence>
                      </SuppressFailure>
                    </Then>
                    <Else canSkip="1">
                      <Success />
                    </Else>
                  </LuaGate>
                </IfCondition>
                <IfCondition failOnCondition="false" condition="#doorUsers&gt;1">
                  <Expression expressions="$doClose=false&#10;$doLock=false" />
                </IfCondition>
                <VariableExistsGate VarToTest="$t_door_params" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
                  <Then canSkip="1">
                    <IfCondition failOnCondition="false" condition="$t_door_params.keepOpen">
                      <Expression expressions="$doClose=false&#10;$doLock=false" />
                    </IfCondition>
                  </Then>
                </VariableExistsGate>
                <IfCondition failOnCondition="false" condition="$neverLock">
                  <Expression expressions="$doLock=false" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="($info.type==&apos;manual/none&apos;&amp;$info.reverse==1)|$info.type==&apos;none/none&apos;">
                  <Expression expressions="$doLock=false" />
                </IfCondition>
                <Selector>
                  <Sequence>
                    <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="&apos;carriedBody&apos;" SubGraph="&apos;carriedBody&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                      <LinkTagFilter tag="&apos;carriedBody&apos;" prune="true" negprune="unknown" Parent="" Child="$corpse" Data="" />
                    </GraphSearch>
                    <Expression expressions="$rightHand=$corpse" />
                  </Sequence>
                  <HandCheck who="" LeftHand="$leftHand" RightHand="$rightHand" />
                </Selector>
                <IfElseCondition failOnCondition="false" condition="($leftHand==$__null&amp;$rightHand==$__null)&amp;($doClose|$doOpen)" saveVersion="2">
                  <Then canSkip="1">
                    <Sequence>
                      <Sequence>
                        <IfElseCondition failOnCondition="true" condition="$right" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$tags=&apos;doorTypeRight&apos;,&#10;$luaAnim=&apos;door_01_relaxed_walk_r_&apos;" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$tags=&apos;doorTypeLeft&apos;,&#10;$luaAnim=&apos;door_01_relaxed_walk_l_&apos;" />
                          </Else>
                        </IfElseCondition>
                        <IfElseCondition failOnCondition="true" condition="$queue.inside" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$tags+=&apos;,doorDirFront&apos;,&#10;$luaAnim+=&apos;f_&apos;" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$tags+=&apos;,doorDirBack&apos;,&#10;$luaAnim+=&apos;b_&apos;" />
                          </Else>
                        </IfElseCondition>
                        <IfElseCondition failOnCondition="true" condition="$doOpen" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$tags+=&apos;,close-&apos;,&#10;$luaAnim+=&apos;c_&apos;" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$tags+=&apos;,open-&apos;,&#10;$luaAnim+=&apos;o_&apos;" />
                          </Else>
                        </IfElseCondition>
                        <IfElseCondition failOnCondition="true" condition="$doClose" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$tags+=&apos;close&apos;,&#10;$luaAnim+=&apos;c_&apos;,&#10;$luaDir=-1" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$tags+=&apos;open&apos;,&#10;$luaAnim+=&apos;o_&apos;,&#10;$luaDir=1" />
                          </Else>
                        </IfElseCondition>
                        <HasGenderCheck Gender="Male" SoulWUID="" FailSubtMissing="false" saveVersion="2">
                          <Then canSkip="1">
                            <Expression expressions="$luaAnim+=&apos;01_male&apos;" />
                          </Then>
                          <Else canSkip="1">
                            <Expression expressions="$luaAnim+=&apos;01_female&apos;" />
                          </Else>
                        </HasGenderCheck>
                      </Sequence>
                      <Sequence>
                        <GetHelper smartObjectName="$__object.id" helperName="&apos;AnimBone&apos;" categoryName="" targetVar="$entryID" policy="Name" />
                        <GetAnimationHelperData smartObject="$__object.id" helperID="$entryID" fragment="$animation" tags="$tags" positionTargetVar="$AnimPos" orientationTargetVar="$AnimRot" transformTargetVar="" />
                        <Expression expressions="$animationTags=$animation+&apos;(&apos;+$tags+&apos;)&apos;" />
                        <ExactMove directionType="FromVariable" directionSpecification="$AnimRot" animationTriggerDist="0.120000" precise="false" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="$entryID" destinationSpecification3="$animationTags" speed="$__navInfo.speed" additionalParams="" pathFindingParams="$actionParams" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="">
                          <Animation>
                            <Sequence>
                              <AtomicDecorator>
                                <Sequence>
                                  <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;lockpick&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                                    <LinkTagFilter tag="&apos;lockpick&apos;" prune="true" negprune="false" Parent="" Child="$playerLockpickedLock" Data="" />
                                  </GraphSearch>
                                  <IfCondition failOnCondition="false" condition="$playerLockpickedLock==$__object.id">
                                    <StopMinigame type="Undefined" NPC="$__player" object="" typeOut="" FailStop="false" />
                                  </IfCondition>
                                </Sequence>
                              </AtomicDecorator>
                              <IfCondition failOnCondition="false" condition="$doOpen~=false|$doClose~=false">
                                <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door:DoPlayAnimation(data.luaDir,0,0,data.luaAnim) &#10;door:ForceCharacterUpdate(0, true)" />
                              </IfCondition>
                              <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;local lockpickTime = door.Properties.Lock.lockpickTime; &#10;if lockpickTime == nil then &#10;data.isLockpicked = false; &#10;return; &#10;end &#10; &#10;local now = Calendar.GetWorldTime(); &#10;local timeout = System.GetCVar(&apos;wh_pl_LockPickedDoorTimeout&apos;); &#10; &#10;if(now - lockpickTime) &lt; timeout then &#10;data.isLockpicked = true; &#10;else &#10;data.isLockpicked = false; &#10;end;" />
                              <IfCondition failOnCondition="false" condition="$isLockpicked">
                                <InstantSendMessageToNPC target="$this.id" type="&apos;lockpickedDoorData&apos;" values="door($__object.id)" />
                              </IfCondition>
                            </Sequence>
                          </Animation>
                        </ExactMove>
                      </Sequence>
                      <IfCondition failOnCondition="false" condition="$doLock">
                        <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:Lock(true)" />
                      </IfCondition>
                      <Expression expressions="$actionParams.useDoorPortals=true" />
                      <Move stopWithinDistance="0.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="$__navInfo.throughMoveTargetDistance" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$__navInfo.throughMoveTarget" destinationSpecification2="" destinationSpecification3="" speed="$__navInfo.speed" additionalParams="" pathFindingParams="$actionParams" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                    </Sequence>
                  </Then>
                  <Else canSkip="1">
                    <LuaWrapper onEnter="entity:SetColliderMode(7) &#10;local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:SetColliderMode(7)" onExit="entity:SetColliderMode(0) &#10;local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:SetColliderMode(0)">
                      <Sequence>
                        <IfCondition failOnCondition="false" condition="$doOpen==true">
                          <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:Open()" />
                        </IfCondition>
                        <Sequence>
                          <Expression expressions="$actionParams.useDoorPortals=true" />
                          <Move stopWithinDistance="0.000000" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="$__navInfo.throughMoveTargetDistance" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$__navInfo.throughMoveTarget" destinationSpecification2="" destinationSpecification3="" speed="$__navInfo.speed" additionalParams="" pathFindingParams="$actionParams" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                        </Sequence>
                        <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;local lockpickTime = door.Properties.Lock.lockpickTime; &#10;if lockpickTime == nil then &#10;data.isLockpicked = false; &#10;return; &#10;end &#10; &#10;local now = Calendar.GetWorldTime(); &#10;local timeout = System.GetCVar(&apos;wh_pl_LockPickedDoorTimeout&apos;); &#10; &#10;if(now - lockpickTime) &lt; timeout then &#10;data.isLockpicked = true; &#10;else &#10;data.isLockpicked = false; &#10;end;" />
                        <IfCondition failOnCondition="false" condition="$isLockpicked">
                          <InstantSendMessageToNPC target="$this.id" type="&apos;lockpickedDoorData&apos;" values="door($__object.id)" />
                        </IfCondition>
                        <IfCondition failOnCondition="false" condition="$doClose">
                          <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door:Close()" />
                        </IfCondition>
                        <IfCondition failOnCondition="false" condition="$doLock">
                          <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door:Lock(false)" />
                        </IfCondition>
                      </Sequence>
                    </LuaWrapper>
                  </Else>
                </IfElseCondition>
              </Sequence>
            </LuaWrapper>
          </Child>
        </FuseBox>
      </Behavior>
    </Root>
    <ForestContainer>
      <Expression expressions="$b_dialogParameters.noInterrupt=false" />
      <Expression expressions="$b_dialogParameters.noInterrupt=true" />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="AnimPos" comment="" />
        <Variable name="AnimRot" comment="" />
        <Variable name="actionParams" comment="" />
        <Variable name="animEnd" comment="" />
        <Variable name="animation" comment="" />
        <Variable name="animationTags" comment="" />
        <Variable name="corpse" comment="" />
        <Variable name="doClose" comment="" />
        <Variable name="doLock" comment="" />
        <Variable name="doLockIn" comment="" />
        <Variable name="doLockOut" comment="" />
        <Variable name="doOpen" comment="" />
        <Variable name="doorUsers" comment="" />
        <Variable name="entryID" comment="" />
        <Variable name="gender" comment="" />
        <Variable name="hiddenPos" comment="" />
        <Variable name="homeNotFound" comment="" />
        <Variable name="isLockpicked" comment="" />
        <Variable name="leftHand" comment="" />
        <Variable name="luaAnim" comment="" />
        <Variable name="luaDir" comment="" />
        <Variable name="neverLock" comment="" />
        <Variable name="playerLockpickedLock" comment="" />
        <Variable name="right" comment="" />
        <Variable name="rightHand" comment="" />
        <Variable name="tags" comment="" />
        <Variable name="timeToKeepOpen" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="info" type="" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
        <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="-780" editorPosY="-560" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Child>
              <LuaWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetBehaviorHolders hasInputBreakpoint="0" comment="Use is an universal behavior for using a smart object" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetBehaviorHolders>
                  <ExecuteLua hasInputBreakpoint="0" comment="priority 0: static information on the door" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ExecuteLua>
                  <IfCondition hasInputBreakpoint="0" comment="priority 1: close the home door if leaving and going far. (can overide false to true)" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Fail>
                                </Then>
                                <Else>
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </Else>
                              </LuaGate>
                              <TryCatch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <BehaviorTagCatch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </BehaviorTagCatch>
                                <Subtree>
                                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Success>
                                </Subtree>
                              </TryCatch>
                              <IfElseCondition hasInputBreakpoint="0" comment="The spot in front of the door is not inside a home. Lock just for sure." breakpointFlags="0" saveVersion="2">
                                <OutputBreakpoints />
                                <Then>
                                  <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Then>
                                      <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Success>
                                    </Then>
                                    <Else>
                                      <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </Fail>
                                    </Else>
                                  </LuaGate>
                                </Then>
                                <Else>
                                  <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Fail>
                                </Else>
                              </IfElseCondition>
                            </Selector>
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                            <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Success>
                              </Then>
                              <Else>
                                <RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                  <OutputBreakpoints />
                                  <Then>
                                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Success>
                                  </Then>
                                  <Else>
                                    <Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Fail>
                                  </Else>
                                </RandomGate>
                              </Else>
                            </IsInsideAreaWithLabel>
                            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </IfCondition>
                          </Sequence>
                        </SuppressFailure>
                      </Then>
                      <Else>
                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </Else>
                    </LuaGate>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="priority 2: the next npc later in the queue will handle it" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <VariableExistsGate hasInputBreakpoint="0" comment="priority 3: behavior override" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </IfCondition>
                    </Then>
                  </VariableExistsGate>
                  <IfCondition hasInputBreakpoint="0" comment="priority 4: neverLock override property" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="priority 5: physical properties of the door" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                  <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </LinkTagFilter>
                      </GraphSearch>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Sequence>
                    <HandCheck hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </HandCheck>
                  </Selector>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </IfElseCondition>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </IfElseCondition>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </IfElseCondition>
                          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </IfElseCondition>
                          <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                            <OutputBreakpoints />
                            <Then>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Then>
                            <Else>
                              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </Expression>
                            </Else>
                          </HasGenderCheck>
                        </Sequence>
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetHelper>
                          <GetAnimationHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </GetAnimationHelperData>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                          <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Animation>
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <AtomicDecorator hasInputBreakpoint="0" comment="Interrupt player lockpick" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                    <GraphSearch hasInputBreakpoint="0" comment="Retrieve lockpicked lock" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </LinkTagFilter>
                                    </GraphSearch>
                                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                      <StopMinigame hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </StopMinigame>
                                    </IfCondition>
                                  </Sequence>
                                </AtomicDecorator>
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </ExecuteLua>
                                </IfCondition>
                                <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </ExecuteLua>
                                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </InstantSendMessageToNPC>
                                </IfCondition>
                              </Sequence>
                            </Animation>
                          </ExactMove>
                        </Sequence>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                        </IfCondition>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <Move hasInputBreakpoint="0" comment="This is queued after the animation movement (NPC should be behind the door). This movement is only a visual improvement since it smoothens out the motion from the Animation to the parent decorator Move, which takes me to the final destination. This Move can fail in a rare situation, when the NPC is still in front of the door. Failure of this node is a symptom which might occur as a result of e.g. bad collision of the NPC during the animation." breakpointFlags="0">
                          <OutputBreakpoints />
                        </Move>
                      </Sequence>
                    </Then>
                    <Else>
                      <LuaWrapper hasInputBreakpoint="0" comment="interactive collision class" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfCondition hasInputBreakpoint="0" comment="eg.: hands full" breakpointFlags="0">
                            <OutputBreakpoints />
                            <ExecuteLua hasInputBreakpoint="0" comment="player open anim is faster for magic open" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ExecuteLua>
                          </IfCondition>
                          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Expression>
                            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </Move>
                          </Sequence>
                          <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="5">
                              <OutputBreakpoints />
                            </InstantSendMessageToNPC>
                          </IfCondition>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ExecuteLua>
                          </IfCondition>
                          <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                            </ExecuteLua>
                          </IfCondition>
                        </Sequence>
                      </LuaWrapper>
                    </Else>
                  </IfElseCondition>
                </Sequence>
              </LuaWrapper>
            </Child>
          </FuseBox>
        </Behavior>
      </Root>
      <Forest>
        <Expression editorPosX="-290" editorPosY="-430" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
        </Expression>
        <Expression editorPosX="110" editorPosY="-1920" hasInputBreakpoint="0" comment="It also affects NPC to NPC dialogs. Player dialog is restricted" breakpointFlags="0">
          <OutputBreakpoints />
        </Expression>
      </Forest>
      <Comments>
        <Comment text="hotfix,_this_should_be_connected" posX="100" posY="-1980" width="300" height="137" resizeBorderWidth="300" resizeBorderHeight="110" color="0.65,0.65,0.65" author="jan.vegricht" />
        <Comment text="hotfix,_this_should_be_connected_to_the_fusebox" posX="-350" posY="-460" width="435" height="127" resizeBorderWidth="300" resizeBorderHeight="100" color="0.65,0.65,0.65" author="jan.vegricht" />
      </Comments>
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="action_lockpick" is_function="0">
    <Variables>
      <Variable name="AnimPos" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="AnimRot" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="animation" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="animationTags" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="entryID" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="pathParams_noTraverse" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="right" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="tags" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;data.right   = door:IsRightDoor()" />
          <IfElseCondition failOnCondition="true" condition="$right==true" saveVersion="2">
            <Then canSkip="1">
              <Expression expressions="$animation=&apos;LockpickingNPC&apos;,&#10;$tags=&apos;RightSide&apos;," />
            </Then>
            <Else canSkip="1">
              <Expression expressions="$animation=&apos;LockpickingNPC&apos;,&#10;$tags=&apos;LeftSide&apos;," />
            </Else>
          </IfElseCondition>
          <Sequence>
            <Sequence>
              <GetHelper smartObjectName="$__object.id" helperName="&apos;AnimBone&apos;" categoryName="" targetVar="$entryID" policy="Name" />
              <GetAnimationHelperData smartObject="$__object.id" helperID="$entryID" fragment="&apos;LockPickingNPCIn&apos;" tags="$tags" positionTargetVar="$AnimPos" orientationTargetVar="$AnimRot" transformTargetVar="" />
              <Expression expressions="$animationTags=$animation+&apos;(&apos;+$tags+&apos;)&apos;" />
              <ExactMove directionType="FromVariable" directionSpecification="$AnimRot" animationTriggerDist="0.120000" precise="false" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$__object.id" destinationSpecification2="$entryID" destinationSpecification3="$animationTags" speed="Walk" additionalParams="" pathFindingParams="$pathParams_noTraverse" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="">
                <Animation>
                  <Sequence>
                    <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="&apos;3s&apos;" skipInLOD="false" />
                    <IfElseCondition failOnCondition="false" condition="$t_lockpickSuccess==true" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$tags=$tags+&apos;,Success&apos;," />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$tags=$tags+&apos;,Fail&apos;," />
                      </Else>
                    </IfElseCondition>
                    <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  </Sequence>
                </Animation>
              </ExactMove>
            </Sequence>
            <VariableExistsGate VarToTest="$t_lockpickSuccess" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <IfCondition failOnCondition="false" condition="$t_lockpickSuccess">
                  <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:Unlock()" />
                </IfCondition>
              </Then>
              <Else canSkip="1">
                <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10;door:Unlock()" />
              </Else>
            </VariableExistsGate>
          </Sequence>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="AnimPos" comment="" />
        <Variable name="AnimRot" comment="" />
        <Variable name="animation" comment="" />
        <Variable name="animationTags" comment="" />
        <Variable name="entryID" comment="" />
        <Variable name="pathParams_noTraverse" comment="" />
        <Variable name="right" comment="" />
        <Variable name="tags" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Then>
              <Else>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Else>
            </IfElseCondition>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetHelper>
                <GetAnimationHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetAnimationHelperData>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Animation>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                      <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                    </Sequence>
                  </Animation>
                </ExactMove>
              </Sequence>
              <VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </ExecuteLua>
                  </IfCondition>
                </Then>
                <Else>
                  <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ExecuteLua>
                </Else>
              </VariableExistsGate>
            </Sequence>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use" is_function="0">
    <Variables>
      <Variable name="addParams" type="additionalMoveParams" values="destChangedThreshold(&apos;200ms&apos;)" isPersistent="0" form="single" />
      <Variable name="entry" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="entryID" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="myPlace" type="door:wait" values="" isPersistent="0" form="single" />
      <Variable name="myPosFloat" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="pathParams_noTraverse" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="place" type="wuid" values="" isPersistent="0" form="single" />
      <Variable name="wait" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <IfElseCondition failOnCondition="true" condition="$queue.inside" saveVersion="2">
            <Then canSkip="1">
              <Sequence>
                <GetHelper smartObjectName="$__object.id" helperName="&apos;Front&apos;" categoryName="" targetVar="$entryID" policy="Name" />
                <GetHelperData smartObjectName="$__object.id" helperID="$entryID" positionTargetVar="$entry" orientationTargetVar="" transformTargetVar="" fragmentTargetVar="" tagsTargetVar="" />
              </Sequence>
            </Then>
            <Else canSkip="1">
              <Sequence>
                <GetHelper smartObjectName="$__object.id" helperName="&apos;Back&apos;" categoryName="" targetVar="$entryID" policy="Name" />
                <GetHelperData smartObjectName="$__object.id" helperID="$entryID" positionTargetVar="$entry" orientationTargetVar="" transformTargetVar="" fragmentTargetVar="" tagsTargetVar="" />
              </Sequence>
            </Else>
          </IfElseCondition>
          <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$myPlace" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
          <Sequence>
            <ExecuteLua code="data.wait = tostring(data.myPlace.place * 300)..&quot;ms&quot; &#10;data.myPosFloat = data.myPlace.place * 0.8 + 1.4" />
            <IfCondition failOnCondition="false" condition="$myPlace.place&gt;0">
              <Sequence>
                <Move stopWithinDistance="$myPosFloat" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$entry" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="$addParams" pathFindingParams="$pathParams_noTraverse" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                <Parallel successMode="Any" failureMode="Any">
                  <LoopUntil until="Fail" attemptCount="0">
                    <Sequence>
                      <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$myPlace" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
                      <IfCondition failOnCondition="true" condition="$myPlace.place~=0">
                        <ExecuteLua code="data.wait = tostring(data.myPlace.place * 300)..&quot;ms&quot; &#10;data.myPosFloat = data.myPlace.place * 0.8 + 1.8" />
                      </IfCondition>
                    </Sequence>
                  </LoopUntil>
                  <LoopUntil until="Fail" attemptCount="0">
                    <IfCondition failOnCondition="true" condition="$myPlace.place&gt;0">
                      <Sequence>
                        <Wait duration="$wait" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                        <Move stopWithinDistance="$myPosFloat" stopDistanceVariation="0.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$entry" destinationSpecification2="" destinationSpecification3="" speed="$__navInfo.speed" additionalParams="$addParams" pathFindingParams="$pathParams_noTraverse" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                      </Sequence>
                    </IfCondition>
                  </LoopUntil>
                </Parallel>
              </Sequence>
            </IfCondition>
          </Sequence>
          <Sequence>
            <IncludeTree File="&apos;world/so_door.xml&apos;" Name="&apos;CheckPlayer&apos;" nodeLabel="57460121" />
            <LuaWrapper onEnter="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door.inUse = 1" onExit="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;door.inUse = 0">
              <Switch>
                <IfCondition failOnCondition="false" condition="$doorMode==&apos;traverse&apos;">
                  <IncludeTree File="&apos;world/so_door.xml&apos;" Name="&apos;action_traverse&apos;" nodeLabel="43323620" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$doorMode==&apos;lockpickOut&apos;|$doorMode==&apos;lockpickIn&apos;">
                  <IncludeTree File="&apos;world/so_door.xml&apos;" Name="&apos;action_lockpick&apos;" nodeLabel="36970655" />
                </IfCondition>
                <IfCondition failOnCondition="false" condition="$doorMode==&apos;rattleOut&apos;|$doorMode==&apos;rattleIn&apos;">
                  <IncludeTree File="&apos;world/so_door.xml&apos;" Name="&apos;action_rattle&apos;" nodeLabel="87885619" />
                </IfCondition>
                <DefaultBranch>
                  <IncludeTree File="&apos;world/so_door.xml&apos;" Name="&apos;action_default&apos;" nodeLabel="20574883" />
                </DefaultBranch>
              </Switch>
            </LuaWrapper>
          </Sequence>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="addParams" comment="" />
        <Variable name="entry" comment="" />
        <Variable name="entryID" comment="" />
        <Variable name="myPlace" comment="" />
        <Variable name="myPosFloat" comment="" />
        <Variable name="pathParams_noTraverse" comment="" />
        <Variable name="place" comment="" />
        <Variable name="wait" comment="" />
        <Variable name="doorMode" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="doorMode" type="_string" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
        <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="1090" editorPosY="-340" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetHelper>
                  <GetHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetHelperData>
                </Sequence>
              </Then>
              <Else>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetHelper>
                  <GetHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetHelperData>
                </Sequence>
              </Else>
            </IfElseCondition>
            <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ReadMessage>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ExecuteLua>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Move hasInputBreakpoint="0" comment="Periodically change " breakpointFlags="0">
                    <OutputBreakpoints />
                  </Move>
                  <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </ReadMessage>
                        <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <ExecuteLua hasInputBreakpoint="0" comment="Duplicit code with node id 4" breakpointFlags="0">
                            <OutputBreakpoints />
                          </ExecuteLua>
                        </IfCondition>
                      </Sequence>
                    </LoopUntil>
                    <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Wait>
                          <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Move>
                        </Sequence>
                      </IfCondition>
                    </LoopUntil>
                  </Parallel>
                </Sequence>
              </IfCondition>
            </Sequence>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </IncludeTree>
              <LuaWrapper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </IncludeTree>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </IncludeTree>
                  </IfCondition>
                  <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </IncludeTree>
                  </IfCondition>
                  <DefaultBranch>
                    <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </IncludeTree>
                  </DefaultBranch>
                </Switch>
              </LuaWrapper>
            </Sequence>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="traverse" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;traverse&apos;" isPersistent="0" form="single" />
      <Variable name="fakeWuid" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="pathParams" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
      <Variable name="t_isFrontSide" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <DisableMoveTransitions>
          <Sequence>
            <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
            <Expression expressions="$queue.inside=$__startToEnd&#10;$queue.key=true&#10;$queue.type=$doorMode&#10;$queue.id=$this.id" />
            <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
              <Child canSkip="1">
                <Sequence>
                  <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                  <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                </Sequence>
              </Child>
              <OnFail canSkip="1">
                <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
              </OnFail>
            </FuseBox>
          </Sequence>
        </DisableMoveTransitions>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="fakeWuid" comment="" />
        <Variable name="home" comment="" />
        <Variable name="info" comment="" />
        <Variable name="pathParams" comment="" />
        <Variable name="queue" comment="" />
        <Variable name="t_isFrontSide" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="40" editorPosY="-260" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <DisableMoveTransitions hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ReadMessage>
              <Expression hasInputBreakpoint="0" comment="Every NPC can go through every door" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Child>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </InstantSendMessageToNPC>
                    <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CallBehavior>
                  </Sequence>
                </Child>
                <OnFail>
                  <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantSendMessageToNPC>
                </OnFail>
              </FuseBox>
            </Sequence>
          </DisableMoveTransitions>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="lockShopDoors">
    <Variables>
      <Variable name="door" type="wuid" values="" form="single" />
      <Variable name="doors" type="wuid" values="" form="array" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$t_lockShopDoors_params.shopArea" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <CategoryFilter categories="&apos;Door&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$doors" saveVersion="2" />
          </GraphSearch>
          <ForEach startIndex="0" step="1" array="$doors" iterator="" value="$door" break="">
            <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.door) &#10; &#10;if door:GetInteriorType() == enum_interiorType.shop then &#10;    door:SetLockedDueToPrivate(data.t_lockShopDoors_params.lock) &#10;end" />
          </ForEach>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="door" comment="" />
        <Variable name="doors" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_lockShopDoors_params" type="lockShopDoors:params" values="" form="single" />
      </ForwardDeclarations>
      <Root editorPosX="-90" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="130" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch editorPosX="260" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <CategoryFilter editorPosX="610" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </CategoryFilter>
              <Nodalyzer editorPosX="610" editorPosY="130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
            </GraphSearch>
            <ForEach editorPosX="260" editorPosY="260" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ExecuteLua editorPosX="430" editorPosY="260" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ExecuteLua>
            </ForEach>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="rattleDoor_out" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;rattleOut&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsOpen()" saveVersion="2">
          <Then canSkip="1">
            <Success />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=false,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="19310514" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="action_rattle" is_function="0">
    <Variables>
      <Variable name="animation" type="_string" values="&apos;Door_Locked&apos;" isPersistent="0" form="single" />
      <Variable name="animationId" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="entryID" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="luaAnim" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="pathParams_noTraverse" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="right" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="tags" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$entry" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
          <Sequence>
            <ExecuteLua code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;data.right   = door:IsRightDoor()" />
            <Sequence>
              <IfElseCondition failOnCondition="true" condition="$right" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$tags=&apos;doorTypeRight&apos;&#10;$luaAnim=&apos;door_01_relaxed_walk_locked_door_shake_right_&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$tags=&apos;doorTypeLeft&apos;&#10;$luaAnim=&apos;door_01_relaxed_walk_locked_door_shake_left_&apos;" />
                </Else>
              </IfElseCondition>
              <IfElseCondition failOnCondition="true" condition="$queue.inside" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$tags+=&apos;,doorDirFront&apos;&#10;$luaAnim+=&apos;front_&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$tags+=&apos;,doorDirBack&apos;&#10;$luaAnim+=&apos;back_&apos;" />
                </Else>
              </IfElseCondition>
              <HasGenderCheck Gender="Male" SoulWUID="" FailSubtMissing="false" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$luaAnim+=&apos;male&apos;" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$luaAnim+=&apos;female&apos;" />
                </Else>
              </HasGenderCheck>
            </Sequence>
            <GetHelper smartObjectName="$__object.id" helperName="&apos;AnimBone&apos;" categoryName="" targetVar="$entryID" policy="Name" />
            <Success />
            <ErrorNode Message="&apos;Raplaced dumpNode AnimationEventWait. Check file history if needed.&apos;" />
          </Sequence>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="animation" comment="" />
        <Variable name="animationId" comment="" />
        <Variable name="entryID" comment="" />
        <Variable name="luaAnim" comment="" />
        <Variable name="pathParams_noTraverse" comment="" />
        <Variable name="right" comment="" />
        <Variable name="tags" comment="" />
        <Variable name="b_soul" comment="" />
        <Variable name="entry" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="b_soul" type="" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
        <Variable name="entry" type="vec3" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
        <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="-120" editorPosY="-230" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Move>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ExecuteLua>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
                <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </HasGenderCheck>
              </Sequence>
              <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetHelper>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
              <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ErrorNode>
            </Sequence>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="rattleDoor_in" is_function="0">
    <Variables>
      <Variable name="doorMode" type="_string" values="&apos;rattleOut&apos;" isPersistent="0" form="single" />
      <Variable name="info" type="door:info" values="" isPersistent="0" form="single" />
      <Variable name="queue" type="door:queue" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LuaGate code="local door = XGenAIModule.GetEntityByWUID(data.__object.id) &#10; &#10;return door:IsOpen()" saveVersion="2">
          <Then canSkip="1">
            <Success />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$info" senderInfo="" inbox="&apos;door_communication&apos;" condition="" />
              <Sequence>
                <Expression expressions="$queue.inside=false,&#10;$queue.type=$doorMode&#10;$queue.id=$this.id" />
                <FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
                  <Child canSkip="1">
                    <Sequence>
                      <InstantSendMessageToNPC target="$__object.id" variable="$queue" />
                      <CallBehavior Target="$__object.id" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="19310514" />
                    </Sequence>
                  </Child>
                  <OnFail canSkip="1">
                    <InstantSendMessageToNPC target="$__object.id" type="&apos;door:queue&apos;" values="id($this.id),leaving(true)" />
                  </OnFail>
                </FuseBox>
              </Sequence>
            </Sequence>
          </Else>
        </LuaGate>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="doorMode" comment="" />
        <Variable name="info" comment="" />
        <Variable name="queue" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child>
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </InstantSendMessageToNPC>
                        <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </CallBehavior>
                      </Sequence>
                    </Child>
                    <OnFail>
                      <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </InstantSendMessageToNPC>
                    </OnFail>
                  </FuseBox>
                </Sequence>
              </Sequence>
            </Else>
          </LuaGate>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="onMLWakeUp" is_function="0">
    <Variables>
      <Variable name="linkedEntity" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <SuppressFailure>
          <Sequence>
            <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <LinkTagFilter tag="&apos;crime_door_reverse&apos;" prune="true" negprune="unknown" Parent="" Child="$linkedEntity" Data="" />
              <ExistPath Origin="$linkedEntity" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <LinkTagFilter tag="&apos;crime_door&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                <LinkDataFilter tag="&apos;crime_door&apos;" condition="$__link_crime_door.type == $enum:crime_doorKind.entrance | &#10;$__link_crime_door.type == $enum:crime_doorKind.storage" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                <WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
              </ExistPath>
              <ExistPath Origin="$linkedEntity" Borders="" depth="3" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;area_union_member,home_area_reverse,home_inhabitant&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <EntityClassFilter Class="NPC" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                <NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
                  <Child0 canSkip="1">
                    <SoulIsUnconsciousFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                  </Child0>
                </NegationOp>
                <SoulIsAliveFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
              </ExistPath>
            </GraphSearch>
            <CloseAndLockDoor Door="$this.id" />
          </Sequence>
        </SuppressFailure>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="linkedEntity" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </LinkTagFilter>
                <ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </LinkTagFilter>
                  <LinkDataFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </LinkDataFilter>
                  <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </WUIDFilter>
                </ExistPath>
                <ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <EntityClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </EntityClassFilter>
                  <NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child0>
                      <SoulIsUnconsciousFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </SoulIsUnconsciousFilter>
                    </Child0>
                  </NegationOp>
                  <SoulIsAliveFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SoulIsAliveFilter>
                </ExistPath>
              </GraphSearch>
              <CloseAndLockDoor hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </CloseAndLockDoor>
            </Sequence>
          </SuppressFailure>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>