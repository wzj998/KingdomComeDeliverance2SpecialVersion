<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables>
			<Variable name="badgeLevel" type="enum:badgeTier" values="" isPersistent="0" form="single" />
			<Variable name="bet" type="dice:bet" values="" isPersistent="0" form="single" />
			<Variable name="challengers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" />
			<Variable name="diceInit" type="dice:init" values="" isPersistent="0" form="single" />
			<Variable name="gamblers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="gameType" type="enum:diceGameTypes" values="" isPersistent="0" form="single" />
			<Variable name="initDialogResult" type="dice:initDialogResult" values="" isPersistent="0" form="single" />
			<Variable name="interactor" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="minigameDisabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="minigameDisabled_global" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="npcToGoAway" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="npcToPlayWith" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="opponents" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="result" type="dice:end" values="" isPersistent="0" form="single" />
			<Variable name="someoneAtTheTable" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="trackChallenger" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;interactor&apos;" prune="true" negprune="unknown" Parent="" Child="$interactor" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceInit" senderInfo="" inbox="&apos;dice_init&apos;" condition="" answerVar="">
							<IfCondition failOnCondition="false" condition="$diceInit.forceDialog">
								<Sequence>
									<ReinitVariable variable="$gamblers" />
									<GetBehaviorHolders area="$this.id" behaviors="&apos;use_challenger&apos;" targetVar="$gamblers" />
									<IfCondition failOnCondition="false" condition="#gamblers &gt; 0">
										<InstantSendMessageToNPC target="$gamblers[0]" variable="$diceInit" />
									</IfCondition>
								</Sequence>
							</IfCondition>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$initDialogResult" senderInfo="" inbox="&apos;dice_init&apos;" condition="" answerVar="">
							<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
								<Child canSkip="1">
									<IfCondition failOnCondition="false" condition="$initDialogResult.type == $enum:dice_initDialogResultType.startMinigame">
										<Sequence>
											<ReinitVariable variable="$npcToGoAway" />
											<ReinitVariable variable="$challengers" />
											<ReinitVariable variable="$opponents" />
											<ReinitVariable variable="$npcToPlayWith" />
											<ReinitVariable variable="$bet" />
											<AtomicDecorator>
												<Sequence>
													<Expression expressions="$npcToPlayWith = $initDialogResult.opponent" />
													<GetBehaviorHolders area="$this.id" behaviors="&apos;use_challenger&apos;" targetVar="$challengers" />
													<IfCondition failOnCondition="false" condition="#challengers &gt; 0">
														<IfCondition failOnCondition="false" condition="$challengers[0] ~= $initDialogResult.opponent">
															<AddInterrupt Target="$challengers[0]" Host="$this.id" Behavior="&apos;interrupt_instantlyLeaveDiceTable&apos;" Priority="201" IgnorePriorityOnPreviousInterrupt="false" urgency="Instant" Aliveness="Alive" Privileged="false" FastForward="false" />
														</IfCondition>
													</IfCondition>
													<GetBehaviorHolders area="$this.id" behaviors="&apos;use_opponent&apos;" targetVar="$opponents" />
													<IfCondition failOnCondition="false" condition="#opponents &gt; 0">
														<IfCondition failOnCondition="false" condition="$opponents[0] ~= $initDialogResult.opponent">
															<AddInterrupt Target="$opponents[0]" Host="$this.id" Behavior="&apos;interrupt_instantlyLeaveDiceTable&apos;" Priority="201" IgnorePriorityOnPreviousInterrupt="false" urgency="Instant" Aliveness="Alive" Privileged="false" FastForward="false" />
														</IfCondition>
													</IfCondition>
												</Sequence>
											</AtomicDecorator>
											<AddInterrupt Target="$__player" Host="$this.id" Behavior="&apos;interrupt_playerSit&apos;" Priority="201" IgnorePriorityOnPreviousInterrupt="false" urgency="Instant" Aliveness="Alive" Privileged="false" FastForward="false" />
											<Synchronize SemaphoreCount="3" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;25s&apos;" LockManagerType="Global" SemaphoreName="&apos;dice_readyToInitMinigame&apos;" RunLogic="KeepRunning">
												<Sequence>
													<Function_dice_getGameLevelData gameLevel="$initDialogResult.gameLevel" badgeLevel="$badgeLevel" betSize="$bet.moneyAmount" betType="$bet.type" gameType="$gameType" nodeLabel="56972619" />
													<Function_dice_cleanTable nodeLabel="59009524" />
													<IfCondition failOnCondition="false" condition="$npcToPlayWith ~= $__null">
														<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;25s&apos;" LockManagerType="Global" SemaphoreName="&apos;dice_minigameReady&apos;" RunLogic="KeepRunning">
															<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
																<Child canSkip="1">
																	<Sequence>
																		<AddLink From="$this.id" To="$npcToPlayWith" Tag="&apos;dice_playersOpponent&apos;" Data="" LinkOpHandleMode="Error" />
																		<AddLink From="$this.id" To="$this.id" Tag="&apos;dice_disabledTableForNpcs&apos;" Data="" LinkOpHandleMode="Error" />
																		<Expression expressions="$trackChallenger = false" />
																		<IfElseCondition failOnCondition="false" condition="$initDialogResult.isQuest &amp; $initDialogResult.forceBadgeSubtype &gt;= 0" saveVersion="2">
																			<Then canSkip="1">
																				<LuaGate code="return (Minigame.StartDice( entity.id, player.id, XGenAIModule.GetEntityByWUID(data.npcToPlayWith).id, { BadgeType = data.badgeLevel, GameType = data.gameType, BadgeSubtype = data.initDialogResult.forceBadgeSubtype }))" saveVersion="2">
																					<Then canSkip="1">
																						<Sequence>
																							<SendAIConceptSignal_dice_minigameInitResult success="true" />
																							<SuppressFailure>
																								<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="false" RunLogic="Halt">
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</ActorStateBarrier>
																							</SuppressFailure>
																						</Sequence>
																					</Then>
																					<Else canSkip="1">
																						<ErrorNode Message="&apos;DICE MINIGAME FAILED FOR UNKNOWN REASONS. SEND HELP!&apos;" />
																					</Else>
																				</LuaGate>
																			</Then>
																			<Else canSkip="1">
																				<LuaGate code="return (Minigame.StartDice( entity.id, player.id, XGenAIModule.GetEntityByWUID(data.npcToPlayWith).id, { BadgeType = data.badgeLevel, GameType = data.gameType }))" saveVersion="2">
																					<Then canSkip="1">
																						<Sequence>
																							<SendAIConceptSignal_dice_minigameInitResult success="true" />
																							<SuppressFailure>
																								<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="false" RunLogic="Halt">
																									<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																								</ActorStateBarrier>
																							</SuppressFailure>
																						</Sequence>
																					</Then>
																					<Else canSkip="1">
																						<ErrorNode Message="&apos;DICE MINIGAME FAILED FOR UNKNOWN REASONS. SEND HELP!&apos;" />
																					</Else>
																				</LuaGate>
																			</Else>
																		</IfElseCondition>
																	</Sequence>
																</Child>
																<OnFail canSkip="1">
																	<Sequence>
																		<SuppressFailure>
																			<InstantSynchronize SemaphoreCount="2" LockManagerType="Global" SemaphoreName="&apos;dice_minigameFinished&apos;" RunLogic="KeepRunning">
																				<Success />
																			</InstantSynchronize>
																		</SuppressFailure>
																		<RemoveLink From="$this.id" To="$npcToPlayWith" Tag="&apos;dice_playersOpponent&apos;" LinkOpHandleMode="Success" />
																		<RemoveLink From="$this.id" To="$this.id" Tag="&apos;dice_disabledTableForNpcs&apos;" LinkOpHandleMode="Success" />
																	</Sequence>
																</OnFail>
															</FuseBox>
														</Synchronize>
													</IfCondition>
												</Sequence>
											</Synchronize>
										</Sequence>
									</IfCondition>
								</Child>
								<OnSuccess canSkip="1">
									<Success />
								</OnSuccess>
								<OnFail canSkip="1">
									<SendAIConceptSignal_dice_minigameInitResult success="false" />
								</OnFail>
							</FuseBox>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<GameContextBarrier context="dice_global_disabledMinigame" Negation="false" RunLogic="KeepRunning">
									<Sequence>
										<Expression expressions="$minigameDisabled_global = true" />
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</GameContextBarrier>
							</Child>
							<OnFail canSkip="1">
								<Expression expressions="$minigameDisabled_global = false" />
							</OnFail>
						</FuseBox>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<LinkGate from="$this.id" to="" tag="&apos;dice_disabledMinigame&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
									<Sequence>
										<Expression expressions="$minigameDisabled = true" />
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</LinkGate>
							</Child>
							<OnFail canSkip="1">
								<Expression expressions="$minigameDisabled = false" />
							</OnFail>
						</FuseBox>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<LinkGate from="$this.id" to="" tag="&apos;dice_enabledMinigame&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
									<Sequence>
										<Expression expressions="$someoneAtTheTable = true" />
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</LinkGate>
							</Child>
							<OnFail canSkip="1">
								<Expression expressions="$someoneAtTheTable = false" />
							</OnFail>
						</FuseBox>
					</While>
					<ContinuousSwitch>
						<IfCondition failOnCondition="false" condition="$someoneAtTheTable &amp;  &#10;~$minigameDisabled_global &amp;  &#10;~$minigameDisabled">
							<Sequence>
								<ExecuteLua code="local interactor = XGenAIModule.GetEntityByWUID(data.interactor) &#10;interactor:SetDiceAvailable(true)" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="true">
							<Sequence>
								<ExecuteLua code="local interactor = XGenAIModule.GetEntityByWUID(data.interactor) &#10;interactor:SetDiceAvailable(false)" />
								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
							</Sequence>
						</IfCondition>
					</ContinuousSwitch>
					<While doFail="false" propagateChildFail="false" condition="true">
						<Sequence>
							<SmartObjSetBehaviorState behaviors="&apos;use_challenger&apos;" state="Enabled" />
							<LinkGate from="$this.id" to="$this.id" tag="&apos;dice_disabledTableForNpcs&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
								<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
									<Child canSkip="1">
										<Sequence>
											<SmartObjSetBehaviorState behaviors="&apos;use_challenger&apos;" state="Disabled" />
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</Sequence>
									</Child>
									<OnFail canSkip="1">
										<SmartObjSetBehaviorState behaviors="&apos;use_challenger&apos;" state="Enabled" />
									</OnFail>
								</FuseBox>
							</LinkGate>
						</Sequence>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceEvent" senderInfo="" inbox="&apos;diceEvent&apos;" condition="" answerVar="">
							<Sequence>
								<SuppressFailure>
									<Selector>
										<Switch>
											<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.end">
												<Function_dice_processEndResult bet="$bet" diceEvent="$diceEvent" isQuest="$initDialogResult.isQuest" opponent="$npcToPlayWith" nodeLabel="66078501" />
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.cancelled">
												<Function_dice_processCancelledResult bet="$bet" diceEvent="$diceEvent" opponent="$npcToPlayWith" nodeLabel="29988110" />
											</IfCondition>
											<DefaultBranch>
												<Success />
											</DefaultBranch>
										</Switch>
										<ErrorNode Message="&apos;Open world dice result evaluation failed. Contact a scripter, who most often updates so_dice_table&apos;" />
									</Selector>
								</SuppressFailure>
								<Function_dice_diceEvent_notifySubscribers event="$diceEvent" nodeLabel="85947401" />
							</Sequence>
						</ProcessMessage>
					</While>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="badgeLevel" comment="" />
				<Variable name="bet" comment="" />
				<Variable name="challengers" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="diceInit" comment="" />
				<Variable name="gamblers" comment="" />
				<Variable name="gameType" comment="" />
				<Variable name="initDialogResult" comment="" />
				<Variable name="interactor" comment="" />
				<Variable name="minigameDisabled" comment="" />
				<Variable name="minigameDisabled_global" comment="" />
				<Variable name="npcToGoAway" comment="" />
				<Variable name="npcToPlayWith" comment="" />
				<Variable name="opponents" comment="" />
				<Variable name="result" comment="" />
				<Variable name="someoneAtTheTable" comment="" />
				<Variable name="trackChallenger" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-1390" editorPosY="3370" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ReinitVariable>
										<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetBehaviorHolders>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantSendMessageToNPC>
										</IfCondition>
									</Sequence>
								</IfCondition>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<AtomicDecorator hasInputBreakpoint="0" comment="We need to check and lock atomically" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetBehaviorHolders>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AddInterrupt hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddInterrupt>
															</IfCondition>
														</IfCondition>
														<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetBehaviorHolders>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AddInterrupt hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddInterrupt>
															</IfCondition>
														</IfCondition>
													</Sequence>
												</AtomicDecorator>
												<AddInterrupt hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AddInterrupt>
												<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Function_dice_getGameLevelData hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_dice_getGameLevelData>
														<Function_dice_cleanTable hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_dice_cleanTable>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Child>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AddLink>
																			<AddLink hasInputBreakpoint="0" comment="noone else can play during minigame" breakpointFlags="0">
																				<OutputBreakpoints />
																			</AddLink>
																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																			<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																				<OutputBreakpoints />
																				<Then>
																					<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<SendAIConceptSignal_dice_minigameInitResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</SendAIConceptSignal_dice_minigameInitResult>
																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</ActorStateBarrier>
																								</SuppressFailure>
																							</Sequence>
																						</Then>
																						<Else>
																							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</ErrorNode>
																						</Else>
																					</LuaGate>
																				</Then>
																				<Else>
																					<LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																						<OutputBreakpoints />
																						<Then>
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<SendAIConceptSignal_dice_minigameInitResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</SendAIConceptSignal_dice_minigameInitResult>
																								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Wait>
																									</ActorStateBarrier>
																								</SuppressFailure>
																							</Sequence>
																						</Then>
																						<Else>
																							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</ErrorNode>
																						</Else>
																					</LuaGate>
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																	</Child>
																	<OnFail>
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</InstantSynchronize>
																			</SuppressFailure>
																			<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</RemoveLink>
																			<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</RemoveLink>
																		</Sequence>
																	</OnFail>
																</FuseBox>
															</Synchronize>
														</IfCondition>
													</Sequence>
												</Synchronize>
											</Sequence>
										</IfCondition>
									</Child>
									<OnSuccess>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</OnSuccess>
									<OnFail>
										<SendAIConceptSignal_dice_minigameInitResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SendAIConceptSignal_dice_minigameInitResult>
									</OnFail>
								</FuseBox>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="listen for global minigame availability" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</GameContextBarrier>
								</Child>
								<OnFail>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnFail>
							</FuseBox>
						</While>
						<While hasInputBreakpoint="0" comment="listen for personal minigame availability" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</LinkGate>
								</Child>
								<OnFail>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnFail>
							</FuseBox>
						</While>
						<While hasInputBreakpoint="0" comment="someone at the table" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</LinkGate>
								</Child>
								<OnFail>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnFail>
							</FuseBox>
						</While>
						<ContinuousSwitch hasInputBreakpoint="0" comment="enable/disable interactor" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExecuteLua>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ExecuteLua>
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
								</Sequence>
							</IfCondition>
						</ContinuousSwitch>
						<While hasInputBreakpoint="0" comment="someone at the table" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SmartObjSetBehaviorState>
								<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Child>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</SmartObjSetBehaviorState>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</Child>
										<OnFail>
											<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SmartObjSetBehaviorState>
										</OnFail>
									</FuseBox>
								</LinkGate>
							</Sequence>
						</While>
						<While hasInputBreakpoint="0" comment="receive events" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<SuppressFailure hasInputBreakpoint="0" comment="The messages further in the sequence have to be sent at all costs" breakpointFlags="0">
										<OutputBreakpoints />
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_dice_processEndResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_dice_processEndResult>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_dice_processCancelledResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_dice_processCancelledResult>
												</IfCondition>
												<DefaultBranch>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</DefaultBranch>
											</Switch>
											<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ErrorNode>
										</Selector>
									</SuppressFailure>
									<Function_dice_diceEvent_notifySubscribers hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_dice_diceEvent_notifySubscribers>
								</Sequence>
							</ProcessMessage>
						</While>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="use_challenger" is_function="0">
		<Variables>
			<Variable name="amountToCheck" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="badgeTier" type="enum:badgeTier" values="" isPersistent="0" form="single" />
			<Variable name="badgeTierInt" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="cupSlot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="diceInit" type="dice:init" values="" isPersistent="0" form="single" />
			<Variable name="diceInitDialogResult" type="dice:initDialogResult" values="" isPersistent="0" form="single" />
			<Variable name="diceOnTable" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="dlgCtx" type="_float" values="" isPersistent="0" form="associative" />
			<Variable name="gamblerState" type="enum:dice_gamblerState" values="" isPersistent="0" form="single" />
			<Variable name="gameFailed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasEnoughMoney" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hiddenCupSlot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="hiddenDiceOnTable" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="inviteBarkInProgress" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isFemale" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="loop" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="loops" type="_int" values="4" isPersistent="0" form="single" />
			<Variable name="minigameAvailabilityEvaluated" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="minigameEnabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="opponents" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="playWithoutMoney" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useFirstRollAnimation" type="_bool" values="true" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;cupSlot2&apos;" prune="true" negprune="unknown" Parent="" Child="$cupSlot" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;hiddenSlot2&apos;" prune="true" negprune="unknown" Parent="" Child="$hiddenCupSlot" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;hiddenDiceOnTable2&apos;" prune="true" negprune="unknown" Parent="" Child="$hiddenDiceOnTable" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;diceOnTable2&apos;" prune="true" negprune="unknown" Parent="" Child="$diceOnTable" Data="" />
					</GraphSearch>
					<SuppressFailure>
						<Sequence>
							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;dice_playWithoutMoney&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							</GraphSearch>
							<Expression expressions="$playWithoutMoney = true" />
						</Sequence>
					</SuppressFailure>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Decision decisionLabel="dice_gamblerState" variable="$gamblerState" saveVersion="2">
					<Search canSkip="1">
						<Success />
					</Search>
					<Exec canSkip="1">
						<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
							<Child canSkip="1">
								<Sequence>
									<NumericalOperation In1VariableName="data:script_param[&apos;dice_gameLevelBetSize_beggar&apos;].value" In2VariableName="" In3VariableName="" OutVariableName="$amountToCheck" Operation="float2int" />
									<Expression expressions="$amountToCheck *= 10" />
									<Function_dice_checkMoney amountToCheck="$amountToCheck" npcHasEnough="$hasEnoughMoney" nodeLabel="44389344" />
									<IfCondition failOnCondition="false" condition="~$hasEnoughMoney &amp; &#10;($gamblerState == $enum:dice_gamblerState.arriving | &#10; $playWithoutMoney)">
										<Sequence>
											<CreateItem ItemGUID="&apos;5ef63059-322e-4e1b-abe8-926e100c770e&apos;" Amount="$amountToCheck" CreatedItem="" Target="$this.id" NotifyUI="false" />
											<Expression expressions="$hasEnoughMoney = true" />
										</Sequence>
									</IfCondition>
									<Switch>
										<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.arriving">
											<Expression expressions="$useFirstRollAnimation = true" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.playingAgainstNpc">
											<Expression expressions="$gamblerState = $enum:dice_gamblerState.waitingForOpponent" />
										</IfCondition>
										<DefaultBranch>
											<Success />
										</DefaultBranch>
									</Switch>
									<IfElseCondition failOnCondition="false" condition="$hasEnoughMoney &amp; $gamblerState ~= $enum:dice_gamblerState.leaving" saveVersion="2">
										<Then canSkip="1">
											<ActorStateCheck Who="$__player" State="minigame" FailWithSubtreeMissing="false" saveVersion="2">
												<Then canSkip="1">
													<Sequence>
														<WaitAction />
														<Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="false" variation="" />
													</Sequence>
												</Then>
												<Else canSkip="1">
													<EntityContextElement context="DisableSituationParticipation" enabled="true">
														<EntityContextPresetElement contextPreset="crime_dontCommentOnPlayer" enabled="true">
															<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
																<AddLinkElement from="$this.id" to="$hiddenCupSlot" tag="&apos;hiddenSlot&apos;" data="" enabled="true">
																	<AddLinkElement from="$this.id" to="$cupSlot" tag="&apos;cupSlot&apos;" data="" enabled="true">
																		<AddLinkElement from="$this.id" to="$hiddenDiceOnTable" tag="&apos;hiddenDiceOnTable&apos;" data="" enabled="true">
																			<AddLinkElement from="$this.id" to="$diceOnTable" tag="&apos;diceOnTable&apos;" data="" enabled="true">
																				<AddLinkElement from="$this.id" to="$__object.id" tag="&apos;dice_table&apos;" data="" enabled="true">
																					<EntityContextPreset preset="crime_dontCommentOnPlayer" target="">
																						<Sequence>
																							<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.arriving">
																								<Sequence>
																									<WaitAction />
																									<Expression expressions="$gamblerState = $enum:dice_gamblerState.waitingForOpponent" />
																								</Sequence>
																							</IfCondition>
																							<IfGate atomic="false" condition="$gamblerState == $enum:dice_gamblerState.playingAgainstNpc | &#10;$gamblerState == $enum:dice_gamblerState.waitingForOpponent" RunLogic="Halt">
																								<EntityContextElement context="dice_readyToPlayMinigame" enabled="true">
																									<EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
																										<ChangeBehaviorStateElement smartEntity="$__object.id" behavior="&apos;use_opponent&apos;" state="Enabled" allowAnyState="false" enabled="true">
																											<AnyDecorator preset="dice_playAgainstNpc" enabled="true">
																												<Parallel successMode="Any" failureMode="Any">
																													<While doFail="false" propagateChildFail="false" condition="true">
																														<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceInitDialogResult" senderInfo="" inbox="&apos;dice_init_behavior&apos;" condition="" answerVar="">
																															<IfCondition failOnCondition="false" condition="$diceInitDialogResult.type == $enum:dice_initDialogResultType.npcOutOfMoney">
																																<Sequence>
																																	<Function_crime_checkPockets initiator="$enum:switch_interruptInitiator.unknown" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="34213330" />
																																	<Expression expressions="$gamblerState = $enum:dice_gamblerState.leaving" />
																																</Sequence>
																															</IfCondition>
																														</ProcessMessage>
																													</While>
																													<While doFail="false" propagateChildFail="false" condition="true">
																														<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceInit" senderInfo="" inbox="&apos;dice_init_behavior&apos;" condition="" answerVar="">
																															<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.playDialogAnimationsIfFaderDialog" context="" customParameters="" metarole="&apos;KOSTKAR_UNISEX&apos;" preset="$enum:dialogPreset.fader" recipient="$__player" recipientMetaroles="" nodeLabel="14795975" />
																														</ProcessMessage>
																													</While>
																													<Sequence>
																														<IfGate atomic="false" condition="$minigameAvailabilityEvaluated" RunLogic="KeepRunning">
																															<WaitAction />
																														</IfGate>
																														<Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" />
																														<FuseBox StatusPropagation="CleanUp" OneCleanup="true" saveVersion="2">
																															<Child canSkip="1">
																																<Parallel successMode="Any" failureMode="Any">
																																	<Sequence>
																																		<While doFail="false" propagateChildFail="false" condition="$gamblerState == $enum:dice_gamblerState.waitingForOpponent">
																																			<HasSeenPlayer NPC="$this.id" FullyAwareOnly="true" saveVersion="2">
																																				<Then canSkip="1">
																																					<Sequence>
																																						<RandomGate opensWithChance="0.400000" saveVersion="2">
																																							<Then canSkip="1">
																																								<ForceLook LookTarget="$__player" DisableVariations="true">
																																									<SubtreeDecorator saveVersion="2">
																																										<Init canSkip="1">
																																											<Expression expressions="$inviteBarkInProgress = true" />
																																										</Init>
																																										<Subtree canSkip="1">
																																											<Parallel successMode="All" failureMode="Any">
																																												<AnimationAction fragment="&apos;DiceGameInvite&apos;" tags="" eventReferenceObject="$__object.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																												<Sequence>
																																													<Expression expressions="$dlgCtx[&apos;outsideMinigame&apos;] = 1" />
																																													<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="$dlgCtx" lookAtId="$__null" metarole="&apos;KOSTKY_HENRY_OPATRNE&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="77492448" />
																																												</Sequence>
																																											</Parallel>
																																										</Subtree>
																																										<Cleanup canSkip="1">
																																											<Expression expressions="$inviteBarkInProgress = false" />
																																										</Cleanup>
																																									</SubtreeDecorator>
																																								</ForceLook>
																																							</Then>
																																							<Else canSkip="1">
																																								<Success />
																																							</Else>
																																						</RandomGate>
																																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																					</Sequence>
																																				</Then>
																																				<Else canSkip="1">
																																					<Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" />
																																				</Else>
																																			</HasSeenPlayer>
																																		</While>
																																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																	</Sequence>
																																	<Sequence>
																																		<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;20s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_playingDice&apos;" RunLogic="Halt">
																																			<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
																																				<Child canSkip="1">
																																					<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
																																						<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.waitingForOpponent">
																																							<Sequence>
																																								<Expression expressions="$gamblerState = $enum:dice_gamblerState.playingAgainstNpc" />
																																								<GetBehaviorHolders area="$__object.id" behaviors="&apos;use_opponent&apos;" targetVar="$opponents" />
																																								<IfGate atomic="false" condition="~$inviteBarkInProgress" RunLogic="KeepRunning">
																																									<ForceLook LookTarget="$opponents[0]" DisableVariations="false">
																																										<EntityContext context="dice_playingNpcVsNpc" target="">
																																											<Sequence>
																																												<Parallel successMode="All" failureMode="Any">
																																													<HasGenderCheck Gender="Female" SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
																																														<Then canSkip="1">
																																															<Sequence>
																																																<WaitAction />
																																																<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
																																															</Sequence>
																																														</Then>
																																														<Else canSkip="1">
																																															<AnimationAction fragment="&apos;DiceGameInvite&apos;" tags="" eventReferenceObject="$__object.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																																														</Else>
																																													</HasGenderCheck>
																																													<SuppressFailure>
																																														<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;KOSTKY_START&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="37531823" />
																																													</SuppressFailure>
																																												</Parallel>
																																												<While doFail="false" propagateChildFail="false" condition="$loop &lt;= $loops">
																																													<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InNormalDialog" RunLogic="Halt">
																																														<DialogGate Who="$opponents[0]" Negation="true" EndDialogInRoot="false" Condition="InNormalDialog" RunLogic="Halt">
																																															<Sequence>
																																																<Expression expressions="$loop += 1" />
																																																<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_challengerTurn&apos;" RunLogic="KeepRunning">
																																																	<SuppressFailure>
																																																		<Switch>
																																																			<IfCondition failOnCondition="false" condition="$loop == 1 &amp; $useFirstRollAnimation">
																																																				<Function_rollFirst opponent="$opponents[0]" table="$__object.id" nodeLabel="69937550" />
																																																			</IfCondition>
																																																			<IfCondition failOnCondition="false" condition="$loop &gt; $loops">
																																																				<Function_rollFinish opponent="$opponents[0]" table="$__object.id" nodeLabel="94733766" />
																																																			</IfCondition>
																																																			<DefaultBranch>
																																																				<Function_rollTurn opponent="$opponents[0]" table="$__object.id" nodeLabel="12123303" />
																																																			</DefaultBranch>
																																																		</Switch>
																																																	</SuppressFailure>
																																																</Synchronize>
																																																<IfCondition failOnCondition="false" condition="$loop &lt;= $loops">
																																																	<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_opponentTurn&apos;" RunLogic="KeepRunning">
																																																		<Function_dice_opponentReaction nodeLabel="16845432" />
																																																	</Synchronize>
																																																</IfCondition>
																																															</Sequence>
																																														</DialogGate>
																																													</DialogGate>
																																												</While>
																																												<IfCondition failOnCondition="false" condition="~$playWithoutMoney">
																																													<Function_crime_checkPockets initiator="$enum:switch_interruptInitiator.unknown" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="38020443" />
																																												</IfCondition>
																																											</Sequence>
																																										</EntityContext>
																																									</ForceLook>
																																								</IfGate>
																																							</Sequence>
																																						</IfCondition>
																																					</DialogGate>
																																				</Child>
																																				<OnSuccess canSkip="1">
																																					<Success />
																																				</OnSuccess>
																																				<OnFail canSkip="1">
																																					<Expression expressions="$gameFailed = true" />
																																				</OnFail>
																																			</FuseBox>
																																		</Synchronize>
																																		<IfCondition failOnCondition="false" condition="~$gameFailed">
																																			<IfCondition failOnCondition="false" condition="$inviteBarkInProgress">
																																				<IfGate atomic="false" condition="~$inviteBarkInProgress" RunLogic="KeepRunning">
																																					<Success />
																																				</IfGate>
																																			</IfCondition>
																																		</IfCondition>
																																	</Sequence>
																																</Parallel>
																															</Child>
																															<OnFail canSkip="1">
																																<IfElseCondition failOnCondition="false" condition="$gameFailed" saveVersion="2">
																																	<Then canSkip="1">
																																		<Fail />
																																	</Then>
																																	<Else canSkip="1">
																																		<Success />
																																	</Else>
																																</IfElseCondition>
																															</OnFail>
																														</FuseBox>
																													</Sequence>
																													<Sequence>
																														<EntityContextCheck context="dice_uninterruptableNpcVsNpc" target="" saveVersion="2">
																															<Then canSkip="1">
																																<Expression expressions="$minigameEnabled = false" />
																															</Then>
																															<Else canSkip="1">
																																<Selector>
																																	<Sequence>
																																		<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																																			<LinkTagFilter tag="&apos;dice_disabledMinigame&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																																		</GraphSearch>
																																		<Expression expressions="$minigameEnabled = false" />
																																	</Sequence>
																																	<Expression expressions="$minigameEnabled = true" />
																																</Selector>
																															</Else>
																														</EntityContextCheck>
																														<Expression expressions="$minigameAvailabilityEvaluated = true" />
																														<ContinuousSwitch>
																															<IfCondition failOnCondition="false" condition="$minigameEnabled">
																																<EntityContextElement context="dice_readyToPlayMinigame" enabled="true">
																																	<SubtreeDecorator saveVersion="2">
																																		<Init canSkip="1">
																																			<AddLink From="$__object.id" To="$this.id" Tag="&apos;dice_enabledMinigame&apos;" Data="" LinkOpHandleMode="Error" />
																																		</Init>
																																		<Subtree canSkip="1">
																																			<Parallel successMode="Any" failureMode="Any">
																																				<While doFail="false" propagateChildFail="false" condition="true">
																																					<EntityContextBarrier context="dice_uninterruptableNpcVsNpc" target="" Negation="false" RunLogic="KeepRunning">
																																						<Expression expressions="$minigameEnabled = false" />
																																					</EntityContextBarrier>
																																				</While>
																																				<While doFail="false" propagateChildFail="false" condition="true">
																																					<LinkGate from="$__object.id" to="" tag="&apos;dice_disabledMinigame&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
																																						<Expression expressions="$minigameEnabled = false" />
																																					</LinkGate>
																																				</While>
																																			</Parallel>
																																		</Subtree>
																																		<Cleanup canSkip="1">
																																			<RemoveLink From="$__object.id" To="$this.id" Tag="&apos;dice_enabledMinigame&apos;" LinkOpHandleMode="Error" />
																																		</Cleanup>
																																	</SubtreeDecorator>
																																</EntityContextElement>
																															</IfCondition>
																															<IfCondition failOnCondition="false" condition="true">
																																<EntityContext context="dice_disabledMinigame" target="">
																																	<EntityContextElement context="dice_disabledMinigame" enabled="true">
																																		<SubtreeDecorator saveVersion="2">
																																			<Init canSkip="1">
																																				<AddLink From="$__object.id" To="$this.id" Tag="&apos;dice_disabledMinigame&apos;" Data="" LinkOpHandleMode="Error" />
																																			</Init>
																																			<Subtree canSkip="1">
																																				<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																			</Subtree>
																																			<Cleanup canSkip="1">
																																				<RemoveLink From="$__object.id" To="$this.id" Tag="&apos;dice_disabledMinigame&apos;" LinkOpHandleMode="Error" />
																																			</Cleanup>
																																		</SubtreeDecorator>
																																	</EntityContextElement>
																																</EntityContext>
																															</IfCondition>
																														</ContinuousSwitch>
																													</Sequence>
																												</Parallel>
																											</AnyDecorator>
																										</ChangeBehaviorStateElement>
																									</EntityContextElement>
																								</EntityContextElement>
																							</IfGate>
																							<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.waitingForMinigame">
																								<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																							</IfCondition>
																						</Sequence>
																					</EntityContextPreset>
																				</AddLinkElement>
																			</AddLinkElement>
																		</AddLinkElement>
																	</AddLinkElement>
																</AddLinkElement>
															</StanceElement>
														</EntityContextPresetElement>
													</EntityContextElement>
												</Else>
											</ActorStateCheck>
										</Then>
										<Else canSkip="1">
											<Fail />
										</Else>
									</IfElseCondition>
								</Sequence>
							</Child>
							<OnSuccess canSkip="1">
								<Success />
							</OnSuccess>
							<OnFail canSkip="1">
								<Expression expressions="$gamblerState = $enum:dice_gamblerState.arriving" />
							</OnFail>
						</FuseBox>
					</Exec>
				</Decision>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="amountToCheck" comment="" />
				<Variable name="badgeTier" comment="" />
				<Variable name="badgeTierInt" comment="" />
				<Variable name="cupSlot" comment="" />
				<Variable name="diceInit" comment="" />
				<Variable name="diceInitDialogResult" comment="" />
				<Variable name="diceOnTable" comment="" />
				<Variable name="dlgCtx" comment="" />
				<Variable name="gamblerState" comment="" />
				<Variable name="gameFailed" comment="" />
				<Variable name="hasEnoughMoney" comment="" />
				<Variable name="hiddenCupSlot" comment="" />
				<Variable name="hiddenDiceOnTable" comment="" />
				<Variable name="inviteBarkInProgress" comment="" />
				<Variable name="isFemale" comment="" />
				<Variable name="loop" comment="" />
				<Variable name="loops" comment="" />
				<Variable name="minigameAvailabilityEvaluated" comment="" />
				<Variable name="minigameEnabled" comment="" />
				<Variable name="opponents" comment="" />
				<Variable name="playWithoutMoney" comment="" />
				<Variable name="useFirstRollAnimation" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</SuppressFailure>
					</Sequence>
				</OnInit>
				<Behavior>
					<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Search>
						<Exec>
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</NumericalOperation>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<Function_dice_checkMoney hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_dice_checkMoney>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CreateItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</CreateItem>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</IfCondition>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<DefaultBranch>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DefaultBranch>
										</Switch>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<ActorStateCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</WaitAction>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
													</Then>
													<Else>
														<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<EntityContextPresetElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<EntityContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</WaitAction>
																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																										</Expression>
																									</Sequence>
																								</IfCondition>
																								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Function_crime_checkPockets hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Function_crime_checkPockets>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Sequence>
																																</IfCondition>
																															</ProcessMessage>
																														</While>
																														<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_speech_dialogInitiator>
																															</ProcessMessage>
																														</While>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</WaitAction>
																															</IfGate>
																															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Wait>
																															<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Child>
																																	<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<HasSeenPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Then>
																																						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																								<OutputBreakpoints />
																																								<Then>
																																									<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																											<OutputBreakpoints />
																																											<Init>
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</Init>
																																											<Subtree>
																																												<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																													</AnimationAction>
																																													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Expression>
																																														<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Function_speech_schedulerMonolog>
																																													</Sequence>
																																												</Parallel>
																																											</Subtree>
																																											<Cleanup>
																																												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																												</Expression>
																																											</Cleanup>
																																										</SubtreeDecorator>
																																									</ForceLook>
																																								</Then>
																																								<Else>
																																									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Success>
																																								</Else>
																																							</RandomGate>
																																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Wait>
																																						</Sequence>
																																					</Then>
																																					<Else>
																																						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Wait>
																																					</Else>
																																				</HasSeenPlayer>
																																			</While>
																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Wait>
																																		</Sequence>
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																					<OutputBreakpoints />
																																					<Child>
																																						<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<IfCondition hasInputBreakpoint="0" comment="KCD2-211483" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</Expression>
																																									<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																									</GetBehaviorHolders>
																																									<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																															<OutputBreakpoints />
																																															<Then>
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</WaitAction>
																																																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Wait>
																																																</Sequence>
																																															</Then>
																																															<Else>
																																																<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																</AnimationAction>
																																															</Else>
																																														</HasGenderCheck>
																																														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																															</Function_speech_schedulerMonolog>
																																														</SuppressFailure>
																																													</Parallel>
																																													<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																															<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																<OutputBreakpoints />
																																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																	<OutputBreakpoints />
																																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																	</Expression>
																																																	<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Function_rollFirst hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Function_rollFirst>
																																																				</IfCondition>
																																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																					<OutputBreakpoints />
																																																					<Function_rollFinish hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Function_rollFinish>
																																																				</IfCondition>
																																																				<DefaultBranch>
																																																					<Function_rollTurn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																						<OutputBreakpoints />
																																																					</Function_rollTurn>
																																																				</DefaultBranch>
																																																			</Switch>
																																																		</SuppressFailure>
																																																	</Synchronize>
																																																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																		<OutputBreakpoints />
																																																		<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																			<OutputBreakpoints />
																																																			<Function_dice_opponentReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																																				<OutputBreakpoints />
																																																			</Function_dice_opponentReaction>
																																																		</Synchronize>
																																																	</IfCondition>
																																																</Sequence>
																																															</DialogGate>
																																														</DialogGate>
																																													</While>
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Function_crime_checkPockets hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Function_crime_checkPockets>
																																													</IfCondition>
																																												</Sequence>
																																											</EntityContext>
																																										</ForceLook>
																																									</IfGate>
																																								</Sequence>
																																							</IfCondition>
																																						</DialogGate>
																																					</Child>
																																					<OnSuccess>
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</OnSuccess>
																																					<OnFail>
																																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Expression>
																																					</OnFail>
																																				</FuseBox>
																																			</Synchronize>
																																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Success>
																																					</IfGate>
																																				</IfCondition>
																																			</IfCondition>
																																		</Sequence>
																																	</Parallel>
																																</Child>
																																<OnFail>
																																	<IfElseCondition hasInputBreakpoint="0" comment="success when synchronize timedOut to stay in scheduler, otherwise fail and go do something else" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Then>
																																			<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Fail>
																																		</Then>
																																		<Else>
																																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Success>
																																		</Else>
																																	</IfElseCondition>
																																</OnFail>
																															</FuseBox>
																														</Sequence>
																														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Then>
																																<Else>
																																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</LinkTagFilter>
																																			</GraphSearch>
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</Sequence>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</Selector>
																																</Else>
																															</EntityContextCheck>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																															<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																			<OutputBreakpoints />
																																			<Init>
																																				<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</AddLink>
																																			</Init>
																																			<Subtree>
																																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</EntityContextBarrier>
																																					</While>
																																					<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																							</Expression>
																																						</LinkGate>
																																					</While>
																																				</Parallel>
																																			</Subtree>
																																			<Cleanup>
																																				<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</RemoveLink>
																																			</Cleanup>
																																		</SubtreeDecorator>
																																	</EntityContextElement>
																																</IfCondition>
																																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																				<OutputBreakpoints />
																																				<Init>
																																					<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</AddLink>
																																				</Init>
																																				<Subtree>
																																					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</Wait>
																																				</Subtree>
																																				<Cleanup>
																																					<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																					</RemoveLink>
																																				</Cleanup>
																																			</SubtreeDecorator>
																																		</EntityContextElement>
																																	</EntityContext>
																																</IfCondition>
																															</ContinuousSwitch>
																														</Sequence>
																													</Parallel>
																												</AnyDecorator>
																											</ChangeBehaviorStateElement>
																										</EntityContextElement>
																									</EntityContextElement>
																								</IfGate>
																								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																									</Wait>
																								</IfCondition>
																							</Sequence>
																						</EntityContextPreset>
																					</AddLinkElement>
																				</AddLinkElement>
																			</AddLinkElement>
																		</AddLinkElement>
																	</AddLinkElement>
																</StanceElement>
															</EntityContextPresetElement>
														</EntityContextElement>
													</Else>
												</ActorStateCheck>
											</Then>
											<Else>
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</Else>
										</IfElseCondition>
									</Sequence>
								</Child>
								<OnSuccess>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</OnSuccess>
								<OnFail>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnFail>
							</FuseBox>
						</Exec>
					</Decision>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="use_opponent" is_function="0">
		<Variables>
			<Variable name="amountToCheck" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="challengers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="cupSlot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="diceInit" type="dice:init" values="" isPersistent="0" form="single" />
			<Variable name="diceInitDialogResult" type="dice:initDialogResult" values="" isPersistent="0" form="single" />
			<Variable name="diceOnTable" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="gamblerState" type="enum:dice_gamblerState" values="" isPersistent="0" form="single" />
			<Variable name="gameFailed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hasEnoughMoney" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="hiddenCupSlot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="hiddenDiceOnTable" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="loop" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="loops" type="_int" values="4" isPersistent="0" form="single" />
			<Variable name="minigameAvailabilityEvaluated" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="minigameEnabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="playWithoutMoney" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="useFirstRollAnimation" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;cupSlot1&apos;" prune="true" negprune="unknown" Parent="" Child="$cupSlot" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;hiddenSlot1&apos;" prune="true" negprune="unknown" Parent="" Child="$hiddenCupSlot" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;hiddenDiceOnTable1&apos;" prune="true" negprune="unknown" Parent="" Child="$hiddenDiceOnTable" Data="" />
					</GraphSearch>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;diceOnTable1&apos;" prune="true" negprune="unknown" Parent="" Child="$diceOnTable" Data="" />
					</GraphSearch>
					<SuppressFailure>
						<Sequence>
							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;dice_playWithoutMoney&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							</GraphSearch>
							<Expression expressions="$playWithoutMoney = true" />
						</Sequence>
					</SuppressFailure>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Decision decisionLabel="dice_gamblerState" variable="$gamblerState" saveVersion="2">
					<Search canSkip="1">
						<Success />
					</Search>
					<Exec canSkip="1">
						<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
							<Child canSkip="1">
								<Sequence>
									<NumericalOperation In1VariableName="data:script_param[&apos;dice_gameLevelBetSize_beggar&apos;].value" In2VariableName="" In3VariableName="" OutVariableName="$amountToCheck" Operation="float2int" />
									<Expression expressions="$amountToCheck *= 10" />
									<Function_dice_checkMoney amountToCheck="$amountToCheck" npcHasEnough="$hasEnoughMoney" nodeLabel="31229201" />
									<IfCondition failOnCondition="false" condition="~$hasEnoughMoney &amp; &#10;($gamblerState == $enum:dice_gamblerState.arriving | &#10; $playWithoutMoney)">
										<Sequence>
											<CreateItem ItemGUID="&apos;5ef63059-322e-4e1b-abe8-926e100c770e&apos;" Amount="$amountToCheck" CreatedItem="" Target="$this.id" NotifyUI="false" />
											<Expression expressions="$hasEnoughMoney = true" />
										</Sequence>
									</IfCondition>
									<Switch>
										<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.arriving">
											<Expression expressions="$useFirstRollAnimation = true" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.playingAgainstNpc">
											<Expression expressions="$gamblerState = $enum:dice_gamblerState.waitingForOpponent" />
										</IfCondition>
										<DefaultBranch>
											<Success />
										</DefaultBranch>
									</Switch>
									<IfElseCondition failOnCondition="false" condition="$hasEnoughMoney &amp; $gamblerState ~= $enum:dice_gamblerState.leaving" saveVersion="2">
										<Then canSkip="1">
											<EntityContextElement context="DisableSituationParticipation" enabled="true">
												<EntityContextPresetElement contextPreset="crime_dontCommentOnPlayer" enabled="true">
													<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
														<AddLinkElement from="$this.id" to="$hiddenCupSlot" tag="&apos;hiddenSlot&apos;" data="" enabled="true">
															<AddLinkElement from="$this.id" to="$cupSlot" tag="&apos;cupSlot&apos;" data="" enabled="true">
																<AddLinkElement from="$this.id" to="$hiddenDiceOnTable" tag="&apos;hiddenDiceOnTable&apos;" data="" enabled="true">
																	<AddLinkElement from="$this.id" to="$diceOnTable" tag="&apos;diceOnTable&apos;" data="" enabled="true">
																		<AddLinkElement from="$this.id" to="$__object.id" tag="&apos;dice_table&apos;" data="" enabled="true">
																			<EntityContextPreset preset="crime_dontCommentOnPlayer" target="">
																				<Sequence>
																					<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.arriving">
																						<Sequence>
																							<WaitAction />
																							<Expression expressions="$gamblerState = $enum:dice_gamblerState.waitingForOpponent" />
																						</Sequence>
																					</IfCondition>
																					<IfGate atomic="false" condition="$gamblerState == $enum:dice_gamblerState.playingAgainstNpc | &#10;$gamblerState == $enum:dice_gamblerState.waitingForOpponent" RunLogic="Halt">
																						<EntityContextElement context="dice_readyToPlayMinigame" enabled="true">
																							<EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
																								<ChangeBehaviorStateElement smartEntity="$__object.id" behavior="&apos;use_kibitzer&apos;" state="Enabled" allowAnyState="false" enabled="true">
																									<AnyDecorator preset="dice_playAgainstNpc" enabled="true">
																										<Parallel successMode="Any" failureMode="Any">
																											<While doFail="false" propagateChildFail="false" condition="true">
																												<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceInitDialogResult" senderInfo="" inbox="&apos;dice_init_behavior&apos;" condition="" answerVar="">
																													<IfCondition failOnCondition="false" condition="$diceInitDialogResult.type == $enum:dice_initDialogResultType.npcOutOfMoney">
																														<Sequence>
																															<Function_crime_checkPockets initiator="$enum:switch_interruptInitiator.unknown" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="71363653" />
																															<Expression expressions="$gamblerState = $enum:dice_gamblerState.leaving" />
																														</Sequence>
																													</IfCondition>
																												</ProcessMessage>
																											</While>
																											<While doFail="false" propagateChildFail="false" condition="true">
																												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceInit" senderInfo="" inbox="&apos;dice_init_behavior&apos;" condition="" answerVar="">
																													<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.playDialogAnimationsIfFaderDialog" context="" customParameters="" metarole="&apos;KOSTKAR_UNISEX&apos;" preset="$enum:dialogPreset.fader" recipient="$__player" recipientMetaroles="" nodeLabel="29593293" />
																												</ProcessMessage>
																											</While>
																											<Sequence>
																												<IfGate atomic="false" condition="$minigameAvailabilityEvaluated" RunLogic="KeepRunning">
																													<WaitAction />
																												</IfGate>
																												<FuseBox StatusPropagation="CleanUp" OneCleanup="true" saveVersion="2">
																													<Child canSkip="1">
																														<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;20s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="" LockManagerType="Local" SemaphoreName="&apos;dice_playingDice&apos;" RunLogic="Halt">
																															<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
																																<Child canSkip="1">
																																	<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
																																		<Sequence>
																																			<Expression expressions="$gamblerState = $enum:dice_gamblerState.playingAgainstNpc" />
																																			<GetBehaviorHolders area="$__object.id" behaviors="&apos;use_challenger&apos;" targetVar="$challengers" />
																																			<EntityContext context="dice_playingNpcVsNpc" target="">
																																				<ForceLook LookTarget="$challengers[0]" DisableVariations="false">
																																					<While doFail="false" propagateChildFail="false" condition="$loop &lt;= $loops">
																																						<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InNormalDialog" RunLogic="Halt">
																																							<DialogGate Who="$challengers[0]" Negation="true" EndDialogInRoot="false" Condition="InNormalDialog" RunLogic="Halt">
																																								<Sequence>
																																									<Expression expressions="$loop += 1" />
																																									<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_challengerTurn&apos;" RunLogic="KeepRunning">
																																										<Function_dice_opponentReaction nodeLabel="73289026" />
																																									</Synchronize>
																																									<IfCondition failOnCondition="false" condition="$loop &lt;= $loops">
																																										<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_opponentTurn&apos;" RunLogic="KeepRunning">
																																											<Switch>
																																												<IfCondition failOnCondition="false" condition="$loop == 1 &amp; $useFirstRollAnimation">
																																													<Function_rollFirst opponent="$challengers[0]" table="$__object.id" nodeLabel="71589396" />
																																												</IfCondition>
																																												<DefaultBranch>
																																													<Function_rollTurn opponent="$challengers[0]" table="$__object.id" nodeLabel="80960045" />
																																												</DefaultBranch>
																																											</Switch>
																																										</Synchronize>
																																									</IfCondition>
																																								</Sequence>
																																							</DialogGate>
																																						</DialogGate>
																																					</While>
																																				</ForceLook>
																																			</EntityContext>
																																			<IfCondition failOnCondition="false" condition="~$playWithoutMoney">
																																				<Sequence>
																																					<Function_crime_checkPockets initiator="$enum:switch_interruptInitiator.unknown" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="21531800" />
																																					<MoveItem Item="" ItemGUID="&apos;5ef63059-322e-4e1b-abe8-926e100c770e&apos;" Source="$this.id" Target="$challengers[0]" Amount="$amountToCheck" FailOnDoesntExist="false" NotifyUI="false" MovedItem="" ChangeOwnership="true" />
																																				</Sequence>
																																			</IfCondition>
																																		</Sequence>
																																	</DialogGate>
																																</Child>
																																<OnSuccess canSkip="1">
																																	<Success />
																																</OnSuccess>
																																<OnFail canSkip="1">
																																	<Expression expressions="$gameFailed = true" />
																																</OnFail>
																															</FuseBox>
																														</Synchronize>
																													</Child>
																													<OnFail canSkip="1">
																														<IfElseCondition failOnCondition="false" condition="$gameFailed" saveVersion="2">
																															<Then canSkip="1">
																																<Fail />
																															</Then>
																															<Else canSkip="1">
																																<Success />
																															</Else>
																														</IfElseCondition>
																													</OnFail>
																												</FuseBox>
																											</Sequence>
																											<Sequence>
																												<EntityContextCheck context="dice_uninterruptableNpcVsNpc" target="" saveVersion="2">
																													<Then canSkip="1">
																														<Expression expressions="$minigameEnabled = false" />
																													</Then>
																													<Else canSkip="1">
																														<Selector>
																															<Sequence>
																																<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																																	<LinkTagFilter tag="&apos;dice_disabledMinigame&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																																</GraphSearch>
																																<Expression expressions="$minigameEnabled = false" />
																															</Sequence>
																															<Expression expressions="$minigameEnabled = true" />
																														</Selector>
																													</Else>
																												</EntityContextCheck>
																												<Expression expressions="$minigameAvailabilityEvaluated = true" />
																												<ContinuousSwitch>
																													<IfCondition failOnCondition="false" condition="$minigameEnabled">
																														<EntityContextElement context="dice_readyToPlayMinigame" enabled="true">
																															<Parallel successMode="Any" failureMode="Any">
																																<While doFail="false" propagateChildFail="false" condition="true">
																																	<EntityContextBarrier context="dice_uninterruptableNpcVsNpc" target="" Negation="false" RunLogic="KeepRunning">
																																		<Expression expressions="$minigameEnabled = false" />
																																	</EntityContextBarrier>
																																</While>
																																<While doFail="false" propagateChildFail="false" condition="true">
																																	<LinkGate from="$__object.id" to="" tag="&apos;dice_disabledMinigame&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
																																		<Expression expressions="$minigameEnabled = false" />
																																	</LinkGate>
																																</While>
																															</Parallel>
																														</EntityContextElement>
																													</IfCondition>
																													<IfCondition failOnCondition="false" condition="true">
																														<EntityContext context="dice_disabledMinigame" target="">
																															<EntityContextElement context="dice_disabledMinigame" enabled="true">
																																<SubtreeDecorator saveVersion="2">
																																	<Init canSkip="1">
																																		<AddLink From="$__object.id" To="$this.id" Tag="&apos;dice_disabledMinigame&apos;" Data="" LinkOpHandleMode="Error" />
																																	</Init>
																																	<Subtree canSkip="1">
																																		<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																																	</Subtree>
																																	<Cleanup canSkip="1">
																																		<RemoveLink From="$__object.id" To="$this.id" Tag="&apos;dice_disabledMinigame&apos;" LinkOpHandleMode="Error" />
																																	</Cleanup>
																																</SubtreeDecorator>
																															</EntityContextElement>
																														</EntityContext>
																													</IfCondition>
																												</ContinuousSwitch>
																											</Sequence>
																										</Parallel>
																									</AnyDecorator>
																								</ChangeBehaviorStateElement>
																							</EntityContextElement>
																						</EntityContextElement>
																					</IfGate>
																					<IfCondition failOnCondition="false" condition="$gamblerState == $enum:dice_gamblerState.waitingForMinigame">
																						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																					</IfCondition>
																				</Sequence>
																			</EntityContextPreset>
																		</AddLinkElement>
																	</AddLinkElement>
																</AddLinkElement>
															</AddLinkElement>
														</AddLinkElement>
													</StanceElement>
												</EntityContextPresetElement>
											</EntityContextElement>
										</Then>
										<Else canSkip="1">
											<Fail />
										</Else>
									</IfElseCondition>
								</Sequence>
							</Child>
							<OnSuccess canSkip="1">
								<Success />
							</OnSuccess>
							<OnFail canSkip="1">
								<Expression expressions="$gamblerState = $enum:dice_gamblerState.arriving" />
							</OnFail>
						</FuseBox>
					</Exec>
				</Decision>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="amountToCheck" comment="" />
				<Variable name="challengers" comment="" />
				<Variable name="cupSlot" comment="" />
				<Variable name="diceInit" comment="" />
				<Variable name="diceInitDialogResult" comment="" />
				<Variable name="diceOnTable" comment="" />
				<Variable name="gamblerState" comment="" />
				<Variable name="gameFailed" comment="" />
				<Variable name="hasEnoughMoney" comment="" />
				<Variable name="hiddenCupSlot" comment="" />
				<Variable name="hiddenDiceOnTable" comment="" />
				<Variable name="loop" comment="" />
				<Variable name="loops" comment="" />
				<Variable name="minigameAvailabilityEvaluated" comment="" />
				<Variable name="minigameEnabled" comment="" />
				<Variable name="playWithoutMoney" comment="" />
				<Variable name="useFirstRollAnimation" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</SuppressFailure>
					</Sequence>
				</OnInit>
				<Behavior>
					<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Search>
						<Exec>
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</NumericalOperation>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<Function_dice_checkMoney hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_dice_checkMoney>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<CreateItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</CreateItem>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
										</IfCondition>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<DefaultBranch>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DefaultBranch>
										</Switch>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<EntityContextPresetElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EntityContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</WaitAction>
																								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																								</Expression>
																							</Sequence>
																						</IfCondition>
																						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																								<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																									<OutputBreakpoints />
																									<ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																										<OutputBreakpoints />
																										<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																											<OutputBreakpoints />
																											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																												<OutputBreakpoints />
																												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Function_crime_checkPockets hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Function_crime_checkPockets>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Sequence>
																														</IfCondition>
																													</ProcessMessage>
																												</While>
																												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</Function_speech_dialogInitiator>
																													</ProcessMessage>
																												</While>
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																														</WaitAction>
																													</IfGate>
																													<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Child>
																															<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																	<OutputBreakpoints />
																																	<Child>
																																		<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</Expression>
																																				<GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																				</GetBehaviorHolders>
																																				<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																							<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																								<OutputBreakpoints />
																																								<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																									<OutputBreakpoints />
																																									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																										<OutputBreakpoints />
																																										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																										</Expression>
																																										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Function_dice_opponentReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																											</Function_dice_opponentReaction>
																																										</Synchronize>
																																										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																											<OutputBreakpoints />
																																											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																												<OutputBreakpoints />
																																												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																													<OutputBreakpoints />
																																													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																														<OutputBreakpoints />
																																														<Function_rollFirst hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Function_rollFirst>
																																													</IfCondition>
																																													<DefaultBranch>
																																														<Function_rollTurn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																															<OutputBreakpoints />
																																														</Function_rollTurn>
																																													</DefaultBranch>
																																												</Switch>
																																											</Synchronize>
																																										</IfCondition>
																																									</Sequence>
																																								</DialogGate>
																																							</DialogGate>
																																						</While>
																																					</ForceLook>
																																				</EntityContext>
																																				<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																					<OutputBreakpoints />
																																					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																						<OutputBreakpoints />
																																						<Function_crime_checkPockets hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</Function_crime_checkPockets>
																																						<MoveItem hasInputBreakpoint="0" comment="gambler always wins money" breakpointFlags="0">
																																							<OutputBreakpoints />
																																						</MoveItem>
																																					</Sequence>
																																				</IfCondition>
																																			</Sequence>
																																		</DialogGate>
																																	</Child>
																																	<OnSuccess>
																																		<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Success>
																																	</OnSuccess>
																																	<OnFail>
																																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</Expression>
																																	</OnFail>
																																</FuseBox>
																															</Synchronize>
																														</Child>
																														<OnFail>
																															<IfElseCondition hasInputBreakpoint="0" comment="success when synchronize timedOut to stay in scheduler, otherwise fail and go do something else" breakpointFlags="0" saveVersion="2">
																																<OutputBreakpoints />
																																<Then>
																																	<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Fail>
																																</Then>
																																<Else>
																																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Success>
																																</Else>
																															</IfElseCondition>
																														</OnFail>
																													</FuseBox>
																												</Sequence>
																												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																													<OutputBreakpoints />
																													<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																														<OutputBreakpoints />
																														<Then>
																															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																															</Expression>
																														</Then>
																														<Else>
																															<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																		</LinkTagFilter>
																																	</GraphSearch>
																																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																	</Expression>
																																</Sequence>
																																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																</Expression>
																															</Selector>
																														</Else>
																													</EntityContextCheck>
																													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																													</Expression>
																													<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																														<OutputBreakpoints />
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</EntityContextBarrier>
																																	</While>
																																	<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																		<OutputBreakpoints />
																																		<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																			<OutputBreakpoints />
																																			<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Expression>
																																		</LinkGate>
																																	</While>
																																</Parallel>
																															</EntityContextElement>
																														</IfCondition>
																														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																															<OutputBreakpoints />
																															<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																<OutputBreakpoints />
																																<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																	<OutputBreakpoints />
																																	<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																																		<OutputBreakpoints />
																																		<Init>
																																			<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</AddLink>
																																		</Init>
																																		<Subtree>
																																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</Wait>
																																		</Subtree>
																																		<Cleanup>
																																			<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																																				<OutputBreakpoints />
																																			</RemoveLink>
																																		</Cleanup>
																																	</SubtreeDecorator>
																																</EntityContextElement>
																															</EntityContext>
																														</IfCondition>
																													</ContinuousSwitch>
																												</Sequence>
																											</Parallel>
																										</AnyDecorator>
																									</ChangeBehaviorStateElement>
																								</EntityContextElement>
																							</EntityContextElement>
																						</IfGate>
																						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Wait>
																						</IfCondition>
																					</Sequence>
																				</EntityContextPreset>
																			</AddLinkElement>
																		</AddLinkElement>
																	</AddLinkElement>
																</AddLinkElement>
															</AddLinkElement>
														</StanceElement>
													</EntityContextPresetElement>
												</EntityContextElement>
											</Then>
											<Else>
												<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Fail>
											</Else>
										</IfElseCondition>
									</Sequence>
								</Child>
								<OnSuccess>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</OnSuccess>
								<OnFail>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnFail>
							</FuseBox>
						</Exec>
					</Decision>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="rollFirst" is_function="1">
		<Variables>
			<Variable name="bark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" />
			<Variable name="fragment" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="success" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="synchroMessage" type="dice:npcTurnSynchronization" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="opponent" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="table" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SuppressFailure>
						<Sequence>
							<RandomGate opensWithChance="1.000000" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$success = true" />
								</Then>
								<Else canSkip="1">
									<Success />
								</Else>
							</RandomGate>
							<IfElseCondition failOnCondition="false" condition="$success" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$fragment = &apos;DiceNew_StartSuccess&apos; &#10;$metarole = &apos;KOSTKY_HIGH_SCORE&apos;" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$fragment = &apos;DiceNew_StartFailure&apos; &#10;$metarole = &apos;KOSTKY_BUST&apos;" />
								</Else>
							</IfElseCondition>
							<Sequence>
								<RandomGate opensWithChance="0.600000" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$bark = true" />
									</Then>
									<Else canSkip="1">
										<Success />
									</Else>
								</RandomGate>
								<Expression expressions="$synchroMessage.opponentBark = ~$bark &#10; &#10;$diceEvent.type = $enum:diceEventType.onTurnEnded &#10;$diceEvent.who = $this.id" />
								<IfElseCondition failOnCondition="false" condition="$success" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$synchroMessage.eventType = $enum:dice_npcSychronizationEvent.pass &#10;$diceEvent.reason = $enum:diceTurnEndType.normal" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$synchroMessage.eventType = $enum:dice_npcSychronizationEvent.bust &#10;$diceEvent.reason = $enum:diceTurnEndType.bust" />
									</Else>
								</IfElseCondition>
								<InstantSendMessageToNPC target="$opponent" variable="$synchroMessage" />
								<InstantSendMessageToNPC target="$table" variable="$diceEvent" />
							</Sequence>
							<Parallel successMode="All" failureMode="Any">
								<AnimationAction fragment="$fragment" tags="" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								<IfCondition failOnCondition="false" condition="$bark">
									<Sequence>
										<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
										<SuppressFailure>
											<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$metarole" skipInLod="true" subtitlesDown="false" nodeLabel="28030054" />
										</SuppressFailure>
									</Sequence>
								</IfCondition>
							</Parallel>
						</Sequence>
					</SuppressFailure>
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;30s&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_endTurn&apos;" RunLogic="KeepRunning">
						<Success />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="bark" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="fragment" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="success" comment="" />
				<Variable name="synchroMessage" comment="" />
				<Variable name="opponent" comment="" />
				<Variable name="table" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RandomGate hasInputBreakpoint="0" comment="determine result" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Else>
								</RandomGate>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
								<Sequence hasInputBreakpoint="0" comment="synchronize with opponent" breakpointFlags="0">
									<OutputBreakpoints />
									<RandomGate hasInputBreakpoint="0" comment="determine who will comment - me or opponent" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Else>
									</RandomGate>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</Sequence>
								<Parallel hasInputBreakpoint="0" comment="play animation" breakpointFlags="0">
									<OutputBreakpoints />
									<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AnimationAction>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</SuppressFailure>
										</Sequence>
									</IfCondition>
								</Parallel>
							</Sequence>
						</SuppressFailure>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="rollTurn" is_function="1">
		<Variables>
			<Variable name="bark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" />
			<Variable name="fragment" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="success" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="synchroMessage" type="dice:npcTurnSynchronization" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="opponent" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="table" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SuppressFailure>
						<Sequence>
							<RandomGate opensWithChance="0.500000" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$success = true" />
								</Then>
								<Else canSkip="1">
									<Success />
								</Else>
							</RandomGate>
							<IfElseCondition failOnCondition="false" condition="$success" saveVersion="2">
								<Then canSkip="1">
									<Expression expressions="$fragment = &apos;DiceNew_TurnSuccess&apos; &#10;$metarole = &apos;KOSTKY_HIGH_SCORE&apos;" />
								</Then>
								<Else canSkip="1">
									<Expression expressions="$fragment = &apos;DiceNew_TurnFailure&apos; &#10;$metarole = &apos;KOSTKY_BUST&apos;" />
								</Else>
							</IfElseCondition>
							<Sequence>
								<RandomGate opensWithChance="0.600000" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$bark = true" />
									</Then>
									<Else canSkip="1">
										<Success />
									</Else>
								</RandomGate>
								<Expression expressions="$synchroMessage.opponentBark = ~$bark &#10; &#10;$diceEvent.type = $enum:diceEventType.onTurnEnded &#10;$diceEvent.who = $this.id" />
								<IfElseCondition failOnCondition="false" condition="$success" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$synchroMessage.eventType = $enum:dice_npcSychronizationEvent.pass &#10;$diceEvent.reason = $enum:diceTurnEndType.normal" />
									</Then>
									<Else canSkip="1">
										<Expression expressions="$synchroMessage.eventType = $enum:dice_npcSychronizationEvent.bust &#10;$diceEvent.reason = $enum:diceTurnEndType.bust" />
									</Else>
								</IfElseCondition>
								<InstantSendMessageToNPC target="$opponent" variable="$synchroMessage" />
								<InstantSendMessageToNPC target="$table" variable="$diceEvent" />
							</Sequence>
							<Parallel successMode="All" failureMode="Any">
								<AnimationAction fragment="$fragment" tags="" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
								<IfCondition failOnCondition="false" condition="$bark">
									<Sequence>
										<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
										<SuppressFailure>
											<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$metarole" skipInLod="true" subtitlesDown="false" nodeLabel="57980722" />
										</SuppressFailure>
									</Sequence>
								</IfCondition>
							</Parallel>
						</Sequence>
					</SuppressFailure>
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;30s&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_endTurn&apos;" RunLogic="KeepRunning">
						<Success />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="bark" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="fragment" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="success" comment="" />
				<Variable name="synchroMessage" comment="" />
				<Variable name="opponent" comment="" />
				<Variable name="table" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RandomGate hasInputBreakpoint="0" comment="determine result" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Else>
								</RandomGate>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Then>
									<Else>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Else>
								</IfElseCondition>
								<Sequence hasInputBreakpoint="0" comment="synchronize with opponent" breakpointFlags="0">
									<OutputBreakpoints />
									<RandomGate hasInputBreakpoint="0" comment="determine who will comment - me or opponent" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Else>
									</RandomGate>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</Sequence>
								<Parallel hasInputBreakpoint="0" comment="play animation" breakpointFlags="0">
									<OutputBreakpoints />
									<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AnimationAction>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_schedulerMonolog>
											</SuppressFailure>
										</Sequence>
									</IfCondition>
								</Parallel>
							</Sequence>
						</SuppressFailure>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="rollFinish" is_function="1">
		<Variables>
			<Variable name="bark" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" />
			<Variable name="fragment" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="synchroMessage" type="dice:npcTurnSynchronization" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="opponent" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="table" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AnyDecorator preset="dice_playAgainstNpc" enabled="true">
					<Sequence>
						<SuppressFailure>
							<Sequence>
								<Expression expressions="$fragment = &apos;DiceNew_TurnSuccess&apos; &#10;$metarole = &apos;KOSTKY_VYHRA&apos;" />
								<Sequence>
									<RandomGate opensWithChance="0.800000" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$bark = true" />
										</Then>
										<Else canSkip="1">
											<Success />
										</Else>
									</RandomGate>
									<Expression expressions="$synchroMessage.opponentBark = ~$bark" />
									<Expression expressions="$synchroMessage.eventType = $enum:dice_npcSychronizationEvent.endGame &#10; &#10;$diceEvent.type = $enum:diceEventType.onTurnEnded &#10;$diceEvent.reason = $enum:diceTurnEndType.won &#10;$diceEvent.who = $this.id" />
									<InstantSendMessageToNPC target="$opponent" variable="$synchroMessage" />
									<InstantSendMessageToNPC target="$table" variable="$diceEvent" />
								</Sequence>
								<Parallel successMode="All" failureMode="Any">
									<AnimationAction fragment="$fragment" tags="" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
									<IfCondition failOnCondition="false" condition="$bark">
										<Sequence>
											<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
											<SuppressFailure>
												<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$metarole" skipInLod="true" subtitlesDown="false" nodeLabel="87528326" />
											</SuppressFailure>
										</Sequence>
									</IfCondition>
								</Parallel>
							</Sequence>
						</SuppressFailure>
						<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;30s&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_endTurn&apos;" RunLogic="KeepRunning">
							<Success />
						</Synchronize>
					</Sequence>
				</AnyDecorator>
			</Behavior>
		</Root>
		<ForestContainer>
			<RandomGate opensWithChance="0.500000" saveVersion="2">
				<Then canSkip="1">
					<Expression expressions="$success = true" />
				</Then>
				<Else canSkip="1">
					<Expression expressions="$success = false" />
				</Else>
			</RandomGate>
			<IfElseCondition failOnCondition="false" condition="$success" saveVersion="2">
				<Else canSkip="1">
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;diceFail&apos;" RunLogic="KeepRunning">
						<AnimationAction fragment="&apos;DiceGameFinish&apos;" tags="&apos;DiceGameFail&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false">
							<EventData_place Slot="$hiddenSlot" name="&apos;hiddenSlot&apos;" />
						</AnimationAction>
					</Synchronize>
				</Else>
			</IfElseCondition>
			<EventData_pickup Slot="$cupSlot" name="&apos;cupSlot&apos;" />
			<EventData_place Slot="$hiddenSlot" name="&apos;hiddenSlot&apos;" />
			<AnimationAction fragment="&apos;DiceNew_StartFailure&apos;" tags="" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
			<AnimationAction fragment="&apos;DiceGameFinish&apos;" tags="&apos;DiceGameSuccess&apos;" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
			<Sequence>
				<AnimationAction fragment="&apos;DiceGameNewTurn&apos;" tags="" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
				<RandomGate opensWithChance="0.500000" saveVersion="2">
					<Then canSkip="1">
						<AnimationAction fragment="&apos;DiceGameContinueTurn&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
					</Then>
					<Else canSkip="1">
						<Success />
					</Else>
				</RandomGate>
			</Sequence>
			<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;diceSuccess&apos;" RunLogic="KeepRunning">
				<AnimationAction fragment="&apos;DiceNew_EndSuccess&apos;" tags="" eventReferenceObject="$this.id" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
			</Synchronize>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="bark" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="fragment" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="synchroMessage" comment="" />
				<Variable name="opponent" comment="" />
				<Variable name="table" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<Sequence hasInputBreakpoint="0" comment="synchronize with opponent" breakpointFlags="0">
										<OutputBreakpoints />
										<RandomGate hasInputBreakpoint="0" comment="determine who will comment - me or opponent" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Else>
										</RandomGate>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
									</Sequence>
									<Parallel hasInputBreakpoint="0" comment="play animation" breakpointFlags="0">
										<OutputBreakpoints />
										<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AnimationAction>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_schedulerMonolog>
												</SuppressFailure>
											</Sequence>
										</IfCondition>
									</Parallel>
								</Sequence>
							</SuppressFailure>
							<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Synchronize>
						</Sequence>
					</AnyDecorator>
				</Behavior>
			</Root>
			<Forest>
				<RandomGate editorPosX="2730" editorPosY="-300" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Then>
					<Else>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Else>
				</RandomGate>
				<IfElseCondition editorPosX="2130" editorPosY="210" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Else>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EventData_place hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</EventData_place>
							</AnimationAction>
						</Synchronize>
					</Else>
				</IfElseCondition>
				<EventData_pickup editorPosX="2400" editorPosY="-350" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</EventData_pickup>
				<EventData_place editorPosX="2950" editorPosY="-480" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</EventData_place>
				<AnimationAction editorPosX="2880" editorPosY="60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</AnimationAction>
				<AnimationAction editorPosX="2680" editorPosY="-480" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</AnimationAction>
				<Sequence editorPosX="2060" editorPosY="-510" hasInputBreakpoint="0" comment="last turn" breakpointFlags="0">
					<OutputBreakpoints />
					<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</AnimationAction>
					<RandomGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</AnimationAction>
						</Then>
						<Else>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Else>
					</RandomGate>
				</Sequence>
				<Synchronize editorPosX="1990" editorPosY="-190" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</AnimationAction>
				</Synchronize>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_opponentReaction" is_function="1">
		<Variables>
			<Variable name="fragment" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="synchroMessage" type="dice:npcTurnSynchronization" values="" isPersistent="0" form="single" />
			<Variable name="tags" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<SuppressFailure>
						<Parallel successMode="Any" failureMode="Any">
							<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$synchroMessage" senderInfo="" inbox="&apos;dice_npcSynchronization&apos;" condition="" answerVar="">
								<Sequence>
									<Wait duration="&apos;14s&apos;" timeType="GameTime" doFail="false" variation="" />
									<Switch>
										<IfCondition failOnCondition="false" condition="$synchroMessage.eventType == $enum:dice_npcSychronizationEvent.score">
											<Expression expressions="$fragment = &apos;DiceGameReaction&apos; &#10;$tags = &apos;DiceGameNegative&apos; &#10;$metarole = &apos;KOSTKY_HENRY_HIGH_SCORE&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$synchroMessage.eventType == $enum:dice_npcSychronizationEvent.bust | &#10;$synchroMessage.eventType == $enum:dice_npcSychronizationEvent.pass">
											<Expression expressions="$fragment = &apos;DiceGameReaction&apos; &#10;$tags = &apos;DiceGamePositive&apos; &#10;$metarole = &apos;KOSTKY_HENRY_BUST_LOW_SCORE&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$synchroMessage.eventType == $enum:dice_npcSychronizationEvent.endGame">
											<Expression expressions="$fragment = &apos;DiceGameReaction&apos; &#10;$tags = &apos;DiceGameNegative&apos; &#10;$metarole = &apos;KOSTKY_PROHRA&apos;" />
										</IfCondition>
										<DefaultBranch>
											<Success />
										</DefaultBranch>
									</Switch>
									<Parallel successMode="All" failureMode="Any">
										<AnimationAction fragment="$fragment" tags="$tags" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										<IfCondition failOnCondition="false" condition="$synchroMessage.opponentBark">
											<SuppressFailure>
												<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$metarole" skipInLod="true" subtitlesDown="false" nodeLabel="69727696" />
											</SuppressFailure>
										</IfCondition>
									</Parallel>
								</Sequence>
							</ProcessMessage>
							<Wait duration="&apos;30s&apos;" timeType="GameTime" doFail="false" variation="" />
						</Parallel>
					</SuppressFailure>
					<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;dice_endTurn&apos;" RunLogic="KeepRunning">
						<Success />
					</Synchronize>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<Sequence>
				<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
				<AnimationAction fragment="&apos;DiceGameReaction&apos;" tags="&apos;DiceGameNegative&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
			</Sequence>
			<Sequence>
				<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
				<AnimationAction fragment="&apos;DiceGameReaction&apos;" tags="&apos;DiceGamePositive&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
			</Sequence>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="fragment" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="synchroMessage" comment="" />
				<Variable name="tags" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Wait>
										<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<DefaultBranch>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</DefaultBranch>
										</Switch>
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AnimationAction>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Function_speech_schedulerMonolog>
												</SuppressFailure>
											</IfCondition>
										</Parallel>
									</Sequence>
								</ProcessMessage>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Parallel>
						</SuppressFailure>
						<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Synchronize>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<Sequence editorPosX="1420" editorPosY="-970" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
					<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</AnimationAction>
				</Sequence>
				<Sequence editorPosX="1420" editorPosY="-730" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Wait>
					<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</AnimationAction>
				</Sequence>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="use_kibitzer" is_function="0">
		<Variables>
			<Variable name="animFragment" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" />
			<Variable name="gameFinishedTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="gameInProgress" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="gameStartTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="longGameTimer" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="longGameTimerFloat" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="longGameTimerInt" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="metarole" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="mood" type="enum:dice_kibitzMood" values="" isPersistent="0" form="single" />
			<Variable name="place" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;kibitzerPlace&apos;" prune="true" negprune="unknown" Parent="" Child="$place" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<EntityContextElement context="speech_readyForSwitchDialog" enabled="true">
					<EntityContextPreset preset="crime_dontCommentOnPlayer" target="">
						<UnstanceElement unstance="diceKibitzer" locationObject="$place" slaveObject="" enabled="true">
							<Sequence>
								<WaitAction />
								<SubtreeDecorator saveVersion="2">
									<Init canSkip="1">
										<AddLink From="$__object.id" To="$this.id" Tag="&apos;dice_subscription&apos;" Data="" LinkOpHandleMode="Success" />
									</Init>
									<Subtree canSkip="1">
										<Parallel successMode="Any" failureMode="Any">
											<While doFail="false" propagateChildFail="false" condition="true">
												<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceEvent" senderInfo="" inbox="&apos;diceEvent&apos;" condition="" answerVar="">
													<Switch>
														<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.start">
															<Sequence>
																<GetTime TimeType="GameTime" OutVar="$gameStartTime" Delta="" />
																<Expression expressions="$gameInProgress = true" />
															</Sequence>
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.end |  &#10;$diceEvent.type == $enum:diceEventType.cancelled">
															<Sequence>
																<GetTime TimeType="GameTime" OutVar="$gameFinishedTime" Delta="" />
																<Expression expressions="$gameInProgress = false" />
																<Switch>
																	<IfCondition failOnCondition="false" condition="$gameStartTime + ($data:script_param[&apos;dice_shortGameMaxTime&apos;].value * 1000) &gt; $gameFinishedTime">
																		<Expression expressions="$mood = $enum:dice_kibitzMood.dissapointed" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.end &amp;  &#10;$diceEvent.reason == $enum:diceTurnEndType.gaveUp">
																		<Expression expressions="$mood = $enum:dice_kibitzMood.facepalm" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$diceEvent.type==$enum:diceEventType.end &amp;  &#10;$diceEvent.reason==$enum:diceTurnEndType.won &amp;  &#10;$diceEvent.who==$__player">
																		<Expression expressions="$mood = $enum:dice_kibitzMood.extaticHappy" />
																	</IfCondition>
																	<IfCondition failOnCondition="false" condition="$diceEvent.type==$enum:diceEventType.end &amp;  &#10;$diceEvent.reason==$enum:diceTurnEndType.won &amp;  &#10;$diceEvent.who ~= $__player">
																		<Expression expressions="$mood = $enum:dice_kibitzMood.facepalm" />
																	</IfCondition>
																	<DefaultBranch>
																		<Success />
																	</DefaultBranch>
																</Switch>
																<IfGate atomic="false" condition="$mood == $enum:dice_kibitzMood.waiting" RunLogic="KeepRunning">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.leaving" />
																</IfGate>
															</Sequence>
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.onTurnEnded &amp;  &#10;$diceEvent.reason == $enum:diceTurnEndType.normal">
															<IfElseCondition failOnCondition="false" condition="$diceEvent.who==$__player" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.mildlyHappy" />
																</Then>
																<Else canSkip="1">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.neutral" />
																</Else>
															</IfElseCondition>
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$diceEvent.type==$enum:diceEventType.onTurnEnded &amp;  &#10;$diceEvent.reason==$enum:diceTurnEndType.careful  &#10;&amp; $diceEvent.who==$__player">
															<Expression expressions="$mood = $enum:dice_kibitzMood.facepalm" />
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.highScore">
															<IfElseCondition failOnCondition="false" condition="$diceEvent.who==$__player" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.extaticHappy" />
																</Then>
																<Else canSkip="1">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.facepalm" />
																</Else>
															</IfElseCondition>
														</IfCondition>
														<IfCondition failOnCondition="false" condition="$diceEvent.type == $enum:diceEventType.onTurnEnded &amp;  &#10;$diceEvent.reason==$enum:diceTurnEndType.bust">
															<IfElseCondition failOnCondition="false" condition="$diceEvent.who==$__player" saveVersion="2">
																<Then canSkip="1">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.facepalm" />
																</Then>
																<Else canSkip="1">
																	<Expression expressions="$mood = $enum:dice_kibitzMood.extaticHappy" />
																</Else>
															</IfElseCondition>
														</IfCondition>
														<DefaultBranch>
															<Success />
														</DefaultBranch>
													</Switch>
												</ProcessMessage>
											</While>
											<IfGate atomic="false" condition="$mood ~= $enum:dice_kibitzMood.leaving" RunLogic="Halt">
												<Parallel successMode="Any" failureMode="Any">
													<Loop count="-1">
														<IfGate atomic="false" condition="$mood ~= $enum:dice_kibitzMood.waiting" RunLogic="KeepRunning">
															<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
																<Sequence>
																	<Switch>
																		<IfCondition failOnCondition="false" condition="$mood == $enum:dice_kibitzMood.dissapointed">
																			<Expression expressions="$animFragment = &apos;DiceGameKibitzerFacepalm&apos; &#10;$metarole = &apos;KOSTKY_KIBITZER_KRATKA_HRA&apos;" />
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$mood == $enum:dice_kibitzMood.facepalm">
																			<Expression expressions="$animFragment = &apos;DiceGameKibitzerFacepalm&apos; &#10;$metarole = &apos;KOSTKY_KIBITZER_FACEPALM&apos;" />
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$mood == $enum:dice_kibitzMood.neutral">
																			<Expression expressions="$animFragment = &apos;DiceGameKibitzerNeutral&apos; &#10;$metarole = &apos;KOSTKY_KIBITZER_NEUTRAL&apos;" />
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$mood == $enum:dice_kibitzMood.mildlyHappy">
																			<Expression expressions="$animFragment = &apos;DiceGameKibitzerMildlyHappy&apos; &#10;$metarole = &apos;KOSTKY_KIBITZER_MILDLYHAPPY&apos;" />
																		</IfCondition>
																		<IfCondition failOnCondition="false" condition="$mood == $enum:dice_kibitzMood.extaticHappy">
																			<Expression expressions="$animFragment = &apos;DiceGameKibitzerExtaticHappy&apos; &#10;$metarole = &apos;KOSTKY_KIBITZER_EXTATICHAPPY&apos;" />
																		</IfCondition>
																	</Switch>
																	<SuppressFailure>
																		<InstantSemaphore SemaphoreCount="1" LockManagerType="Intellect" SemaphoreName="&apos;dice_kibitzer&apos;">
																			<Parallel successMode="All" failureMode="Any">
																				<AnimationAction fragment="$animFragment" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																				<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="$metarole" skipInLod="true" subtitlesDown="false" nodeLabel="57790330" />
																			</Parallel>
																		</InstantSemaphore>
																	</SuppressFailure>
																	<Expression expressions="$mood = $enum:dice_kibitzMood.waiting" />
																</Sequence>
															</DialogGate>
														</IfGate>
													</Loop>
													<Loop count="-1">
														<IfGate atomic="false" condition="$mood == $enum:dice_kibitzMood.waiting" RunLogic="KeepRunning">
															<Sequence>
																<Expression expressions="$longGameTimerFloat = $data:script_param[&apos;dice_longGameMinTime&apos;].value" />
																<NumericalOperation In1VariableName="longGameTimerFloat" In2VariableName="" In3VariableName="" OutVariableName="$longGameTimerInt" Operation="float2int" />
																<Concatenation OutString="$longGameTimer" Pattern="&apos;$longGameTimerInt;s&apos;" />
																<Wait duration="$longGameTimer" timeType="GameTime" doFail="false" variation="" />
																<Loop count="-1">
																	<Sequence>
																		<DialogGate Who="$this.id" Negation="true" EndDialogInRoot="false" Condition="InAny" RunLogic="KeepRunning">
																			<SuppressFailure>
																				<InstantSemaphore SemaphoreCount="1" LockManagerType="Intellect" SemaphoreName="&apos;dice_kibitzer&apos;">
																					<Parallel successMode="All" failureMode="Any">
																						<AnimationAction fragment="&apos;DiceGameKibitzerNeutral&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
																						<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;KOSTKY_KIBITZER_DLOUHA_HRA&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="83210531" />
																					</Parallel>
																				</InstantSemaphore>
																			</SuppressFailure>
																		</DialogGate>
																		<Wait duration="&apos;30s&apos;" timeType="GameTime" doFail="false" variation="" />
																	</Sequence>
																</Loop>
															</Sequence>
														</IfGate>
													</Loop>
												</Parallel>
											</IfGate>
										</Parallel>
									</Subtree>
									<Cleanup canSkip="1">
										<RemoveLink From="$__object.id" To="$this.id" Tag="&apos;dice_subscription&apos;" LinkOpHandleMode="Success" />
									</Cleanup>
								</SubtreeDecorator>
							</Sequence>
						</UnstanceElement>
					</EntityContextPreset>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animFragment" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="gameFinishedTime" comment="" />
				<Variable name="gameInProgress" comment="" />
				<Variable name="gameStartTime" comment="" />
				<Variable name="longGameTimer" comment="" />
				<Variable name="longGameTimerFloat" comment="" />
				<Variable name="longGameTimerInt" comment="" />
				<Variable name="metarole" comment="" />
				<Variable name="mood" comment="" />
				<Variable name="place" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<EntityContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<UnstanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</WaitAction>
									<SubtreeDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Init>
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
										</Init>
										<Subtree>
											<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetTime>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</GetTime>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="very short game - be dissapointed" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="player forfeited the game - facepalm and then leave" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="player won the game - extatic and then leave" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<Expression hasInputBreakpoint="0" comment="NPC won the game - facepalm and then leave" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Expression>
																		</IfCondition>
																		<DefaultBranch>
																			<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Success>
																		</DefaultBranch>
																	</Switch>
																	<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="Leave the behavior" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</IfGate>
																</Sequence>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="Player ended turn normally - mildlyHappy" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																	<Else>
																		<Expression hasInputBreakpoint="0" comment="NPC ended turn normally - normal" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Else>
																</IfElseCondition>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="Player plays carefully - facepalm" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="Player scored high - extatic" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																	<Else>
																		<Expression hasInputBreakpoint="0" comment="NPC scored high - facepalm" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Else>
																</IfElseCondition>
															</IfCondition>
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																	<OutputBreakpoints />
																	<Then>
																		<Expression hasInputBreakpoint="0" comment="Player busted - facePalm" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Then>
																	<Else>
																		<Expression hasInputBreakpoint="0" comment="NPC busted - extatic" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Else>
																</IfElseCondition>
															</IfCondition>
															<DefaultBranch>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</DefaultBranch>
														</Switch>
													</ProcessMessage>
												</While>
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																		</Switch>
																		<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</AnimationAction>
																					<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Function_speech_schedulerMonolog>
																				</Parallel>
																			</InstantSemaphore>
																		</SuppressFailure>
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</Sequence>
																</DialogGate>
															</IfGate>
														</Loop>
														<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																	<NumericalOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</NumericalOperation>
																	<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Concatenation>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																	<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</AnimationAction>
																							<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</Function_speech_schedulerMonolog>
																						</Parallel>
																					</InstantSemaphore>
																				</SuppressFailure>
																			</DialogGate>
																			<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</Wait>
																		</Sequence>
																	</Loop>
																</Sequence>
															</IfGate>
														</Loop>
													</Parallel>
												</IfGate>
											</Parallel>
										</Subtree>
										<Cleanup>
											<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</RemoveLink>
										</Cleanup>
									</SubtreeDecorator>
								</Sequence>
							</UnstanceElement>
						</EntityContextPreset>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_diceEvent_notifySubscribers" is_function="1">
		<Variables>
			<Variable name="subscribers" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="event" type="diceEvent" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;dice_subscription&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$subscribers" saveVersion="2" />
					</GraphSearch>
					<IfCondition failOnCondition="false" condition="#subscribers &gt; 0">
						<InstantMultiSendMessageToNPC targets="$subscribers" successMode="Any" failureMode="Any" variable="$event" />
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="subscribers" comment="" />
				<Variable name="event" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<InstantMultiSendMessageToNPC hasInputBreakpoint="0" comment="Pass the message to the subscribers" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantMultiSendMessageToNPC>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_interrupt_instantlyLeaveDiceTable" is_function="1">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Parallel successMode="Any" failureMode="Any">
						<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="false" RunLogic="KeepRunning">
							<Success />
						</ActorStateBarrier>
						<Wait duration="&apos;20s&apos;" timeType="GameTime" doFail="false" variation="" />
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</ActorStateBarrier>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_checkMoney" is_function="1">
		<Variables>
			<Variable name="balance" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="money" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="moneyStackValue" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="moneys" type="_wuid" values="" isPersistent="0" form="array" />
		</Variables>
		<Parameters>
			<Variable name="amountToCheck" type="_int" values="200" isPersistent="0" form="single" requirementType="In" />
			<Variable name="npcHasEnough" type="_bool" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<SuppressFailure>
					<Sequence>
						<GraphSearch Origin="$this.id" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="&apos;inventory&apos;" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<ItemClassFilter ClassId="&apos;5ef63059-322e-4e1b-abe8-926e100c770e&apos;" Category="" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
							<Nodalyzer Quantifiers="ForAll" Parent="" Child="$moneys" saveVersion="2" />
						</GraphSearch>
						<ForEach startIndex="0" step="1" array="$moneys" iterator="" value="$money" break="">
							<Sequence>
								<GetItemProperty itemId="$money" property="Amount" result="$moneyStackValue" />
								<Expression expressions="$balance += $moneyStackValue" />
							</Sequence>
						</ForEach>
						<Expression expressions="$npcHasEnough = $balance &gt;= $amountToCheck" />
					</Sequence>
				</SuppressFailure>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="balance" comment="" />
				<Variable name="money" comment="" />
				<Variable name="moneyStackValue" comment="" />
				<Variable name="moneys" comment="" />
				<Variable name="amountToCheck" comment="" />
				<Variable name="npcHasEnough" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ItemClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ItemClassFilter>
								<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
								</Nodalyzer>
							</GraphSearch>
							<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetItemProperty>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</ForEach>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</SuppressFailure>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_interrupt_playDiceMinigame" is_function="1">
		<Variables>
			<Variable name="chair" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="otherPlayers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="tableFree" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="forceBadgeSubtype" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="gameType" type="enum:dice_gameLevel" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isQuest" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;seat2_SO&apos;" prune="true" negprune="unknown" Parent="" Child="$chair" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<Timeout duration="&apos;15s&apos;" timeType="GameTime" doFail="true" variation="">
						<While doFail="false" propagateChildFail="false" condition="~$tableFree">
							<Sequence>
								<ReinitVariable variable="$otherPlayers" />
								<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;dice_dicePlayer&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
										<Child0 canSkip="1">
											<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
										</Child0>
									</NegationOp>
									<Nodalyzer Quantifiers="ForAll" Parent="" Child="$otherPlayers" saveVersion="2" />
								</GraphSearch>
								<IfElseCondition failOnCondition="false" condition="#otherPlayers &gt; 0" saveVersion="2">
									<Then canSkip="1">
										<LinkGate from="$__object.id" to="$otherPlayers[0]" tag="&apos;dice_dicePlayer&apos;" amount="AtLeastOne" presence="NotThere" RunLogic="KeepRunning">
											<Success />
										</LinkGate>
									</Then>
									<Else canSkip="1">
										<Expression expressions="$tableFree = true" />
									</Else>
								</IfElseCondition>
							</Sequence>
						</While>
					</Timeout>
					<EntityContextPresetElement contextPreset="crime_dontCommentOnPlayer" enabled="true">
						<StanceElement smartObject="$chair" stance="sitting" allowAny="false" enabled="true">
							<AddLinkElement from="$this.id" to="$__object.id" tag="&apos;dice_table&apos;" data="" enabled="true">
								<EntityContextPreset preset="crime_dontCommentOnPlayer" target="">
									<Sequence>
										<WaitAction />
										<Synchronize SemaphoreCount="3" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;25s&apos;" LockManagerType="Global" SemaphoreName="&apos;dice_readyToInitMinigame&apos;" RunLogic="KeepRunning">
											<ChangeBehaviorStateElement smartEntity="$__object.id" behavior="&apos;use_kibitzer&apos;" state="Enabled" allowAnyState="false" enabled="true">
												<Sequence>
													<WaitAction />
													<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;25s&apos;" LockManagerType="Global" SemaphoreName="&apos;dice_minigameReady&apos;" RunLogic="KeepRunning">
														<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;dice_minigameFinished&apos;" RunLogic="KeepRunning">
															<Function_dice_playEndReaction nodeLabel="68510930" />
														</Synchronize>
													</Synchronize>
												</Sequence>
											</ChangeBehaviorStateElement>
										</Synchronize>
									</Sequence>
								</EntityContextPreset>
							</AddLinkElement>
						</StanceElement>
					</EntityContextPresetElement>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="dice_interrupt_playDiceMinigame" EventSet="">
			<Variables>
				<Variable name="chair" comment="" />
				<Variable name="otherPlayers" comment="" />
				<Variable name="tableFree" comment="" />
				<Variable name="forceBadgeSubtype" comment="" />
				<Variable name="gameType" comment="" />
				<Variable name="isQuest" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Timeout hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ReinitVariable>
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
										<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Child0>
												<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</WUIDFilter>
											</Child0>
										</NegationOp>
										<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
										</Nodalyzer>
									</GraphSearch>
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</LinkGate>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
								</Sequence>
							</While>
						</Timeout>
						<EntityContextPresetElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextPreset hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</WaitAction>
											<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</WaitAction>
														<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Function_dice_playEndReaction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Function_dice_playEndReaction>
															</Synchronize>
														</Synchronize>
													</Sequence>
												</ChangeBehaviorStateElement>
											</Synchronize>
										</Sequence>
									</EntityContextPreset>
								</AddLinkElement>
							</StanceElement>
						</EntityContextPresetElement>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_processDiceDialogResult" is_function="1">
		<Variables>
			<Variable name="diceInitDialogResult" type="dice:initDialogResult" values="" isPersistent="0" form="single" />
			<Variable name="table" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="useInterrupt" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<While doFail="false" propagateChildFail="false" condition="true">
					<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$diceInitDialogResult" senderInfo="" inbox="&apos;dice_init&apos;" condition="" answerVar="">
						<FuseBox StatusPropagation="Success" OneCleanup="false" saveVersion="2">
							<Child canSkip="1">
								<IfCondition failOnCondition="false" condition="$diceInitDialogResult.type == $enum:dice_initDialogResultType.startMinigame">
									<Sequence>
										<Selector>
											<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;dice_tableOverride&apos;" prune="true" negprune="unknown" Parent="" Child="$table" Data="" />
											</GraphSearch>
											<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;dice_table&apos;" prune="true" negprune="unknown" Parent="" Child="$table" Data="" />
											</GraphSearch>
										</Selector>
										<InstantSendMessageToNPC target="$table" variable="$diceInitDialogResult" />
										<AddInterrupt_dice_interrupt_playDiceMinigame forceBadgeSubtype="$diceInitDialogResult.forceBadgeSubtype" gameType="$diceInitDialogResult.gameLevel" isQuest="$diceInitDialogResult.isQuest" Target="$this.id" Host="$table" Behavior="&apos;interrupt_playDiceMinigame&apos;" Priority="201" IgnorePriorityOnPreviousInterrupt="true" urgency="Instant" Aliveness="Alive" Privileged="false" FastForward="false" />
									</Sequence>
								</IfCondition>
							</Child>
							<OnSuccess canSkip="1">
								<Success />
							</OnSuccess>
							<OnFail canSkip="1">
								<SendAIConceptSignal_dice_minigameInitResult success="false" />
							</OnFail>
						</FuseBox>
					</ProcessMessage>
				</While>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="diceInitDialogResult" comment="" />
				<Variable name="table" comment="" />
				<Variable name="useInterrupt" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
											</Selector>
											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="forward msg to diceTable" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantSendMessageToNPC>
											<AddInterrupt_dice_interrupt_playDiceMinigame hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddInterrupt_dice_interrupt_playDiceMinigame>
										</Sequence>
									</IfCondition>
								</Child>
								<OnSuccess>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</OnSuccess>
								<OnFail>
									<SendAIConceptSignal_dice_minigameInitResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SendAIConceptSignal_dice_minigameInitResult>
								</OnFail>
							</FuseBox>
						</ProcessMessage>
					</While>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_getGameLevelData" is_function="1">
		<Variables>
			<Variable name="token" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="badgeLevel" type="enum:badgeTier" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="betSize" type="_int" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="betType" type="enum:dice_betType" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="gameLevel" type="enum:dice_gameLevel" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="gameType" type="enum:diceGameTypes" values="" isPersistent="0" form="single" requirementType="Out" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$betType = $enum:dice_betType.money" />
					<Switch>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.beggar">
							<Expression expressions="$token = &apos;beggar&apos; &#10;$gameType = $enum:diceGameTypes.beggar" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.wagoner">
							<Expression expressions="$token = &apos;wagoner&apos; &#10;$gameType = $enum:diceGameTypes.wagoner" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.farmer">
							<Expression expressions="$token = &apos;farmer&apos; &#10;$gameType = $enum:diceGameTypes.peasant" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.miner">
							<Expression expressions="$token = &apos;miner&apos; &#10;$gameType = $enum:diceGameTypes.miner" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.novice">
							<Expression expressions="$token = &apos;novice&apos; &#10;$betType = $enum:dice_betType.mixed &#10;$gameType = $enum:diceGameTypes.novice" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.craftsman">
							<Expression expressions="$token = &apos;craftsman&apos; &#10;$gameType = $enum:diceGameTypes.craftsman" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.soldier">
							<Expression expressions="$token = &apos;soldier&apos; &#10;$gameType = $enum:diceGameTypes.soldier" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.priest">
							<Expression expressions="$token = &apos;priest&apos; &#10;$gameType = $enum:diceGameTypes.priest" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.knight">
							<Expression expressions="$token = &apos;knight&apos; &#10;$betType = $enum:dice_betType.mixed &#10;$gameType = $enum:diceGameTypes.knight" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.courtier">
							<Expression expressions="$token = &apos;courtier&apos; &#10;$gameType = $enum:diceGameTypes.courtier" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.cardinal">
							<Expression expressions="$token = &apos;cardinal&apos; &#10;$gameType = $enum:diceGameTypes.cardinal" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.lord">
							<Expression expressions="$token = &apos;lord&apos; &#10; $gameType = $enum:diceGameTypes.lord" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.king">
							<Expression expressions="$token = &apos;king&apos; &#10;$betType = $enum:dice_betType.mixed &#10;$gameType = $enum:diceGameTypes.king" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.emperor">
							<Expression expressions="$token = &apos;emperor&apos; &#10;$betType = $enum:dice_betType.mixed &#10;$gameType = $enum:diceGameTypes.emperor" />
						</IfCondition>
					</Switch>
					<Switch>
						<IfCondition failOnCondition="false" condition="$gameLevel == $enum:dice_gameLevel.beggar">
							<Expression expressions="$badgeLevel = $enum:badgeTier.invalidTier" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel &lt;= $enum:dice_gameLevel.novice">
							<Expression expressions="$badgeLevel = $enum:badgeTier.plumb" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$gameLevel &lt;= $enum:dice_gameLevel.knight">
							<Expression expressions="$badgeLevel = $enum:badgeTier.silver" />
						</IfCondition>
						<DefaultBranch>
							<Expression expressions="$badgeLevel = $enum:badgeTier.gold" />
						</DefaultBranch>
					</Switch>
					<Expression expressions="$betSize = $data:script_param[&apos;dice_gameLevelBetSize_&apos; + $token].value * 10" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="token" comment="" />
				<Variable name="badgeLevel" comment="" />
				<Variable name="betSize" comment="" />
				<Variable name="betType" comment="" />
				<Variable name="gameLevel" comment="" />
				<Variable name="gameType" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
						</Switch>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<DefaultBranch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</DefaultBranch>
						</Switch>
						<Expression hasInputBreakpoint="0" comment="convert betSize to decigroshen" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_playEndReaction" is_function="1">
		<Variables>
			<Variable name="endMsg" type="dice:end" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Success" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Parallel successMode="Any" failureMode="Any">
							<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$endMsg" senderInfo="" inbox="&apos;dice_minigameResult&apos;" condition="" answerVar="">
								<EntityContextCheck context="dice_disablePostGameReaction" target="" saveVersion="2">
									<Then canSkip="1">
										<Success />
									</Then>
									<Else canSkip="1">
										<Switch>
											<IfCondition failOnCondition="false" condition="$endMsg.reason == $enum:dice_minigameResult.playerLost | &#10;$endMsg.reason == $enum:dice_minigameResult.playerLeft">
												<Parallel successMode="All" failureMode="Any">
													<AnimationAction fragment="&apos;DiceGameReaction&apos;" tags="&apos;DiceGamePositive&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													<IfCondition failOnCondition="false" condition="$endMsg.betData.type == $enum:dice_betType.token | &#10;$endMsg.betData.type == $enum:dice_betType.mixed">
														<DialogGate Who="" Negation="true" EndDialogInRoot="false" Condition="InMonolog" RunLogic="KeepRunning">
															<SuppressFailure>
																<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;KOSTKAR_VYHRAL_BADGE&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="41015974" />
															</SuppressFailure>
														</DialogGate>
													</IfCondition>
												</Parallel>
											</IfCondition>
											<IfCondition failOnCondition="false" condition="$endMsg.reason == $enum:dice_minigameResult.playerWon">
												<Parallel successMode="All" failureMode="Any">
													<AnimationAction fragment="&apos;DiceGameReaction&apos;" tags="&apos;DiceGameNegative&apos;" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
													<IfCondition failOnCondition="false" condition="$endMsg.betData.type == $enum:dice_betType.token | &#10;$endMsg.betData.type == $enum:dice_betType.mixed">
														<DialogGate Who="" Negation="true" EndDialogInRoot="false" Condition="InMonolog" RunLogic="KeepRunning">
															<SuppressFailure>
																<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;KOSTKAR_PROHRAL_BADGE&apos;" skipInLod="true" subtitlesDown="false" nodeLabel="19901091" />
															</SuppressFailure>
														</DialogGate>
													</IfCondition>
												</Parallel>
											</IfCondition>
											<DefaultBranch>
												<AnimationAction fragment="&apos;DiceGameReaction&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
											</DefaultBranch>
										</Switch>
									</Else>
								</EntityContextCheck>
							</ProcessMessage>
							<Wait duration="&apos;6s&apos;" timeType="GameTime" doFail="false" variation="" />
						</Parallel>
					</Child>
					<OnFail canSkip="1">
						<ClearInbox inbox="&apos;dice_minigameResult&apos;" type="&apos;dice:end&apos;" condition="" />
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="endMsg" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Then>
										<Else>
											<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AnimationAction>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_speech_schedulerMonolog>
																</SuppressFailure>
															</DialogGate>
														</IfCondition>
													</Parallel>
												</IfCondition>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AnimationAction>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<DialogGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Function_speech_schedulerMonolog>
																</SuppressFailure>
															</DialogGate>
														</IfCondition>
													</Parallel>
												</IfCondition>
												<DefaultBranch>
													<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AnimationAction>
												</DefaultBranch>
											</Switch>
										</Else>
									</EntityContextCheck>
								</ProcessMessage>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Parallel>
						</Child>
						<OnFail>
							<ClearInbox hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ClearInbox>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_interrupt_playerSit" is_function="0">
		<Variables>
			<Variable name="chair" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;seat1_SO&apos;" prune="true" negprune="unknown" Parent="" Child="$chair" Data="" />
					</GraphSearch>
					<StanceElement smartObject="$chair" stance="sitting" allowAny="false" enabled="true">
						<ForceLook LookTarget="$__object.id" DisableVariations="true">
							<EntityContext context="crime_disabledDirectPlayerTrespassReactions" target="$__player">
								<Sequence>
									<WaitAction />
									<Synchronize SemaphoreCount="3" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;25s&apos;" LockManagerType="Global" SemaphoreName="&apos;dice_readyToInitMinigame&apos;" RunLogic="KeepRunning">
										<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="false" RunLogic="Halt">
											<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="true" RunLogic="Halt">
												<Success />
											</ActorStateBarrier>
										</ActorStateBarrier>
									</Synchronize>
								</Sequence>
							</EntityContext>
						</ForceLook>
					</StanceElement>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="chair" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</WaitAction>
										<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</ActorStateBarrier>
											</ActorStateBarrier>
										</Synchronize>
									</Sequence>
								</EntityContext>
							</ForceLook>
						</StanceElement>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_cleanupSlot" is_function="1">
		<Variables>
			<Variable name="from" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="to" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="iterator" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="linktagFrom" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="linktagTo" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Expression expressions="$linktagFrom += $iterator" />
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="$linktagFrom" prune="true" negprune="unknown" Parent="" Child="$from" Data="" />
					</GraphSearch>
					<GetItemInSlot slot="$from" useHomeItem="false" item="$item" />
					<IfCondition failOnCondition="false" condition="$item ~= $__null">
						<Sequence>
							<Expression expressions="$linktagTo += $iterator" />
							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="$linktagTo" prune="true" negprune="unknown" Parent="" Child="$to" Data="" />
							</GraphSearch>
							<InstantMoveItemToSlot MovedItem="$item" SourceSlot="$from" TargetSlot="$to" />
						</Sequence>
					</IfCondition>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="from" comment="" />
				<Variable name="item" comment="" />
				<Variable name="to" comment="" />
				<Variable name="iterator" comment="" />
				<Variable name="linktagFrom" comment="" />
				<Variable name="linktagTo" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<GetItemInSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetItemInSlot>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<InstantMoveItemToSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantMoveItemToSlot>
							</Sequence>
						</IfCondition>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_cleanTable" is_function="1">
		<Variables>
			<Variable name="iterator" type="_int" values="2" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<While doFail="false" propagateChildFail="false" condition="$iterator &gt; 0">
					<SuppressFailure>
						<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
							<Child canSkip="1">
								<Sequence>
									<Function_dice_cleanupSlot iterator="$iterator" linktagFrom="&apos;diceOnTable&apos;" linktagTo="&apos;hiddenDiceOnTable&apos;" nodeLabel="23405712" />
									<Function_dice_cleanupSlot iterator="$iterator" linktagFrom="&apos;cupSlot&apos;" linktagTo="&apos;hiddenSlot&apos;" nodeLabel="21583717" />
								</Sequence>
							</Child>
							<OnFail canSkip="1">
								<Expression expressions="$iterator -= 1" />
							</OnFail>
						</FuseBox>
					</SuppressFailure>
				</While>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="iterator" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Child>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_dice_cleanupSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_dice_cleanupSlot>
										<Function_dice_cleanupSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_dice_cleanupSlot>
									</Sequence>
								</Child>
								<OnFail>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</OnFail>
							</FuseBox>
						</SuppressFailure>
					</While>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_getBadgeFromData" is_function="1">
		<Variables>
			<Variable name="category" type="_string" values="&apos;dice_badge.&apos;" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="badgeTier" type="enum:badgeTier" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="badgeType" type="enum:diceBadge" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" requirementType="Out" />
			<Variable name="npc" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Selector>
					<IfElseCondition failOnCondition="false" condition="$badgeTier == $enum:badgeTier.invalidTier | &#10;$badgeType == $enum:diceBadge.invalidBadge" saveVersion="2">
						<Then canSkip="1">
							<Success />
						</Then>
						<Else canSkip="1">
							<Sequence>
								<Switch>
									<IfCondition failOnCondition="false" condition="$badgeTier == $enum:badgeTier.plumb">
										<Expression expressions="$category += &apos;plumb.&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeTier == $enum:badgeTier.silver">
										<Expression expressions="$category += &apos;silver.&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeTier == $enum:badgeTier.gold">
										<Expression expressions="$category += &apos;gold.&apos;" />
									</IfCondition>
								</Switch>
								<Switch>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.headStart">
										<Expression expressions="$category += &apos;Headstart&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.formations">
										<Expression expressions="$category += &apos;Formations&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.null">
										<Expression expressions="$category += &apos;Null&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.extraValue">
										<Expression expressions="$category += &apos;ExtraValue&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.antibust">
										<Expression expressions="$category += &apos;Antibust&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.doubleTake">
										<Expression expressions="$category += &apos;DoubleTake&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.multiplier">
										<Expression expressions="$category += &apos;Multiplier&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.extraDice">
										<Expression expressions="$category += &apos;ExtraDice&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.rerollDice">
										<Expression expressions="$category += &apos;RerollDice&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.setDice">
										<Expression expressions="$category += &apos;SetDice&apos;" />
									</IfCondition>
									<IfCondition failOnCondition="false" condition="$badgeType == $enum:diceBadge.rerollPips">
										<Expression expressions="$category += &apos;RerollPips&apos;" />
									</IfCondition>
								</Switch>
								<GraphSearch Origin="$npc" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="&apos;inventory&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<ItemClassFilter ClassId="" Category="$category" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
									<Nodalyzer Quantifiers="Exists" Parent="" Child="$item" saveVersion="2" />
								</GraphSearch>
							</Sequence>
						</Else>
					</IfElseCondition>
					<SuppressFailure>
						<ErrorNode Message="&apos;DiCE: Unable to locate badge in inventory!&apos;" />
					</SuppressFailure>
				</Selector>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="category" comment="" />
				<Variable name="badgeTier" comment="" />
				<Variable name="badgeType" comment="" />
				<Variable name="item" comment="" />
				<Variable name="npc" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Success hasInputBreakpoint="0" comment="not playing with badge" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Switch>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
									</Switch>
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ItemClassFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ItemClassFilter>
										<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
										</Nodalyzer>
									</GraphSearch>
								</Sequence>
							</Else>
						</IfElseCondition>
						<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</SuppressFailure>
					</Selector>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_processEndResult" is_function="1">
		<Variables>
			<Variable name="endMsg" type="dice:end" values="" isPersistent="0" form="single" />
			<Variable name="gameBadgeInfo" type="diceEventBadgeInfo" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="bet" type="dice:bet" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="isQuest" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="opponent" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<AtomicDecorator>
						<Sequence>
							<SuppressFailure>
								<InstantReadMessage variable="$gameBadgeInfo" senderInfo="" inbox="&apos;dice_badgeInfo&apos;" condition="" />
							</SuppressFailure>
							<IfElseCondition failOnCondition="false" condition="$diceEvent.reason == $enum:diceTurnEndType.won &amp;  &#10;$diceEvent.who == $__player" saveVersion="2">
								<Then canSkip="1">
									<Sequence>
										<IfCondition failOnCondition="false" condition="$bet.type == $enum:dice_betType.money |  &#10;$bet.type == $enum:dice_betType.mixed">
											<IfCondition failOnCondition="false" condition="~$isQuest">
												<MoveItem Item="" ItemGUID="&apos;5ef63059-322e-4e1b-abe8-926e100c770e&apos;" Source="$opponent" Target="$__player" Amount="$bet.moneyAmount" FailOnDoesntExist="false" NotifyUI="true" MovedItem="" ChangeOwnership="true" />
											</IfCondition>
										</IfCondition>
										<IfCondition failOnCondition="false" condition="$bet.type == $enum:dice_betType.token |  &#10;$bet.type == $enum:dice_betType.mixed">
											<IfCondition failOnCondition="false" condition="~$isQuest">
												<Sequence>
													<Function_dice_getBadgeFromData badgeTier="$gameBadgeInfo.badgeTierOpponent" badgeType="$gameBadgeInfo.badgeOpponent" npc="$opponent" item="$bet.npcBadge" nodeLabel="58676426" />
													<MoveItem Item="$bet.npcBadge" ItemGUID="" Source="$opponent" Target="$__player" Amount="1" FailOnDoesntExist="false" NotifyUI="true" MovedItem="" ChangeOwnership="true" />
													<IfCondition failOnCondition="false" condition="$gameBadgeInfo.badgeTierOpponent == $enum:badgeTier.gold">
														<SendAIConceptSignal_achievementNotification achievement="$enum:achievement.collector" />
													</IfCondition>
												</Sequence>
											</IfCondition>
										</IfCondition>
										<Expression expressions="$endMsg.reason = $enum:dice_minigameResult.playerWon" />
									</Sequence>
								</Then>
								<Else canSkip="1">
									<Sequence>
										<IfCondition failOnCondition="false" condition="~$isQuest">
											<Sequence>
												<IfCondition failOnCondition="false" condition="$bet.type == $enum:dice_betType.money |  &#10;$bet.type == $enum:dice_betType.mixed">
													<MoveItem Item="" ItemGUID="&apos;5ef63059-322e-4e1b-abe8-926e100c770e&apos;" Source="$__player" Target="$opponent" Amount="$bet.moneyAmount" FailOnDoesntExist="false" NotifyUI="true" MovedItem="" ChangeOwnership="true" />
												</IfCondition>
												<IfCondition failOnCondition="false" condition="$bet.type == $enum:dice_betType.token |  &#10;$bet.type == $enum:dice_betType.mixed">
													<Sequence>
														<Function_dice_getBadgeFromData badgeTier="$gameBadgeInfo.badgeTierPlayer" badgeType="$gameBadgeInfo.badgePlayer" npc="$__player" item="$bet.playerBadge" nodeLabel="27070073" />
														<MoveItem Item="$bet.playerBadge" ItemGUID="" Source="$__player" Target="$opponent" Amount="1" FailOnDoesntExist="false" NotifyUI="true" MovedItem="" ChangeOwnership="true" />
													</Sequence>
												</IfCondition>
											</Sequence>
										</IfCondition>
										<IfElseCondition failOnCondition="false" condition="$diceEvent.reason == $enum:diceTurnEndType.gaveUp &amp;  &#10; $diceEvent.who == $__player" saveVersion="2">
											<Then canSkip="1">
												<Expression expressions="$endMsg.reason = $enum:dice_minigameResult.playerLeft" />
											</Then>
											<Else canSkip="1">
												<Expression expressions="$endMsg.reason = $enum:dice_minigameResult.playerLost" />
											</Else>
										</IfElseCondition>
									</Sequence>
								</Else>
							</IfElseCondition>
							<IfCondition failOnCondition="false" condition="($diceEvent.reason == $enum:diceTurnEndType.won &amp;  &#10; $diceEvent.who ~= $__player)  &#10; &#10;|  &#10; &#10;($diceEvent.reason == $enum:diceTurnEndType.gaveUp &amp;  &#10; $diceEvent.who == $__player)">
								<IfCondition failOnCondition="false" condition="bet.moneyAmount &gt; 50">
									<SetReputationNPC NPC="$opponent" reputationChange="quest_reward_1_micro" />
								</IfCondition>
							</IfCondition>
							<Expression expressions="$endMsg.player1Score = $diceEvent.player1Score &#10;$endMsg.player2Score = $diceEvent.player2Score &#10;$endMsg.opponent = $opponent &#10;$endMsg.betData = $bet" />
							<SuppressFailure>
								<InstantSendMessageToNPC target="$opponent" variable="$endMsg" />
							</SuppressFailure>
						</Sequence>
					</AtomicDecorator>
					<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="true" RunLogic="KeepRunning">
						<SendAIConceptSignal_dice_minigameResult opponent="$opponent" result="$endMsg.reason" />
					</ActorStateBarrier>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="endMsg" comment="" />
				<Variable name="gameBadgeInfo" comment="" />
				<Variable name="bet" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="isQuest" comment="" />
				<Variable name="opponent" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<InstantReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantReadMessage>
								</SuppressFailure>
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</MoveItem>
												</IfCondition>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Function_dice_getBadgeFromData hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Function_dice_getBadgeFromData>
														<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</MoveItem>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<SendAIConceptSignal_achievementNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SendAIConceptSignal_achievementNotification>
														</IfCondition>
													</Sequence>
												</IfCondition>
											</IfCondition>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Sequence>
									</Then>
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</MoveItem>
													</IfCondition>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Function_dice_getBadgeFromData hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Function_dice_getBadgeFromData>
															<MoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</MoveItem>
														</Sequence>
													</IfCondition>
												</Sequence>
											</IfCondition>
											<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Then>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Then>
												<Else>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Else>
											</IfElseCondition>
										</Sequence>
									</Else>
								</IfElseCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SetReputationNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SetReputationNPC>
									</IfCondition>
								</IfCondition>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</SuppressFailure>
							</Sequence>
						</AtomicDecorator>
						<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SendAIConceptSignal_dice_minigameResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SendAIConceptSignal_dice_minigameResult>
						</ActorStateBarrier>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dice_processCancelledResult" is_function="1">
		<Variables>
			<Variable name="endMsg" type="dice:end" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="bet" type="dice:bet" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="diceEvent" type="diceEvent" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="opponent" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<AtomicDecorator>
						<Sequence>
							<Expression expressions="$endMsg.reason = $enum:dice_minigameResult.gameInterrupted &#10;$endMsg.player1Score = $diceEvent.player1Score &#10;$endMsg.player2Score = $diceEvent.player2Score &#10;$endMsg.opponent = $opponent &#10;$endMsg.betData = $bet" />
							<InstantSendMessageToNPC target="$opponent" variable="$endMsg" />
							<ReinitVariable variable="$bet" />
						</Sequence>
					</AtomicDecorator>
					<ActorStateBarrier Who="$__player" ToState="minigame" NegateTo="true" RunLogic="KeepRunning">
						<SendAIConceptSignal_dice_minigameResult opponent="$opponent" result="$endMsg.reason" />
					</ActorStateBarrier>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="endMsg" comment="" />
				<Variable name="bet" comment="" />
				<Variable name="diceEvent" comment="" />
				<Variable name="opponent" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantSendMessageToNPC>
								<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ReinitVariable>
							</Sequence>
						</AtomicDecorator>
						<ActorStateBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<SendAIConceptSignal_dice_minigameResult hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SendAIConceptSignal_dice_minigameResult>
						</ActorStateBarrier>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>