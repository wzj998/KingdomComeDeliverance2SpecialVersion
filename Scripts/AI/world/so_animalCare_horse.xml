<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="use_grooming_left" is_function="0">
    <Variables>
      <Variable name="init_fromLeft" type="_bool" values="true" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IncludeTree File="&apos;world/so_animalcare_horse.xml&apos;" Name="&apos;groomingBehavior&apos;" nodeLabel="76735042" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="init_fromLeft" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IncludeTree>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_grooming_left_horse" is_function="0">
    <Variables>
      <Variable name="init_fromLeft" type="_bool" values="true" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IncludeTree File="&apos;world/so_animalcare_horse.xml&apos;" Name="&apos;groomingBehavior&apos;" nodeLabel="80143901" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="init_fromLeft" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IncludeTree>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_grooming_right" is_function="0">
    <Variables>
      <Variable name="init_fromLeft" type="_bool" values="false" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IncludeTree File="&apos;world/so_animalcare_horse.xml&apos;" Name="&apos;groomingBehavior&apos;" nodeLabel="28107298" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="init_fromLeft" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IncludeTree>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_grooming_right_horse" is_function="0">
    <Variables>
      <Variable name="init_fromLeft" type="_bool" values="false" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IncludeTree File="&apos;world/so_animalcare_horse.xml&apos;" Name="&apos;groomingBehavior&apos;" nodeLabel="43775828" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="init_fromLeft" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IncludeTree>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_water" is_function="0">
    <Variables>
      <Variable name="animObject" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="setAssideSlot" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <HandContentElement hand="Right" item="$item" allowAny="false" decisionLabel="Label1" saveVersion="2">
          <Search canSkip="1">
            <Function_findItemOnSlot linkName="&apos;bucket&apos;" npc="$this.id" searchOrigin="$__object.id" item="$item" nodeLabel="17137405" />
          </Search>
          <Exec canSkip="1">
            <Sequence>
              <WaitAction />
              <Sequence>
                <GraphSearch Origin="$__resource.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;slot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                  <Nodalyzer Quantifiers="Exists" Parent="" Child="$setAssideSlot" saveVersion="2" />
                </GraphSearch>
                <GraphSearch Origin="$__resource.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;animObject&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                  <Nodalyzer Quantifiers="Exists" Parent="" Child="$animObject" saveVersion="2" />
                </GraphSearch>
                <AnimationAction fragment="&apos;Well&apos;" tags="&apos;well&apos;" eventReferenceObject="" alignObject="$__resource.id" slaveObject="$animObject" resourceOverride="">
                  <EventData_place Slot="$setAssideSlot" name="&apos;placeBucket&apos;" />
                  <EventData_pickup Slot="$setAssideSlot" name="&apos;pickupBucket&apos;" />
                  <EventData_phaseitem Slot="$setAssideSlot" name="&apos;phaseBucket&apos;" />
                </AnimationAction>
              </Sequence>
              <JoinedUnstanceAction lockContext="$__object.id" lockName="&apos;waterLock&apos;" lockCount="2" timeout="&apos;-1&apos;" unstance="camper_horseWater" locationObject="$__object.id" slaveObject="" />
              <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
            </Sequence>
          </Exec>
        </HandContentElement>
      </Behavior>
    </Root>
    <ForestContainer>
      <AnimationAction fragment="&apos;BucketFill&apos;" tags="" eventReferenceObject="" alignObject="$__resource.id" slaveObject="" resourceOverride="" />
    </ForestContainer>
    <EditorData EventSet="">
      <Variables>
        <Variable name="animObject" comment="" />
        <Variable name="item" comment="" />
        <Variable name="setAssideSlot" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Search>
              <Function_findItemOnSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_findItemOnSlot>
            </Search>
            <Exec>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </WaitAction>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                    <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                    </Nodalyzer>
                  </GraphSearch>
                  <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                    <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                    </Nodalyzer>
                  </GraphSearch>
                  <AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <OutputBreakpoints />
                    <EventData_place hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </EventData_place>
                    <EventData_pickup hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </EventData_pickup>
                    <EventData_phaseitem hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </EventData_phaseitem>
                  </AnimationAction>
                </Sequence>
                <JoinedUnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <OutputBreakpoints />
                </JoinedUnstanceAction>
                <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Wait>
              </Sequence>
            </Exec>
          </HandContentElement>
        </Behavior>
      </Root>
      <Forest>
        <AnimationAction editorPosX="600" editorPosY="60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
          <OutputBreakpoints />
          <OutputBreakpoints />
        </AnimationAction>
      </Forest>
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_water_horse" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <WaitAction />
          <JoinedUnstanceAction lockContext="$__object.id" lockName="&apos;waterLock&apos;" lockCount="2" timeout="&apos;-1&apos;" unstance="camper_horseWater_horse" locationObject="$__object.id" slaveObject="" />
          <Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <JoinedUnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <OutputBreakpoints />
            </JoinedUnstanceAction>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="groomingBehavior" is_function="0">
    <Variables>
      <Variable name="entityType" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="horseBehavior" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="horseBehaviorTarget" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="init_checkFemaleTarget" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="init_horseSideDecisionTarget" type="_wuid" values="" isPersistent="0" form="array" />
      <Variable name="lockName" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="unstance" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="unstance_horse" type="_string" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="init_fromLeft" type="_bool" values="" isPersistent="0" form="single" requirementType="In" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Sequence>
            <Expression expressions="$init_checkFemaleTarget = $this.id" />
            <GetType WUID="$this.id" OutString="$entityType" ShowTrueIdentity="false" TreatPlayerAsNPC="true" />
            <IfElseCondition failOnCondition="false" condition="$entityType == &apos;NHNPC&apos;" saveVersion="2">
              <Then canSkip="1">
                <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;decisionLock&apos;" RunLogic="KeepRunning">
                  <Sequence>
                    <GetBehaviorHolders area="$__object.id" behaviors="&apos;use_grooming_left&apos;" targetVar="$init_horseSideDecisionTarget" />
                    <IfElseCondition failOnCondition="false" condition="#init_horseSideDecisionTarget &gt; 0" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$init_fromLeft = true, &#10;$horseBehavior = &apos;use_grooming_left&apos;," />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$init_fromLeft = false, &#10;$horseBehavior = &apos;use_grooming_right&apos;," />
                      </Else>
                    </IfElseCondition>
                    <GetBehaviorHolders area="$__object.id" behaviors="$horseBehavior" targetVar="$horseBehaviorTarget" />
                    <IfCondition failOnCondition="false" condition="#horseBehaviorTarget &gt; 0">
                      <Expression expressions="$init_checkFemaleTarget = $horseBehaviorTarget[0]" />
                    </IfCondition>
                  </Sequence>
                </Synchronize>
              </Then>
            </IfElseCondition>
            <HasGenderCheck Gender="Female" SoulWUID="$init_checkFemaleTarget" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <IfElseCondition failOnCondition="false" condition="$init_fromLeft" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$unstance = &apos;camper_horseGroomingLeft_female&apos;, &#10;$unstance_horse = &apos;camper_horseGroomingLeft_female_horse&apos;, &#10;$lockName = &apos;groomingLeftFemale&apos;," />
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$unstance = &apos;camper_horseGroomingRight_female&apos;, &#10;$unstance_horse = &apos;camper_horseGroomingRight_female_horse&apos;, &#10;$lockName = &apos;groomingRightFemale&apos;," />
                  </Else>
                </IfElseCondition>
              </Then>
              <Else canSkip="1">
                <IfElseCondition failOnCondition="false" condition="$init_fromLeft" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$unstance = &apos;camper_horseGroomingLeft&apos;, &#10;$unstance_horse = &apos;camper_horseGroomingLeft_horse&apos;, &#10;$lockName = &apos;groomingLeftMale&apos;," />
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$unstance = &apos;camper_horseGroomingRight&apos;, &#10;$unstance_horse = &apos;camper_horseGroomingRight_horse&apos;, &#10;$lockName = &apos;groomingRightMale&apos;," />
                  </Else>
                </IfElseCondition>
              </Else>
            </HasGenderCheck>
          </Sequence>
          <IfElseCondition failOnCondition="false" condition="$entityType == &apos;NHNPC&apos;" saveVersion="2">
            <Then canSkip="1">
              <JoinedUnstanceAction lockContext="$__object.id" lockName="$lockName" lockCount="2" timeout="&apos;-1&apos;" unstance="$unstance_horse" locationObject="$__object.id" slaveObject="" />
            </Then>
            <Else canSkip="1">
              <ChangeBehaviorStateElement smartEntity="$__object.id" behavior="&apos;use_grooming_horse&apos;" state="Enabled" allowAnyState="false">
                <Sequence>
                  <GetBehaviorHolders area="$__object.id" behaviors="&apos;use_grooming_horse&apos;" targetVar="$horseBehaviorTarget" />
                  <IfCondition failOnCondition="false" condition="#horseBehaviorTarget == 0">
                    <WaitAction />
                  </IfCondition>
                  <Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;decisionLock&apos;" RunLogic="KeepRunning">
                    <Sequence>
                      <JoinedUnstanceAction lockContext="$__object.id" lockName="$lockName" lockCount="2" timeout="&apos;-1&apos;" unstance="$unstance" locationObject="$__object.id" slaveObject="" />
                      <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                      <WaitAction />
                    </Sequence>
                  </Synchronize>
                </Sequence>
              </ChangeBehaviorStateElement>
            </Else>
          </IfElseCondition>
          <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="entityType" comment="" />
        <Variable name="horseBehavior" comment="" />
        <Variable name="horseBehaviorTarget" comment="" />
        <Variable name="init_checkFemaleTarget" comment="" />
        <Variable name="init_horseSideDecisionTarget" comment="" />
        <Variable name="lockName" comment="" />
        <Variable name="unstance" comment="" />
        <Variable name="unstance_horse" comment="" />
        <Variable name="init_fromLeft" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="240" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="this.id cannot be as default value, so there is init in expression" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <GetType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetType>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Synchronize hasInputBreakpoint="0" comment="we need to wait for master to decide from what side he want to go. Its okay if we will wait here becouse we are still playing animation in action" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence hasInputBreakpoint="0" comment="check what side is master and if its male or female" breakpointFlags="0">
                      <OutputBreakpoints />
                      <GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </GetBehaviorHolders>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                      <GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </GetBehaviorHolders>
                      <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </IfCondition>
                    </Sequence>
                  </Synchronize>
                </Then>
              </IfElseCondition>
              <HasGenderCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </IfElseCondition>
                </Then>
                <Else>
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </IfElseCondition>
                </Else>
              </HasGenderCheck>
            </Sequence>
            <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <JoinedUnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <OutputBreakpoints />
                </JoinedUnstanceAction>
              </Then>
              <Else>
                <ChangeBehaviorStateElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GetBehaviorHolders hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </GetBehaviorHolders>
                    <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <WaitAction hasInputBreakpoint="0" comment="if there is no horse in behavior, we can expect that horse have no behavior enabled" breakpointFlags="0">
                        <OutputBreakpoints />
                      </WaitAction>
                    </IfCondition>
                    <Synchronize hasInputBreakpoint="0" comment="synchronize with horse to decide what side we will go" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <JoinedUnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <OutputBreakpoints />
                        </JoinedUnstanceAction>
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                        <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </WaitAction>
                      </Sequence>
                    </Synchronize>
                  </Sequence>
                </ChangeBehaviorStateElement>
              </Else>
            </IfElseCondition>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="useWait" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <WaitAction />
          <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </WaitAction>
            <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Wait>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use_grooming_horse" is_function="0">
    <Variables>
      <Variable name="init_fromLeft" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IncludeTree File="&apos;world/so_animalcare_horse.xml&apos;" Name="&apos;groomingBehavior&apos;" nodeLabel="29839792" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="init_fromLeft" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </IncludeTree>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>