<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="cooking" is_function="0">
		<Variables>
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="moveDecision" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isHomeFireplace = EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;);" />
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<Parallel successMode="Any" failureMode="Any">
						<Sequence>
							<DistanceGate Origin="$__object.id" ReferencePt="$this.id" Low="5.000000" High="4000.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
								<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
							</DistanceGate>
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Sequence>
						<IfElseCondition failOnCondition="false" condition="$isHomeFireplace" saveVersion="2">
							<Then canSkip="1">
								<UnstanceAction unstance="housekeeper_cooking_home" locationObject="$__object.id" slaveObject="" />
							</Then>
							<Else canSkip="1">
								<UnstanceAction unstance="camper_cooking" locationObject="$__object.id" slaveObject="" />
							</Else>
						</IfElseCondition>
					</Parallel>
					<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onCooking&apos;" values="" />
					<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="moveDecision" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExecuteLua>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</DistanceGate>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
							<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<OutputBreakpoints />
									</UnstanceAction>
								</Then>
								<Else>
									<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<OutputBreakpoints />
									</UnstanceAction>
								</Else>
							</IfElseCondition>
						</Parallel>
						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantSendMessageToNPC>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="takingHerbs" is_function="0">
		<Variables>
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Left" item="$item" allowAny="false" decisionLabel="housekeeper_cooking_herbs" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<ErrorNode Message="&apos;trying to use search in takingHerbs HCE&apos;" />
					</Search>
					<Exec canSkip="1">
						<WaitAction />
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="item" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</Search>
						<Exec>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="takingIngredients" is_function="0">
		<Variables>
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Left" item="$item" allowAny="false" decisionLabel="housekeeper_cooking_ingredients" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<ErrorNode Message="&apos;trying to use search in takingIngredients HCE&apos;" />
					</Search>
					<Exec canSkip="1">
						<WaitAction />
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="item" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="70" editorPosY="90" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</Search>
						<Exec>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables>
			<Variable name="bowl" type="kettle:bowlFill" values="" isPersistent="0" form="single" />
			<Variable name="bowlIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="bowlMinTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="bowl_list" type="kettle:bowlFill" values="" isPersistent="1" form="array" />
			<Variable name="buffApplied" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="buffBreak" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="buffChangeTimestamp" type="kettle:buffChangeTimestamp" values="" isPersistent="0" form="single" />
			<Variable name="buffChangeTimestamp_list" type="kettle:buffChangeTimestamp" values="" isPersistent="1" form="array" />
			<Variable name="buffEraseTime" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="buffSearchEnabled" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="buffUserIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="buff_user" type="kettle:buffUser" values="" isPersistent="0" form="single" />
			<Variable name="buff_userList" type="kettle:buffUser" values="" isPersistent="1" form="array" />
			<Variable name="cauldronIndexView" type="kettle:cauldronProceduralPrefab" values="" isPersistent="0" form="single" />
			<Variable name="chimneySmoke" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="chimneySmokeArray" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="fireplaceFireCategory" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="foodItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="forceFireplaceOn" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="init_fullOnInit" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="init_proceduralObjects" type="_wuid" values="" isPersistent="0" form="associative" />
			<Variable name="init_sequenceTriggers" type="_wuid" values="" isPersistent="0" form="associative" />
			<Variable name="interactionItemsArray" type="interactionModule:itemSelection" values="" isPersistent="0" form="array" />
			<Variable name="kettleOwner" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="kettleType" type="enum:kettleType" values="" isPersistent="0" form="single" />
			<Variable name="prefabPhaseIndex" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="signal_onBowlFilled" type="kettle:signal:onBowlFilled" values="" isPersistent="0" form="single" />
			<Variable name="signal_onBuffAdd" type="kettle:signal:onBuffAdd" values="" isPersistent="0" form="single" />
			<Variable name="signal_onBuffCrimeNotice" type="kettle:signal:onBuffCrimeNotice" values="" isPersistent="0" form="single" />
			<Variable name="signal_onCooking" type="kettle:signal:onCooking" values="" isPersistent="0" form="single" />
			<Variable name="signal_onFireplacePhaseChange" type="kettle:signal:onFireplacePhaseChange" values="" isPersistent="0" form="single" />
			<Variable name="signal_onInteraction" type="interactionModule:onInteraction" values="" isPersistent="0" form="single" />
			<Variable name="signal_onKettleStateChange" type="kettle:signal:onKettleStateChange" values="" isPersistent="0" form="single" />
			<Variable name="signal_onMLODRefresh" type="kettle:signal:onMLODRefresh" values="" isPersistent="0" form="single" />
			<Variable name="signal_onNPCEating" type="kettle:signal:onNPCEating" values="" isPersistent="0" form="single" />
			<Variable name="signal_onPlayerEating" type="kettle:signal:onPlayerEating" values="" isPersistent="0" form="single" />
			<Variable name="signal_playerInteractionItemRequest" type="kettle:signal:onPlayerInteractionItemRequest" values="" isPersistent="0" form="single" />
			<Variable name="time_currentTick" type="_int64" values="" isPersistent="0" form="single" />
			<Variable name="volumeParams" type="perceptibleParams" values="" isPersistent="0" form="single" />
			<Variable name="volumeWuid" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="windowSmoke" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="windowSmokeArray" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="windowSmokeVariantIndex" type="_int" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;kettleTrigger&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<EvaLLyzer Expresion="$init_sequenceTriggers[$__link_kettleTrigger] = $__to" Quantifiers="ForAll" saveVersion="2" />
					</GraphSearch>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;proceduralObject&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<EvaLLyzer Expresion="$init_proceduralObjects[$__link_proceduralObject] = $__to" Quantifiers="ForAll" saveVersion="2" />
					</GraphSearch>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;chimneySmoke&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$chimneySmokeArray" saveVersion="2" />
					</GraphSearch>
					<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;windowSmoke&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$windowSmokeArray" saveVersion="2" />
					</GraphSearch>
					<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.this.id); &#10; &#10;data.init_fullOnInit = soEntity.Properties.Fireplace.bFullOnInit; &#10; &#10;if EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;) then &#10;  data.cauldronIndexView.category = &quot;fireplace_cauldron_home&quot;; &#10;  data.fireplaceFireCategory = &apos;fireplace_burning&apos;; &#10;else &#10;  data.cauldronIndexView.category = &quot;fireplace_cauldron_camp&quot;; &#10;  data.fireplaceFireCategory = &apos;fireplace_burning_camp&apos;; &#10;end &#10; &#10;if soEntity.cauldronType == &quot;goulash&quot; then &#10;  data.cauldronIndexView.empty = 1; &#10;  data.cauldronIndexView.half = 2; &#10;  data.cauldronIndexView.full = 3; &#10;elseif soEntity.cauldronType == &quot;lentil&quot; then &#10;  data.cauldronIndexView.empty = 1; &#10;  data.cauldronIndexView.half = 4; &#10;  data.cauldronIndexView.full = 5; &#10;else &#10;  data.cauldronIndexView.empty = 1; &#10;  data.cauldronIndexView.half = 6; &#10;  data.cauldronIndexView.full = 7; &#10;end" />
					<IsLoadedGate saveVersion="2">
						<Then canSkip="1">
							<IfCondition failOnCondition="false" condition="$persistentStorage.crimeNotice">
								<Sequence>
									<SmartObjSetBehaviorState behaviors="&apos;eating&apos;" state="Disabled" />
									<SmartObjSetBehaviorMaxInstances behaviors="&apos;eating&apos;" maxInstances="0" />
									<SmartObjSetBehaviorState behaviors="&apos;getMash&apos;" state="Disabled" />
									<AddLink From="$this.id" To="$this.id" Tag="&apos;tavern_poisonedKettle&apos;" Data="" LinkOpHandleMode="OverWrite" />
								</Sequence>
							</IfCondition>
						</Then>
						<Else canSkip="1">
							<Sequence>
								<GetTime TimeType="WorldTime" OutVar="$persistentStorage.lastOnCookingTick" Delta="" />
								<Expression expressions="$persistentStorage.fireState = $enum:kettleFireState.off," />
								<IfCondition failOnCondition="false" condition="!$init_fullOnInit">
									<Expression expressions="$persistentStorage.state = $enum:kettleState.empty" />
								</IfCondition>
							</Sequence>
						</Else>
					</IsLoadedGate>
					<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onKettleStateChange&apos;" values="state($persistentStorage.state)" />
					<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($persistentStorage.fireState),onInit(true)" />
					<Expression expressions="$kettleType = $enum:kettleType.kettle" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onInteraction" senderInfo="" inbox="&apos;interactionModule&apos;" condition="" answerVar="">
							<IfElseCondition failOnCondition="false" condition="$signal_onInteraction.id == $init_sequenceTriggers[&apos;kettle&apos;]" saveVersion="2">
								<Then canSkip="1">
									<IfElseCondition failOnCondition="false" condition="$signal_onInteraction.isHoldAction" saveVersion="2">
										<Then canSkip="1">
											<IfCondition failOnCondition="false" condition="$signal_onInteraction.usedItem ~= $__null">
												<AddInterrupt_player_applyBuff usedItem="$signal_onInteraction.usedItem" Target="$__player" Host="$this.id" Behavior="&apos;player_applyBuff&apos;" Priority="1" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" Aliveness="Alive" Privileged="false" FastForward="false" />
											</IfCondition>
										</Then>
										<Else canSkip="1">
											<IfElseCondition failOnCondition="false" condition="$persistentStorage.state == $enum:kettleState.empty" saveVersion="2">
												<Then canSkip="1">
													<ExecuteLua code="Game.SendInfoText(&apos;@fireplace_cannotEatFromEmptyKettle&apos;,false)" />
												</Then>
												<Else canSkip="1">
													<AddInterrupt Target="$__player" Host="$this.id" Behavior="&apos;player_eating&apos;" Priority="1" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" Aliveness="Alive" Privileged="false" FastForward="false" />
												</Else>
											</IfElseCondition>
										</Else>
									</IfElseCondition>
								</Then>
								<Else canSkip="1">
									<IfElseCondition failOnCondition="false" condition="$signal_onInteraction.isHoldAction" saveVersion="2">
										<Then canSkip="1">
											<Success />
										</Then>
										<Else canSkip="1">
											<IfCondition failOnCondition="false" condition="$signal_onInteraction.usedItem ~= $__null">
												<AddInterrupt_player_cooking count="-1" item="$signal_onInteraction.usedItem" Target="$__player" Host="$this.id" Behavior="&apos;player_cooking&apos;" Priority="1" IgnorePriorityOnPreviousInterrupt="false" urgency="Default" Aliveness="Alive" Privileged="false" FastForward="false" />
											</IfCondition>
										</Else>
									</IfElseCondition>
								</Else>
							</IfElseCondition>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onBuffAdd" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<IncludeTree File="&apos;world/so_fireplace.xml&apos;" Name="&apos;onBuffAddSignalArrive&apos;" nodeLabel="29626754" />
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onCooking" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<Sequence>
								<GetTime TimeType="WorldTime" OutVar="$persistentStorage.lastOnCookingTick" Delta="" />
								<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onKettleStateChange&apos;" values="state($enum:kettleState.full)" />
								<IfCondition failOnCondition="false" condition="$persistentStorage.crimeNotice">
									<Sequence>
										<Expression expressions="$persistentStorage.npcBuffedCount = 0, &#10;$persistentStorage.crimeNotice = false, &#10;$buffChangeTimestamp.time = $persistentStorage.lastOnCookingTick, &#10;$buffChangeTimestamp.type = $enum:buffTimestampType.clear," />
										<PushToArray array="$buffChangeTimestamp_list" value="$buffChangeTimestamp" direction="Back" />
										<SmartObjSetBehaviorState behaviors="&apos;eating&apos;" state="Enabled" />
										<SmartObjSetBehaviorMaxInstances behaviors="&apos;eating&apos;" maxInstances="-1" />
										<SmartObjSetBehaviorState behaviors="&apos;getMash&apos;" state="Enabled" />
										<RemoveLink From="$this.id" To="$this.id" Tag="&apos;tavern_poisonedKettle&apos;" LinkOpHandleMode="Success" />
										<EraseFromArray array="$buffChangeTimestamp_list" condition="$persistentStorage.lastOnCookingTick - $__value.time &gt;= $data:script_param[&apos;kettle_timeToBuffDisable&apos;].value" />
									</Sequence>
								</IfCondition>
							</Sequence>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onPlayerEating" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<Sequence>
								<Switch>
									<IfCondition failOnCondition="true" condition="$persistentStorage.playerEatingCount == 0">
										<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onKettleStateChange&apos;" values="state($enum:kettleState.eaten)" />
									</IfCondition>
									<IfCondition failOnCondition="true" condition="$persistentStorage.playerEatingCount == 3">
										<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onKettleStateChange&apos;" values="state($enum:kettleState.halfEmpty)" />
									</IfCondition>
									<DefaultBranch>
										<Success />
									</DefaultBranch>
								</Switch>
								<Expression expressions="$persistentStorage.playerEatingCount += 1, &#10;$volumeParams.visibility = 0.005, &#10;$volumeParams.conspicuousness = 1," />
								<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
								<GetOwner Object="$this.id" Owner="$kettleOwner" />
								<IfCondition failOnCondition="false" condition="$kettleOwner ~= $__player">
									<Sequence>
										<SpawnExpiringPerceptibleVolume Expiration="&apos;2s&apos;" TimerType="GameTime" Position="$init_sequenceTriggers[&apos;kettle&apos;]" Radius="0.700000" Height="1.000000" Label="&apos;crime_kettleEating&apos;" OnlyVisiblePointsFromCenter="false" PerceptibleParams="$volumeParams" OutWuid="$volumeWuid" />
										<AddLink From="$volumeWuid" To="$volumeWuid" Tag="&apos;kettle_volumeData&apos;" Data="target($this.id)" LinkOpHandleMode="OverWrite" />
									</Sequence>
								</IfCondition>
							</Sequence>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onMLODRefresh" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<Sequence>
								<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
								<For startIndex="0" endIndex="-1" step="1" array="$bowl_list" iterator="" value="$bowl" break="">
									<Expression expressions="$bowl.time = $time_currentTick" />
								</For>
								<IfCondition failOnCondition="false" condition="$time_currentTick &gt;= $persistentStorage.lastOnCookingTick + $data:script_param[&apos;kettle_timeToShutdown&apos;].value">
									<Sequence>
										<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onKettleStateChange&apos;" values="state($enum:kettleState.empty)" />
										<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.off)" />
									</Sequence>
								</IfCondition>
							</Sequence>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onNPCEating" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<IncludeTree File="&apos;world/so_fireplace.xml&apos;" Name="&apos;onEatingSignalArrive&apos;" nodeLabel="21307621" />
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onBuffCrimeNotice" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<Sequence>
								<Expression expressions="$persistentStorage.crimeNotice = true" />
								<SmartObjSetBehaviorState behaviors="&apos;eating&apos;" state="Disabled" />
								<SmartObjSetBehaviorMaxInstances behaviors="&apos;eating&apos;" maxInstances="0" />
								<SmartObjSetBehaviorState behaviors="&apos;getMash&apos;" state="Disabled" />
								<AddLink From="$this.id" To="$this.id" Tag="&apos;tavern_poisonedKettle&apos;" Data="" LinkOpHandleMode="OverWrite" />
							</Sequence>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onBowlFilled" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<Sequence>
								<Selector>
									<FindInArray array="$bowl_list" keyOut="$bowlIndex" condition="$__value.bowl == $signal_onBowlFilled.bowl" />
									<Sequence>
										<Expression expressions="$bowl.bowl = $signal_onBowlFilled.bowl, &#10;$bowlIndex = #bowl_list" />
										<PushToArray array="$bowl_list" value="$bowl" direction="Back" />
									</Sequence>
								</Selector>
								<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
								<Expression expressions="$bowl_list[$bowlIndex].time = $time_currentTick" />
							</Sequence>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onFireplacePhaseChange" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<IfCondition failOnCondition="false" condition="$signal_onFireplacePhaseChange.state == $enum:kettleFireState.on | ($signal_onFireplacePhaseChange.state == $enum:kettleFireState.off &amp; !$forceFireplaceOn)">
								<Sequence>
									<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
									<IfCondition failOnCondition="false" condition="!$signal_onFireplacePhaseChange.onInit">
										<Expression expressions="$persistentStorage.fireState = $signal_onFireplacePhaseChange.state, &#10;$persistentStorage.lastOnUseTick = $time_currentTick," />
									</IfCondition>
									<IfElseCondition failOnCondition="false" condition="$signal_onFireplacePhaseChange.state == $enum:kettleFireState.on" saveVersion="2">
										<Then canSkip="1">
											<Expression expressions="$prefabPhaseIndex = 2" />
										</Then>
										<Else canSkip="1">
											<Expression expressions="$prefabPhaseIndex = 1" />
										</Else>
									</IfElseCondition>
									<Sequence>
										<ExecuteLua code="local ohniste = XGenAIModule.GetEntityByWUID(data.init_proceduralObjects[&apos;fire&apos;])  &#10;Game.SetPrefabPhaseById(ohniste.id, data.fireplaceFireCategory, data.prefabPhaseIndex); &#10; &#10;local steam = XGenAIModule.GetEntityByWUID(data.init_proceduralObjects[&apos;steam&apos;])  &#10;Game.SetPrefabPhaseById(steam.id, &apos;fireplace_steam&apos;, data.prefabPhaseIndex);" />
										<For startIndex="0" endIndex="-1" step="1" array="$chimneySmokeArray" iterator="" value="$chimneySmoke" break="">
											<ExecuteLua code="local kour = XGenAIModule.GetEntityByWUID(data.chimneySmoke)  &#10;Game.SetPrefabPhaseById(kour.id, &apos;fireplace_chimneySmoke&apos;, data.prefabPhaseIndex);" />
										</For>
										<For startIndex="0" endIndex="-1" step="1" array="$windowSmokeArray" iterator="" value="$windowSmoke" break="">
											<IfElseCondition failOnCondition="false" condition="$signal_onFireplacePhaseChange.state == $enum:kettleFireState.on" saveVersion="2">
												<Then canSkip="1">
													<Sequence>
														<Expression expressions="$windowSmokeVariantIndex = $data:script_param[&apos;kettle_windowSmokeVariantCount&apos;].value" />
														<ExecuteLua code="local kour = XGenAIModule.GetEntityByWUID(data.windowSmoke); &#10;local index = math.random(0, data.windowSmokeVariantIndex-1) + 2; &#10;Game.SetPrefabPhaseById(kour.id, &apos;fireplace_windowSmoke&apos;, index);" />
													</Sequence>
												</Then>
												<Else canSkip="1">
													<ExecuteLua code="local kour = XGenAIModule.GetEntityByWUID(data.windowSmoke)  &#10;Game.SetPrefabPhaseById(kour.id, &apos;fireplace_windowSmoke&apos;, data.prefabPhaseIndex);" />
												</Else>
											</IfElseCondition>
										</For>
									</Sequence>
								</Sequence>
							</IfCondition>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_onKettleStateChange" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="">
							<Sequence>
								<Expression expressions="$persistentStorage.state = $signal_onKettleStateChange.state" />
								<Switch>
									<IfCondition failOnCondition="true" condition="$persistentStorage.state == $enum:kettleState.full">
										<Sequence>
											<ExecuteLua code="local cauldron = XGenAIModule.GetEntityByWUID(data.init_proceduralObjects[&apos;cauldron&apos;])  &#10;Game.SetPrefabPhaseById(cauldron.id, data.cauldronIndexView.category, data.cauldronIndexView.full);" />
											<Expression expressions="$persistentStorage.playerEatingCount = 0," />
											<GetTime TimeType="WorldTime" OutVar="$persistentStorage.lastOnCookingTick" Delta="" />
										</Sequence>
									</IfCondition>
									<IfCondition failOnCondition="true" condition="$persistentStorage.state == $enum:kettleState.eaten">
										<ExecuteLua code="local cauldron = XGenAIModule.GetEntityByWUID(data.init_proceduralObjects[&apos;cauldron&apos;])  &#10;Game.SetPrefabPhaseById(cauldron.id, data.cauldronIndexView.category, data.cauldronIndexView.full);" />
									</IfCondition>
									<IfCondition failOnCondition="true" condition="$persistentStorage.state == $enum:kettleState.halfEmpty">
										<ExecuteLua code="local cauldron = XGenAIModule.GetEntityByWUID(data.init_proceduralObjects[&apos;cauldron&apos;])  &#10;Game.SetPrefabPhaseById(cauldron.id, data.cauldronIndexView.category, data.cauldronIndexView.half);" />
									</IfCondition>
									<IfCondition failOnCondition="true" condition="$persistentStorage.state == $enum:kettleState.empty">
										<ExecuteLua code="local cauldron = XGenAIModule.GetEntityByWUID(data.init_proceduralObjects[&apos;cauldron&apos;])  &#10;Game.SetPrefabPhaseById(cauldron.id, data.cauldronIndexView.category, data.cauldronIndexView.empty);" />
									</IfCondition>
									<DefaultBranch>
										<Success />
									</DefaultBranch>
								</Switch>
							</Sequence>
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$interactionItemsArray" senderInfo="" inbox="&apos;interactionModule&apos;" condition="" answerVar="">
							<Success />
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$signal_playerInteractionItemRequest" senderInfo="" inbox="&apos;kettleInbox&apos;" condition="" answerVar="$interactionItemsArray">
							<Success />
						</ProcessMessage>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<IfGate atomic="false" condition="$persistentStorage.fireState == $enum:kettleFireState.on" RunLogic="KeepRunning">
							<Sequence>
								<Wait duration="&apos;10m&apos;" timeType="WorldTime" doFail="false" variation="" />
								<AtomicDecorator>
									<Sequence>
										<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
										<IfCondition failOnCondition="false" condition="$time_currentTick &gt;= $persistentStorage.lastOnUseTick + $data:script_param[&apos;kettle_timeToTurnOff&apos;].value">
											<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.off)" />
										</IfCondition>
									</Sequence>
								</AtomicDecorator>
							</Sequence>
						</IfGate>
					</While>
					<While doFail="false" propagateChildFail="false" condition="true">
						<LinkGate from="$this.id" to="$this.id" tag="&apos;forceFireplaceOn&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
							<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
								<Child canSkip="1">
									<Sequence>
										<AtomicDecorator>
											<Sequence>
												<Expression expressions="$forceFireplaceOn = true" />
												<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
											</Sequence>
										</AtomicDecorator>
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
									</Sequence>
								</Child>
								<OnFail canSkip="1">
									<Expression expressions="$forceFireplaceOn = false" />
								</OnFail>
							</FuseBox>
						</LinkGate>
					</While>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="bowl" comment="" />
				<Variable name="bowlIndex" comment="" />
				<Variable name="bowlMinTime" comment="" />
				<Variable name="bowl_list" comment="" />
				<Variable name="buffApplied" comment="" />
				<Variable name="buffBreak" comment="" />
				<Variable name="buffChangeTimestamp" comment="" />
				<Variable name="buffChangeTimestamp_list" comment="" />
				<Variable name="buffEraseTime" comment="" />
				<Variable name="buffSearchEnabled" comment="" />
				<Variable name="buffUserIndex" comment="" />
				<Variable name="buff_user" comment="" />
				<Variable name="buff_userList" comment="" />
				<Variable name="cauldronIndexView" comment="" />
				<Variable name="chimneySmoke" comment="" />
				<Variable name="chimneySmokeArray" comment="" />
				<Variable name="fireplaceFireCategory" comment="" />
				<Variable name="foodItem" comment="" />
				<Variable name="forceFireplaceOn" comment="" />
				<Variable name="init_fullOnInit" comment="" />
				<Variable name="init_proceduralObjects" comment="" />
				<Variable name="init_sequenceTriggers" comment="" />
				<Variable name="interactionItemsArray" comment="" />
				<Variable name="kettleOwner" comment="" />
				<Variable name="kettleType" comment="" />
				<Variable name="prefabPhaseIndex" comment="" />
				<Variable name="signal_onBowlFilled" comment="" />
				<Variable name="signal_onBuffAdd" comment="" />
				<Variable name="signal_onBuffCrimeNotice" comment="" />
				<Variable name="signal_onCooking" comment="" />
				<Variable name="signal_onFireplacePhaseChange" comment="" />
				<Variable name="signal_onInteraction" comment="" />
				<Variable name="signal_onKettleStateChange" comment="" />
				<Variable name="signal_onMLODRefresh" comment="" />
				<Variable name="signal_onNPCEating" comment="" />
				<Variable name="signal_onPlayerEating" comment="" />
				<Variable name="signal_playerInteractionItemRequest" comment="" />
				<Variable name="time_currentTick" comment="" />
				<Variable name="volumeParams" comment="" />
				<Variable name="volumeWuid" comment="" />
				<Variable name="windowSmoke" comment="" />
				<Variable name="windowSmokeArray" comment="" />
				<Variable name="windowSmokeVariantIndex" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<EvaLLyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</EvaLLyzer>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<EvaLLyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</EvaLLyzer>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SmartObjSetBehaviorState>
										<SmartObjSetBehaviorMaxInstances hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SmartObjSetBehaviorMaxInstances>
										<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SmartObjSetBehaviorState>
										<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</AddLink>
									</Sequence>
								</IfCondition>
							</Then>
							<Else>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</IfCondition>
								</Sequence>
							</Else>
						</IsLoadedGate>
						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantSendMessageToNPC>
						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantSendMessageToNPC>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
					</Sequence>
				</OnInit>
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddInterrupt_player_applyBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddInterrupt_player_applyBuff>
												</IfCondition>
											</Then>
											<Else>
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExecuteLua>
													</Then>
													<Else>
														<AddInterrupt hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</AddInterrupt>
													</Else>
												</IfElseCondition>
											</Else>
										</IfElseCondition>
									</Then>
									<Else>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</Then>
											<Else>
												<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddInterrupt_player_cooking hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddInterrupt_player_cooking>
												</IfCondition>
											</Else>
										</IfElseCondition>
									</Else>
								</IfElseCondition>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</IncludeTree>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</PushToArray>
											<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SmartObjSetBehaviorState>
											<SmartObjSetBehaviorMaxInstances hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SmartObjSetBehaviorMaxInstances>
											<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SmartObjSetBehaviorState>
											<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</RemoveLink>
											<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</EraseFromArray>
										</Sequence>
									</IfCondition>
								</Sequence>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantSendMessageToNPC>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantSendMessageToNPC>
										</IfCondition>
										<DefaultBranch>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</DefaultBranch>
									</Switch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<GetOwner hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetOwner>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SpawnExpiringPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</SpawnExpiringPerceptibleVolume>
											<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddLink>
										</Sequence>
									</IfCondition>
								</Sequence>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<For hasInputBreakpoint="0" comment="Nastavujeme current time kvuli issue kde NPC muze vychazet z MLODu kde nespousti chovani &quot;getMash&quot; a miska kterou by si vybral by mela stary cas se starym jiz davno nevalidnim buffem" breakpointFlags="0">
										<OutputBreakpoints />
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</For>
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantSendMessageToNPC>
											<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</InstantSendMessageToNPC>
										</Sequence>
									</IfCondition>
								</Sequence>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</IncludeTree>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<SmartObjSetBehaviorMaxInstances hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorMaxInstances>
									<SmartObjSetBehaviorState hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</SmartObjSetBehaviorState>
									<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</AddLink>
								</Sequence>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</FindInArray>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
											<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</PushToArray>
										</Sequence>
									</Selector>
									<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</GetTime>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</GetTime>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</IfCondition>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Then>
											<Else>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Else>
										</IfElseCondition>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExecuteLua>
											</For>
											<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
													<OutputBreakpoints />
													<Then>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Expression>
															<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ExecuteLua>
														</Sequence>
													</Then>
													<Else>
														<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</ExecuteLua>
													</Else>
												</IfElseCondition>
											</For>
										</Sequence>
									</Sequence>
								</IfCondition>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExecuteLua>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</GetTime>
											</Sequence>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
										</IfCondition>
										<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
										</IfCondition>
										<DefaultBranch>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</DefaultBranch>
									</Switch>
								</Sequence>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</ProcessMessage>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Wait>
									<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetTime>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantSendMessageToNPC>
											</IfCondition>
										</Sequence>
									</AtomicDecorator>
								</Sequence>
							</IfGate>
						</While>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Child>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
													<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</InstantSendMessageToNPC>
												</Sequence>
											</AtomicDecorator>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
									</Child>
									<OnFail>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</OnFail>
								</FuseBox>
							</LinkGate>
						</While>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="campCooking" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<UnstanceAction unstance="camper_cooking" locationObject="$__object.id" />
					<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onCooking&apos;" values="" />
					<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</UnstanceAction>
						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantSendMessageToNPC>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="campTakingHerbs" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$__resource.id" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<AnimationAction fragment="&apos;CookingScoopSpiceCollect&apos;" tags="" eventReferenceObject="" alignObject="" alignHelper="-2" context="" keepContext="false" />
					<AnimationAction fragment="&apos;CookingScoopSpiceToKettle&apos;" tags="" eventReferenceObject="" alignObject="$__object.id" alignHelper="-2" context="" keepContext="false" />
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</AnimationAction>
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</AnimationAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="campTakingIngredients" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<WaitAction />
					<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$__resource.id" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
					<UnstanceAction unstance="PickingHerbsNPC" locationObject="$__resource.id" />
					<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</WaitAction>
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</UnstanceAction>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="campTinkering" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<Sequence>
						<DistanceGate Origin="$__object.id" ReferencePt="$this.id" Low="5.000000" High="4000.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
							<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
						</DistanceGate>
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
					<AnimationAction fragment="&apos;CampFireplaceTinkering01&apos;" tags="" eventReferenceObject="" alignObject="$__object.id" slaveObject="" />
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantSendMessageToNPC>
							</DistanceGate>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</AnimationAction>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="campStoking" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<Sequence>
						<DistanceGate Origin="$__object.id" ReferencePt="$this.id" Low="5.000000" High="4000.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
							<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
						</DistanceGate>
						<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
					</Sequence>
					<AnimationAction fragment="&apos;CampFireplaceStoking&apos;" tags="" eventReferenceObject="" alignObject="$__object.id" slaveObject="" />
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantSendMessageToNPC>
							</DistanceGate>
							<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Wait>
						</Sequence>
						<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<OutputBreakpoints />
						</AnimationAction>
					</Parallel>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="eating" is_function="0">
		<Variables>
			<Variable name="alreadyDialog" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="alreadyPraying" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="chair" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="neighbour" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="neighbour_keepInBehavior" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="neighbour_successKey" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="spoonGuid" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="synchronize_keepInBehavior" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="synchronize_successKey" type="_string" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isHomeFireplace = EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;);" />
					<EntityContextCheck context="crime_punishmentMultiplier_veryHigh" target="$this.id" saveVersion="2">
						<Then canSkip="1">
							<Expression expressions="$spoonGuid = &apos;eb01336c-2ec5-468e-8293-2e7620b68f99&apos;" />
						</Then>
						<Else canSkip="1">
							<Expression expressions="$spoonGuid = &apos;30b2916b-37be-4d62-ad7f-2389b137fd59&apos;" />
						</Else>
					</EntityContextCheck>
					<Concatenation OutString="$synchronize_successKey" Pattern="&apos;$this.id;_behSuccess&apos;" />
					<Concatenation OutString="$synchronize_keepInBehavior" Pattern="&apos;$this.id;_keepInBehavior&apos;" />
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<EntityContextElement context="situation_suppressGossipParticipation" enabled="true">
					<Decision decisionLabel="housekeeper_prayBeforeEat" variable="$alreadyPraying" saveVersion="2">
						<Search canSkip="1">
							<Success />
						</Search>
						<Exec canSkip="1">
							<Decision decisionLabel="housekeeper_dialogBeforeEat" variable="$alreadyDialog" saveVersion="2">
								<Search canSkip="1">
									<Success />
								</Search>
								<Exec canSkip="1">
									<HandContentElement hand="Left" item="$item" allowAny="false" allowHomeSlotAutoReturn="false" decisionLabel="housekeeper_eating_bowl" useDecision="true" enabled="true" saveVersion="2">
										<Search canSkip="1">
											<ErrorNode Message="&apos;trying to use search in eating HCE&apos;" />
										</Search>
										<Exec canSkip="1">
											<StanceElement smartObject="$__resource.id" stance="sitting" allowAny="false" enabled="true">
												<Sequence>
													<IfCondition failOnCondition="false" condition="!$alreadyPraying">
														<Sequence>
															<AnimationAction fragment="&apos;EatingMashInPray&apos;" tags="" eventReferenceObject="" alignObject="" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
															<Expression expressions="$alreadyPraying = true" />
														</Sequence>
													</IfCondition>
													<IfCondition failOnCondition="false" condition="!$alreadyDialog">
														<Sequence>
															<SuppressFailure>
																<InstantSemaphore SemaphoreCount="1" LockManagerType="Local" SemaphoreName="&apos;dialogWhileEating&apos;">
																	<Sequence>
																		<GraphSearch Origin="$__resource.id" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;neighbor,oppositeNeighbor,benchOccupant&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="false">
																			<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
																				<Child0 canSkip="1">
																					<WUIDFilter WUID="$this.id" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
																				</Child0>
																			</NegationOp>
																			<LinkTagFilter tag="&apos;benchOccupant&apos;" prune="true" negprune="false" Parent="" Child="" Data="" />
																			<Nodalyzer Quantifiers="Exists" Parent="" Child="$neighbour" saveVersion="2" />
																		</GraphSearch>
																		<Sequence>
																			<Concatenation OutString="$neighbour_successKey" Pattern="&apos;$neighbour;_behSuccess&apos;" />
																			<Concatenation OutString="$neighbour_keepInBehavior" Pattern="&apos;$neighbour;_keepInBehavior&apos;" />
																			<UnstanceAction unstance="housekeeper_eat" locationObject="" slaveObject="">
																				<EventData_spawnitem ItemClassId="$spoonGuid" name="&apos;spawnItem&apos;" />
																			</UnstanceAction>
																			<Parallel successMode="All" failureMode="Any">
																				<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;5s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;5s&apos;" LockManagerType="Global" SemaphoreName="&apos;$neighbour_keepInBehavior&apos;" RunLogic="Halt">
																					<Function_speech_dialogInitiator alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" customParameters="" metarole="&apos;GOSSIP&apos;" preset="$enum:dialogPreset.ingame" recipient="$neighbour" recipientMetaroles="&apos;GOSSIP&apos;" nodeLabel="24623100" />
																				</Synchronize>
																				<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;5s&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;5s&apos;" LockManagerType="Global" SemaphoreName="&apos;$neighbour_successKey&apos;" RunLogic="KeepRunning">
																					<Success />
																				</Synchronize>
																				<UrgencyDecorator Urgency="Slow">
																					<UnstanceAction unstance="housekeeper_eat_waiting" locationObject="" slaveObject="">
																						<EventData_spawnitem ItemClassId="$spoonGuid" name="&apos;spawnItem&apos;" />
																					</UnstanceAction>
																				</UrgencyDecorator>
																			</Parallel>
																		</Sequence>
																	</Sequence>
																</InstantSemaphore>
															</SuppressFailure>
															<Expression expressions="$alreadyDialog = true" />
														</Sequence>
													</IfCondition>
													<Parallel successMode="Any" failureMode="Any">
														<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$synchronize_successKey&apos;" RunLogic="KeepRunning">
															<Success />
														</Synchronize>
														<Sequence>
															<AddLinkElement from="$__resource.id" to="$this.id" tag="&apos;benchOccupant&apos;" data="" enabled="true">
																<AddLinkElement from="$this.id" to="$__resource.id" tag="&apos;bench&apos;" data="" enabled="true">
																	<UrgencyDecorator Urgency="Slow">
																		<UnstanceAction unstance="housekeeper_eat" locationObject="" slaveObject="">
																			<EventData_spawnitem ItemClassId="$spoonGuid" name="&apos;spawnItem&apos;" />
																		</UnstanceAction>
																	</UrgencyDecorator>
																</AddLinkElement>
															</AddLinkElement>
															<Wait duration="&apos;15s&apos;" timeType="GameTime" doFail="false" variation="" />
															<Synchronize SemaphoreCount="2" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Global" SemaphoreName="&apos;$synchronize_successKey&apos;" RunLogic="KeepRunning">
																<Success />
															</Synchronize>
														</Sequence>
													</Parallel>
													<SuppressFailure>
														<InstantSynchronize SemaphoreCount="2" LockManagerType="Global" SemaphoreName="&apos;$synchronize_keepInBehavior&apos;" RunLogic="Halt">
															<Sequence>
																<UrgencyDecorator Urgency="Slow">
																	<UnstanceAction unstance="housekeeper_eat_waiting" locationObject="" slaveObject="">
																		<EventData_spawnitem ItemClassId="$spoonGuid" name="&apos;spawnItem&apos;" />
																	</UnstanceAction>
																</UrgencyDecorator>
																<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
															</Sequence>
														</InstantSynchronize>
													</SuppressFailure>
													<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onNPCEating&apos;" values="user($this.id),bowl($item)" />
												</Sequence>
											</StanceElement>
										</Exec>
									</HandContentElement>
								</Exec>
							</Decision>
						</Exec>
					</Decision>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="alreadyDialog" comment="" />
				<Variable name="alreadyPraying" comment="" />
				<Variable name="chair" comment="" />
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="item" comment="" />
				<Variable name="neighbour" comment="" />
				<Variable name="neighbour_keepInBehavior" comment="" />
				<Variable name="neighbour_successKey" comment="" />
				<Variable name="spoonGuid" comment="" />
				<Variable name="synchronize_keepInBehavior" comment="" />
				<Variable name="synchronize_successKey" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-20" editorPosY="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteLua>
						<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Then>
							<Else>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Else>
						</EntityContextCheck>
						<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Concatenation>
						<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Concatenation>
					</Sequence>
				</OnInit>
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</Search>
							<Exec>
								<Decision hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Search>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Search>
									<Exec>
										<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Search>
												<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ErrorNode>
											</Search>
											<Exec>
												<StanceElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AnimationAction>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</IfCondition>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<InstantSemaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Child0>
																						<WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</WUIDFilter>
																					</Child0>
																				</NegationOp>
																				<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</LinkTagFilter>
																				<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																				</Nodalyzer>
																			</GraphSearch>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Concatenation>
																				<Concatenation hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Concatenation>
																				<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<EventData_spawnitem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</EventData_spawnitem>
																				</UnstanceAction>
																				<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Function_speech_dialogInitiator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Function_speech_dialogInitiator>
																					</Synchronize>
																					<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Success>
																					</Synchronize>
																					<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																							<EventData_spawnitem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																								<OutputBreakpoints />
																							</EventData_spawnitem>
																						</UnstanceAction>
																					</UrgencyDecorator>
																				</Parallel>
																			</Sequence>
																		</Sequence>
																	</InstantSemaphore>
																</SuppressFailure>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
														</IfCondition>
														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Synchronize>
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<AddLinkElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EventData_spawnitem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</EventData_spawnitem>
																			</UnstanceAction>
																		</UrgencyDecorator>
																	</AddLinkElement>
																</AddLinkElement>
																<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Wait>
																<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Synchronize>
															</Sequence>
														</Parallel>
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<InstantSynchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<EventData_spawnitem hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</EventData_spawnitem>
																		</UnstanceAction>
																	</UrgencyDecorator>
																	<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Wait>
																</Sequence>
															</InstantSynchronize>
														</SuppressFailure>
														<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</InstantSendMessageToNPC>
													</Sequence>
												</StanceElement>
											</Exec>
										</HandContentElement>
									</Exec>
								</Decision>
							</Exec>
						</Decision>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="getMash" is_function="0">
		<Variables>
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isHomeFireplace = EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;);" />
			</OnInit>
			<Behavior canSkip="1">
				<EntityContextElement context="" enabled="true">
					<HandContentElement hand="Left" item="$item" allowAny="false" decisionLabel="housekeeper_eating_bowl" useDecision="true" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<ErrorNode Message="&apos;trying to use search in getMash HCE&apos;" />
						</Search>
						<Exec canSkip="1">
							<Sequence>
								<Parallel successMode="Any" failureMode="Any">
									<Sequence>
										<DistanceGate Origin="$__object.id" ReferencePt="$this.id" Low="5.000000" High="4000.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
											<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
										</DistanceGate>
										<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
									</Sequence>
									<IfElseCondition failOnCondition="false" condition="$isHomeFireplace" saveVersion="2">
										<Then canSkip="1">
											<AnimationAction fragment="&apos;GetMash&apos;" tags="" eventReferenceObject="$__object.id" alignObject="$__object.id" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</Then>
										<Else canSkip="1">
											<AnimationAction fragment="&apos;CookingScoopToBowl&apos;" tags="" eventReferenceObject="$__object.id" alignObject="$__object.id" slaveObject="" resourceOverride="" allowTorchForPlayer="false" />
										</Else>
									</IfElseCondition>
								</Parallel>
								<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onBowlFilled&apos;" values="bowl($item)" />
							</Sequence>
						</Exec>
					</HandContentElement>
				</EntityContextElement>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_findItemOnSlot linkName="&apos;bowlSlots&apos;" npc="$this.id" searchOrigin="$__object.id" item="$item" nodeLabel="45830351" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="item" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-40" editorPosY="150" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExecuteLua>
				</OnInit>
				<Behavior>
					<EntityContextElement hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ErrorNode>
							</Search>
							<Exec>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</InstantSendMessageToNPC>
											</DistanceGate>
											<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Wait>
										</Sequence>
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</Then>
											<Else>
												<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AnimationAction>
											</Else>
										</IfElseCondition>
									</Parallel>
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</Sequence>
							</Exec>
						</HandContentElement>
					</EntityContextElement>
				</Behavior>
			</Root>
			<Forest>
				<Function_findItemOnSlot editorPosX="420" editorPosY="-50" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_findItemOnSlot>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="getWood" is_function="0">
		<Variables>
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isHomeFireplace = EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;);" />
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<HandContentElement hand="Left" item="$item" allowAny="false" decisionLabel="housekeeper_fireplace_wood" useDecision="true" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<ErrorNode Message="&apos;trying to use search in getWood HCE&apos;" />
						</Search>
						<Exec canSkip="1">
							<WaitAction />
						</Exec>
					</HandContentElement>
					<Parallel successMode="Any" failureMode="Any">
						<Sequence>
							<DistanceGate Origin="$__object.id" ReferencePt="$this.id" Low="5.000000" High="4000.000000" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
								<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
							</DistanceGate>
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
						</Sequence>
						<WaitAction />
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_findItemOnSlot linkName="&apos;firewood&apos;" npc="$this.id" searchOrigin="$__object.id" item="$item" nodeLabel="94300666" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="item" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="20" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExecuteLua>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ErrorNode>
							</Search>
							<Exec>
								<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</WaitAction>
							</Exec>
						</HandContentElement>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</DistanceGate>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
							<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</WaitAction>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<Function_findItemOnSlot editorPosX="370" editorPosY="-290" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_findItemOnSlot>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onRequest" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<IfCondition failOnCondition="false" condition="$__bodyInfo.isMonsterLod">
					<DistanceCondition Origin="$this.id" ReferencePt="$__bodyInfo.id" Low="80.000000" High="40000.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
						<Switch>
							<IfCondition failOnCondition="false" condition="$__behaviorName == &apos;eating&apos; | $__behaviorName == &apos;getMash&apos;">
								<Sequence>
									<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onNPCEating&apos;" values="user($__bodyInfo.id),inMLOD(true)" />
									<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
								</Sequence>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$__behaviorName == &apos;campCooking&apos; | $__behaviorName == &apos;cooking&apos;">
								<Sequence>
									<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onCooking&apos;" values="" />
									<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
								</Sequence>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$__behaviorName == &apos;getWood&apos;">
								<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
							</IfCondition>
							<DefaultBranch>
								<Success />
							</DefaultBranch>
						</Switch>
					</DistanceCondition>
				</IfCondition>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root editorPosX="-40" editorPosY="90" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<DistanceCondition hasInputBreakpoint="0" comment="we want NPCs to &quot;use&quot; this object only if they are nearby. We dont want to poison NPC on his way from other side of map!" breakpointFlags="0">
							<OutputBreakpoints />
							<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
									</Sequence>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
									</Sequence>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</IfCondition>
								<DefaultBranch>
									<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Success>
								</DefaultBranch>
							</Switch>
						</DistanceCondition>
					</IfCondition>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onMLWakeUp" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onMLODRefresh&apos;" values="" />
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</InstantSendMessageToNPC>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="player_eating" is_function="0">
		<Variables>
			<Variable name="animationTags" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="foodItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="helperId" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="isItemUsed" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<AtomicDecorator>
					<Sequence>
						<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onNPCEating&apos;" values="user($this.id),bowl($__null)" />
						<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onPlayerEating&apos;" values="" />
						<SendAIConceptSignal_kettle_playerEating />
					</Sequence>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="animationTags" comment="" />
				<Variable name="foodItem" comment="" />
				<Variable name="helperId" comment="" />
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="isItemUsed" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-50" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantSendMessageToNPC>
							<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</InstantSendMessageToNPC>
							<SendAIConceptSignal_kettle_playerEating hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</SendAIConceptSignal_kettle_playerEating>
						</Sequence>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="player_applyBuff" is_function="0">
		<Variables>
			<Variable name="animationTags" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="buff" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="helperId" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="usedItem" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isHomeFireplace = EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;);" />
			</OnInit>
			<Behavior canSkip="1">
				<AtomicDecorator>
					<Sequence>
						<GetItemProperty itemId="$usedItem" property="ConsumableBuff" result="$buff" />
						<IfCondition failOnCondition="false" condition="$buff ~= &apos;&apos;">
							<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onBuffAdd&apos;" values="guid($buff)" />
						</IfCondition>
						<RemoveItem Item="$usedItem" ItemGUID="" Source="$__player" Amount="1" FailOnDoesntExist="false" NotifyUI="true" />
					</Sequence>
				</AtomicDecorator>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="player_applyBuff" EventSet="">
			<Variables>
				<Variable name="animationTags" comment="" />
				<Variable name="buff" comment="" />
				<Variable name="helperId" comment="" />
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="usedItem" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExecuteLua>
				</OnInit>
				<Behavior>
					<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GetItemProperty hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</GetItemProperty>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</InstantSendMessageToNPC>
							</IfCondition>
							<RemoveItem hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</RemoveItem>
						</Sequence>
					</AtomicDecorator>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="player_cooking" is_function="0">
		<Variables>
			<Variable name="index" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="interactionItemsArray" type="interactionModule:itemSelection" values="" isPersistent="0" form="array" />
			<Variable name="isHomeFireplace" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="count" type="_int" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<ExecuteLua code="local soEntity = XGenAIModule.GetEntityByWUID(data.__object.id); &#10;data.isHomeFireplace = EntityUtils.GetScriptProperty(soEntity,&apos;isHomeFireplace&apos;);" />
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<SendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onPlayerInteractionItemRequest&apos;" values="" timeType="GameTime" timeoutType="OnProcessed" timeout="&apos;-1&apos;" answer="$interactionItemsArray" />
					<InstantSendMessageToNPC target="$__object.id" type="&apos;kettle:signal:onFireplacePhaseChange&apos;" values="state($enum:kettleFireState.on)" />
					<IfElseCondition failOnCondition="false" condition="$isHomeFireplace" saveVersion="2">
						<Then canSkip="1">
							<AnimationAction fragment="&apos;CookingPanKitchen&apos;" tags="" eventReferenceObject="" alignObject="$__object.id" slaveObject="" resourceOverride="&apos;playerUse&apos;" allowTorchForPlayer="true" />
						</Then>
						<Else canSkip="1">
							<AnimationAction fragment="&apos;CookingPanCamp&apos;" tags="" eventReferenceObject="" alignObject="$__object.id" slaveObject="" resourceOverride="&apos;playerUse&apos;" allowTorchForPlayer="true" />
						</Else>
					</IfElseCondition>
					<For startIndex="0" endIndex="-1" step="1" array="$interactionItemsArray" iterator="$index" value="" break="">
						<PrepareFood PrepareType="Cook" Chef="$__player" Items="$interactionItemsArray[$index].id" Amount="-1" />
					</For>
					<ExecuteSoundTrigger entity="$__object.id" triggerName="&apos;ui_inv_item_cooking&apos;" stop="false" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData Signature="player_cooking" EventSet="">
			<Variables>
				<Variable name="index" comment="" />
				<Variable name="interactionItemsArray" comment="" />
				<Variable name="isHomeFireplace" comment="" />
				<Variable name="count" comment="" />
				<Variable name="item" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</ExecuteLua>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SendMessageToNPC>
						<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantSendMessageToNPC>
						<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AnimationAction>
							</Then>
							<Else>
								<AnimationAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AnimationAction>
							</Else>
						</IfElseCondition>
						<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<PrepareFood hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</PrepareFood>
						</For>
						<ExecuteSoundTrigger hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</ExecuteSoundTrigger>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onEatingSignalArrive" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
					<Selector>
						<FindInArray array="$buff_userList" keyOut="$buffUserIndex" condition="$__value.user == $signal_onNPCEating.user" />
						<Sequence>
							<Expression expressions="$buffUserIndex = #buff_userList, &#10;$buff_user.user = $signal_onNPCEating.user, &#10;$buff_user.time = 0," />
							<PushToArray array="$buff_userList" value="$buff_user" direction="Back" />
						</Sequence>
					</Selector>
					<Selector>
						<FindInArray array="$bowl_list" keyOut="$bowlIndex" condition="$__value.bowl == $signal_onNPCEating.bowl" />
						<Expression expressions="$bowlIndex = -1" />
					</Selector>
					<Expression expressions="$buffApplied = false, &#10;$buffBreak = false, &#10;$buffSearchEnabled = false," />
					<For startIndex="-1" endIndex="-1" step="-1" array="$buffChangeTimestamp_list" iterator="" value="$buffChangeTimestamp" break="$buffBreak">
						<Sequence>
							<IfCondition failOnCondition="false" condition="!$buffSearchEnabled">
								<IfElseCondition failOnCondition="false" condition="$bowlIndex == -1" saveVersion="2">
									<Then canSkip="1">
										<Expression expressions="$buffSearchEnabled = true" />
									</Then>
									<Else canSkip="1">
										<IfCondition failOnCondition="false" condition="$buffChangeTimestamp.time &lt; $bowl_list[$bowlIndex].time">
											<Expression expressions="$buffSearchEnabled = true" />
										</IfCondition>
									</Else>
								</IfElseCondition>
							</IfCondition>
							<IfCondition failOnCondition="false" condition="$buffSearchEnabled">
								<IfElseCondition failOnCondition="false" condition="$buffChangeTimestamp.type == $enum:buffTimestampType.buffAdded" saveVersion="2">
									<Then canSkip="1">
										<IfCondition failOnCondition="false" condition="$buffChangeTimestamp.time &gt;= $buff_userList[$buffUserIndex].time">
											<Sequence>
												<AddBuff SoulWUID="$buff_userList[$buffUserIndex].user" BuffGUID="$buffChangeTimestamp.guid" />
												<Expression expressions="$buffApplied = true" />
											</Sequence>
										</IfCondition>
									</Then>
									<Else canSkip="1">
										<Expression expressions="$buffBreak = true" />
									</Else>
								</IfElseCondition>
							</IfCondition>
						</Sequence>
					</For>
					<Expression expressions="$buff_userList[$buffUserIndex].time = $time_currentTick" />
					<IfCondition failOnCondition="false" condition="$buffApplied &amp; $signal_onNPCEating.user ~= $__player">
						<Sequence>
							<Expression expressions="$persistentStorage.npcBuffedCount += 1" />
							<IfCondition failOnCondition="false" condition="$signal_onNPCEating.inMLOD &amp; $persistentStorage.npcBuffedCount &gt;= $data:script_param[&apos;kettle_mlodNpcCountToTriggerCrime&apos;].value">
								<InstantSendMessageToNPC target="$this.id" type="&apos;kettle:signal:onBuffCrimeNotice&apos;" values="" />
							</IfCondition>
						</Sequence>
					</IfCondition>
					<AddLink From="$signal_onNPCEating.user" To="$this.id" Tag="&apos;kettle_lastUsed&apos;" Data="target($this.id),time($time_currentTick),type($kettleType)" LinkOpHandleMode="OverWrite" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfCondition failOnCondition="false" condition="!$buffSearchEnabled &amp; ($bowlIndex == -1 | $buffChangeTimestamp.time &lt; $bowl_list[$bowlIndex].time)" />
			<EraseFromArray array="$buffChangeTimestamp_list" condition="$time_currentTick - $__value.time &gt;= $data:script_param[&apos;kettle_timeToBuffDisable&apos;].value" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables />
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetTime>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</FindInArray>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PushToArray>
							</Sequence>
						</Selector>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</FindInArray>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Selector>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="Hledani startovniho indexu. Pokud user nema misku, chceme pouzit to co ma kotlik aktualne u sebe, jinak bereme cas misky" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Then>
										<Else>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
										</Else>
									</IfElseCondition>
								</IfCondition>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<AddBuff hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</AddBuff>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</IfCondition>
										</Then>
										<Else>
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</Else>
									</IfElseCondition>
								</IfCondition>
							</Sequence>
						</For>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</InstantSendMessageToNPC>
								</IfCondition>
							</Sequence>
						</IfCondition>
						<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</AddLink>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<IfCondition editorPosX="910" editorPosY="-70" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</IfCondition>
				<EraseFromArray editorPosX="-70" editorPosY="150" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</EraseFromArray>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onBuffAddSignalArrive" is_function="0">
		<Variables />
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GetTime TimeType="WorldTime" OutVar="$time_currentTick" Delta="" />
					<Expression expressions="$buffChangeTimestamp.guid = $signal_onBuffAdd.guid, &#10;$buffChangeTimestamp.time = $time_currentTick, &#10;$buffChangeTimestamp.type = $enum:buffTimestampType.buffAdded, &#10;$volumeParams.visibility = 0.005, &#10;$volumeParams.conspicuousness = 1," />
					<PushToArray array="$buffChangeTimestamp_list" value="$buffChangeTimestamp" direction="Back" />
					<VariableExistsGate VarToTest="$init_sequenceTriggers[&apos;kettle&apos;]" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<SpawnExpiringPerceptibleVolume Expiration="&apos;4s&apos;" TimerType="GameTime" Position="$init_sequenceTriggers[&apos;kettle&apos;]" Radius="0.700000" Height="1.000000" Label="&apos;crime_kettlePoisoning&apos;" OnlyVisiblePointsFromCenter="false" PerceptibleParams="$volumeParams" OutWuid="$volumeWuid" />
						</Then>
						<Else canSkip="1">
							<SpawnExpiringPerceptibleVolume Expiration="&apos;4s&apos;" TimerType="GameTime" Position="$init_sequenceTriggers[&apos;trigger&apos;]" Radius="0.700000" Height="1.000000" Label="&apos;crime_kettlePoisoning&apos;" OnlyVisiblePointsFromCenter="false" PerceptibleParams="$volumeParams" OutWuid="$volumeWuid" />
						</Else>
					</VariableExistsGate>
					<VariableExistsGate VarToTest="$isWineBarrel" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
						<Then canSkip="1">
							<AddLink From="$volumeWuid" To="$volumeWuid" Tag="&apos;kettle_volumeData&apos;" Data="target($this.id),type($enum:kettleType.wineBarrel)" LinkOpHandleMode="OverWrite" />
						</Then>
						<Else canSkip="1">
							<AddLink From="$volumeWuid" To="$volumeWuid" Tag="&apos;kettle_volumeData&apos;" Data="target($this.id)" LinkOpHandleMode="OverWrite" />
						</Else>
					</VariableExistsGate>
					<SendAIConceptSignal_kettle_onBuffAddSignalArriveNotification object="$this.id" buffGUID="$signal_onBuffAdd.guid" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="signal_onBuffAdd" comment="" />
			</Variables>
			<ForwardDeclarations>
				<Variable name="signal_onBuffAdd" type="kettle:signal:onBuffAdd" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
			</ForwardDeclarations>
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GetTime hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</GetTime>
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</PushToArray>
						<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<SpawnExpiringPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SpawnExpiringPerceptibleVolume>
							</Then>
							<Else>
								<SpawnExpiringPerceptibleVolume hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</SpawnExpiringPerceptibleVolume>
							</Else>
						</VariableExistsGate>
						<VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Then>
								<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AddLink>
							</Then>
							<Else>
								<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</AddLink>
							</Else>
						</VariableExistsGate>
						<SendAIConceptSignal_kettle_onBuffAddSignalArriveNotification hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SendAIConceptSignal_kettle_onBuffAddSignalArriveNotification>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="markAsCrime" is_function="1">
		<Variables />
		<Parameters>
			<Variable name="kettle" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<Move stopWithinDistance="1.500000" stopDistanceVariation="0.500000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" destinationSpecification="$kettle" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="kettle" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Move>
					</Sequence>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="dailyCheck" is_function="0">
		<Variables>
			<Variable name="item" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<HandContentElement hand="Left" item="$item" allowAny="false" decisionLabel="housekeeper_eating_bowl" useDecision="true" enabled="true" saveVersion="2">
					<Search canSkip="1">
						<ErrorNode Message="&apos;trying to use search in dailyCheck HCE&apos;" />
					</Search>
					<Exec canSkip="1">
						<SuppressFailure>
							<Function_crime_makeDailyChecks initiator="$enum:switch_interruptInitiator.scheduler" previousReaction="$enum:crime_reactionKind.unknown" nodeLabel="50524106" />
						</SuppressFailure>
					</Exec>
				</HandContentElement>
			</Behavior>
		</Root>
		<ForestContainer>
			<Function_findItemOnSlot linkName="&apos;bowlSlots&apos;" npc="$this.id" searchOrigin="$__object.id" item="$item" nodeLabel="42092935" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="item" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Search>
							<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ErrorNode>
						</Search>
						<Exec>
							<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Function_crime_makeDailyChecks hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Function_crime_makeDailyChecks>
							</SuppressFailure>
						</Exec>
					</HandContentElement>
				</Behavior>
			</Root>
			<Forest>
				<Function_findItemOnSlot editorPosX="140" editorPosY="-240" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</Function_findItemOnSlot>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>