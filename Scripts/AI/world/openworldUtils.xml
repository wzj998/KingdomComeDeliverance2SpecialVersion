<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="stopMinigames">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.alchemy">
            <StopMinigame type="alchemy" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.bookTranscription">
            <StopMinigame type="bookTranscription" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.dice">
            <StopMinigame type="dice" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.herbGathering">
            <StopMinigame type="herbGathering" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.holedigging">
            <StopMinigame type="holeDigging" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.lockpicking">
            <StopMinigame type="lockPicking" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.pickpocketing">
            <StopMinigame type="pickpocketing" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.reading">
            <StopMinigame type="reading" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.sharpening">
            <StopMinigame type="sharpening" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$t_stopMinigames_params.building">
            <StopMinigame type="building" NPC="$__player" object="" typeOut="" FailStop="false" />
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables />
      <ForwardDeclarations>
        <Variable name="t_stopMinigames_params" type="minigame:stop" values="" form="single" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="220" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition editorPosX="360" editorPosY="-440" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="-440" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="-330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="-330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="-220" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="-220" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="-110" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="-110" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="110" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="110" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="220" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="220" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="440" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="440" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
            <IfCondition editorPosX="360" editorPosY="550" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <StopMinigame editorPosX="570" editorPosY="550" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </StopMinigame>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="teleportToReappearanceSpot" is_function="0">
    <Variables>
      <Variable name="t_reappearanceSpot" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <IncludeTree File="&apos;world/openworldUtils.xml&apos;" Name="&apos;selectReappearanceSpot&apos;" nodeLabel="30509344" />
          <TeleportAction Position="$t_reappearanceSpot" EndInterruptOnActionStart="false" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="t_reappearanceSpot" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </IncludeTree>
            <TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </TeleportAction>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="waitUntilNotRendered">
    <Variables>
      <Variable name="notSeenByPlayer" type="_bool" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <LoopUntil until="Success" attemptCount="-1">
          <Sequence>
            <NotSeenByPlayer target="$this.id" timespan="&apos;4s&apos;" result="$notSeenByPlayer" />
            <IfElseCondition failOnCondition="false" condition="$notSeenByPlayer" saveVersion="2">
              <Then canSkip="1">
                <Success />
              </Then>
              <Else canSkip="1">
                <Sequence>
                  <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                  <Fail />
                </Sequence>
              </Else>
            </IfElseCondition>
          </Sequence>
        </LoopUntil>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="notSeenByPlayer" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <LoopUntil editorPosX="220" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="Wait until the NPC is not seen by the player for some time" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence editorPosX="390" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <NotSeenByPlayer editorPosX="510" editorPosY="-50" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </NotSeenByPlayer>
              <IfElseCondition editorPosX="510" editorPosY="40" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Success editorPosX="720" editorPosY="-40" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Then>
                <Else>
                  <Sequence editorPosX="720" editorPosY="40" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Wait editorPosX="840" editorPosY="30" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                    <Fail editorPosX="840" editorPosY="140" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Fail>
                  </Sequence>
                </Else>
              </IfElseCondition>
            </Sequence>
          </LoopUntil>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="buildReappearanceSpots_npc" is_function="0">
    <Variables>
      <Variable name="area" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="home" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="work" type="_wuid" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <SuppressFailure>
            <Sequence>
              <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <LinkTagFilter tag="&apos;Home&apos;" prune="true" negprune="unknown" Parent="" Child="$home" Data="" />
                <ExistPath Origin="$home" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;inside&apos;" prune="true" negprune="unknown" Parent="" Child="$insidePoint" Data="" />
                </ExistPath>
              </GraphSearch>
              <VarOperation varName="$t_reappearanceSpots" targetVarName="" operation="PushBack" argument="($insidePoint)" />
            </Sequence>
          </SuppressFailure>
          <SuppressFailure>
            <Sequence>
              <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <LinkTagFilter tag="&apos;Work&apos;" prune="true" negprune="unknown" Parent="" Child="$work" Data="" />
                <ExistPath Origin="$work" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <LinkTagFilter tag="&apos;inside&apos;" prune="true" negprune="unknown" Parent="" Child="$insidePoint" Data="" />
                </ExistPath>
              </GraphSearch>
              <VarOperation varName="$t_reappearanceSpots" targetVarName="" operation="PushBack" argument="($insidePoint)" />
            </Sequence>
          </SuppressFailure>
          <SuppressFailure>
            <IsInsideAreaWithLabel Position="$this.id" Label="&apos;settlement&apos;" Area="$area" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <GraphSearch Origin="$area" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;inside&apos;" prune="true" negprune="unknown" Parent="" Child="$insidePoint" Data="" />
                  </GraphSearch>
                  <VarOperation varName="$t_reappearanceSpots" targetVarName="" operation="PushBack" argument="($insidePoint)" />
                </Sequence>
              </Then>
            </IsInsideAreaWithLabel>
          </SuppressFailure>
          <SuppressFailure>
            <IsInsideAreaWithLabel Position="$this.id" Label="&apos;camp&apos;" Area="$area" FailSubtMissing="false" saveVersion="2">
              <Then canSkip="1">
                <Sequence>
                  <GraphSearch Origin="$area" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <LinkTagFilter tag="&apos;inside&apos;" prune="true" negprune="unknown" Parent="" Child="$insidePoint" Data="" />
                  </GraphSearch>
                  <VarOperation varName="$t_reappearanceSpots" targetVarName="" operation="PushBack" argument="($insidePoint)" />
                </Sequence>
              </Then>
            </IsInsideAreaWithLabel>
          </SuppressFailure>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="area" comment="" />
        <Variable name="home" comment="" />
        <Variable name="work" comment="" />
        <Variable name="t_reappearanceSpots" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_reappearanceSpots" type="_wuid" values="" isPersistent="0" form="array" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="Home inside point" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </LinkTagFilter>
                  <ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                  </ExistPath>
                </GraphSearch>
                <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </VarOperation>
              </Sequence>
            </SuppressFailure>
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="Work inside point" breakpointFlags="0">
                  <OutputBreakpoints />
                  <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </LinkTagFilter>
                  <ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                  </ExistPath>
                </GraphSearch>
                <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </VarOperation>
              </Sequence>
            </SuppressFailure>
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="Inside &apos;settlement&apos; label" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                    </GraphSearch>
                    <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </VarOperation>
                  </Sequence>
                </Then>
              </IsInsideAreaWithLabel>
            </SuppressFailure>
            <SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="Inside &apos;encampment&apos; label" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </LinkTagFilter>
                    </GraphSearch>
                    <VarOperation hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </VarOperation>
                  </Sequence>
                </Then>
              </IsInsideAreaWithLabel>
            </SuppressFailure>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="buildReappearanceSpots_horse">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <SuppressFailure>
          <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;horseHome&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$t_reappearanceSpots" saveVersion="2" />
          </GraphSearch>
        </SuppressFailure>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables />
      <ForwardDeclarations>
        <Variable name="t_reappearanceSpots" type="wuid" values="" form="array" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <SuppressFailure editorPosX="220" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch editorPosX="360" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="Horse" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter editorPosX="700" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
              <Nodalyzer editorPosX="700" editorPosY="130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
            </GraphSearch>
          </SuppressFailure>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="controlAreaTrespass">
    <Variables>
      <Variable name="areaWasRemoved" type="_bool" values="" form="single" />
      <Variable name="atLeastOneRequestWaitForDudeToLeaveArea" type="_bool" values="" form="single" />
      <Variable name="checkForDudeOutsideAreas" type="_bool" values="" form="single" />
      <Variable name="currentLevel" type="enum:trespassLevel" values="" form="single" />
      <Variable name="index" type="_int" values="" form="single" />
      <Variable name="override" type="trespass:override:record" values="" form="single" />
      <Variable name="overrides" type="trespass:override:record" values="" isPersistent="1" form="array" />
      <Variable name="request" type="trespass:override:request" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <For startIndex="-1" endIndex="-1" step="-1" array="$overrides" iterator="$index" value="$override" break="">
            <IfElseCondition failOnCondition="false" condition="$override.persistent" saveVersion="2">
              <Then canSkip="1">
                <IfCondition failOnCondition="false" condition="$override.removeWhenDudeOutsideArea~=$__null">
                  <Expression expressions="$checkForDudeOutsideAreas=true" />
                </IfCondition>
              </Then>
              <Else canSkip="1">
                <VarOperation varName="$overrides" targetVarName="" operation="Erase" argument="$index" />
              </Else>
            </IfElseCondition>
          </For>
          <Parallel successMode="Any" failureMode="Any">
            <While doFail="false" propagateChildFail="false" condition="true">
              <Sequence>
                <Expression expressions="$currentLevel=$t_controlAreaTrespass_defaultLevel" />
                <For startIndex="0" endIndex="-1" step="1" array="$overrides" iterator="" value="$override" break="">
                  <IfCondition failOnCondition="false" condition="($override.orientation==$enum:trespassOverrideOrientation.atLeast&amp;$override.level&gt;$currentLevel)|&#10;($override.orientation==$enum:trespassOverrideOrientation.atMost&amp;$override.level&lt;$currentLevel)">
                    <Expression expressions="$currentLevel=$override.level" />
                  </IfCondition>
                </For>
                <Sequence>
                  <IfElseCondition failOnCondition="false" condition="$currentLevel&lt;=$enum:trespassLevel.none" saveVersion="2">
                    <Then canSkip="1">
                      <RemoveAreaLabel Area="$this.id" Label="&apos;private&apos;" />
                    </Then>
                    <Else canSkip="1">
                      <AddAreaLabel Area="$this.id" Label="&apos;private&apos;" />
                    </Else>
                  </IfElseCondition>
                  <IfElseCondition failOnCondition="false" condition="$currentLevel==$enum:trespassLevel.antitrespass" saveVersion="2">
                    <Then canSkip="1">
                      <AddAreaLabel Area="$this.id" Label="&apos;antitrespass&apos;" />
                    </Then>
                    <Else canSkip="1">
                      <RemoveAreaLabel Area="$this.id" Label="&apos;antitrespass&apos;" />
                    </Else>
                  </IfElseCondition>
                  <IfElseCondition failOnCondition="false" condition="$currentLevel==$enum:trespassLevel.semipublic" saveVersion="2">
                    <Then canSkip="1">
                      <AddAreaLabel Area="$this.id" Label="&apos;semipublic&apos;" />
                    </Then>
                    <Else canSkip="1">
                      <RemoveAreaLabel Area="$this.id" Label="&apos;semipublic&apos;" />
                    </Else>
                  </IfElseCondition>
                  <IfElseCondition failOnCondition="false" condition="$currentLevel==$enum:trespassLevel.personal" saveVersion="2">
                    <Then canSkip="1">
                      <AddAreaLabel Area="$this.id" Label="&apos;personal&apos;" />
                    </Then>
                    <Else canSkip="1">
                      <RemoveAreaLabel Area="$this.id" Label="&apos;personal&apos;" />
                    </Else>
                  </IfElseCondition>
                  <IfElseCondition failOnCondition="false" condition="$currentLevel==$enum:trespassLevel.prohibited" saveVersion="2">
                    <Then canSkip="1">
                      <AddAreaLabel Area="$this.id" Label="&apos;prohibited&apos;" />
                    </Then>
                    <Else canSkip="1">
                      <RemoveAreaLabel Area="$this.id" Label="&apos;prohibited&apos;" />
                    </Else>
                  </IfElseCondition>
                </Sequence>
                <Parallel successMode="Any" failureMode="Any">
                  <ProcessMessage Atomic="true" timeout="&apos;-1&apos;" timeType="GameTime" variable="$request" senderInfo="" inbox="&apos;kcd1_trespassOverrideRequest&apos;" condition="" answerVar="">
                    <Sequence>
                      <VarOperation varName="$overrides.handle" targetVarName="$index" operation="Find" argument="$request.handle" />
                      <IfElseCondition failOnCondition="false" condition="$request.add" saveVersion="2">
                        <Then canSkip="1">
                          <IfElseCondition failOnCondition="false" condition="$index&gt;-1" saveVersion="2">
                            <Then canSkip="1">
                              <IfCondition failOnCondition="false" condition="$request.errorOnAddWithDuplicitHandle">
                                <ErrorNode Message="&apos;Duplicit trespass override handle: \&apos; $request.handle \&apos;&apos;" />
                              </IfCondition>
                            </Then>
                            <Else canSkip="1">
                              <Sequence>
                                <VarOperation varName="$override" targetVarName="" operation="Reinit" argument="" />
                                <Expression expressions="$override.handle=$request.handle,&#10;$override.level=$request.level,&#10;$override.orientation=$request.orientation,&#10;$override.persistent=$request.persistent" />
                                <VarOperation varName="$overrides" targetVarName="" operation="PushBack" argument="($override)" />
                              </Sequence>
                            </Else>
                          </IfElseCondition>
                        </Then>
                        <Else canSkip="1">
                          <IfElseCondition failOnCondition="false" condition="$index&gt;-1" saveVersion="2">
                            <Then canSkip="1">
                              <IfElseCondition failOnCondition="false" condition="$request.removeWhenDudeOutsideArea==$__null" saveVersion="2">
                                <Then canSkip="1">
                                  <VarOperation varName="$overrides" targetVarName="" operation="Erase" argument="$index" />
                                </Then>
                                <Else canSkip="1">
                                  <Expression expressions="$overrides[$index].removeWhenDudeOutsideArea=$request.removeWhenDudeOutsideArea,&#10;$checkForDudeOutsideAreas=true" />
                                </Else>
                              </IfElseCondition>
                            </Then>
                            <Else canSkip="1">
                              <IfCondition failOnCondition="false" condition="$request.errorOnRemoveNonexistentHandle">
                                <ErrorNode Message="&apos;Cannot remove trespass override with non existent handle \&apos; $request.handle \&apos;&apos;" />
                              </IfCondition>
                            </Else>
                          </IfElseCondition>
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </ProcessMessage>
                  <IfGate atomic="false" condition="$areaWasRemoved" RunLogic="KeepRunning">
                    <Expression expressions="$areaWasRemoved=false" />
                  </IfGate>
                </Parallel>
              </Sequence>
            </While>
            <ContinuousSwitch>
              <IfCondition failOnCondition="false" condition="$checkForDudeOutsideAreas">
                <Sequence>
                  <AtomicDecorator>
                    <Sequence>
                      <Expression expressions="$atLeastOneRequestWaitForDudeToLeaveArea=false" />
                      <For startIndex="-1" endIndex="-1" step="-1" array="$overrides" iterator="$index" value="$override" break="">
                        <IfCondition failOnCondition="false" condition="$override.removeWhenDudeOutsideArea~=$__null">
                          <IsInsideArea Origin="$__player" Area="$override.removeWhenDudeOutsideArea" FailSubtMissing="false" saveVersion="2">
                            <Then canSkip="1">
                              <Expression expressions="$atLeastOneRequestWaitForDudeToLeaveArea=true" />
                            </Then>
                            <Else canSkip="1">
                              <Sequence>
                                <VarOperation varName="$overrides" targetVarName="" operation="Erase" argument="$index" />
                                <Expression expressions="$areaWasRemoved=true" />
                              </Sequence>
                            </Else>
                          </IsInsideArea>
                        </IfCondition>
                      </For>
                      <Expression expressions="$checkForDudeOutsideAreas=$atLeastOneRequestWaitForDudeToLeaveArea" />
                    </Sequence>
                  </AtomicDecorator>
                  <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                </Sequence>
              </IfCondition>
              <IfCondition failOnCondition="false" condition="true">
                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
              </IfCondition>
            </ContinuousSwitch>
          </Parallel>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="areaWasRemoved" comment="" />
        <Variable name="atLeastOneRequestWaitForDudeToLeaveArea" comment="" />
        <Variable name="checkForDudeOutsideAreas" comment="" />
        <Variable name="currentLevel" comment="" />
        <Variable name="index" comment="" />
        <Variable name="override" comment="" />
        <Variable name="overrides" comment="" />
        <Variable name="request" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_controlAreaTrespass_defaultLevel" type="enum:trespassLevel" values="" form="single" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="220" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <For editorPosX="350" editorPosY="-240" isCollapsed="0" hasInputBreakpoint="0" comment="Remove the nonpersistent overrides on init; this assumes that the tree is started immediately" breakpointFlags="0">
              <OutputBreakpoints />
              <IfElseCondition editorPosX="520" editorPosY="-240" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <IfCondition editorPosX="720" editorPosY="-280" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression editorPosX="920" editorPosY="-280" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </IfCondition>
                </Then>
                <Else>
                  <VarOperation editorPosX="720" editorPosY="-190" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </VarOperation>
                </Else>
              </IfElseCondition>
            </For>
            <Parallel editorPosX="350" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <While editorPosX="920" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence editorPosX="1110" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression editorPosX="1240" editorPosY="-870" isCollapsed="0" hasInputBreakpoint="0" comment="Reevaluate level" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                  <For editorPosX="1240" editorPosY="-790" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfCondition editorPosX="1420" editorPosY="-790" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression editorPosX="1630" editorPosY="-790" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfCondition>
                  </For>
                  <Sequence editorPosX="1240" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="Update labels" breakpointFlags="0">
                    <OutputBreakpoints />
                    <IfElseCondition editorPosX="1380" editorPosY="-500" isCollapsed="0" hasInputBreakpoint="0" comment="&lt;= &apos;none&apos;" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <RemoveAreaLabel editorPosX="1580" editorPosY="-540" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </RemoveAreaLabel>
                      </Then>
                      <Else>
                        <AddAreaLabel editorPosX="1580" editorPosY="-460" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddAreaLabel>
                      </Else>
                    </IfElseCondition>
                    <IfElseCondition editorPosX="1380" editorPosY="-340" isCollapsed="0" hasInputBreakpoint="0" comment="&apos;antitrespass&apos;" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <AddAreaLabel editorPosX="1580" editorPosY="-370" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddAreaLabel>
                      </Then>
                      <Else>
                        <RemoveAreaLabel editorPosX="1580" editorPosY="-290" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </RemoveAreaLabel>
                      </Else>
                    </IfElseCondition>
                    <IfElseCondition editorPosX="1380" editorPosY="-170" isCollapsed="0" hasInputBreakpoint="0" comment="&apos;semipublic&apos;" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <AddAreaLabel editorPosX="1580" editorPosY="-200" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddAreaLabel>
                      </Then>
                      <Else>
                        <RemoveAreaLabel editorPosX="1580" editorPosY="-120" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </RemoveAreaLabel>
                      </Else>
                    </IfElseCondition>
                    <IfElseCondition editorPosX="1380" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="&apos;personal&apos;" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <AddAreaLabel editorPosX="1580" editorPosY="-30" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddAreaLabel>
                      </Then>
                      <Else>
                        <RemoveAreaLabel editorPosX="1580" editorPosY="50" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </RemoveAreaLabel>
                      </Else>
                    </IfElseCondition>
                    <IfElseCondition editorPosX="1380" editorPosY="170" isCollapsed="0" hasInputBreakpoint="0" comment="&apos;prohibited&apos;" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <AddAreaLabel editorPosX="1580" editorPosY="140" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </AddAreaLabel>
                      </Then>
                      <Else>
                        <RemoveAreaLabel editorPosX="1580" editorPosY="220" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </RemoveAreaLabel>
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                  <Parallel editorPosX="1240" editorPosY="420" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <ProcessMessage editorPosX="1430" editorPosY="370" isCollapsed="0" hasInputBreakpoint="0" comment="Process requests" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence editorPosX="1660" editorPosY="370" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <VarOperation editorPosX="1790" editorPosY="370" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </VarOperation>
                        <IfElseCondition editorPosX="1790" editorPosY="470" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Then>
                            <IfElseCondition editorPosX="1990" editorPosY="420" isCollapsed="0" hasInputBreakpoint="0" comment="New" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <IfCondition editorPosX="2190" editorPosY="370" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <ErrorNode editorPosX="2400" editorPosY="370" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </ErrorNode>
                                </IfCondition>
                              </Then>
                              <Else>
                                <Sequence editorPosX="2190" editorPosY="450" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <VarOperation editorPosX="2310" editorPosY="450" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </VarOperation>
                                  <Expression editorPosX="2310" editorPosY="550" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                  <VarOperation editorPosX="2310" editorPosY="630" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </VarOperation>
                                </Sequence>
                              </Else>
                            </IfElseCondition>
                          </Then>
                          <Else>
                            <IfElseCondition editorPosX="1990" editorPosY="860" isCollapsed="0" hasInputBreakpoint="0" comment="Remove" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <IfElseCondition editorPosX="2190" editorPosY="860" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                  <OutputBreakpoints />
                                  <Then>
                                    <VarOperation editorPosX="2390" editorPosY="760" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </VarOperation>
                                  </Then>
                                  <Else>
                                    <Expression editorPosX="2390" editorPosY="860" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                      <OutputBreakpoints />
                                    </Expression>
                                  </Else>
                                </IfElseCondition>
                              </Then>
                              <Else>
                                <IfCondition editorPosX="2190" editorPosY="950" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <ErrorNode editorPosX="2400" editorPosY="950" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </ErrorNode>
                                </IfCondition>
                              </Else>
                            </IfElseCondition>
                          </Else>
                        </IfElseCondition>
                      </Sequence>
                    </ProcessMessage>
                    <IfGate editorPosX="1430" editorPosY="570" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression editorPosX="1700" editorPosY="570" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </IfGate>
                  </Parallel>
                </Sequence>
              </While>
              <ContinuousSwitch editorPosX="560" editorPosY="1190" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition editorPosX="750" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence editorPosX="970" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <AtomicDecorator editorPosX="1130" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Sequence editorPosX="1290" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Expression editorPosX="1410" editorPosY="1050" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                        <For editorPosX="1410" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                          <IfCondition editorPosX="1590" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                            <IsInsideArea editorPosX="1800" editorPosY="1130" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                              <OutputBreakpoints />
                              <Then>
                                <Expression editorPosX="2000" editorPosY="1100" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Then>
                              <Else>
                                <Sequence editorPosX="2000" editorPosY="1180" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <VarOperation editorPosX="2130" editorPosY="1180" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </VarOperation>
                                  <Expression editorPosX="2130" editorPosY="1280" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                </Sequence>
                              </Else>
                            </IsInsideArea>
                          </IfCondition>
                        </For>
                        <Expression editorPosX="1410" editorPosY="1270" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Sequence>
                    </AtomicDecorator>
                    <Wait editorPosX="1130" editorPosY="1210" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                  </Sequence>
                </IfCondition>
                <IfCondition editorPosX="750" editorPosY="1270" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Wait editorPosX="950" editorPosY="1270" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </IfCondition>
              </ContinuousSwitch>
            </Parallel>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="reevaluateHomeDoorLocks" is_function="0">
    <Variables>
      <Variable name="atLeastOneInhabitantExpected" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="doors" type="_wuid" values="" isPersistent="0" form="array" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Selector>
            <Sequence>
              <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="&apos;inhabitant&apos;" SubGraph="&apos;inhabitant&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <ExistPath Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;expected&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                  <AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                </ExistPath>
              </GraphSearch>
              <Expression expressions="$atLeastOneInhabitantExpected=true" />
            </Sequence>
            <Expression expressions="$atLeastOneInhabitantExpected=false" />
          </Selector>
          <Sequence>
            <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <CategoryFilter categories="&apos;Door&apos;" Source="Child" prune="true" negprune="false" Parent="" Child="" />
              <Nodalyzer Quantifiers="ForAll" Parent="" Child="$doors" saveVersion="2" />
            </GraphSearch>
            <ExecuteLua code="for _,doorWuid in pairs(data.doors) do &#10; &#10;    local door = XGenAIModule.GetEntityByWUID(doorWuid) &#10; &#10;    -- TODO: door:GetInteriorType() == enum_interiorType.home &#10;    if (true) then &#10; &#10;        if data.atLeastOneInhabitantExpected then &#10;     &#10;            door:Unlock() &#10;            door:SetUnlockedDueExpected(true) &#10;     &#10;        else &#10;     &#10;            door:SetUnlockedDueExpected(false) &#10;     &#10;        end &#10;     &#10;    end &#10; &#10;end" />
          </Sequence>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="atLeastOneInhabitantExpected" comment="" />
        <Variable name="doors" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="Find someone who expects player" breakpointFlags="0">
                  <OutputBreakpoints />
                  <ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </AnyLinkFilter>
                  </ExistPath>
                </GraphSearch>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Sequence>
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Selector>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </CategoryFilter>
                <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                </Nodalyzer>
              </GraphSearch>
              <ExecuteLua hasInputBreakpoint="0" comment="TODO: contains condition for interior type!" breakpointFlags="0">
                <OutputBreakpoints />
              </ExecuteLua>
            </Sequence>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="checkConfrontersLimit">
    <Variables>
      <Variable name="confronters" type="wuid" values="" form="array" />
      <Variable name="information" type="information" values="" form="single" />
      <Variable name="informations" type="information" values="" form="array" />
      <Variable name="maxConfronters" type="_int" values="1" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Expected" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GetKnownInformations OutArray="$informations" Holder="$this.id" />
          <For startIndex="0" endIndex="-1" step="1" array="$informations" iterator="" value="$information" break="">
            <IfCondition failOnCondition="false" condition="$b_informationData[$information.label].maxConfronters&gt;$maxConfronters">
              <Expression expressions="$maxConfronters=$b_informationData[$information.label].maxConfronters" />
            </IfCondition>
          </For>
          <GraphSearch Origin="$__player" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;confronter&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$confronters" saveVersion="2" />
          </GraphSearch>
          <IfCondition failOnCondition="true" condition="$maxConfronters&gt;#confronters">
            <Success />
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="confronters" comment="" />
        <Variable name="information" comment="" />
        <Variable name="informations" comment="" />
        <Variable name="maxConfronters" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="b_informationData" type="informationData" values="" form="associative" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="200" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetKnownInformations editorPosX="320" editorPosY="-240" isCollapsed="0" hasInputBreakpoint="0" comment="Determine max" breakpointFlags="0">
              <OutputBreakpoints />
            </GetKnownInformations>
            <For editorPosX="320" editorPosY="-160" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition editorPosX="510" editorPosY="-160" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression editorPosX="720" editorPosY="-160" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
            </For>
            <GraphSearch editorPosX="320" editorPosY="0" isCollapsed="1" hasInputBreakpoint="0" comment="Count current confronters" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter editorPosX="650" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
              <Nodalyzer editorPosX="470" editorPosY="40" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
            </GraphSearch>
            <IfCondition editorPosX="320" editorPosY="140" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Success editorPosX="530" editorPosY="140" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="checkCutsceneIsRunningContinuously">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <While doFail="false" propagateChildFail="false" condition="true">
          <Sequence>
            <Selector>
              <InstantSemaphore SemaphoreCount="1" LockManagerType="Global" SemaphoreName="&apos;cutscenePlaying&apos;">
                <Expression expressions="$t_cutsceneIsRunning=false" />
              </InstantSemaphore>
              <Expression expressions="$t_cutsceneIsRunning=true" />
            </Selector>
            <Wait duration="&apos;2s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </Sequence>
        </While>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables />
      <ForwardDeclarations>
        <Variable name="t_cutsceneIsRunning" type="_bool" values="false" form="single" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <While editorPosX="220" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence editorPosX="410" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Selector editorPosX="530" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <InstantSemaphore editorPosX="650" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression editorPosX="880" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="cutscene is NOT running" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </InstantSemaphore>
                <Expression editorPosX="650" editorPosY="100" isCollapsed="0" hasInputBreakpoint="0" comment="cutscene is running" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </Selector>
              <Wait editorPosX="530" editorPosY="200" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </Sequence>
          </While>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="destroyAllCrimeInformationsFromHolder">
    <Variables>
      <Variable name="knownInformation" type="information" values="" form="single" />
      <Variable name="knownInformations" type="information" values="" form="array" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Error" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GetKnownInformations OutArray="$knownInformations" Holder="$this.id" />
          <For startIndex="0" endIndex="-1" step="1" array="$knownInformations" iterator="" value="$knownInformation" break="">
            <IfCondition failOnCondition="false" condition="$b_informationData[$knownInformation.label].isCrime">
              <DestroyInformationFromHolder Information="$knownInformation" />
            </IfCondition>
          </For>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="knownInformation" comment="" />
        <Variable name="knownInformations" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="b_informationData" type="informationData" values="" form="associative" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="200" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GetKnownInformations editorPosX="320" editorPosY="-90" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </GetKnownInformations>
            <For editorPosX="320" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition editorPosX="510" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <DestroyInformationFromHolder editorPosX="720" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </DestroyInformationFromHolder>
              </IfCondition>
            </For>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="moveConfiscatedItemsToWorldStash">
    <Variables>
      <Variable name="confiscatorsInventory" type="wuid" values="" form="single" />
      <Variable name="t_moveItemsToWorldStash_items" type="wuid" values="" form="array" />
      <Variable name="t_moveItemsToWorldStash_kind" type="enum:worldStashKind" values="" form="single" />
      <Variable name="t_moveItemsToWorldStash_source" type="wuid" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;inventory&apos;" prune="true" negprune="unknown" Parent="" Child="$confiscatorsInventory" Data="" />
          </GraphSearch>
          <GraphSearch Origin="$confiscatorsInventory" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="false" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
            <LinkTagFilter tag="&apos;confiscatedItem&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
            <Nodalyzer Quantifiers="ForAll" Parent="" Child="$t_moveItemsToWorldStash_items" saveVersion="2" />
          </GraphSearch>
          <IfCondition failOnCondition="false" condition="#t_moveItemsToWorldStash_items&gt;0">
            <Sequence>
              <Expression expressions="$t_moveItemsToWorldStash_kind=$enum:worldStashKind.confiscatedItems,&#10;$t_moveItemsToWorldStash_source=$this.id" />
              <SuppressFailure>
                <CallBehavior Target="" BehaviorName="&apos;moveItemsToWorldStash&apos;" stopAfterFirstFound="true" ignoreDropUnloading="false" nodeLabel="92731011" />
              </SuppressFailure>
            </Sequence>
          </IfCondition>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="confiscatorsInventory" comment="" />
        <Variable name="t_moveItemsToWorldStash_items" comment="" />
        <Variable name="t_moveItemsToWorldStash_kind" comment="" />
        <Variable name="t_moveItemsToWorldStash_source" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="0" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="240" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <GraphSearch editorPosX="370" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter editorPosX="700" editorPosY="0" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
            </GraphSearch>
            <GraphSearch editorPosX="370" editorPosY="270" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LinkTagFilter editorPosX="700" editorPosY="270" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </LinkTagFilter>
              <Nodalyzer editorPosX="700" editorPosY="400" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
              </Nodalyzer>
            </GraphSearch>
            <IfCondition editorPosX="370" editorPosY="540" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence editorPosX="600" editorPosY="540" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression editorPosX="730" editorPosY="540" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <SuppressFailure editorPosX="730" editorPosY="640" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <CallBehavior editorPosX="890" editorPosY="640" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </CallBehavior>
                </SuppressFailure>
              </Sequence>
            </IfCondition>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="unequipTorch">
    <Variables>
      <Variable name="torch" type="wuid" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <SuppressFailure>
          <Sequence>
            <GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;inventory&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
              <ItemClassFilter ClassId="&apos;4cea28a0-0814-405a-bf24-4fd711f7eb63&apos;" Category="" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
              <ItemParamFilter Param="Equip" owner="" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
              <Nodalyzer Quantifiers="Exists" Parent="" Child="$torch" saveVersion="2" />
            </GraphSearch>
            <UnEquipItem Target="$this.id" item="$torch" />
          </Sequence>
        </SuppressFailure>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="torch" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="150" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <SuppressFailure editorPosX="370" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence editorPosX="510" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <GraphSearch editorPosX="640" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ItemClassFilter editorPosX="990" editorPosY="330" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ItemClassFilter>
                <ItemParamFilter editorPosX="990" editorPosY="470" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ItemParamFilter>
                <Nodalyzer editorPosX="990" editorPosY="610" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                </Nodalyzer>
              </GraphSearch>
              <UnEquipItem editorPosX="640" editorPosY="590" isCollapsed="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </UnEquipItem>
            </Sequence>
          </SuppressFailure>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="selectReappearanceSpot" is_function="0">
    <Variables>
      <Variable name="break" type="_bool" values="" isPersistent="0" form="single" />
      <Variable name="customArea" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="insidePoint" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="spot" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="t_reappearanceSpots" type="_wuid" values="" isPersistent="0" form="array" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Selector>
          <IsInsideAreaWithLabel Position="$this.id" Label="&apos;customReappearanceSpotArea&apos;" Area="$customArea" FailSubtMissing="true" saveVersion="2">
            <Then canSkip="1">
              <Sequence>
                <Selector>
                  <GraphSearch Origin="$customArea" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;customReappearanceSpot&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <AnyLinkFilter Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                    <Nodalyzer Quantifiers="ForAll" Parent="" Child="$t_reappearanceSpots" saveVersion="2">
                      <Child0 canSkip="1">
                        <RangeSorter point="$__player" SortOrder="Descending" Source="Child" />
                      </Child0>
                    </Nodalyzer>
                  </GraphSearch>
                  <ErrorNode Message="&apos;SA \&apos; $customArea \&apos; has the \&apos;customReapperanceSpot\&apos; label, but no spots linked&apos;" />
                </Selector>
                <Expression expressions="$t_reappearanceSpot=$t_reappearanceSpots[0]" />
              </Sequence>
            </Then>
          </IsInsideAreaWithLabel>
          <Sequence>
            <LuaGate code="return IsAnimal(entity)" saveVersion="2">
              <Then canSkip="1">
                <IncludeTree File="&apos;world/openworldUtils.xml&apos;" Name="&apos;buildReappearanceSpots_horse&apos;" nodeLabel="55245961" />
              </Then>
              <Else canSkip="1">
                <IncludeTree File="&apos;world/openworldUtils.xml&apos;" Name="&apos;buildReappearanceSpots_npc&apos;" nodeLabel="85159733" />
              </Else>
            </LuaGate>
            <SuppressFailure>
              <GraphSearch Origin="$__land" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                <UnionOp Results="true" Advance="true" EndOp="true" ShortCircuit="false" LocalNodalyzers="false">
                  <CategoryFilter categories="&apos;levelExit&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                  <LinkTagFilter tag="&apos;emergencyTeleportSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
                </UnionOp>
                <Nodalyzer Quantifiers="ForAll" Parent="" Child="$t_reappearanceSpots" saveVersion="2">
                  <Child0 canSkip="1">
                    <RangeSorter point="" SortOrder="Ascending" Source="Child" />
                  </Child0>
                </Nodalyzer>
              </GraphSearch>
            </SuppressFailure>
            <For startIndex="0" endIndex="-1" step="1" array="$t_reappearanceSpots" iterator="" value="$spot" break="$break">
              <DistanceCondition Origin="$__player" ReferencePt="$spot" Low="0.000000" High="50.000000" Negation="true" ValueOnMiddle="false" failOnCondition="false">
                <Expression expressions="$t_reappearanceSpot=$spot,&#10;$break=true" />
              </DistanceCondition>
            </For>
            <IfCondition failOnCondition="false" condition="$t_reappearanceSpot==$__null">
              <IfElseCondition failOnCondition="false" condition="#t_reappearanceSpots&gt;0" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$t_reappearanceSpot=$t_reappearanceSpots[0]" />
                </Then>
                <Else canSkip="1">
                  <Expression expressions="$t_reappearanceSpot=$this.id" />
                </Else>
              </IfElseCondition>
            </IfCondition>
          </Sequence>
        </Selector>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="break" comment="" />
        <Variable name="customArea" comment="" />
        <Variable name="insidePoint" comment="" />
        <Variable name="spot" comment="" />
        <Variable name="t_reappearanceSpots" comment="" />
        <Variable name="t_reappearanceSpot" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_reappearanceSpot" type="_wuid" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="140" editorPosY="-200" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
              <OutputBreakpoints />
              <Then>
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <AnyLinkFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </AnyLinkFilter>
                      <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Child0>
                          <RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </RangeSorter>
                        </Child0>
                      </Nodalyzer>
                    </GraphSearch>
                    <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </ErrorNode>
                  </Selector>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </Then>
            </IsInsideAreaWithLabel>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <LuaGate hasInputBreakpoint="0" comment="Find entity-specific candidates" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </IncludeTree>
                </Then>
                <Else>
                  <IncludeTree hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </IncludeTree>
                </Else>
              </LuaGate>
              <SuppressFailure hasInputBreakpoint="0" comment="Fallback candidates" breakpointFlags="0">
                <OutputBreakpoints />
                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <UnionOp hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <CategoryFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CategoryFilter>
                    <LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </LinkTagFilter>
                  </UnionOp>
                  <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Child0>
                      <RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </RangeSorter>
                    </Child0>
                  </Nodalyzer>
                </GraphSearch>
              </SuppressFailure>
              <For hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <DistanceCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Expression hasInputBreakpoint="0" comment="Found a spot far enough from player" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </DistanceCondition>
              </For>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="No spot is ideal" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="Just pick the first one" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Expression hasInputBreakpoint="0" comment="No spot at all =&gt; stay put" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Else>
                </IfElseCondition>
              </IfCondition>
            </Sequence>
          </Selector>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="calculateCrowdDensity">
    <Variables>
      <Variable name="crowdEntities" type="wuid" values="" form="array" />
      <Variable name="crowdEntity" type="wuid" values="" form="single" />
      <Variable name="doubleScoreRadius" type="_float" values="" form="single" />
      <Variable name="doubleScoreRadiusMod" type="_float" values="0.25" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Error" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <CircularSpatialQuery Radius="$t_calculateCrowdDensity_radius" Center="$t_calculateCrowdDensity_pivot" ToFill="$crowdEntities" Precision="Exact" Filter="LivingHumanNPCs" />
          <Expression expressions="$t_calculateCrowdDensity_result=#crowdEntities,&#10;$doubleScoreRadius=$t_calculateCrowdDensity_radius*$doubleScoreRadiusMod" />
          <For startIndex="0" endIndex="-1" step="1" array="$crowdEntities" iterator="" value="$crowdEntity" break="">
            <DistanceCondition Origin="$crowdEntity" ReferencePt="$t_calculateCrowdDensity_pivot" Low="$doubleScoreRadius" High="654321.000000" Negation="false" ValueOnMiddle="false" failOnCondition="false">
              <Expression expressions="$t_calculateCrowdDensity_result+=1" />
            </DistanceCondition>
          </For>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="crowdEntities" comment="" />
        <Variable name="crowdEntity" comment="" />
        <Variable name="doubleScoreRadius" comment="" />
        <Variable name="doubleScoreRadiusMod" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_calculateCrowdDensity_pivot" type="wuid" values="" form="single" />
        <Variable name="t_calculateCrowdDensity_radius" type="_float" values="" form="single" />
        <Variable name="t_calculateCrowdDensity_result" type="_int" values="" form="single" />
      </ForwardDeclarations>
      <Root editorPosX="0" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence editorPosX="210" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <CircularSpatialQuery editorPosX="340" editorPosY="-200" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </CircularSpatialQuery>
            <Expression editorPosX="340" editorPosY="-80" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Expression>
            <For editorPosX="340" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <DistanceCondition editorPosX="540" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression editorPosX="760" editorPosY="0" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </DistanceCondition>
            </For>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="waitUntilNotSeenByPlayer">
    <Variables>
      <Variable name="minDistanceFromPlayer" type="_float" values="" form="single" />
      <Variable name="notSeen" type="_bool" values="" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <ExecuteLua code="data.minDistanceFromPlayer = RPG.CorpseDisapperanceMinDistanceFromPlayer" />
      </OnInit>
      <Behavior canSkip="1">
        <Parallel successMode="Any" failureMode="Any">
          <While doFail="false" propagateChildFail="false" condition="!$notSeen">
            <DistanceGate Origin="$__player" ReferencePt="$this.id" Low="0.000000" High="$minDistanceFromPlayer" Negation="true" OpenInMiddle="false" RunLogic="Halt">
              <LoopUntil until="Success" attemptCount="-1">
                <Selector>
                  <Sequence>
                    <NotSeenByPlayer target="$this.id" timespan="&apos;10s&apos;" result="$notSeen" />
                    <IfCondition failOnCondition="true" condition="$notSeen">
                      <Success />
                    </IfCondition>
                  </Sequence>
                  <Sequence>
                    <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                    <Fail />
                  </Sequence>
                </Selector>
              </LoopUntil>
            </DistanceGate>
          </While>
          <LoopUntil until="Success" attemptCount="0">
            <IsTimeSkipping saveVersion="2">
              <Then canSkip="1">
                <Success />
              </Then>
              <Else canSkip="1">
                <Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="true" variation="" skipInLOD="false" />
              </Else>
            </IsTimeSkipping>
          </LoopUntil>
        </Parallel>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData>
      <Variables>
        <Variable name="minDistanceFromPlayer" comment="" />
        <Variable name="notSeen" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="70" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <ExecuteLua editorPosX="300" editorPosY="-160" hasInputBreakpoint="0" comment="Wait until 1/ player is far enough and 2/ we haven&apos;t rendered our corpse in a while" breakpointFlags="0">
            <OutputBreakpoints />
          </ExecuteLua>
        </OnInit>
        <Behavior>
          <Parallel editorPosX="300" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <While editorPosX="490" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <DistanceGate editorPosX="700" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <LoopUntil editorPosX="920" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Selector editorPosX="1090" editorPosY="-60" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Sequence editorPosX="1220" editorPosY="-110" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <NotSeenByPlayer editorPosX="1340" editorPosY="-200" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </NotSeenByPlayer>
                      <IfCondition editorPosX="1340" editorPosY="-110" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Success editorPosX="1570" editorPosY="-110" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </IfCondition>
                    </Sequence>
                    <Sequence editorPosX="1220" editorPosY="-20" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Wait editorPosX="1340" editorPosY="-20" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Wait>
                      <Fail editorPosX="1340" editorPosY="100" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Fail>
                    </Sequence>
                  </Selector>
                </LoopUntil>
              </DistanceGate>
            </While>
            <LoopUntil editorPosX="490" editorPosY="100" hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IsTimeSkipping editorPosX="660" editorPosY="100" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Success editorPosX="800" editorPosY="100" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Then>
                <Else>
                  <Wait editorPosX="800" editorPosY="190" hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                </Else>
              </IsTimeSkipping>
            </LoopUntil>
          </Parallel>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>