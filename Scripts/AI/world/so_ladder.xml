<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="ladder_onUpdate" is_function="0">
    <Variables />
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables />
      <ForwardDeclarations />
      <Root editorPosX="340" editorPosY="590" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Wait>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="ladder_onRequest" is_function="0">
    <Variables>
      <Variable name="ladderState" type="enum:ladderState" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <IfCondition failOnCondition="false" condition="$__behaviorName==&apos;climbUp&apos;">
            <Sequence>
              <IfCondition failOnCondition="false" condition="($ladderState==$enum:ladderState.unused)|($ladderState==$enum:ladderState.usedForClimbUp)">
                <InstantSendMessageToNPC target="$__bodyInfo.id" type="&apos;ladder:onRequest&apos;" values="" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$ladderState==$enum:ladderState.unused">
                <Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;ladderState_readWrite_lock&apos;">
                  <Expression expressions="$ladderState=$enum:ladderState.usedForClimbUp" />
                </Semaphore>
              </IfCondition>
            </Sequence>
          </IfCondition>
          <IfCondition failOnCondition="false" condition="$__behaviorName==&apos;climbDown&apos;">
            <Sequence>
              <IfCondition failOnCondition="false" condition="($ladderState==$enum:ladderState.unused)|($ladderState==$enum:ladderState.usedForClimbDown)">
                <InstantSendMessageToNPC target="$__bodyInfo.id" type="&apos;ladder:onRequest&apos;" values="" />
              </IfCondition>
              <IfCondition failOnCondition="false" condition="$ladderState==$enum:ladderState.unused">
                <Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;ladderState_readWrite_lock&apos;">
                  <Expression expressions="$ladderState=$enum:ladderState.usedForClimbDown" />
                </Semaphore>
              </IfCondition>
            </Sequence>
          </IfCondition>
          <DefaultBranch>
            <Success />
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="ladderState" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="70" editorPosY="-430" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantSendMessageToNPC>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Semaphore>
                </IfCondition>
              </Sequence>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </InstantSendMessageToNPC>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Semaphore>
                </IfCondition>
              </Sequence>
            </IfCondition>
            <DefaultBranch>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="ladder_onRelease" is_function="0">
    <Variables>
      <Variable name="ladderState" type="enum:ladderState" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Switch>
          <IfCondition failOnCondition="false" condition="($__behaviors[$__behaviorName].count==0)&amp;($__behaviorName==&apos;climbUp&apos;)">
            <Sequence>
              <Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;ladderState_readWrite_lock&apos;">
                <IfElseCondition failOnCondition="false" condition="$__behaviors[&apos;climbDown&apos;].count==0" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$ladderState=$enum:ladderState.unused," />
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$ladderState=$enum:ladderState.usedForClimbDown," />
                  </Else>
                </IfElseCondition>
              </Semaphore>
              <Selector>
                <SmartObjInstantSendByBehavior behaviors="&apos;climbDown&apos;" successMode="Any" failureMode="All" type="&apos;ladder:onRequest&apos;" values="" />
                <Success />
              </Selector>
            </Sequence>
          </IfCondition>
          <IfCondition failOnCondition="false" condition="($__behaviors[$__behaviorName].count==0)&amp;($__behaviorName==&apos;climbDown&apos;)">
            <Sequence>
              <Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Intellect" SemaphoreName="&apos;ladderState_readWrite_lock&apos;">
                <IfElseCondition failOnCondition="false" condition="$__behaviors[&apos;climbUp&apos;].count==0" saveVersion="2">
                  <Then canSkip="1">
                    <Expression expressions="$ladderState=$enum:ladderState.unused," />
                  </Then>
                  <Else canSkip="1">
                    <Expression expressions="$ladderState=$enum:ladderState.usedForClimbUp," />
                  </Else>
                </IfElseCondition>
              </Semaphore>
              <Selector>
                <SmartObjInstantSendByBehavior behaviors="&apos;climbUp&apos;" successMode="Any" failureMode="All" type="&apos;ladder:onRequest&apos;" values="" />
                <Success />
              </Selector>
            </Sequence>
          </IfCondition>
          <DefaultBranch>
            <Success />
          </DefaultBranch>
        </Switch>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="ladderState" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="-10" editorPosY="-110" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </IfElseCondition>
                </Semaphore>
                <Selector hasInputBreakpoint="0" comment="May fail if no behavior holders are present" breakpointFlags="0">
                  <OutputBreakpoints />
                  <SmartObjInstantSendByBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SmartObjInstantSendByBehavior>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Selector>
              </Sequence>
            </IfCondition>
            <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                    <OutputBreakpoints />
                    <Then>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Then>
                    <Else>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Else>
                  </IfElseCondition>
                </Semaphore>
                <Selector hasInputBreakpoint="0" comment="May fail if no behavior holders are present" breakpointFlags="0">
                  <OutputBreakpoints />
                  <SmartObjInstantSendByBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </SmartObjInstantSendByBehavior>
                  <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Success>
                </Selector>
              </Sequence>
            </IfCondition>
            <DefaultBranch>
              <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Success>
            </DefaultBranch>
          </Switch>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="use" is_function="0">
    <Variables>
      <Variable name="pathParams" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
      <Variable name="startHelper" type="helperInfo" values="" isPersistent="0" form="single" />
      <Variable name="t_direction" type="_float" values="1.0" isPersistent="0" form="single" />
      <Variable name="t_entryOri" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="t_entryPos" type="vec3" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <VariableExistsGate VarToTest="$__startToEnd" VarIndexMode="All" FailSubtMissing="false" saveVersion="2">
          <Then canSkip="1">
            <IfElseCondition failOnCondition="false" condition="$__startToEnd==true" saveVersion="2">
              <Then canSkip="1">
                <GetHelper smartObjectName="$__object.id" helperName="&apos;down&apos;" categoryName="&apos;Gate&apos;" targetVar="$startHelper" policy="Name" />
              </Then>
              <Else canSkip="1">
                <GetHelper smartObjectName="$__object.id" helperName="&apos;up&apos;" categoryName="&apos;Gate&apos;" targetVar="$startHelper" policy="Name" />
              </Else>
            </IfElseCondition>
          </Then>
          <Else canSkip="1">
            <GetHelper smartObjectName="$__object.id" helperName="" categoryName="&apos;Gate&apos;" targetVar="$startHelper" policy="Closest" />
          </Else>
        </VariableExistsGate>
      </OnInit>
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$this.id==$__player" saveVersion="2">
          <Then canSkip="1">
            <Sequence>
              <IsLoadedGate saveVersion="2">
                <Then canSkip="1">
                  <LuaGate code="return player.human:IsOnLadder() == 0" saveVersion="2">
                    <Then canSkip="1">
                      <Fail />
                    </Then>
                    <Else canSkip="1">
                      <Success />
                    </Else>
                  </LuaGate>
                </Then>
                <Else canSkip="1">
                  <Success />
                </Else>
              </IsLoadedGate>
              <IfElseCondition failOnCondition="false" condition="$startHelper.name~=&apos;up&apos;" saveVersion="2">
                <Then canSkip="1">
                  <CallBehavior Target="$__object.id" BehaviorName="&apos;climbUp&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                </Then>
                <Else canSkip="1">
                  <CallBehavior Target="$__object.id" BehaviorName="&apos;climbDown&apos;" ignoreDropUnloading="false" nodeLabel="22475248" />
                </Else>
              </IfElseCondition>
            </Sequence>
          </Then>
          <Else canSkip="1">
            <Sequence>
              <GetHelperData smartObjectName="$__object.id" helperID="$startHelper.id" positionTargetVar="$t_entryPos" orientationTargetVar="$t_entryOri" transformTargetVar="" fragmentTargetVar="" tagsTargetVar="" />
              <Move stopWithinDistance="2.000000" stopDistanceVariation="1.000000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" destinationSpecification="$t_entryPos" destinationSpecification2="" destinationSpecification3="" speed="$__navInfo.speed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
              <IfElseCondition failOnCondition="false" condition="$startHelper.name~=&apos;up&apos;" saveVersion="2">
                <Then canSkip="1">
                  <CallBehavior Target="$__object.id" BehaviorName="&apos;climbUp&apos;" ignoreDropUnloading="false" nodeLabel="94943657" />
                </Then>
                <Else canSkip="1">
                  <Sequence>
                    <Expression expressions="$t_direction=-1.0" />
                    <CallBehavior Target="$__object.id" BehaviorName="&apos;climbDown&apos;" ignoreDropUnloading="false" nodeLabel="30211271" />
                  </Sequence>
                </Else>
              </IfElseCondition>
            </Sequence>
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="pathParams" comment="" />
        <Variable name="startHelper" comment="" />
        <Variable name="t_direction" comment="" />
        <Variable name="t_entryOri" comment="" />
        <Variable name="t_entryPos" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="280" editorPosY="-1040" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <VariableExistsGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetHelper>
                </Then>
                <Else>
                  <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </GetHelper>
                </Else>
              </IfElseCondition>
            </Then>
            <Else>
              <GetHelper hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </GetHelper>
            </Else>
          </VariableExistsGate>
        </OnInit>
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IsLoadedGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <LuaGate hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Fail hasInputBreakpoint="0" comment="Ladder request is invalid, player is not after load on ladder, KCD-73871" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Fail>
                      </Then>
                      <Else>
                        <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Success>
                      </Else>
                    </LuaGate>
                  </Then>
                  <Else>
                    <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Success>
                  </Else>
                </IsLoadedGate>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CallBehavior>
                  </Then>
                  <Else>
                    <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CallBehavior>
                  </Else>
                </IfElseCondition>
              </Sequence>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <GetHelperData hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </GetHelperData>
                <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Move>
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CallBehavior>
                  </Then>
                  <Else>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </CallBehavior>
                    </Sequence>
                  </Else>
                </IfElseCondition>
              </Sequence>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="climb" is_function="0">
    <Variables>
      <Variable name="climbingSpeed" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="goSignal" type="ladder:onRequest" values="" isPersistent="0" form="single" />
      <Variable name="stopSignal" type="_bool" values="" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <IfElseCondition failOnCondition="false" condition="$this.id==$__player" saveVersion="2">
          <Then canSkip="1">
            <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </Then>
          <Else canSkip="1">
            <Sequence>
              <ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$goSignal" senderInfo="" inbox="&apos;ladderEvents&apos;" condition="" />
              <LoopUntil until="Success" attemptCount="10">
                <Selector>
                  <CallBehavior Target="$__object.id" BehaviorName="&apos;traverse&apos;" ignoreDropUnloading="false" nodeLabel="10016806" />
                  <Wait duration="&apos;5s&apos;" timeType="GameTime" doFail="true" variation="" skipInLOD="false" />
                </Selector>
              </LoopUntil>
            </Sequence>
          </Else>
        </IfElseCondition>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="climbingSpeed" comment="" />
        <Variable name="goSignal" comment="" />
        <Variable name="stopSignal" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root editorPosX="330" editorPosY="-40" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Then>
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </Then>
            <Else>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <ReadMessage hasInputBreakpoint="0" comment="this message I get from request / release tree, it says that ladder is either empty or there is only player on it" breakpointFlags="0">
                  <OutputBreakpoints />
                </ReadMessage>
                <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </CallBehavior>
                    <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Wait>
                  </Selector>
                </LoopUntil>
              </Sequence>
            </Else>
          </IfElseCondition>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
  <BehaviorTree name="traverse" is_function="0">
    <Variables>
      <Variable name="bottom" type="_bool" values="true" isPersistent="0" form="single" />
      <Variable name="climbingSpeed" type="_float" values="3.0" isPersistent="0" form="single" />
      <Variable name="params" type="pathFindingParams" values="useSmartObjects(false)" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <OnInit canSkip="1">
        <Expression expressions="$climbingSpeed*=$t_direction" />
      </OnInit>
      <Behavior canSkip="1">
        <FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
          <Child canSkip="1">
            <Sequence>
              <Expression expressions="$bottom=$t_direction&gt;0" />
              <FreeLadderDecorator targetLadder="$__object.id" bottomEnd="$bottom">
                <Sequence>
                  <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.500000" changeNPCState="false" destinationSpecification="$t_entryPos" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="$params" staminaPolicy="" pathInfo="" AnimationToPlay="" AnimationContext="" />
                  <LoopUntil until="Success" attemptCount="4">
                    <Selector>
                      <GetOnLadder Ladder="$__object.id" />
                      <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="true" variation="" skipInLOD="false" />
                    </Selector>
                  </LoopUntil>
                </Sequence>
              </FreeLadderDecorator>
              <ClimbLadder Speed="$climbingSpeed" />
            </Sequence>
          </Child>
          <OnFail canSkip="1">
            <ClimbLadder Speed="$climbingSpeed" />
          </OnFail>
        </FuseBox>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="bottom" comment="" />
        <Variable name="climbingSpeed" comment="" />
        <Variable name="params" comment="" />
        <Variable name="t_direction" comment="" />
      </Variables>
      <ForwardDeclarations>
        <Variable name="t_direction" type="_float" values="" isPersistent="0" form="single" requirementType="ForwardDeclaration" />
      </ForwardDeclarations>
      <Root editorPosX="40" editorPosY="10" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <OnInit>
          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
          </Expression>
        </OnInit>
        <Behavior>
          <FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
            <OutputBreakpoints />
            <Child>
              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
                <FreeLadderDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Move hasInputBreakpoint="0" comment="here should be exact move to navigate correctly to ladder starting helper" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Move>
                    <LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <GetOnLadder hasInputBreakpoint="0" comment="may fail if somebody is on the first ladder steps before me" breakpointFlags="0">
                          <OutputBreakpoints />
                        </GetOnLadder>
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </Selector>
                    </LoopUntil>
                  </Sequence>
                </FreeLadderDecorator>
                <ClimbLadder hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </ClimbLadder>
              </Sequence>
            </Child>
            <OnFail>
              <ClimbLadder hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </ClimbLadder>
            </OnFail>
          </FuseBox>
        </Behavior>
      </Root>
      <Forest />
      <Comments>
        <Comment text="Agreement_with_programmers:_falling_down_the_ladder_is_automatic_due_to_hitreaction,_otherwise_proceed_to_the_end!" posX="600" posY="750" width="1072" height="38" resizeBorderWidth="1070" resizeBorderHeight="10" color="0.65,0.65,0.65" author="petr.ondracek" />
      </Comments>
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>