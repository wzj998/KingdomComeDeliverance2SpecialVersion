<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="onEnter" is_function="0">
		<Variables>
			<Variable name="aliveness" type="enum:aliveness" values="$enum:aliveness.alive" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<GameContextCheck context="global_deterrentAreasActive" saveVersion="2">
					<Then canSkip="1">
						<IfCondition failOnCondition="false" condition="$__bodyInfo.id ~= $__player">
							<EntityContextCheck context="deterrenceImmunity" target="$__bodyInfo.id" saveVersion="2">
								<Else canSkip="1">
									<Sequence>
										<SuppressFailure>
											<Sequence>
												<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;deterDeadAndUnconscious&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												</GraphSearch>
												<Expression expressions="$aliveness = $enum:aliveness.any" />
											</Sequence>
										</SuppressFailure>
										<AddInterrupt Target="$__bodyInfo.id" Host="$this.id" Behavior="&apos;interrupt_beDeterred&apos;" Priority="200" IgnorePriorityOnPreviousInterrupt="true" urgency="Fast" Aliveness="$aliveness" Privileged="false" FastForward="false" />
									</Sequence>
								</Else>
							</EntityContextCheck>
						</IfCondition>
					</Then>
					<Else canSkip="1">
						<LogToConsole LogLevel="Info" Message="&apos;Npc entered sa_deterrentArea but game context global_deterrentAreasActive is not active!&apos;" />
					</Else>
				</GameContextCheck>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="aliveness" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<GameContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Then>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Else>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</SuppressFailure>
											<AddInterrupt hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</AddInterrupt>
										</Sequence>
									</Else>
								</EntityContextCheck>
							</IfCondition>
						</Then>
						<Else>
							<LogToConsole hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LogToConsole>
						</Else>
					</GameContextCheck>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="interrupt_beDeterred" is_function="0">
		<Variables>
			<Variable name="destination" type="vec3" values="" isPersistent="0" form="single" />
			<Variable name="deterredSpots" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="keepItems" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="randomizePositions" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="spot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="teleport" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="uselessArea" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
					<Child canSkip="1">
						<Sequence>
							<SuppressFailure>
								<Sequence>
									<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;reserveTagpoints&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									</GraphSearch>
									<AtomicDecorator>
										<Sequence>
											<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;deterredSpot&apos;" prune="true" negprune="unknown" Parent="" Child="$spot" Data="" />
												<Nodalyzer Quantifiers="ForAll" Parent="" Child="$deterredSpots" saveVersion="2">
													<Child0 canSkip="1">
														<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
													</Child0>
												</Nodalyzer>
												<NegationOp Results="true" Advance="true" EndOp="true" saveVersion="2">
													<Child0 canSkip="1">
														<ExistPath Origin="$spot" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
															<LinkTagFilter tag="&apos;reservedPoint&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
														</ExistPath>
													</Child0>
												</NegationOp>
											</GraphSearch>
											<AddLink From="$deterredSpots[0]" To="$this.id" Tag="&apos;reservedPoint&apos;" Data="" LinkOpHandleMode="Error" />
										</Sequence>
									</AtomicDecorator>
								</Sequence>
							</SuppressFailure>
							<IfCondition failOnCondition="false" condition="#deterredSpots == 0">
								<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;deterredSpot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									<Nodalyzer Quantifiers="ForAll" Parent="" Child="$deterredSpots" saveVersion="2">
										<Child0 canSkip="1">
											<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
										</Child0>
									</Nodalyzer>
								</GraphSearch>
							</IfCondition>
							<Selector>
								<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;doNotRandomizePositions&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								</GraphSearch>
								<Expression expressions="$randomizePositions = true" />
							</Selector>
							<Selector>
								<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;returnItems&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								</GraphSearch>
								<Expression expressions="$keepItems = true" />
							</Selector>
							<SuppressFailure>
								<Sequence>
									<GraphSearch Origin="$__area.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;instantlyTeleportAway&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									</GraphSearch>
									<Expression expressions="$teleport = true" />
								</Sequence>
							</SuppressFailure>
							<IsInsideAreaWithLabel Position="$deterredSpots[0]" Label="&apos;deterrentArea&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
								<Then canSkip="1">
									<ErrorNode Message="&apos;DETERRENT AREA ERROR! Destination tagpoint is inside the area!&apos;" />
								</Then>
								<Else canSkip="1">
									<Selector>
										<IfCondition failOnCondition="true" condition="$randomizePositions">
											<LoopUntil until="Success" attemptCount="5">
												<Sequence>
													<GetRandomPos StartPos="$deterredSpots[0]" PosExtentHor="1.000000" PosExtentVert="2.000000" MaxRange="5.000000" Precise="false" MaxIterantions="1" Target="$destination" navAgentType="Automatic" pathFindingParams="" />
													<IsInsideAreaWithLabel Position="$destination" Label="&apos;deterrentArea&apos;" Area="$uselessArea" FailSubtMissing="false" saveVersion="2">
														<Then canSkip="1">
															<Fail />
														</Then>
														<Else canSkip="1">
															<Success />
														</Else>
													</IsInsideAreaWithLabel>
												</Sequence>
											</LoopUntil>
										</IfCondition>
										<GetSpatialInfo In="$deterredSpots[0]" Out="$destination" What="Position" />
									</Selector>
								</Else>
							</IsInsideAreaWithLabel>
							<UrgencyDecorator Urgency="Slow">
								<AnyDecorator preset="crime_keepItems" enabled="$keepItems">
									<Parallel successMode="Any" failureMode="Any">
										<LogToLabel Name="&apos;deterrentArea&apos;" Wuid="$this.id" Message="&apos;deterredNpc&apos;">
											<Switch>
												<IsDeadCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<SetSpatialInfo In="$this.id" Val="$destination" What="Position" />
													</Then>
												</IsDeadCheck>
												<IsUnconsciousCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<SetSpatialInfo In="$this.id" Val="$destination" What="Position" />
													</Then>
												</IsUnconsciousCheck>
												<DefaultBranch>
													<Sequence>
														<IfElseCondition failOnCondition="false" condition="$teleport" saveVersion="2">
															<Then canSkip="1">
																<UrgencyDecorator Urgency="Instant">
																	<TeleportAction Position="$destination" EndInterruptOnActionStart="false" />
																</UrgencyDecorator>
															</Then>
															<Else canSkip="1">
																<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
															</Else>
														</IfElseCondition>
														<Turn target="$deterredSpots[0]" align="true" />
														<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
													</Sequence>
												</DefaultBranch>
											</Switch>
										</LogToLabel>
										<GameContextBarrier context="global_deterrentAreasActive" Negation="true" RunLogic="Halt">
											<Success />
										</GameContextBarrier>
									</Parallel>
								</AnyDecorator>
							</UrgencyDecorator>
						</Sequence>
					</Child>
					<OnFail canSkip="1">
						<IfCondition failOnCondition="false" condition="#deterredSpots &gt; 0">
							<RemoveLink From="$deterredSpots[0]" To="$this.id" Tag="&apos;reservedPoint&apos;" LinkOpHandleMode="Success" />
						</IfCondition>
					</OnFail>
				</FuseBox>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="destination" comment="" />
				<Variable name="deterredSpots" comment="" />
				<Variable name="keepItems" comment="" />
				<Variable name="randomizePositions" comment="" />
				<Variable name="spot" comment="" />
				<Variable name="teleport" comment="" />
				<Variable name="uselessArea" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
						<OutputBreakpoints />
						<Child>
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<AtomicDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
													<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child0>
															<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RangeSorter>
														</Child0>
													</Nodalyzer>
													<NegationOp hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child0>
															<ExistPath hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</LinkTagFilter>
															</ExistPath>
														</Child0>
													</NegationOp>
												</GraphSearch>
												<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AddLink>
											</Sequence>
										</AtomicDecorator>
									</Sequence>
								</SuppressFailure>
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
										<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Child0>
												<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</RangeSorter>
											</Child0>
										</Nodalyzer>
									</GraphSearch>
								</IfCondition>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Selector>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Selector>
								<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
								</SuppressFailure>
								<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
									<OutputBreakpoints />
									<Then>
										<ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ErrorNode>
									</Then>
									<Else>
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GetRandomPos hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</GetRandomPos>
														<IsInsideAreaWithLabel hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
															<OutputBreakpoints />
															<Then>
																<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Fail>
															</Then>
															<Else>
																<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Success>
															</Else>
														</IsInsideAreaWithLabel>
													</Sequence>
												</LoopUntil>
											</IfCondition>
											<GetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</GetSpatialInfo>
										</Selector>
									</Else>
								</IsInsideAreaWithLabel>
								<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<SetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetSpatialInfo>
														</Then>
													</IsDeadCheck>
													<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<SetSpatialInfo hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</SetSpatialInfo>
														</Then>
													</IsUnconsciousCheck>
													<DefaultBranch>
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<UrgencyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<TeleportAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</TeleportAction>
																	</UrgencyDecorator>
																</Then>
																<Else>
																	<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Move>
																</Else>
															</IfElseCondition>
															<Turn hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Turn>
															<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Wait>
														</Sequence>
													</DefaultBranch>
												</Switch>
											</LogToLabel>
											<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</GameContextBarrier>
										</Parallel>
									</AnyDecorator>
								</UrgencyDecorator>
							</Sequence>
						</Child>
						<OnFail>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</RemoveLink>
							</IfCondition>
						</OnFail>
					</FuseBox>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables>
			<Variable name="aliveness" type="enum:aliveness" values="$enum:aliveness.alive" isPersistent="0" form="single" />
			<Variable name="inhabitants" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="inhabitants_value" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<SuppressFailure>
					<Sequence>
						<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;deterDeadAndUnconscious&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						</GraphSearch>
						<Expression expressions="$aliveness = $enum:aliveness.any" />
					</Sequence>
				</SuppressFailure>
			</OnInit>
			<Behavior canSkip="1">
				<Loop count="-1">
					<GameContextBarrier context="global_deterrentAreasActive" Negation="false" RunLogic="Halt">
						<Sequence>
							<GetAreaInhabitants area="$this.id" targetVar="$inhabitants" />
							<ForEach startIndex="0" step="1" array="$inhabitants" iterator="" value="$inhabitants_value" break="">
								<IfCondition failOnCondition="false" condition="$inhabitants_value ~= $__player">
									<EntityContextCheck context="deterrenceImmunity" target="$inhabitants_value" saveVersion="2">
										<Else canSkip="1">
											<AddInterrupt Target="$inhabitants_value" Host="$this.id" Behavior="&apos;interrupt_beDeterred&apos;" Priority="200" IgnorePriorityOnPreviousInterrupt="true" urgency="Fast" Aliveness="$aliveness" Privileged="false" FastForward="false" />
										</Else>
									</EntityContextCheck>
								</IfCondition>
							</ForEach>
							<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
						</Sequence>
					</GameContextBarrier>
				</Loop>
			</Behavior>
		</Root>
		<ForestContainer />
		<EditorData EventSet="">
			<Variables>
				<Variable name="aliveness" comment="" />
				<Variable name="inhabitants" comment="" />
				<Variable name="inhabitants_value" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
							</GraphSearch>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</SuppressFailure>
				</OnInit>
				<Behavior>
					<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GameContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GetAreaInhabitants hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</GetAreaInhabitants>
								<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Else>
												<AddInterrupt hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</AddInterrupt>
											</Else>
										</EntityContextCheck>
									</IfCondition>
								</ForEach>
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</Sequence>
						</GameContextBarrier>
					</Loop>
				</Behavior>
			</Root>
			<Forest />
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>