<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="situation_gossipSharedBehavior" is_function="1">
    <Variables>
      <Variable name="availableSpot" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="distanceMeToOther" type="_float" values="" isPersistent="0" form="single" />
      <Variable name="me_inActivity" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="me_leftHand" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="me_rightHand" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="me_stance" type="enum:stanceCategory" values="" isPersistent="0" form="single" />
      <Variable name="me_stanceObject" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="me_stanceType" type="enum:situation_gossipStanceType" values="" isPersistent="0" form="single" />
      <Variable name="spots" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="you_inActivity" type="_bool" values="false" isPersistent="0" form="single" />
      <Variable name="you_stance" type="enum:stanceCategory" values="" isPersistent="0" form="single" />
      <Variable name="you_stanceObject" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="you_stanceType" type="enum:situation_gossipStanceType" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="gossipState" type="enum:situation_gossipState" values="" isPersistent="0" form="single" requirementType="Reference" />
      <Variable name="gossipTheOther" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" />
      <Variable name="shouldPlayDialogAnimations" type="_bool" values="false" isPersistent="0" form="single" requirementType="Reference" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <Sequence>
            <EntityContextCheck context="situation_gossipDuringActivity" target="$this.id" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$me_inActivity = true" />
              </Then>
            </EntityContextCheck>
            <EntityContextCheck context="situation_gossipDuringActivity" target="$gossipTheOther" saveVersion="2">
              <Then canSkip="1">
                <Expression expressions="$you_inActivity = true" />
              </Then>
            </EntityContextCheck>
            <Function_situation_gossipGetStanceType target="$this.id" stanceObject="$me_stanceObject" stanceType="$me_stanceType" nodeLabel="61131912" />
            <Function_situation_gossipGetStanceType target="$gossipTheOther" stanceObject="$you_stanceObject" stanceType="$you_stanceType" nodeLabel="74378380" />
            <HandCheck who="$this.id" LeftHand="$me_leftHand" RightHand="$me_rightHand" />
            <Expression expressions="$shouldPlayDialogAnimations = false" />
          </Sequence>
          <Switch>
            <IfCondition failOnCondition="false" condition="$me_stanceType == $enum:situation_gossipStanceType.standing &amp; &#10;$you_stanceType == $enum:situation_gossipStanceType.standing">
              <IfElseCondition failOnCondition="false" condition="~$me_inActivity &amp; &#10;~$you_inActivity" saveVersion="2">
                <Then canSkip="1">
                  <Sequence>
                    <MeasureDistance position1="$this.id" position2="$gossipTheOther" mode="ThreeDimensions" result="$distanceMeToOther" />
                    <Expression expressions="$shouldPlayDialogAnimations = true" />
                    <IfElseCondition failOnCondition="false" condition="$distanceMeToOther &gt; 1.5" saveVersion="2">
                      <Then canSkip="1">
                        <Expression expressions="$gossipState = $enum:situation_gossipState.useShapePositionMovement" />
                      </Then>
                      <Else canSkip="1">
                        <Expression expressions="$gossipState = $enum:situation_gossipState.useTurn" />
                      </Else>
                    </IfElseCondition>
                  </Sequence>
                </Then>
                <Else canSkip="1">
                  <IfElseCondition failOnCondition="false" condition="$me_inActivity &amp; ~$you_inActivity" saveVersion="2">
                    <Then canSkip="1">
                      <Expression expressions="$gossipState = $enum:situation_gossipState.readyForDialog" />
                    </Then>
                    <Else canSkip="1">
                      <Expression expressions="$gossipState = $enum:situation_gossipState.useBasicMovement" />
                    </Else>
                  </IfElseCondition>
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$me_stanceType == $enum:situation_gossipStanceType.standing &amp; &#10;$you_stanceType == $enum:situation_gossipStanceType.sitting">
              <IfElseCondition failOnCondition="false" condition="$me_rightHand ~= $__null | &#10;$me_leftHand ~= $__null" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$gossipState = $enum:situation_gossipState.exitGossipBehaviour" />
                </Then>
                <Else canSkip="1">
                  <Selector>
                    <EntityContext context="activity_disableSchedulerLooping" target="">
                      <ReserveBehavior reserveFrom="$availableSpot" behaviorName="&apos;use&apos;" saveVersion="2">
                        <Search canSkip="1">
                          <ReserveBehaviorSearch>
                            <Sequence>
                              <GraphSearch Origin="$you_stanceObject" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;neighbor&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                                <HasBehaviorFilter FilterChoice="Requestable" BehaviorList="&apos;use&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                                <Nodalyzer Quantifiers="ForAll" Parent="" Child="$spots" saveVersion="2">
                                  <Child0 canSkip="1">
                                    <RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
                                  </Child0>
                                </Nodalyzer>
                              </GraphSearch>
                              <Expression expressions="$availableSpot = $spots[0]" />
                            </Sequence>
                          </ReserveBehaviorSearch>
                        </Search>
                        <Exec canSkip="1">
                          <Parallel successMode="Any" failureMode="Any">
                            <CallBehavior Target="$availableSpot" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="43867190" />
                            <StanceBarrier soul="$this.id" stance="sitting" smartObject="$availableSpot" negate="false" failOnCondition="false" RunLogic="Halt">
                              <Sequence>
                                <Expression expressions="$gossipState = $enum:situation_gossipState.readyForDialog" />
                                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
                              </Sequence>
                            </StanceBarrier>
                          </Parallel>
                        </Exec>
                      </ReserveBehavior>
                    </EntityContext>
                    <Expression expressions="$gossipState = $enum:situation_gossipState.exitGossipBehaviour" />
                  </Selector>
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$me_stanceType == $enum:situation_gossipStanceType.standing &amp; &#10;$you_stanceType == $enum:situation_gossipStanceType.leaning">
              <IfElseCondition failOnCondition="false" condition="$me_rightHand ~= $__null | &#10;$me_leftHand ~= $__null" saveVersion="2">
                <Then canSkip="1">
                  <Expression expressions="$gossipState = $enum:situation_gossipState.useBasicMovement" />
                </Then>
                <Else canSkip="1">
                  <Selector>
                    <EntityContext context="activity_disableSchedulerLooping" target="">
                      <ReserveBehavior reserveFrom="$availableSpot" behaviorName="&apos;use&apos;" saveVersion="2">
                        <Search canSkip="1">
                          <ReserveBehaviorSearch>
                            <Sequence>
                              <GraphSearch Origin="$you_stanceObject" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;neighbor&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                                <HasBehaviorFilter FilterChoice="Requestable" BehaviorList="&apos;use&apos;" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                                <Nodalyzer Quantifiers="ForAll" Parent="" Child="$spots" saveVersion="2">
                                  <Child0 canSkip="1">
                                    <RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
                                  </Child0>
                                </Nodalyzer>
                              </GraphSearch>
                              <Expression expressions="$availableSpot = $spots[0]" />
                            </Sequence>
                          </ReserveBehaviorSearch>
                        </Search>
                        <Exec canSkip="1">
                          <Parallel successMode="Any" failureMode="Any">
                            <CallBehavior Target="$availableSpot" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="96688110" />
                            <EntityContextBarrier context="activity_leaning" target="$this.id" Negation="false" RunLogic="Halt">
                              <Sequence>
                                <Expression expressions="$gossipState = $enum:situation_gossipState.readyForDialog" />
                                <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
                              </Sequence>
                            </EntityContextBarrier>
                          </Parallel>
                        </Exec>
                      </ReserveBehavior>
                    </EntityContext>
                    <Expression expressions="$gossipState = $enum:situation_gossipState.useBasicMovement" />
                  </Selector>
                </Else>
              </IfElseCondition>
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$me_stanceType == $enum:situation_gossipStanceType.sitting &amp; &#10;$you_stanceType == $enum:situation_gossipStanceType.standing">
              <Expression expressions="$gossipState = $enum:situation_gossipState.readyForDialog" />
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$me_stanceType == $enum:situation_gossipStanceType.leaning &amp; &#10;$you_stanceType == $enum:situation_gossipStanceType.standing">
              <Expression expressions="$gossipState = $enum:situation_gossipState.readyForDialog" />
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$me_stanceType == $enum:situation_gossipStanceType.sitting &amp; &#10;$you_stanceType == $enum:situation_gossipStanceType.sitting">
              <Selector>
                <Sequence>
                  <GraphSearch Origin="$me_stanceObject" Borders="" depth="2" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="&apos;neighbor,oppositeNeighbor&apos;" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
                    <WUIDFilter WUID="$you_stanceObject" Source="Child" prune="true" negprune="unknown" Parent="" Child="" />
                  </GraphSearch>
                  <Expression expressions="$gossipState = $enum:situation_gossipState.readyForDialog" />
                </Sequence>
                <Expression expressions="$gossipState = $enum:situation_gossipState.exitGossipBehaviour" />
              </Selector>
            </IfCondition>
            <DefaultBranch>
              <Expression expressions="$gossipState = $enum:situation_gossipState.exitGossipBehaviour" />
            </DefaultBranch>
          </Switch>
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="availableSpot" comment="" />
        <Variable name="distanceMeToOther" comment="" />
        <Variable name="me_inActivity" comment="" />
        <Variable name="me_leftHand" comment="" />
        <Variable name="me_rightHand" comment="" />
        <Variable name="me_stance" comment="" />
        <Variable name="me_stanceObject" comment="" />
        <Variable name="me_stanceType" comment="" />
        <Variable name="spots" comment="" />
        <Variable name="you_inActivity" comment="" />
        <Variable name="you_stance" comment="" />
        <Variable name="you_stanceObject" comment="" />
        <Variable name="you_stanceType" comment="" />
        <Variable name="gossipState" comment="" />
        <Variable name="gossipTheOther" comment="" />
        <Variable name="shouldPlayDialogAnimations" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
              </EntityContextCheck>
              <EntityContextCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                <OutputBreakpoints />
                <Then>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Then>
              </EntityContextCheck>
              <Function_situation_gossipGetStanceType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_situation_gossipGetStanceType>
              <Function_situation_gossipGetStanceType hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Function_situation_gossipGetStanceType>
              <HandCheck hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </HandCheck>
              <Expression hasInputBreakpoint="0" comment="Default" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
            </Sequence>
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </MeasureDistance>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                      <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                        <OutputBreakpoints />
                        <Then>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Then>
                        <Else>
                          <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                            <OutputBreakpoints />
                          </Expression>
                        </Else>
                      </IfElseCondition>
                    </Sequence>
                  </Then>
                  <Else>
                    <IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                      <OutputBreakpoints />
                      <Then>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Then>
                      <Else>
                        <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Expression>
                      </Else>
                    </IfElseCondition>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="Shouldn&apos;t sit if hands aren&apos;t empty" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <ReserveBehavior hasInputBreakpoint="0" comment="Try to sit next to the receiver" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Search>
                            <ReserveBehaviorSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <HasBehaviorFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </HasBehaviorFilter>
                                  <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Child0>
                                      <RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </RangeSorter>
                                    </Child0>
                                  </Nodalyzer>
                                </GraphSearch>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </ReserveBehaviorSearch>
                          </Search>
                          <Exec>
                            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </CallBehavior>
                              <StanceBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Wait>
                                </Sequence>
                              </StanceBarrier>
                            </Parallel>
                          </Exec>
                        </ReserveBehavior>
                      </EntityContext>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Selector>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfElseCondition hasInputBreakpoint="0" comment="Shouldn&apos;t lean if hands aren&apos;t empty" breakpointFlags="0" saveVersion="2">
                  <OutputBreakpoints />
                  <Then>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Then>
                  <Else>
                    <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <ReserveBehavior hasInputBreakpoint="0" comment="Try leaning neighbor" breakpointFlags="0" saveVersion="2">
                          <OutputBreakpoints />
                          <Search>
                            <ReserveBehaviorSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <HasBehaviorFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </HasBehaviorFilter>
                                  <Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
                                    <OutputBreakpoints />
                                    <Child0>
                                      <RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                        <OutputBreakpoints />
                                      </RangeSorter>
                                    </Child0>
                                  </Nodalyzer>
                                </GraphSearch>
                                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                </Expression>
                              </Sequence>
                            </ReserveBehaviorSearch>
                          </Search>
                          <Exec>
                            <Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
                              <OutputBreakpoints />
                              <CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                              </CallBehavior>
                              <EntityContextBarrier hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                <OutputBreakpoints />
                                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                  <OutputBreakpoints />
                                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Expression>
                                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                                    <OutputBreakpoints />
                                  </Wait>
                                </Sequence>
                              </EntityContextBarrier>
                            </Parallel>
                          </Exec>
                        </ReserveBehavior>
                      </EntityContext>
                      <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </Expression>
                    </Selector>
                  </Else>
                </IfElseCondition>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <WUIDFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                      </WUIDFilter>
                    </GraphSearch>
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                  </Sequence>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Selector>
              </IfCondition>
              <DefaultBranch>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </DefaultBranch>
            </Switch>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>