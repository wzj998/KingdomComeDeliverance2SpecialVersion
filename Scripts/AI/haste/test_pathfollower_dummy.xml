<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="onUpdate" is_function="0">
    <Variables>
      <Variable name="movementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
      <Variable name="position" type="vec3" values="" isPersistent="0" form="single" />
      <Variable name="str_speed" type="_string" values="" isPersistent="0" form="single" />
      <Variable name="timeToLive" type="_float" values="7.0" isPersistent="0" form="single" />
    </Variables>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Sequence>
          <LogToLabel Name="&apos;Path follower dummy&apos;" Wuid="$this.id" Message="&apos;Waiting to move&apos;">
            <Wait duration="&apos;3s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
          </LogToLabel>
          <ExecuteLua code="local tbl = PathfindDebugUtils.FindDataTable(entity.id) &#10;data.position = tbl.Pos &#10; &#10;data.str_speed = PathfindDebugUtils.GetNPCSpeed()" />
          <Switch>
            <IfCondition failOnCondition="false" condition="$str_speed == &apos;walk&apos;">
              <Expression expressions="$movementSpeed = $enum:movementSpeed.walk" />
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$str_speed == &apos;run&apos;">
              <Expression expressions="$movementSpeed = $enum:movementSpeed.run" />
            </IfCondition>
            <IfCondition failOnCondition="false" condition="$str_speed == &apos;sprint&apos;">
              <Expression expressions="$movementSpeed = $enum:movementSpeed.sprint" />
            </IfCondition>
            <DefaultBranch>
              <Expression expressions="$movementSpeed = $enum:movementSpeed.walk" />
            </DefaultBranch>
          </Switch>
          <LogToLabel Name="&apos;Path follower dummy&apos;" Wuid="$this.id" Message="&apos;Moving to $position&apos;">
            <Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="false" fastForwardIncludesMove="false" destinationSpecification="$position" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
          </LogToLabel>
          <LogToLabel Name="&apos;Path follower dummy&apos;" Wuid="$this.id" Message="&apos;Despawn in $timeToLive seconds&apos;">
            <Loop count="10">
              <Sequence>
                <Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" skipInLOD="false" />
                <Expression expressions="$timeToLive -= 1" />
              </Sequence>
            </Loop>
          </LogToLabel>
          <Despawn DeSpawnedEntity="$this.id" />
        </Sequence>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="movementSpeed" comment="" />
        <Variable name="position" comment="" />
        <Variable name="str_speed" comment="" />
        <Variable name="timeToLive" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Wait>
            </LogToLabel>
            <ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </ExecuteLua>
            <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </IfCondition>
              <DefaultBranch>
                <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Expression>
              </DefaultBranch>
            </Switch>
            <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Move>
            </LogToLabel>
            <LogToLabel hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Wait>
                  <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </Expression>
                </Sequence>
              </Loop>
            </LogToLabel>
            <Despawn hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
            </Despawn>
          </Sequence>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>