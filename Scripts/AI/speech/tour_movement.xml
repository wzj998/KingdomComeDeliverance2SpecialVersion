<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="speech_tour_movement" is_function="1">
		<Variables>
			<Variable name="addParams" type="additionalMoveParams" values="" isPersistent="0" form="single" />
			<Variable name="currentAlias_movement" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="currentDestination" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="currentOnPlayerLeft_wait" type="enum:tour_onPlayerLeft_wait" values="" isPersistent="0" form="single" />
			<Variable name="finalTagpointReached" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="myDistanceToDestination" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="myMovementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" />
			<Variable name="pathFindingParams" type="pathFindingParams" values="" isPersistent="0" form="single" />
			<Variable name="playerDistanceToDestination" type="_float" values="" isPersistent="0" form="single" />
			<Variable name="progressRide" type="enum:tour_tourProgress" values="" isPersistent="0" form="single" />
			<Variable name="saveMovementSpeed" type="_bool" values="true" isPersistent="0" form="single" />
		</Variables>
		<Parameters>
			<Variable name="alias" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="destination" type="_wuid" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="dialogFinishedAndTagpointReachedLock" type="_string" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="finalTagpoint" type="_wuid" values="" isPersistent="0" form="single" requirementType="In" optional="1" />
			<Variable name="movementSpeed" type="enum:movementSpeed" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="nextPhaseTrigger" type="enum:tour_nextPhaseTrigger" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="onPlayerLeft_wait" type="enum:tour_onPlayerLeft_wait" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="onTagpointReached_turnOnPlayer" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="pathOffset" type="_float" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="playerLeft_maxReactionDistance" type="_float" values="" isPersistent="0" form="single" requirementType="In" />
			<Variable name="progressTour" type="enum:tour_tourProgress" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="successDistance" type="_float" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="successDistanceMove" type="_bool" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="turningCooldown" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
			<Variable name="turningCooldownVariation" type="_string" values="" isPersistent="0" form="single" requirementType="ConstReference" />
		</Parameters>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<Sequence>
					<Expression expressions="$addParams.destChangedThreshold = &apos;300ms&apos;" />
					<Switch>
						<IfCondition failOnCondition="false" condition="$progressTour == $enum:tour_tourProgress.none &amp; &#10;$onPlayerLeft_wait == $enum:tour_onPlayerLeft_wait.afterPlayerGetsClose">
							<Expression expressions="$progressRide = $enum:tour_tourProgress.progress" />
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$progressTour == $enum:tour_tourProgress.none &amp; &#10;$onPlayerLeft_wait == $enum:tour_onPlayerLeft_wait.always">
							<Expression expressions="$progressRide = $enum:tour_tourProgress.stop" />
						</IfCondition>
						<DefaultBranch>
							<Success />
						</DefaultBranch>
					</Switch>
				</Sequence>
			</OnInit>
			<Behavior canSkip="1">
				<Parallel successMode="Any" failureMode="Any">
					<ContinuousSwitch>
						<IfCondition failOnCondition="false" condition="$progressRide == $enum:tour_tourProgress.progress">
							<Sequence>
								<Expression expressions="$currentAlias_movement = $alias &#10;$currentDestination = $destination &#10;$pathFindingParams.pathOffset = $pathOffset" />
								<MoveParamsDecorator speed="$movementSpeed" pathFindingParams="$pathFindingParams" doorClosingPolicy="LeaveOpened">
									<IfElseCondition failOnCondition="false" condition="$successDistanceMove" saveVersion="2">
										<Then canSkip="1">
											<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="$successDistance" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$addParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
										</Then>
										<Else canSkip="1">
											<ExactMove directionType="AlignWithEntity" directionSpecification="$destination" animationTriggerDist="0.150000" precise="true" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$destination" destinationSpecification2="" destinationSpecification3="" speed="$movementSpeed" additionalParams="$addParams" pathFindingParams="$pathFindingParams" staminaPolicy="" pathInfo="" />
										</Else>
									</IfElseCondition>
								</MoveParamsDecorator>
								<Parallel successMode="Any" failureMode="Any">
									<Selector>
										<IfCondition failOnCondition="true" condition="$destination == $finalTagpoint &amp; &#10;$nextPhaseTrigger == $enum:tour_nextPhaseTrigger.tagpointReached">
											<Expression expressions="$finalTagpointReached = true" />
										</IfCondition>
										<IfCondition failOnCondition="true" condition="$nextPhaseTrigger == $enum:tour_nextPhaseTrigger.tagpointReached &amp; &#10;$currentDestination == $destination">
											<Callback_empty EventName="&apos;OnTagpointReached&apos;" />
										</IfCondition>
										<IfCondition failOnCondition="true" condition="$nextPhaseTrigger == $enum:tour_nextPhaseTrigger.both &amp; &#10;$currentDestination == $destination">
											<Synchronize SemaphoreCount="3" InsideTimerValue="&apos;-1&apos;" InvalidateOnExpire="false" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;$dialogFinishedAndTagpointReachedLock&apos;" RunLogic="KeepRunning">
												<IfCondition failOnCondition="false" condition="$destination == $finalTagpoint">
													<Expression expressions="$finalTagpointReached = true" />
												</IfCondition>
											</Synchronize>
										</IfCondition>
										<Sequence>
											<GraphSearch Origin="$destination" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;tourFinalTagpoint&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
											</GraphSearch>
											<Expression expressions="$finalTagpointReached = true" />
										</Sequence>
										<IfGate atomic="false" condition="$currentAlias_movement ~= $alias | &#10;$currentDestination ~= $destination" RunLogic="KeepRunning">
											<Success />
										</IfGate>
									</Selector>
									<Sequence>
										<IfCondition failOnCondition="false" condition="$onTagpointReached_turnOnPlayer &amp; &#10;$nextPhaseTrigger ~= $enum:tour_nextPhaseTrigger.tagpointReached">
											<Function_speech_tour_onTagpointReachedTurning destination="$destination" movementSpeed="$movementSpeed" onTagpointReached_turnOnPlayer="$onTagpointReached_turnOnPlayer" playerLeft_maxReactionDistance="$playerLeft_maxReactionDistance" successDistanceMove="$successDistanceMove" turningCooldown="$turningCooldown" turningCooldownVariation="$turningCooldownVariation" nodeLabel="35139801" />
										</IfCondition>
										<EntityContext context="tour_reachedTagpoint" target="">
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</EntityContext>
									</Sequence>
								</Parallel>
							</Sequence>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="$progressRide == $enum:tour_tourProgress.stop">
							<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$playerLeft_maxReactionDistance" High="$playerLeft_maxReactionDistance" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
								<EntityContext context="tour_waitingForPlayer" target="">
									<Function_speech_tour_turnOnPlayer turningCooldown="$turningCooldown" turningCooldownVariation="$turningCooldownVariation" nodeLabel="49212631" />
								</EntityContext>
							</DistanceGate>
						</IfCondition>
						<IfCondition failOnCondition="false" condition="true">
							<Wait duration="&apos;10s&apos;" timeType="GameTime" doFail="false" variation="" />
						</IfCondition>
					</ContinuousSwitch>
					<While doFail="false" propagateChildFail="false" condition="true">
						<Sequence>
							<Expression expressions="$currentOnPlayerLeft_wait = $onPlayerLeft_wait" />
							<IfGate atomic="false" condition="$currentOnPlayerLeft_wait == $onPlayerLeft_wait" RunLogic="Halt">
								<IfElseCondition failOnCondition="false" condition="$currentOnPlayerLeft_wait ~= $enum:tour_onPlayerLeft_wait.never" saveVersion="2">
									<Then canSkip="1">
										<IfGate atomic="false" condition="$progressRide ~= $progressTour &amp; &#10;$progressTour ~= $enum:tour_tourProgress.none" RunLogic="KeepRunning">
											<Sequence>
												<IfCondition failOnCondition="false" condition="$progressTour == $enum:tour_tourProgress.stop">
													<Sequence>
														<ReinitVariable variable="$saveMovementSpeed" />
														<LoopUntil until="Success" attemptCount="0">
															<Sequence>
																<IfCondition failOnCondition="false" condition="$saveMovementSpeed">
																	<Expression expressions="$myMovementSpeed = $movementSpeed" />
																</IfCondition>
																<MeasureDistance position1="$__player" position2="$destination" mode="ThreeDimensions" result="$playerDistanceToDestination" />
																<MeasureDistance position1="$this.id" position2="$destination" mode="ThreeDimensions" result="$myDistanceToDestination" />
																<IfCondition failOnCondition="false" condition="$myDistanceToDestination &gt; $playerDistanceToDestination + 5">
																	<Sequence>
																		<IfCondition failOnCondition="false" condition="$movementSpeed &lt; $enum:movementSpeed.run">
																			<Expression expressions="$movementSpeed = $enum:movementSpeed.run" />
																		</IfCondition>
																		<Parallel successMode="Any" failureMode="Any">
																			<IfGate atomic="false" condition="$progressTour == $enum:tour_tourProgress.progress | &#10;$currentDestination ~= $destination" RunLogic="KeepRunning">
																				<Success />
																			</IfGate>
																			<DistanceGate Origin="$this.id" ReferencePt="$destination" Low="$playerDistanceToDestination" High="$playerDistanceToDestination" Negation="false" OpenInMiddle="false" RunLogic="KeepRunning">
																				<Invertor>
																					<Expression expressions="$saveMovementSpeed = false" />
																				</Invertor>
																			</DistanceGate>
																			<IfGate atomic="false" condition="$movementSpeed ~= $enum:movementSpeed.run &amp; &#10;$movementSpeed ~= $myMovementSpeed" RunLogic="KeepRunning">
																				<Invertor>
																					<Expression expressions="$saveMovementSpeed = true" />
																				</Invertor>
																			</IfGate>
																		</Parallel>
																	</Sequence>
																</IfCondition>
																<Expression expressions="$movementSpeed = $myMovementSpeed" />
															</Sequence>
														</LoopUntil>
													</Sequence>
												</IfCondition>
												<Expression expressions="$progressRide = $progressTour" />
											</Sequence>
										</IfGate>
									</Then>
									<Else canSkip="1">
										<Sequence>
											<Expression expressions="$progressRide = $enum:tour_tourProgress.progress" />
											<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
										</Sequence>
									</Else>
								</IfElseCondition>
							</IfGate>
						</Sequence>
					</While>
					<IfGate atomic="false" condition="$finalTagpointReached" RunLogic="KeepRunning">
						<Success />
					</IfGate>
				</Parallel>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfElseCondition failOnCondition="false" condition="$successDistanceMove" saveVersion="2">
				<Then canSkip="1">
					<IfGate atomic="false" condition="$successDistanceMove" RunLogic="Halt">
						<Sequence>
							<Expression expressions="$reachedDestination = true" />
						</Sequence>
					</IfGate>
				</Then>
				<Else canSkip="1">
					<IfGate atomic="false" condition="!$successDistanceMove" RunLogic="Halt">
						<Sequence>
							<Expression expressions="$reachedDestination = true" />
						</Sequence>
					</IfGate>
				</Else>
			</IfElseCondition>
			<While doFail="false" propagateChildFail="false" condition="!$reachedDestination" />
			<IfElseCondition failOnCondition="false" condition="$onTagpointReached_turnOnPlayer | &#10;!$successDistanceMove" saveVersion="2" />
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="addParams" comment="" />
				<Variable name="currentAlias_movement" comment="" />
				<Variable name="currentDestination" comment="" />
				<Variable name="currentOnPlayerLeft_wait" comment="" />
				<Variable name="finalTagpointReached" comment="" />
				<Variable name="myDistanceToDestination" comment="" />
				<Variable name="myMovementSpeed" comment="" />
				<Variable name="pathFindingParams" comment="" />
				<Variable name="playerDistanceToDestination" comment="" />
				<Variable name="progressRide" comment="" />
				<Variable name="saveMovementSpeed" comment="" />
				<Variable name="alias" comment="" />
				<Variable name="destination" comment="" />
				<Variable name="dialogFinishedAndTagpointReachedLock" comment="" />
				<Variable name="finalTagpoint" comment="" />
				<Variable name="movementSpeed" comment="" />
				<Variable name="nextPhaseTrigger" comment="" />
				<Variable name="onPlayerLeft_wait" comment="" />
				<Variable name="onTagpointReached_turnOnPlayer" comment="" />
				<Variable name="pathOffset" comment="" />
				<Variable name="playerLeft_maxReactionDistance" comment="" />
				<Variable name="progressTour" comment="" />
				<Variable name="successDistance" comment="" />
				<Variable name="successDistanceMove" comment="" />
				<Variable name="turningCooldown" comment="" />
				<Variable name="turningCooldownVariation" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Expression>
						<Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</IfCondition>
							<DefaultBranch>
								<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Success>
							</DefaultBranch>
						</Switch>
					</Sequence>
				</OnInit>
				<Behavior>
					<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<ContinuousSwitch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<MoveParamsDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
											<OutputBreakpoints />
											<Then>
												<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Move>
											</Then>
											<Else>
												<ExactMove hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ExactMove>
											</Else>
										</IfElseCondition>
									</MoveParamsDecorator>
									<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Callback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Callback_empty>
											</IfCondition>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Synchronize hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
													</IfCondition>
												</Synchronize>
											</IfCondition>
											<Sequence hasInputBreakpoint="0" comment="Delete this sequence and its children when certain that nobody longer uses this way of ending tour" breakpointFlags="0">
												<OutputBreakpoints />
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
												</GraphSearch>
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
											</Sequence>
											<IfGate hasInputBreakpoint="0" comment="If nextPhaseTrigger is dialogFinished or none then Npc waits here" breakpointFlags="0">
												<OutputBreakpoints />
												<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Success>
											</IfGate>
										</Selector>
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Function_speech_tour_onTagpointReachedTurning hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Function_speech_tour_onTagpointReachedTurning>
											</IfCondition>
											<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</EntityContext>
										</Sequence>
									</Parallel>
								</Sequence>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<EntityContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Function_speech_tour_turnOnPlayer hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_speech_tour_turnOnPlayer>
									</EntityContext>
								</DistanceGate>
							</IfCondition>
							<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Wait>
							</IfCondition>
						</ContinuousSwitch>
						<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</ReinitVariable>
															<LoopUntil hasInputBreakpoint="0" comment="This loops ends when I am closer to destination than player or player returns back to me or I reached my destination." breakpointFlags="0">
																<OutputBreakpoints />
																<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Expression>
																	</IfCondition>
																	<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</MeasureDistance>
																	<MeasureDistance hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</MeasureDistance>
																	<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																			</IfCondition>
																			<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<IfGate hasInputBreakpoint="0" comment="When player is back  or my destination changed I restart my speed to initial value" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																					</Success>
																				</IfGate>
																				<DistanceGate hasInputBreakpoint="0" comment="When I get closer to destination than initial measured distance between player and destination I remeasure distances by failing this child with invertor" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Invertor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="I don t want to save my speed because I can now move with changed speed that I am not supposed to move with when player is close" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Invertor>
																				</DistanceGate>
																				<IfGate hasInputBreakpoint="0" comment="If my speed changes when trying to get closer than player to my destination I reameasure distances by failing this child with invertor" breakpointFlags="0">
																					<OutputBreakpoints />
																					<Invertor hasInputBreakpoint="0" comment="" breakpointFlags="0">
																						<OutputBreakpoints />
																						<Expression hasInputBreakpoint="0" comment="I want to save my speed because my speed has changed" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Invertor>
																				</IfGate>
																			</Parallel>
																		</Sequence>
																	</IfCondition>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Sequence>
															</LoopUntil>
														</Sequence>
													</IfCondition>
													<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Expression>
												</Sequence>
											</IfGate>
										</Then>
										<Else>
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Expression>
												<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</Wait>
											</Sequence>
										</Else>
									</IfElseCondition>
								</IfGate>
							</Sequence>
						</While>
						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</IfGate>
					</Parallel>
				</Behavior>
			</Root>
			<Forest>
				<IfElseCondition editorPosX="2850" editorPosY="-720" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfGate>
					</Then>
					<Else>
						<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
						</IfGate>
					</Else>
				</IfElseCondition>
				<While editorPosX="2570" editorPosY="-720" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</While>
				<IfElseCondition editorPosX="2120" editorPosY="550" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
				</IfElseCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>