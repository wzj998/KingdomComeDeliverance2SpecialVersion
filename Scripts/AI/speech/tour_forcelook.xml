<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
  <BehaviorTree name="speech_tour_forceLook" is_function="1">
    <Variables>
      <Variable name="currentFirstLooker" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="currentLookTarget" type="_wuid" values="" isPersistent="0" form="single" />
      <Variable name="currentLookersArrayLength" type="_int" values="" isPersistent="0" form="single" />
      <Variable name="index" type="_int" values="" isPersistent="0" form="single" />
    </Variables>
    <Parameters>
      <Variable name="lookTargets" type="_wuid" values="" isPersistent="0" form="array" requirementType="ConstReference" />
      <Variable name="lookers" type="_wuid" values="" isPersistent="0" form="array" requirementType="ConstReference" />
    </Parameters>
    <Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
      <Behavior canSkip="1">
        <Selector>
          <Sequence>
            <FindInArray array="$lookers" keyOut="$index" condition="$__value == $this.id" />
            <Switch>
              <IfCondition failOnCondition="false" condition="#lookTargets &gt; $index">
                <Sequence>
                  <Expression expressions="$currentLookTarget = $lookTargets[$index]" />
                  <IfGate atomic="false" condition="$lookers[$index] == $this.id &amp; &#10;$lookTargets[$index] == $currentLookTarget" RunLogic="Halt">
                    <ForceLook LookTarget="$currentLookTarget" DisableVariations="true">
                      <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
                    </ForceLook>
                  </IfGate>
                </Sequence>
              </IfCondition>
              <IfCondition failOnCondition="false" condition="#lookTargets == 1">
                <Sequence>
                  <Expression expressions="$currentLookTarget = $lookTargets[0]" />
                  <IfGate atomic="false" condition="$lookers[$index] == $this.id &amp; &#10;#lookTargets == 1 &amp; &#10;$lookTargets[0] == $currentLookTarget" RunLogic="Halt">
                    <ForceLook LookTarget="$currentLookTarget" DisableVariations="true">
                      <Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
                    </ForceLook>
                  </IfGate>
                </Sequence>
              </IfCondition>
              <DefaultBranch>
                <ErrorNode Message="&apos;lookTargets $this.name index out of bounds and force look will be ignored. Make sure that lookTargets and lookers arrays have correct length&apos;" />
              </DefaultBranch>
            </Switch>
          </Sequence>
          <Sequence>
            <Expression expressions="$currentFirstLooker = $lookers[0] &#10;$currentLookersArrayLength = #lookers" />
            <IfGate atomic="false" condition="$lookers[0] ~= $currentFirstLooker | &#10;$currentLookersArrayLength ~= #lookers" RunLogic="KeepRunning">
              <Success />
            </IfGate>
          </Sequence>
        </Selector>
      </Behavior>
    </Root>
    <ForestContainer />
    <EditorData EventSet="">
      <Variables>
        <Variable name="currentFirstLooker" comment="" />
        <Variable name="currentLookTarget" comment="" />
        <Variable name="currentLookersArrayLength" comment="" />
        <Variable name="index" comment="" />
        <Variable name="lookTargets" comment="" />
        <Variable name="lookers" comment="" />
      </Variables>
      <ForwardDeclarations />
      <Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
        <OutputBreakpoints />
        <Behavior>
          <Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
            <OutputBreakpoints />
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </FindInArray>
              <Switch hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                    <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </ForceLook>
                    </IfGate>
                  </Sequence>
                </IfCondition>
                <IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                  <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                    <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                    </Expression>
                    <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                      <OutputBreakpoints />
                      <ForceLook hasInputBreakpoint="0" comment="" breakpointFlags="0">
                        <OutputBreakpoints />
                        <Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
                          <OutputBreakpoints />
                        </Wait>
                      </ForceLook>
                    </IfGate>
                  </Sequence>
                </IfCondition>
                <DefaultBranch>
                  <ErrorNode hasInputBreakpoint="0" comment="" breakpointFlags="0">
                    <OutputBreakpoints />
                  </ErrorNode>
                </DefaultBranch>
              </Switch>
            </Sequence>
            <Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
              <OutputBreakpoints />
              <Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
              </Expression>
              <IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
                <OutputBreakpoints />
                <Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
                  <OutputBreakpoints />
                </Success>
              </IfGate>
            </Sequence>
          </Selector>
        </Behavior>
      </Root>
      <Forest />
      <Comments />
    </EditorData>
  </BehaviorTree>
</BehaviorTrees>