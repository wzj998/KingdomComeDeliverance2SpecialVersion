<?xml version="1.0" encoding="us-ascii"?>
<BehaviorTrees>
	<BehaviorTree name="onUpdate" is_function="0">
		<Variables>
			<Variable name="alreadyStarted" type="_bool" values="" isPersistent="1" form="single" />
			<Variable name="alreadyUsed" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="arrayKey" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="awakenNpc" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="behaviorSuccess" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="climber" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="controller" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="controllers" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="controllersNpcs" type="_int" values="" isPersistent="0" form="array" />
			<Variable name="droppedNPCs" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="freeLadder" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="freeLadderIterator" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="freeLadders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="index" type="_int" values="0" isPersistent="0" form="single" />
			<Variable name="init" type="_string" values="" isPersistent="0" form="single" />
			<Variable name="iterator" type="_int" values="" isPersistent="0" form="single" />
			<Variable name="ladder" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderActive" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderAvailability" type="_wuid,_int" values="" isPersistent="0" form="custom_associative" />
			<Variable name="ladderEntity" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderSlot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderSlots" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="ladders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="particle" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="particles" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="queueTps" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="sender" type="senderInfo" values="" isPersistent="0" form="single" />
			<Variable name="waitForSpecialGroupLink" type="_bool" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<IfCondition failOnCondition="false" condition="!$alreadyStarted">
						<ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$init" senderInfo="" inbox="&apos;battle_groupController_init&apos;" condition="" />
					</IfCondition>
					<Selector>
						<Sequence>
							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;particle&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								<Nodalyzer Quantifiers="ForAll" Parent="" Child="$particles" saveVersion="2" />
							</GraphSearch>
							<For startIndex="0" endIndex="-1" step="1" array="$particles" iterator="" value="$particle" break="">
								<ParticleEffectControl ParticleWuid="$particle" StartStopChoice="Start" />
							</For>
						</Sequence>
						<Success />
					</Selector>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;groupController&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$controllers" saveVersion="2" />
					</GraphSearch>
					<Selector>
						<Sequence>
							<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;groupLink&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							</GraphSearch>
							<Expression expressions="$waitForSpecialGroupLink = true" />
						</Sequence>
						<Expression expressions="$waitForSpecialGroupLink = false" />
					</Selector>
					<ForEach startIndex="0" step="1" array="$controllers" iterator="" value="" break="">
						<PushToArray array="$controllersNpcs" value="$index" direction="Back" />
					</ForEach>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$ladders" saveVersion="2" />
					</GraphSearch>
					<ForEach startIndex="0" step="1" array="$ladders" iterator="" value="$ladder" break="">
						<Sequence>
							<ReinitVariable variable="$queueTps" />
							<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;queue&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								<Nodalyzer Quantifiers="ForAll" Parent="" Child="$queueTps" saveVersion="2" />
							</GraphSearch>
							<Expression expressions="$ladderAvailability[$ladder] = #queueTps" />
							<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;ladderSlot&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderSlot" Data="" />
							</GraphSearch>
							<PushToArray array="$ladderSlots" value="$ladderSlot" direction="Back" />
							<Selector>
								<GraphSearch Origin="$ladderSlot" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;SlotLink&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								</GraphSearch>
								<Sequence>
									<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderEntity" Data="" />
									</GraphSearch>
									<SetVisibility ItemWUID="$ladderEntity" Visibility="false" />
								</Sequence>
							</Selector>
						</Sequence>
					</ForEach>
					<Parallel successMode="Any" failureMode="Any">
						<Sequence>
							<IfCondition failOnCondition="false" condition="!$alreadyStarted">
								<Sequence>
									<SendAIConceptSignal_battleCommandComplete group="$this.id" success="true" />
									<ReadMessage timeout="&apos;-1&apos;" timeType="GameTime" variable="$init" senderInfo="" inbox="&apos;battle_groupController_init&apos;" condition="" />
									<Expression expressions="$alreadyStarted = true" />
								</Sequence>
							</IfCondition>
							<Parallel successMode="Any" failureMode="Any">
								<Loop count="-1">
									<LinkGate from="$ladders" to="" tag="&apos;battleLadder_active&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
										<While doFail="false" propagateChildFail="false" condition="#controllers &gt; 0">
											<IfGate atomic="false" condition="#freeLadders &gt; 0" RunLogic="KeepRunning">
												<ForEach startIndex="0" step="1" array="$freeLadders" iterator="$freeLadderIterator" value="$freeLadder" break="">
													<Selector>
														<Sequence>
															<GraphSearch Origin="$freeLadder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;battleLadder_active&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
															</GraphSearch>
															<IfCondition failOnCondition="false" condition="$waitForSpecialGroupLink">
																<GraphSearch Origin="$controllers[$index]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																	<LinkTagFilter tag="&apos;groupAwakeLink&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																</GraphSearch>
															</IfCondition>
															<IfCondition failOnCondition="true" condition="$ladderAvailability[$freeLadder] &gt; 0 | $controllersNpcs[$index] == 0">
																<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
																	<Child canSkip="1">
																		<Sequence>
																			<RequestBattleNPC TargetObject="$controllers[$index]" ReferencePoint="$freeLadder" Priority="Normal" RequestedNPCVarOut="$awakenNpc" />
																			<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
																		</Sequence>
																	</Child>
																	<OnSuccess canSkip="1">
																		<Sequence>
																			<Expression expressions="$ladderAvailability[$freeLadder] -= 1 &#10;$controllersNpcs[$index] += 1" />
																			<IfElseCondition failOnCondition="false" condition="$index + 1 &lt; #controllers" saveVersion="2">
																				<Then canSkip="1">
																					<Expression expressions="$index += 1" />
																				</Then>
																				<Else canSkip="1">
																					<Expression expressions="$index = 0" />
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																	</OnSuccess>
																	<OnFail canSkip="1">
																		<Sequence>
																			<EraseFromArray array="$controllers" condition="$__key == $index" />
																			<IfElseCondition failOnCondition="false" condition="$index &lt; #controllers" saveVersion="2">
																				<Then canSkip="1">
																					<Success />
																				</Then>
																				<Else canSkip="1">
																					<Expression expressions="$index = 0" />
																				</Else>
																			</IfElseCondition>
																		</Sequence>
																	</OnFail>
																</FuseBox>
															</IfCondition>
														</Sequence>
														<IfElseCondition failOnCondition="false" condition="$index + 1 &lt; #controllers" saveVersion="2">
															<Then canSkip="1">
																<Expression expressions="$index += 1" />
															</Then>
															<Else canSkip="1">
																<Expression expressions="$index = 0" />
															</Else>
														</IfElseCondition>
													</Selector>
												</ForEach>
											</IfGate>
										</While>
									</LinkGate>
								</Loop>
								<Loop count="-1">
									<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$behaviorSuccess" senderInfo="$sender" inbox="&apos;battle_behaviorCompleted&apos;" condition="" answerVar="">
										<Expression expressions="$ladderAvailability[$ladder] += 1" />
									</ProcessMessage>
								</Loop>
							</Parallel>
						</Sequence>
						<Loop count="-1">
							<IfGate atomic="false" condition="#ladderSlots &gt; 0" RunLogic="KeepRunning">
								<LinkListener operation="Remove" from="$ladderSlots" to="" tag="&apos;SlotLink&apos;" reportInitialState="false">
									<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;ladderSlots&apos;">
										<ForEach startIndex="0" step="1" array="$ladderSlots" iterator="$iterator" value="$ladderSlot" break="">
											<Selector>
												<GraphSearch Origin="$ladderSlot" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
													<LinkTagFilter tag="&apos;SlotLink&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												</GraphSearch>
												<Sequence>
													<GraphSearch Origin="$ladders[$iterator]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderEntity" Data="" />
													</GraphSearch>
													<EraseFromArray array="$freeLadders" condition="$__value == $ladders[$iterator]" />
													<SuppressFailure>
														<Sequence>
															<GraphSearch Origin="$ladderEntity" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;ladderClimber&apos;" prune="true" negprune="unknown" Parent="" Child="$climber" Data="" />
															</GraphSearch>
															<DropFromLadder Target="$climber" />
														</Sequence>
													</SuppressFailure>
													<SetVisibility ItemWUID="$ladderEntity" Visibility="false" />
												</Sequence>
											</Selector>
										</ForEach>
									</Semaphore>
								</LinkListener>
							</IfGate>
						</Loop>
						<Loop count="-1">
							<IfGate atomic="false" condition="#ladderSlots &gt; 0" RunLogic="KeepRunning">
								<LinkListener operation="Add" from="$ladderSlots" to="" tag="&apos;SlotLink&apos;" reportInitialState="true">
									<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;ladderSlots&apos;">
										<ForEach startIndex="0" step="1" array="$ladderSlots" iterator="$iterator" value="$ladderSlot" break="">
											<Selector>
												<Sequence>
													<Expression expressions="$alreadyUsed = false" />
													<GraphSearch Origin="$ladderSlot" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;SlotLink&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
													</GraphSearch>
													<GraphSearch Origin="$ladders[$iterator]" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
														<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderEntity" Data="" />
													</GraphSearch>
													<ForEach startIndex="0" step="1" array="$freeLadders" iterator="" value="$freeLadder" break="$alreadyUsed">
														<IfCondition failOnCondition="false" condition="$freeLadder == $ladders[$iterator]">
															<Expression expressions="$alreadyUsed = true" />
														</IfCondition>
													</ForEach>
													<IfCondition failOnCondition="false" condition="!$alreadyUsed">
														<Sequence>
															<PushToArray array="$freeLadders" value="$ladders[$iterator]" direction="Back" />
															<Selector>
																<Sequence>
																	<GraphSearch Origin="$this.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;leaderFirst&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																	</GraphSearch>
																	<AddLink From="$ladders[$iterator]" To="$ladders[$iterator]" Tag="&apos;leaderFirst&apos;" Data="" LinkOpHandleMode="OverWrite" />
																</Sequence>
																<Success />
															</Selector>
														</Sequence>
													</IfCondition>
													<SetVisibility ItemWUID="$ladderEntity" Visibility="true" />
													<SendAIConceptSignal_battleTrigger group="$ladders[$iterator]" success="true" />
												</Sequence>
												<Success />
											</Selector>
										</ForEach>
									</Semaphore>
								</LinkListener>
							</IfGate>
						</Loop>
					</Parallel>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<IfGate atomic="false" condition="#freeLadders == 0" RunLogic="KeepRunning">
				<ForEach startIndex="0" step="1" array="$ladders" iterator="" value="$ladder" break="">
					<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;battleLadder_active&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
						<Nodalyzer Quantifiers="ForAll" Parent="" Child="$freeLadders" saveVersion="2" />
					</GraphSearch>
				</ForEach>
			</IfGate>
			<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;ladderArrayManipulation&apos;">
				<EraseFromArray array="$freeLadders" condition="$__key == $freeLadderIterator" />
			</Semaphore>
			<IfElseCondition failOnCondition="false" condition="$behaviorSuccess == true" saveVersion="2">
				<Then canSkip="1">
					<Sequence>
						<GraphSearch Origin="$sender.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
							<LinkTagFilter tag="&apos;useLadder&apos;" prune="true" negprune="unknown" Parent="" Child="$ladder" Data="" />
						</GraphSearch>
						<Selector>
							<Sequence>
								<FindInArray array="$freeLadders" keyOut="$arrayKey" condition="$__value == $ladder" />
								<Expression expressions="$ladderAvailability[$ladder] += 1" />
								<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
									<LinkTagFilter tag="&apos;battleLadder_active&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
								</GraphSearch>
							</Sequence>
							<Sequence>
								<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;ladderArrayManipulation&apos;">
									<PushToArray array="$freeLadders" value="$ladder" direction="Back" />
								</Semaphore>
								<Expression expressions="$ladderAvailability[$ladder] += 1" />
							</Sequence>
							<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;npcArrayManipulation&apos;">
								<IsDeadCheck SoulWUID="$sender.id" FailSubtMissing="false" saveVersion="2">
									<Then canSkip="1">
										<Success />
									</Then>
									<Else canSkip="1">
										<ExecuteLua code="local ent = XGenAIModule.GetEntityByWUID(data.sender.id) &#10; &#10;ent.soul:DealDamage(110, 100, data.sender.id, false)" />
									</Else>
								</IsDeadCheck>
							</Semaphore>
						</Selector>
					</Sequence>
				</Then>
				<Else canSkip="1">
					<Success />
				</Else>
			</IfElseCondition>
			<IfElseCondition failOnCondition="false" condition="#droppedNPCs &gt; 0" saveVersion="2">
				<Then canSkip="1">
					<Sequence>
						<AddLink From="$droppedNPCs[0]" To="$freeLadder" Tag="&apos;useLadder&apos;" Data="" LinkOpHandleMode="Success" />
						<Semaphore SemaphoreCount="1" atomic="false" OutsideQueuePosVariable="" InsidePosVariable="" TimerType="GameTime" OutsideTimerValue="&apos;-1&apos;" LockManagerType="Local" SemaphoreName="&apos;npcArrayManipulation&apos;">
							<EraseFromArray array="$droppedNPCs" condition="$__key == 0" />
						</Semaphore>
						<Expression expressions="$ladderAvailability[$freeLadder] -= 1" />
					</Sequence>
				</Then>
			</IfElseCondition>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="alreadyStarted" comment="" />
				<Variable name="alreadyUsed" comment="" />
				<Variable name="arrayKey" comment="" />
				<Variable name="awakenNpc" comment="" />
				<Variable name="behaviorSuccess" comment="" />
				<Variable name="climber" comment="" />
				<Variable name="controller" comment="" />
				<Variable name="controllers" comment="" />
				<Variable name="controllersNpcs" comment="" />
				<Variable name="droppedNPCs" comment="" />
				<Variable name="freeLadder" comment="" />
				<Variable name="freeLadderIterator" comment="" />
				<Variable name="freeLadders" comment="" />
				<Variable name="index" comment="" />
				<Variable name="init" comment="" />
				<Variable name="iterator" comment="" />
				<Variable name="ladder" comment="" />
				<Variable name="ladderActive" comment="" />
				<Variable name="ladderAvailability" comment="" />
				<Variable name="ladderEntity" comment="" />
				<Variable name="ladderSlot" comment="" />
				<Variable name="ladderSlots" comment="" />
				<Variable name="ladders" comment="" />
				<Variable name="particle" comment="" />
				<Variable name="particles" comment="" />
				<Variable name="queueTps" comment="" />
				<Variable name="sender" comment="" />
				<Variable name="waitForSpecialGroupLink" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root editorPosX="-30" editorPosY="-450" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</ReadMessage>
						</IfCondition>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
									<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
									</Nodalyzer>
								</GraphSearch>
								<For hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<ParticleEffectControl hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</ParticleEffectControl>
								</For>
							</Sequence>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Selector>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
							</Sequence>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Selector>
						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</PushToArray>
						</ForEach>
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
						<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</ReinitVariable>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
									<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
									</Nodalyzer>
								</GraphSearch>
								<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</Expression>
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PushToArray>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<SetVisibility hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SetVisibility>
									</Sequence>
								</Selector>
							</Sequence>
						</ForEach>
						<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<SendAIConceptSignal_battleCommandComplete hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</SendAIConceptSignal_battleCommandComplete>
										<ReadMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</ReadMessage>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
									</Sequence>
								</IfCondition>
								<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<While hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																</GraphSearch>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</LinkTagFilter>
																	</GraphSearch>
																</IfCondition>
																<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Child>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<RequestBattleNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</RequestBattleNPC>
																				<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Wait>
																			</Sequence>
																		</Child>
																		<OnSuccess>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</Expression>
																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Then>
																					<Else>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Else>
																				</IfElseCondition>
																			</Sequence>
																		</OnSuccess>
																		<OnFail>
																			<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</EraseFromArray>
																				<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																					<OutputBreakpoints />
																					<Then>
																						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Success>
																					</Then>
																					<Else>
																						<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																							<OutputBreakpoints />
																						</Expression>
																					</Else>
																				</IfElseCondition>
																			</Sequence>
																		</OnFail>
																	</FuseBox>
																</IfCondition>
															</Sequence>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Then>
																<Else>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Else>
															</IfElseCondition>
														</Selector>
													</ForEach>
												</IfGate>
											</While>
										</LinkGate>
									</Loop>
									<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Expression>
										</ProcessMessage>
									</Loop>
								</Parallel>
							</Sequence>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</LinkTagFilter>
													</GraphSearch>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
														<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</EraseFromArray>
														<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																</GraphSearch>
																<DropFromLadder hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</DropFromLadder>
															</Sequence>
														</SuppressFailure>
														<SetVisibility hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SetVisibility>
													</Sequence>
												</Selector>
											</ForEach>
										</Semaphore>
									</LinkListener>
								</IfGate>
							</Loop>
							<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<IfGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkListener hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</Expression>
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
														<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</LinkTagFilter>
														</GraphSearch>
														<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</IfCondition>
														</ForEach>
														<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</PushToArray>
																<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																		</GraphSearch>
																		<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</AddLink>
																	</Sequence>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Selector>
															</Sequence>
														</IfCondition>
														<SetVisibility hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SetVisibility>
														<SendAIConceptSignal_battleTrigger hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</SendAIConceptSignal_battleTrigger>
													</Sequence>
													<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</Success>
												</Selector>
											</ForEach>
										</Semaphore>
									</LinkListener>
								</IfGate>
							</Loop>
						</Parallel>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<IfGate editorPosX="1350" editorPosY="-1080" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
							<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
							</Nodalyzer>
						</GraphSearch>
					</ForEach>
				</IfGate>
				<Semaphore editorPosX="1860" editorPosY="-860" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</EraseFromArray>
				</Semaphore>
				<IfElseCondition editorPosX="1730" editorPosY="-1420" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</LinkTagFilter>
							</GraphSearch>
							<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<FindInArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</FindInArray>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
									<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</LinkTagFilter>
									</GraphSearch>
								</Sequence>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</PushToArray>
									</Semaphore>
									<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Expression>
								</Sequence>
								<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
										<OutputBreakpoints />
										<Then>
											<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Success>
										</Then>
										<Else>
											<ExecuteLua hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</ExecuteLua>
										</Else>
									</IsDeadCheck>
								</Semaphore>
							</Selector>
						</Sequence>
					</Then>
					<Else>
						<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Success>
					</Else>
				</IfElseCondition>
				<IfElseCondition editorPosX="2780" editorPosY="-750" hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
					<OutputBreakpoints />
					<Then>
						<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</AddLink>
							<Semaphore hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<EraseFromArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</EraseFromArray>
							</Semaphore>
							<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Expression>
						</Sequence>
					</Then>
				</IfElseCondition>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="wakeAndUseLadder" is_function="0">
		<Variables>
			<Variable name="activeLadders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="anchor" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="guardArea" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="isAnchorActive" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="ladder" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladders" type="_wuid" values="" isPersistent="0" form="array" />
			<Variable name="leftHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="leftHandCheck" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHand" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="rightHandCheck" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="secondTry" type="_bool" values="" isPersistent="0" form="single" />
			<Variable name="surrenderChatResult" type="crime:playerSurrenderChatFeedback" values="" isPersistent="0" form="single" />
			<Variable name="targetLadder" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<OnInit canSkip="1">
				<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
					<LinkTagFilter tag="&apos;guardArea&apos;" prune="true" negprune="unknown" Parent="" Child="$guardArea" Data="" />
				</GraphSearch>
			</OnInit>
			<Behavior canSkip="1">
				<Sequence>
					<SyncWithTrackview NPC="$this.id" />
					<LoopUntil until="Success" attemptCount="0">
						<IsInsideArea Origin="$this.id" Area="$guardArea" FailSubtMissing="false" saveVersion="2">
							<Then canSkip="1">
								<Sequence>
									<InstantSendMessageToNPC target="$__object.id" type="&apos;bool&apos;" values="true" />
									<Selector>
										<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;skipToNextBehaviorAfterClimb&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
										</GraphSearch>
										<FuseBox StatusPropagation="Child" OneCleanup="true" saveVersion="2">
											<Child canSkip="1">
												<Sequence>
													<Selector>
														<Sequence>
															<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																<LinkTagFilter tag="&apos;anchor&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																<Nodalyzer Quantifiers="ForAll" Parent="" Child="$anchor" saveVersion="2">
																	<Child0 canSkip="1">
																		<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
																	</Child0>
																</Nodalyzer>
															</GraphSearch>
															<AddLink From="$this.id" To="$anchor[0]" Tag="&apos;combat_anchor&apos;" Data="" LinkOpHandleMode="Success" />
															<Expression expressions="$isAnchorActive = true" />
														</Sequence>
														<Success />
													</Selector>
													<Parallel successMode="Any" failureMode="Any">
														<MeleeDefenseAutomationDecorator active="true">
															<MeleeOffenseAutomationDecorator active="true">
																<MeleeGuardAutomationDecorator GuardMode="automate" active="true">
																	<WeaponAutomationDecorator WeaponChange="melee" active="true">
																		<CombatFollowerDecorator ProbablisticDrivenSweetSpot="true" RPGSweetSpotArcDriver="true" active="true">
																			<CombatAction TargetNPC="$__player" RelationOverride="None" />
																		</CombatFollowerDecorator>
																	</WeaponAutomationDecorator>
																</MeleeGuardAutomationDecorator>
															</MeleeOffenseAutomationDecorator>
														</MeleeDefenseAutomationDecorator>
														<Loop count="-1">
															<SuppressFailure>
																<ProcessMessage Atomic="false" timeout="&apos;-1&apos;" timeType="GameTime" variable="$surrenderChatResult" senderInfo="" inbox="&apos;crime_playerSurrenderChatFeedback&apos;" condition="" answerVar="">
																	<Function_speech_schedulerMonolog alias="" animationApproach="$enum:animationApproach.dontPlayDialogAnimations" context="" lookAtId="" metarole="&apos;NPC_NEAKCEPTUJE_HRACOVO_VZDAVANI_NEVZDAVACI_KONTEXT&apos;" skipInLod="false" subtitlesDown="false" nodeLabel="15823897" />
																</ProcessMessage>
															</SuppressFailure>
														</Loop>
														<Loop count="-1">
															<DistanceGate Origin="$this.id" ReferencePt="$__player" Low="$data:script_param[&apos;crime_surrenderingMaxDistance&apos;].value" High="$data:script_param[&apos;crime_surrenderingMaxDistance&apos;].value" Negation="false" OpenInMiddle="false" RunLogic="Halt">
																<GameContext context="combat_playerSurrenderDistanceCondition">
																	<Wait duration="&apos;-1&apos;" timeType="GameTime" doFail="false" variation="" />
																</GameContext>
															</DistanceGate>
														</Loop>
													</Parallel>
												</Sequence>
											</Child>
											<OnSuccess canSkip="1">
												<IfCondition failOnCondition="false" condition="$isAnchorActive">
													<RemoveLink From="$this.id" To="$anchor[0]" Tag="&apos;combat_anchor&apos;" LinkOpHandleMode="Success" />
												</IfCondition>
											</OnSuccess>
										</FuseBox>
									</Selector>
								</Sequence>
							</Then>
							<Else canSkip="1">
								<Sequence>
									<Parallel successMode="All" failureMode="Any">
										<Sequence>
											<ReinitVariable variable="$activeLadders" />
											<ReinitVariable variable="$ladders" />
											<GraphSearch Origin="$__object.id" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
												<LinkTagFilter tag="&apos;ladder&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
												<Nodalyzer Quantifiers="ForAll" Parent="" Child="$ladders" saveVersion="2">
													<Child0 canSkip="1">
														<RangeSorter point="$this.id" SortOrder="Ascending" Source="Child" />
													</Child0>
												</Nodalyzer>
											</GraphSearch>
											<LinkGate from="$ladders" to="" tag="&apos;battleLadder_active&apos;" amount="AtLeastOne" presence="Present" RunLogic="KeepRunning">
												<LoopUntil until="Success" attemptCount="0">
													<Sequence>
														<ForEach startIndex="0" step="1" array="$ladders" iterator="" value="$ladder" break="">
															<Selector>
																<Sequence>
																	<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																		<LinkTagFilter tag="&apos;battleLadder_active&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																	</GraphSearch>
																	<PushToArray array="$activeLadders" value="$ladder" direction="Back" />
																</Sequence>
																<Success />
															</Selector>
														</ForEach>
														<IfElseCondition failOnCondition="false" condition="#activeLadders &lt; 1" saveVersion="2">
															<Then canSkip="1">
																<Sequence>
																	<Wait duration="&apos;500ms&apos;" timeType="GameTime" doFail="false" variation="" />
																	<Fail />
																</Sequence>
															</Then>
															<Else canSkip="1">
																<Expression expressions="$targetLadder = $activeLadders[0]" />
															</Else>
														</IfElseCondition>
													</Sequence>
												</LoopUntil>
											</LinkGate>
										</Sequence>
										<IfCondition failOnCondition="false" condition="!$secondTry">
											<AnyDecorator preset="crime_keepItems" enabled="true">
												<MeleeGuardAutomationDecorator GuardMode="forceDisable" active="true">
													<Sequence>
														<GetWeaponsFromWeaponSet WeaponSet="Primary" LeftHand="$leftHand" RightHand="$rightHand" UseTorchWhenAppropriate="true" />
														<HandCheck who="$this.id" LeftHand="$leftHandCheck" RightHand="$rightHandCheck" />
														<IfElseCondition failOnCondition="false" condition="$leftHand == $leftHandCheck &amp; $rightHand == $rightHandCheck &amp; $leftHand ~= $__null" saveVersion="2">
															<Then canSkip="1">
																<Selector>
																	<Sequence>
																		<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
																			<LinkTagFilter tag="&apos;idle_kneel&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
																		</GraphSearch>
																		<UnstanceAction unstance="BattleKneelShieldCover" locationObject="" slaveObject="" />
																	</Sequence>
																	<UnstanceAction unstance="BattleShswShld" locationObject="" slaveObject="" />
																</Selector>
															</Then>
															<Else canSkip="1">
																<IfElseCondition failOnCondition="false" condition="$rightHand ~= $__null &amp; $rightHand == $rightHandCheck &amp; $leftHand == $leftHandCheck" saveVersion="2">
																	<Then canSkip="1">
																		<UnstanceAction unstance="BattleLngsw" locationObject="" slaveObject="" />
																	</Then>
																	<Else canSkip="1">
																		<WaitAction />
																	</Else>
																</IfElseCondition>
															</Else>
														</IfElseCondition>
													</Sequence>
												</MeleeGuardAutomationDecorator>
											</AnyDecorator>
										</IfCondition>
									</Parallel>
									<Expression expressions="$secondTry = true" />
									<GraphSearch Origin="$targetLadder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;battleLadder_active&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									</GraphSearch>
									<LinkGate from="$targetLadder" to="" tag="&apos;battleLadder_active&apos;" amount="AtLeastOne" presence="Present" RunLogic="Halt">
										<FuseBox StatusPropagation="Child" OneCleanup="false" saveVersion="2">
											<Child canSkip="1">
												<CallBehavior Target="$targetLadder" BehaviorName="&apos;use&apos;" ignoreDropUnloading="false" nodeLabel="55854313" />
											</Child>
											<OnFail canSkip="1">
												<IsDeadCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
													<Then canSkip="1">
														<InstantSendMessageToNPC target="$__object.id" type="&apos;bool&apos;" values="true" />
													</Then>
													<Else canSkip="1">
														<IsUnconsciousCheck SoulWUID="$this.id" FailSubtMissing="false" saveVersion="2">
															<Then canSkip="1">
																<InstantSendMessageToNPC target="$__object.id" type="&apos;bool&apos;" values="true" />
															</Then>
															<Else canSkip="1">
																<Success />
															</Else>
														</IsUnconsciousCheck>
													</Else>
												</IsDeadCheck>
											</OnFail>
										</FuseBox>
									</LinkGate>
									<Fail />
								</Sequence>
							</Else>
						</IsInsideArea>
					</LoopUntil>
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<LinkListener operation="Add" from="$ladders" to="" tag="&apos;battleLadder_active&apos;" reportInitialState="false">
				<ForEach startIndex="0" step="1" array="$ladders" iterator="" value="$ladder" break="">
					<Selector>
						<Sequence>
							<GraphSearch Origin="$ladder" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
								<LinkTagFilter tag="&apos;battleLadder_active&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
							</GraphSearch>
							<PushToArray array="$activeLadders" value="$ladder" direction="Back" />
						</Sequence>
						<Success />
					</Selector>
				</ForEach>
			</LinkListener>
		</ForestContainer>
		<EditorData EventSet="">
			<Variables>
				<Variable name="activeLadders" comment="" />
				<Variable name="anchor" comment="" />
				<Variable name="guardArea" comment="" />
				<Variable name="isAnchorActive" comment="" />
				<Variable name="ladder" comment="" />
				<Variable name="ladders" comment="" />
				<Variable name="leftHand" comment="" />
				<Variable name="leftHandCheck" comment="" />
				<Variable name="rightHand" comment="" />
				<Variable name="rightHandCheck" comment="" />
				<Variable name="secondTry" comment="" />
				<Variable name="surrenderChatResult" comment="" />
				<Variable name="targetLadder" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<OnInit>
					<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</LinkTagFilter>
					</GraphSearch>
				</OnInit>
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<SyncWithTrackview hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</SyncWithTrackview>
						<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<IsInsideArea hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
								<OutputBreakpoints />
								<Then>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</InstantSendMessageToNPC>
										<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Child>
													<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</LinkTagFilter>
																	<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Child0>
																			<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</RangeSorter>
																		</Child0>
																	</Nodalyzer>
																</GraphSearch>
																<AddLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</AddLink>
																<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																</Expression>
															</Sequence>
															<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</Success>
														</Selector>
														<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<MeleeDefenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<MeleeOffenseAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<WeaponAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<CombatFollowerDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<CombatAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</CombatAction>
																			</CombatFollowerDecorator>
																		</WeaponAutomationDecorator>
																	</MeleeGuardAutomationDecorator>
																</MeleeOffenseAutomationDecorator>
															</MeleeDefenseAutomationDecorator>
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<SuppressFailure hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<ProcessMessage hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Function_speech_schedulerMonolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Function_speech_schedulerMonolog>
																	</ProcessMessage>
																</SuppressFailure>
															</Loop>
															<Loop hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<DistanceGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<GameContext hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																	</GameContext>
																</DistanceGate>
															</Loop>
														</Parallel>
													</Sequence>
												</Child>
												<OnSuccess>
													<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<RemoveLink hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
														</RemoveLink>
													</IfCondition>
												</OnSuccess>
											</FuseBox>
										</Selector>
									</Sequence>
								</Then>
								<Else>
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Parallel hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<ReinitVariable hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</ReinitVariable>
												<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</LinkTagFilter>
													<Nodalyzer hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Child0>
															<RangeSorter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</RangeSorter>
														</Child0>
													</Nodalyzer>
												</GraphSearch>
												<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<LoopUntil hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
																<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																	<OutputBreakpoints />
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</LinkTagFilter>
																		</GraphSearch>
																		<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</PushToArray>
																	</Sequence>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Selector>
															</ForEach>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Wait>
																		<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</Fail>
																	</Sequence>
																</Then>
																<Else>
																	<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Expression>
																</Else>
															</IfElseCondition>
														</Sequence>
													</LoopUntil>
												</LinkGate>
											</Sequence>
											<IfCondition hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<AnyDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
													<MeleeGuardAutomationDecorator hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
														<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
															<OutputBreakpoints />
															<GetWeaponsFromWeaponSet hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</GetWeaponsFromWeaponSet>
															<HandCheck hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</HandCheck>
															<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																		<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																			<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																				<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
																					<OutputBreakpoints />
																				</LinkTagFilter>
																			</GraphSearch>
																			<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</UnstanceAction>
																		</Sequence>
																		<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																			<OutputBreakpoints />
																		</UnstanceAction>
																	</Selector>
																</Then>
																<Else>
																	<IfElseCondition hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																		<OutputBreakpoints />
																		<Then>
																			<UnstanceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</UnstanceAction>
																		</Then>
																		<Else>
																			<WaitAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
																				<OutputBreakpoints />
																			</WaitAction>
																		</Else>
																	</IfElseCondition>
																</Else>
															</IfElseCondition>
														</Sequence>
													</MeleeGuardAutomationDecorator>
												</AnyDecorator>
											</IfCondition>
										</Parallel>
										<Expression hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Expression>
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<LinkGate hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<FuseBox hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
												<OutputBreakpoints />
												<Child>
													<CallBehavior hasInputBreakpoint="0" comment="" breakpointFlags="0">
														<OutputBreakpoints />
													</CallBehavior>
												</Child>
												<OnFail>
													<IsDeadCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
														<OutputBreakpoints />
														<Then>
															<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																<OutputBreakpoints />
															</InstantSendMessageToNPC>
														</Then>
														<Else>
															<IsUnconsciousCheck hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
																<OutputBreakpoints />
																<Then>
																	<InstantSendMessageToNPC hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</InstantSendMessageToNPC>
																</Then>
																<Else>
																	<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
																		<OutputBreakpoints />
																	</Success>
																</Else>
															</IsUnconsciousCheck>
														</Else>
													</IsDeadCheck>
												</OnFail>
											</FuseBox>
										</LinkGate>
										<Fail hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Fail>
									</Sequence>
								</Else>
							</IsInsideArea>
						</LoopUntil>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<LinkListener editorPosX="2950" editorPosY="30" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<ForEach hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
								<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</LinkTagFilter>
								</GraphSearch>
								<PushToArray hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
								</PushToArray>
							</Sequence>
							<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</Success>
						</Selector>
					</ForEach>
				</LinkListener>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
	<BehaviorTree name="setupLadder" is_function="0">
		<Variables>
			<Variable name="ladderItem" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="ladderSlot" type="_wuid" values="" isPersistent="0" form="single" />
			<Variable name="params" type="pathFindingParams" values="usePaths(false)" isPersistent="0" form="single" />
			<Variable name="path" type="_wuid" values="" isPersistent="0" form="single" />
		</Variables>
		<Root OneTimeOnly="false" FailState="Recoverable" saveVersion="2">
			<Behavior canSkip="1">
				<Sequence>
					<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
						<LinkTagFilter tag="&apos;placeSlot&apos;" prune="true" negprune="unknown" Parent="" Child="$ladderSlot" Data="" />
					</GraphSearch>
					<HandContentElement hand="Right" item="$ladderItem" allowAny="false" decisionLabel="battle_ladder" useDecision="true" enabled="true" saveVersion="2">
						<Search canSkip="1">
							<Selector>
								<Sequence>
									<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
										<LinkTagFilter tag="&apos;pickSlot&apos;" prune="true" negprune="unknown" Parent="" Child="" Data="" />
									</GraphSearch>
									<Function_findItemOnSlot linkName="&apos;pickSlot&apos;" npc="$this.id" searchOrigin="$this.id" item="$ladderItem" nodeLabel="64216442" />
								</Sequence>
								<Function_findItemOnSlot linkName="&apos;placeSlot&apos;" npc="$this.id" searchOrigin="$this.id" item="$ladderItem" nodeLabel="52479199" />
							</Selector>
						</Search>
						<Exec canSkip="1">
							<Sequence>
								<Selector>
									<Sequence>
										<GraphSearch Origin="" Borders="" depth="1" selection="true" SearchPattern="Depth" EdgePruning="&apos;parent,inventory&apos;" AllowedEdges="" SubGraph="" AllowSubtraph="false" includeOrigin="false" excludeOrigin="false" failOnEmpty="true" SetOperationChoice="Intersection|And" errorOnEmpty="false" shortCircuit="false" skipTraversed="true">
											<LinkTagFilter tag="&apos;path&apos;" prune="true" negprune="unknown" Parent="" Child="$path" Data="" />
										</GraphSearch>
										<Move stopWithinDistance="0.200000" stopDistanceVariation="0.100000" rayCasteFlee="false" successDistance="0.000000" changeNPCState="true" fastForwardIncludesMove="false" destinationSpecification="$path" destinationSpecification2="" destinationSpecification3="" speed="Walk" additionalParams="" pathFindingParams="" staminaPolicy="" pathInfo="" />
									</Sequence>
									<Success />
								</Selector>
								<PlaceAction item="$ladderItem" slot="$ladderSlot" />
							</Sequence>
						</Exec>
					</HandContentElement>
					<InstantCallback_empty EventName="&apos;OnFinished&apos;" />
					<Wait duration="&apos;1s&apos;" timeType="GameTime" doFail="false" variation="" />
				</Sequence>
			</Behavior>
		</Root>
		<ForestContainer>
			<SuppressFailure>
				<Function_speech_monolog alias="&apos;oblehaniSuchdole_nosicZebrikuPokladaZebrik&apos;" canBeDelayed="false" context="" dramaticBark="false" lookAtId="" metarole="" target="" wait="false" nodeLabel="70595255" />
			</SuppressFailure>
			<MoveParamsDecorator speed="Run" pathFindingParams="$params" doorClosingPolicy="Automatic" />
		</ForestContainer>
		<EditorData EventSet="endNotification">
			<Variables>
				<Variable name="ladderItem" comment="" />
				<Variable name="ladderSlot" comment="" />
				<Variable name="params" comment="" />
				<Variable name="path" comment="" />
			</Variables>
			<ForwardDeclarations />
			<Root hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
				<OutputBreakpoints />
				<Behavior>
					<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
						<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
							<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
								<OutputBreakpoints />
							</LinkTagFilter>
						</GraphSearch>
						<HandContentElement hasInputBreakpoint="0" comment="" breakpointFlags="0" saveVersion="2">
							<OutputBreakpoints />
							<Search>
								<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</LinkTagFilter>
										</GraphSearch>
										<Function_findItemOnSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Function_findItemOnSlot>
									</Sequence>
									<Function_findItemOnSlot hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</Function_findItemOnSlot>
								</Selector>
							</Search>
							<Exec>
								<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
									<OutputBreakpoints />
									<Selector hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
										<Sequence hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
											<GraphSearch hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
												<LinkTagFilter hasInputBreakpoint="0" comment="" breakpointFlags="0">
													<OutputBreakpoints />
												</LinkTagFilter>
											</GraphSearch>
											<Move hasInputBreakpoint="0" comment="" breakpointFlags="0">
												<OutputBreakpoints />
											</Move>
										</Sequence>
										<Success hasInputBreakpoint="0" comment="" breakpointFlags="0">
											<OutputBreakpoints />
										</Success>
									</Selector>
									<PlaceAction hasInputBreakpoint="0" comment="" breakpointFlags="0">
										<OutputBreakpoints />
									</PlaceAction>
								</Sequence>
							</Exec>
						</HandContentElement>
						<InstantCallback_empty hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</InstantCallback_empty>
						<Wait hasInputBreakpoint="0" comment="" breakpointFlags="0">
							<OutputBreakpoints />
						</Wait>
					</Sequence>
				</Behavior>
			</Root>
			<Forest>
				<SuppressFailure editorPosX="1560" editorPosY="210" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
					<Function_speech_monolog hasInputBreakpoint="0" comment="" breakpointFlags="0">
						<OutputBreakpoints />
					</Function_speech_monolog>
				</SuppressFailure>
				<MoveParamsDecorator editorPosX="1540" editorPosY="340" hasInputBreakpoint="0" comment="" breakpointFlags="0">
					<OutputBreakpoints />
				</MoveParamsDecorator>
			</Forest>
			<Comments />
		</EditorData>
	</BehaviorTree>
</BehaviorTrees>