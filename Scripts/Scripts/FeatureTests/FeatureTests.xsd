<?xml version="1.0" encoding="Windows-1252"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.waldez.net"
xmlns="http://www.waldez.net">

	<xs:simpleType name ="positiveInt">
		<xs:restriction base="xs:integer">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name ="positiveFloat">
		<xs:restriction base="xs:decimal">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name ="colonDelimited">
		<xs:restriction base="xs:string">
			<!--
			item starting with non-number
			<xs:pattern value="(?:[a-zA-Z_][a-zA-Z0-9_\-]*[;]{0,1})+"/>
			-->
			<xs:pattern value="(?:[a-zA-Z0-9_\-]*[;]{0,1})+"/>
			
		</xs:restriction>
	</xs:simpleType>
	
	
	<!--TODO: udelat simple type, ktery umoznuje zretezit veci z vyberu pomoci delimiteru-->

	<xs:simpleType name="playerSelection">
		<xs:restriction base="xs:string">
			<xs:enumeration value="localPlayer"/>
			<xs:enumeration value="firstRemotePlayer"/>
			<xs:enumeration value="secondRemotePlayer"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="requirementList">
		<xs:restriction base="xs:string">
			<xs:enumeration value="noLevelLoaded"/>
			<xs:enumeration value="inLevel"/>
			<xs:enumeration value="localPlayerExists"/>
			<xs:enumeration value="remotePlayerExists"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="aimConditionList">
		<xs:restriction base="xs:string">
			<xs:enumeration value="nobody"/>
			<xs:enumeration value="anybody"/>
			<xs:enumeration value="friend"/>
			<xs:enumeration value="enemy"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="playerInputs">
		<!--Keyboard-->
		<xs:restriction base="xs:string">
			<xs:enumeration value="moveforward"/>
			<xs:enumeration value="moveback"/>
			<xs:enumeration value="moveleft"/>
			<xs:enumeration value="moveright"/>
			<!--Mouse-->
			<xs:enumeration value="rotateyaw"/>
			<xs:enumeration value="rotatepitch"/>
			<xs:enumeration value="jump"/>
			<xs:enumeration value="sprint"/>
			<xs:enumeration value="rotateleft"/>
			<xs:enumeration value="rotateright"/>
			<!--Gamepad-->
			<xs:enumeration value="xi_rotateyaw"/>
			<xs:enumeration value="xi_rotatepitch"/>
			<xs:enumeration value="xi_movex"/>
			<xs:enumeration value="xi_movey"/>
			<!--
#if WH_CTSW(WH_CTSW_ENABLE_DEBUG_ACTIONS)
		<xs:enumeration value="flymode"/>
		<xs:enumeration value="toggleaidebugdraw"/>
		<xs:enumeration value="togglepdrawhelpers"/>
		<xs:enumeration value="mannequin_debugai"/>
		<xs:enumeration value="ai_debugCenterViewAgent"/>
#endif
-->
			<!--Horse-->
			<xs:enumeration value="horse_accelerate"/>
			<xs:enumeration value="horse_deccelerate"/>
			<xs:enumeration value="horse_turnleft"/>
			<xs:enumeration value="horse_turnright"/>
			<xs:enumeration value="horse_rotateyaw"/>
			<xs:enumeration value="horse_rotatepitch"/>
			<xs:enumeration value="horse_xi_movey"/>
			<xs:enumeration value="horse_xi_movex"/>
			<xs:enumeration value="horse_xi_rotateyaw"/>
			<xs:enumeration value="horse_xi_rotatepitch"/>
			<xs:enumeration value="horse_dismount"/>
			<xs:enumeration value="horse_strafe"/>
			<!--horse sprinting-->
			<xs:enumeration value="horse_sprint"/>
			<xs:enumeration value="use"/>
			<xs:enumeration value="xi_use"/>
      <!-- ui -->
      <xs:enumeration value="ui_toggle_inventory"/>
      <xs:enumeration value="ui_toggle_map"/>
      <xs:enumeration value="ui_open_inventory"/>
      <xs:enumeration value="ui_open_map"/>
      <xs:enumeration value="screenshot"/>
      <xs:enumeration value="ui_close_map"/>
      <xs:enumeration value="ui_start_pause"/>
      <xs:enumeration value="ui_toggle_pause"/>
      <xs:enumeration value="ui_dp_up"/>
      <xs:enumeration value="ui_dp_down"/>
      <xs:enumeration value="ui_dp_left"/>
      <xs:enumeration value="ui_dp_right"/>
      <xs:enumeration value="ui_up"/>
      <xs:enumeration value="ui_down"/>
      <xs:enumeration value="ui_left"/>
      <xs:enumeration value="ui_right"/>
      <xs:enumeration value="ui_inv_rotate"/>
      <xs:enumeration value="ui_map_up"/>
      <xs:enumeration value="ui_map_down"/>
      <xs:enumeration value="ui_map_left"/>
      <xs:enumeration value="ui_map_right"/>
      <xs:enumeration value="ui_map_zoom_up"/>
      <xs:enumeration value="ui_map_zoom_down"/>
      <xs:enumeration value="ui_map_left_x"/>
      <xs:enumeration value="ui_map_left_y"/>
      <xs:enumeration value="ui_map_rigt_x"/>
      <xs:enumeration value="ui_map_right_y"/>
      <xs:enumeration value="ui_map_center"/>
      
      <xs:enumeration value="ui_accept"/>
      <xs:enumeration value="ui_back"/>
      <xs:enumeration value="ui_confirm"/>
      <xs:enumeration value="ui_reset"/>
      <xs:enumeration value="ui_select"/>
      <xs:enumeration value="ui_tab_right"/>
      <xs:enumeration value="ui_tab_left"/>
      <xs:enumeration value="ui_skip"/>
    </xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="checkpointHitResponseList">
		<xs:restriction base="xs:string">
			<xs:enumeration value="nothing"/>
			<xs:enumeration value="failTest"/>
			<xs:enumeration value="completeTest"/>
			<xs:enumeration value="completeSubroutine"/>
			<xs:enumeration value="restartTest"/>
			<xs:enumeration value="restartSubroutine"/>
			<xs:enumeration value="expectedNext"/>
		</xs:restriction>
	</xs:simpleType>


	<xs:group name="instructions">
		<xs:sequence>
			<xs:choice maxOccurs="unbounded">
				<!--== Other ==================================-->
				<!--Switch-->
				<xs:element name="Switch" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Case" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:group ref="instructions"/>
									<xs:attribute name="level" use="required" type="xs:string"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="Default" minOccurs="0" maxOccurs="1">
								<xs:complexType>
									<xs:group ref="instructions"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>				
				<!--== Wait Instructions ==================================-->
				<!--WaitSingleFrame-->
				<xs:element name="WaitSingleFrame" minOccurs="0" maxOccurs="unbounded"></xs:element>
				<!--Wait-->
				<xs:element name="Wait" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="duration" use="required" type="positiveFloat"/>
					</xs:complexType>
				</xs:element>
				<!--WaitUntilHitAllExpectedCCCPoints-->
				<xs:element name="WaitUntilHitAllExpectedCCCPoints" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="timeout" use="required" type="positiveFloat"/>
					</xs:complexType>
				</xs:element>
				<!--WaitUntilPlayerIsAlive-->
				<xs:element name="WaitUntilPlayerIsAlive" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<!--TODO: !!! jiny typ! viz todo nahore!!!-->
						<xs:attribute name="who" use="required" type="playerSelection"/>
						<xs:attribute name="timeout" type="positiveFloat"/>
					</xs:complexType>
				</xs:element>
				<!--WaitUntilPlayerAimingAt-->
				<xs:element name="WaitUntilPlayerAimingAt" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<!--TODO: !!! jiny typ! viz todo nahore!!!-->
						<xs:attribute name="who" use="required" type="playerSelection"/>
						<xs:attribute name="targetType" use="required" type="aimConditionList"/>
					</xs:complexType>
				</xs:element>
				<!--== Miscellaneous Instructions ==================================-->
				<!--RunFeatureTest-->
				<xs:element name="RunFeatureTest" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="testName" use="required" type="xs:string"/>
					</xs:complexType>
				</xs:element>
				<!--RunFlowGraphFeatureTests-->
				<xs:element name="RunFlowGraphFeatureTests" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="reloadLevel" use="required" type="xs:boolean"/>
						<xs:attribute name="quickload" use="required" type="xs:boolean"/>
						<xs:attribute name="waitScheduled" use="required" type="positiveFloat"/>
						<xs:attribute name="timeout" use="required" type="positiveFloat"/>
					</xs:complexType>
				</xs:element>
				<!--Fail-->
				<xs:element name="Fail" minOccurs="0" maxOccurs="1"></xs:element>
				<!--in this case 'maxOccurs'=1 does make sense-->
				<!--== Code Coverage Checkpoint Instructions ==================================-->
				<!--ResetCCCPointHitCounters-->
				<xs:element name="ResetCCCPointHitCounters" minOccurs="0" maxOccurs="unbounded"></xs:element>
				<!--WatchCCCPoint-->
				<xs:element name="WatchCCCPoint" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<!--TODO: !!! mohl by se generovat simple type(enum) ktery by reflektoval CCCPointy z kodu - utilitu uz na to mam-->
						<xs:attribute name="checkpointName" use="required" type="xs:string"/>
					</xs:complexType>
				</xs:element>
				<!--CheckNumCCCPointHits-->
				<xs:element name="CheckNumCCCPointHits" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<!--TODO: !!! mohl by se generovat simple type(enum) ktery by reflektoval CCCPointy z kodu - utilitu uz na to mam-->
						<xs:attribute name="checkpointName" use="required" type="xs:string"/>
						<xs:attribute name="expectedNumHits" use="required" type="positiveInt"/>
					</xs:complexType>
				</xs:element>
				<!--SetResponseToHittingCCCPoint-->
				<xs:element name="SetResponseToHittingCCCPoint" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<!--TODO: !!! mohl by se generovat simple type(enum) ktery by reflektoval CCCPointy z kodu - utilitu uz na to mam-->
						<xs:attribute name="checkpointName" use="required" type="xs:string"/>
						<xs:attribute name="response" use="required" type="checkpointHitResponseList"/>
						<xs:attribute name="customMessage" type="xs:string"/>
					</xs:complexType>
				</xs:element>
        <!-- RegisterLogAsCCCPoint -->
        <xs:element name="RegisterLogAsCCCPoint" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="message" use="required" type="xs:string"/>
          </xs:complexType>
        </xs:element>
        
				<!--== Code Coverage Checkpoint Instructions ==================================-->
				<!--OverrideButtonInput_Press-->
				<xs:element name="OverrideButtonInput_Press" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="inputName" use="required" type="playerInputs"/>
					</xs:complexType>
				</xs:element>
				<!--OverrideButtonInput_Release-->
				<xs:element name="OverrideButtonInput_Release" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="inputName" use="required" type="playerInputs"/>
					</xs:complexType>
				</xs:element>
        <!--OverrideButtonInput_Hold-->
        <xs:element name="OverrideButtonInput_Hold" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="inputName" use="required" type="playerInputs"/>
          </xs:complexType>
        </xs:element>

        <!--OverrideAnalogInput-->
				<xs:element name="OverrideAnalogInput" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="inputName" use="required" type="playerInputs"/>
						<xs:attribute name="value" use="required" type="xs:decimal"/>
					</xs:complexType>
				</xs:element>
				<!--DoConsoleCommand-->
				<xs:element name="DoConsoleCommand" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="command" use="required" type="xs:string"/>
					</xs:complexType>
				</xs:element>
				<!--DoMenuCommand-->
				<xs:element name="DoMenuCommand" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="command" use="required" type="xs:string"/>
					</xs:complexType>
				</xs:element>
				<!--== Setup Instructions ==================================-->
				<!--TrySpawnPlayer -->
				<xs:element name="TrySpawnPlayer " minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="who" use="required" type="playerSelection"/>
						<!--It seems, documentation is wrong!-->
						<!--<xs:attribute name="localPlayer" use="required" type="xs:boolean"/>-->
					</xs:complexType>
				</xs:element>
				<!--SetItem-->
				<xs:element name="SetItem" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="className" use="required" type="xs:string"/>
					</xs:complexType>
				</xs:element>
				<!--MovePlayerToOtherEntity-->
				<xs:element name="MovePlayerToOtherEntity" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="who" use="required" type="playerSelection"/>
						<xs:attribute name="className" use="required" type="xs:string"/>
					</xs:complexType>
				</xs:element>
				<!--WH:SetLocalPlayerLookAtEntity
					<SetLocalPlayerLookAtEntity entityName="Horse1" bone="SPINE_1" duration="2.5"/>
				-->
				<xs:element name="SetLocalPlayerLookAtEntity" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="entityName" use="required" type="xs:string"/>
						<xs:attribute name="bone" type="xs:string"/>
						<xs:attribute name="duration" type="positiveFloat"/>
					</xs:complexType>
				</xs:element>




				<!--SetLocalPlayerLookAt-->
				<xs:element name="SetLocalPlayerLookAt" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:attribute name="who" use="required" type="playerSelection"/>
						<xs:attribute name="bone" type="xs:string"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:sequence>
	</xs:group>

	<xs:element name="FeatureTester">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Settings" minOccurs="0" maxOccurs="1" />
				<xs:element name="Tests" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="FeatureTest" maxOccurs="unbounded" minOccurs="0">
								<xs:complexType>
									<xs:group ref="instructions"/>
									<xs:attribute name="name" type="xs:string" use="required" />
									<!--TODO: !!! jiny typ! viz todo nahore!!!-->
									<xs:attribute name="require" type="requirementList"/>
									<!--TODO: !!! jiny typ! viz todo nahore!!!-->
									<xs:attribute name="prerequisite" type="xs:string"/>
									<xs:attribute name="description" type="xs:string"/>
									<!--TODO: !!! jiny typ! viz todo nahore!!!-->
									<xs:attribute name="owners" type="xs:string"/>
									<xs:attribute name="maxTime" type="positiveInt"/>
									<xs:attribute name="speed" type="positiveInt"/>
									<xs:attribute name="enabled" type="xs:boolean"/>
									<!--TODO: !!! jiny typ! viz todo nahore!!!-->
									<xs:attribute name="iterateOverParams" type="colonDelimited"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="setName" type="xs:string" use="required" />
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>