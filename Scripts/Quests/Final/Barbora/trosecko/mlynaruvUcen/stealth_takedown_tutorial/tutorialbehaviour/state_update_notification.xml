<?xml version="1.0" encoding="utf-8"?>
<Database xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="brambora">
	<Skald>
		<Gameplay Name="state_update_notification">
			<Ports>
				<Port Name="setsecondtakedown" Direction="Out" Type="trigger">
					<DesignName StringName="state_upd_setsecondtakedo_4EBd" Text="SetSecondTakedown" />
				</Port>
				<Port Name="setrepeattakedown" Direction="Out" Type="trigger">
					<DesignName StringName="state_upd_setrepeattakedo_VPff" Text="SetRepeatTakedown" />
				</Port>
				<Port Name="waslasttakedownsuccess" Direction="Out" Type="bool">
					<DesignName StringName="state_upd_lasttakedownres_8xlE" Text="WasLastTakedownSuccess" />
				</Port>
				<Port Name="isactive" Direction="In" Type="bool">
					<DesignName StringName="state_upd_isactive_VdO3" Text="IsActive" />
				</Port>
				<Port Name="state" Direction="In" Type="stealthTakedown_stage">
					<DesignName StringName="state_upd_state_1Kzo" Text="State" />
				</Port>
				<Port Name="resetlastresult" Direction="In" Type="trigger">
					<DesignName StringName="state_upd_resetlastresult_ZZDc" Text="ResetLastResult" />
				</Port>
			</Ports>
			<Nodes>
				<AIConceptSignalTrigger Name="aiconceptsignaltriggertutorialgiverwakingup1" PositionY="-270" PositionX="-450" NotificationName="tutorial_giverWakingUp">
					<Edge From="isactive" To="IsActive" />
				</AIConceptSignalTrigger>
				<Function Name="compare9" PositionY="210" PositionX="-70" TypeT="stealthTakedown_stage" MethodName="Control::Compare" DeclaringType="Control">
					<Constant Name="Op" Value="Equals" />
					<Constant Name="ValueB" Value="secondTakedown" />
					<Edge From="state" To="ValueA">
						<Vertex>JmSx9t3L</Vertex>
					</Edge>
				</Function>
				<Function Name="compare9_1" PositionY="420" PositionX="-70" TypeT="stealthTakedown_stage" MethodName="Control::Compare" DeclaringType="Control">
					<Constant Name="Op" Value="Equals" />
					<Constant Name="ValueB" Value="repeatTakedown" />
					<Edge From="state" To="ValueA">
						<Vertex>JmSx9t3L</Vertex>
					</Edge>
				</Function>
				<IfFunction Name="ifand8" PositionY="20" PositionX="560" MethodName="math::boolean::And" DeclaringType="math::boolean">
					<Edge From="or10.bool" To="B" />
					<Edge From="aiconceptsignaltriggertutorialgiverwakingup1.success" To="A">
						<Vertex>fMFRzcRA</Vertex>
					</Edge>
					<Edge From="ifcompare2.False" To="Exec" />
				</IfFunction>
				<IfFunction Name="ifcompare2" PositionY="-160" PositionX="90" TypeT="stealthTakedown_stage" MethodName="Control::Compare" DeclaringType="Control">
					<Constant Name="Op" Value="Equals" />
					<Constant Name="ValueB" Value="firstTakedown" />
					<Edge From="state" To="ValueA">
						<Vertex>JmSx9t3L</Vertex>
					</Edge>
					<Edge From="aiconceptsignaltriggertutorialgiverwakingup1.OnNotification" To="Exec" />
				</IfFunction>
				<State Name="lastTakedownResult" PositionY="-460" PositionX="50" TypeT="bool">
					<Edge From="aiconceptsignaltriggertutorialgiverwakingup1.success" To="Value" />
					<Edge From="aiconceptsignaltriggertutorialgiverwakingup1.OnNotification" To="Exec" />
				</State>
				<Function Name="or10" PositionY="240" PositionX="270" MethodName="math::boolean::Or" DeclaringType="math::boolean">
					<Edge From="compare9.bool" To="A" />
					<Edge From="compare9_1.bool" To="B" />
				</Function>
				<Output Name="Output">
					<Edge From="ifcompare2.True" To="setsecondtakedown" />
					<Edge From="lastTakedownResult.State" To="waslasttakedownsuccess" />
					<Edge From="ifand8.True" To="setrepeattakedown" />
				</Output>
			</Nodes>
			<EdgeVertices>
				<EdgeVertex Name="fMFRzcRA" PositionY="144" PositionX="59" />
				<EdgeVertex Name="JmSx9t3L" PositionY="40" PositionX="-240" />
			</EdgeVertices>
			<Text StringName="state_update_notification_1phG" Text="State update notification" />
		</Gameplay>
	</Skald>
</Database>